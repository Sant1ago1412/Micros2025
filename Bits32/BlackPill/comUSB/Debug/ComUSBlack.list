
ComUSBlack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d98  08007d98  00009104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d98  08007d98  00008d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da0  08007da0  00009104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da0  08007da0  00008da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007da4  08007da4  00008da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08007da8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  20000104  08007eac  00009104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  08007eac  000093ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f0e  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b7  00000000  00000000  0001d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00020400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da1  00000000  00000000  000215e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a042  00000000  00000000  00022381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016326  00000000  00000000  0003c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b969  00000000  00000000  000526e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab0  00000000  00000000  000ee098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f2b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d28 	.word	0x08007d28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007d28 	.word	0x08007d28

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
void datafromUSB(uint8_t *buf, uint16_t length);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	is10ms=1;
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200001b0 	.word	0x200001b0

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fcc3 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f831 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f96f 	bl	8000814 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000536:	f000 f949 	bl	80007cc <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 800053a:	f006 fe71 	bl	8007220 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800053e:	f000 f891 	bl	8000664 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000542:	480f      	ldr	r0, [pc, #60]	@ (8000580 <main+0x5c>)
 8000544:	f003 f95a 	bl	80037fc <HAL_TIM_Base_Start_IT>
  uint8_t counter;
  CDC_AttachRxData(&datafromUSB);
 8000548:	480e      	ldr	r0, [pc, #56]	@ (8000584 <main+0x60>)
 800054a:	f006 ff97 	bl	800747c <CDC_AttachRxData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 800054e:	480e      	ldr	r0, [pc, #56]	@ (8000588 <main+0x64>)
 8000550:	f000 fb57 	bl	8000c02 <comunicationsTask>
	  if(is10ms){
 8000554:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <main+0x68>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f8      	beq.n	800054e <main+0x2a>
		  is10ms=0;
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <main+0x68>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
		  counter++;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	3301      	adds	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
		  if(counter>10){
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d9ef      	bls.n	800054e <main+0x2a>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800056e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000572:	4807      	ldr	r0, [pc, #28]	@ (8000590 <main+0x6c>)
 8000574:	f001 fa55 	bl	8001a22 <HAL_GPIO_TogglePin>
			  counter=0;
 8000578:	2300      	movs	r3, #0
 800057a:	71fb      	strb	r3, [r7, #7]
	  comunicationsTask(&datosComSerie);
 800057c:	e7e7      	b.n	800054e <main+0x2a>
 800057e:	bf00      	nop
 8000580:	20000168 	.word	0x20000168
 8000584:	08000c25 	.word	0x08000c25
 8000588:	200001b4 	.word	0x200001b4
 800058c:	200001b0 	.word	0x200001b0
 8000590:	40020800 	.word	0x40020800

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f007 fb94 	bl	8007cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <SystemClock_Config+0xc8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a26      	ldr	r2, [pc, #152]	@ (800065c <SystemClock_Config+0xc8>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <SystemClock_Config+0xc8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <SystemClock_Config+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a20      	ldr	r2, [pc, #128]	@ (8000660 <SystemClock_Config+0xcc>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000604:	2319      	movs	r3, #25
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000608:	23c0      	movs	r3, #192	@ 0xc0
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fc6f 	bl	8002efc <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 fb2c 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2103      	movs	r1, #3
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fed1 	bl	80033ec <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000650:	f000 fb16 	bl	8000c80 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	@ 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000676:	4b52      	ldr	r3, [pc, #328]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000678:	4a52      	ldr	r2, [pc, #328]	@ (80007c4 <MX_ADC1_Init+0x160>)
 800067a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800067c:	4b50      	ldr	r3, [pc, #320]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 800067e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000684:	4b4e      	ldr	r3, [pc, #312]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800068a:	4b4d      	ldr	r3, [pc, #308]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000690:	4b4b      	ldr	r3, [pc, #300]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000692:	2200      	movs	r2, #0
 8000694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000696:	4b4a      	ldr	r3, [pc, #296]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069e:	4b48      	ldr	r3, [pc, #288]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b46      	ldr	r3, [pc, #280]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006a6:	4a48      	ldr	r2, [pc, #288]	@ (80007c8 <MX_ADC1_Init+0x164>)
 80006a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b45      	ldr	r3, [pc, #276]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80006b0:	4b43      	ldr	r3, [pc, #268]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b6:	4b42      	ldr	r3, [pc, #264]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b40      	ldr	r3, [pc, #256]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c4:	483e      	ldr	r0, [pc, #248]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006c6:	f000 fc8b 	bl	8000fe0 <HAL_ADC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d0:	f000 fad6 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4836      	ldr	r0, [pc, #216]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80006e6:	f000 fcbf 	bl	8001068 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f0:	f000 fac6 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	482f      	ldr	r0, [pc, #188]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000702:	f000 fcb1 	bl	8001068 <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800070c:	f000 fab8 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000710:	2302      	movs	r3, #2
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000714:	2303      	movs	r3, #3
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4828      	ldr	r0, [pc, #160]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 800071e:	f000 fca3 	bl	8001068 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000728:	f000 faaa 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800072c:	2303      	movs	r3, #3
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4821      	ldr	r0, [pc, #132]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 800073a:	f000 fc95 	bl	8001068 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000744:	f000 fa9c 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000748:	2304      	movs	r3, #4
 800074a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800074c:	2305      	movs	r3, #5
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	481a      	ldr	r0, [pc, #104]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000756:	f000 fc87 	bl	8001068 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000760:	f000 fa8e 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000764:	2305      	movs	r3, #5
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000768:	2306      	movs	r3, #6
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 8000772:	f000 fc79 	bl	8001068 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800077c:	f000 fa80 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000780:	2306      	movs	r3, #6
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000784:	2307      	movs	r3, #7
 8000786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	463b      	mov	r3, r7
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 800078e:	f000 fc6b 	bl	8001068 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000798:	f000 fa72 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800079c:	2307      	movs	r3, #7
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_ADC1_Init+0x15c>)
 80007aa:	f000 fc5d 	bl	8001068 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80007b4:	f000 fa64 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000120 	.word	0x20000120
 80007c4:	40012000 	.word	0x40012000
 80007c8:	0f000001 	.word	0x0f000001

080007cc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_TIM11_Init+0x40>)
 80007d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000810 <MX_TIM11_Init+0x44>)
 80007d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_TIM11_Init+0x40>)
 80007d8:	2210      	movs	r2, #16
 80007da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_TIM11_Init+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 60000;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_TIM11_Init+0x40>)
 80007e4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80007e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_TIM11_Init+0x40>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_TIM11_Init+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_TIM11_Init+0x40>)
 80007f8:	f002 ffb0 	bl	800375c <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000802:	f000 fa3d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000168 	.word	0x20000168
 8000810:	40014800 	.word	0x40014800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a1f      	ldr	r2, [pc, #124]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x9c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <MX_GPIO_Init+0xa0>)
 8000886:	f001 f8b3 	bl	80019f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800088a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_GPIO_Init+0xa0>)
 80008a4:	f000 ff20 	bl	80016e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020800 	.word	0x40020800

080008b8 <DecodeHeader>:

/* USER CODE BEGIN 4 */
void DecodeHeader(_sDato *datosCom){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	78db      	ldrb	r3, [r3, #3]
 80008c4:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80008c6:	e0e2      	b.n	8000a8e <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80008c8:	4b76      	ldr	r3, [pc, #472]	@ (8000aa4 <DecodeHeader+0x1ec>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	f200 80d7 	bhi.w	8000a80 <DecodeHeader+0x1c8>
 80008d2:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <DecodeHeader+0x20>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008f5 	.word	0x080008f5
 80008dc:	0800091d 	.word	0x0800091d
 80008e0:	08000951 	.word	0x08000951
 80008e4:	08000985 	.word	0x08000985
 80008e8:	080009b9 	.word	0x080009b9
 80008ec:	080009e1 	.word	0x080009e1
 80008f0:	08000a23 	.word	0x08000a23
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b2d1      	uxtb	r1, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	7111      	strb	r1, [r2, #4]
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	79db      	ldrb	r3, [r3, #7]
 8000908:	2b55      	cmp	r3, #85	@ 0x55
 800090a:	f040 80bd 	bne.w	8000a88 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800090e:	4b65      	ldr	r3, [pc, #404]	@ (8000aa4 <DecodeHeader+0x1ec>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	709a      	strb	r2, [r3, #2]
                }
                break;
 800091a:	e0b5      	b.n	8000a88 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	b2d1      	uxtb	r1, r2
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	7111      	strb	r1, [r2, #4]
 8000928:	461a      	mov	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	79db      	ldrb	r3, [r3, #7]
 8000930:	2b4e      	cmp	r3, #78	@ 0x4e
 8000932:	d103      	bne.n	800093c <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000934:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa4 <DecodeHeader+0x1ec>)
 8000936:	2202      	movs	r2, #2
 8000938:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800093a:	e0a8      	b.n	8000a8e <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	3b01      	subs	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000948:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <DecodeHeader+0x1ec>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
                break;
 800094e:	e09e      	b.n	8000a8e <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	b2d1      	uxtb	r1, r2
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	7111      	strb	r1, [r2, #4]
 800095c:	461a      	mov	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	79db      	ldrb	r3, [r3, #7]
 8000964:	2b45      	cmp	r3, #69	@ 0x45
 8000966:	d103      	bne.n	8000970 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <DecodeHeader+0x1ec>)
 800096a:	2203      	movs	r2, #3
 800096c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 800096e:	e08e      	b.n	8000a8e <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 800097c:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <DecodeHeader+0x1ec>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
                break;
 8000982:	e084      	b.n	8000a8e <DecodeHeader+0x1d6>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	b2d1      	uxtb	r1, r2
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	7111      	strb	r1, [r2, #4]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	79db      	ldrb	r3, [r3, #7]
 8000998:	2b52      	cmp	r3, #82	@ 0x52
 800099a:	d103      	bne.n	80009a4 <DecodeHeader+0xec>
                estadoProtocolo=NBYTES;
 800099c:	4b41      	ldr	r3, [pc, #260]	@ (8000aa4 <DecodeHeader+0x1ec>)
 800099e:	2204      	movs	r2, #4
 80009a0:	701a      	strb	r2, [r3, #0]
            else{
                datosCom->indexReadRx--;
               estadoProtocolo=START;
            }
            break;
 80009a2:	e074      	b.n	8000a8e <DecodeHeader+0x1d6>
                datosCom->indexReadRx--;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	711a      	strb	r2, [r3, #4]
               estadoProtocolo=START;
 80009b0:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <DecodeHeader+0x1ec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
            break;
 80009b6:	e06a      	b.n	8000a8e <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791a      	ldrb	r2, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	b2d1      	uxtb	r1, r2
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	7111      	strb	r1, [r2, #4]
 80009cc:	461a      	mov	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	79da      	ldrb	r2, [r3, #7]
 80009d4:	4b34      	ldr	r3, [pc, #208]	@ (8000aa8 <DecodeHeader+0x1f0>)
 80009d6:	701a      	strb	r2, [r3, #0]
               estadoProtocolo=TOKEN;
 80009d8:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <DecodeHeader+0x1ec>)
 80009da:	2205      	movs	r2, #5
 80009dc:	701a      	strb	r2, [r3, #0]
                break;
 80009de:	e056      	b.n	8000a8e <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	b2d1      	uxtb	r1, r2
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	7111      	strb	r1, [r2, #4]
 80009ec:	461a      	mov	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80009f6:	d10a      	bne.n	8000a0e <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <DecodeHeader+0x1ec>)
 80009fa:	2206      	movs	r2, #6
 80009fc:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80009fe:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <DecodeHeader+0x1f0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000a0c:	e03f      	b.n	8000a8e <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <DecodeHeader+0x1ec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
                break;
 8000a20:	e035      	b.n	8000a8e <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <DecodeHeader+0x1f0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d90f      	bls.n	8000a4a <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	b2d1      	uxtb	r1, r2
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	7111      	strb	r1, [r2, #4]
 8000a36:	461a      	mov	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	79da      	ldrb	r2, [r3, #7]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	4053      	eors	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <DecodeHeader+0x1f0>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <DecodeHeader+0x1f0>)
 8000a54:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <DecodeHeader+0x1f0>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d116      	bne.n	8000a8c <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <DecodeHeader+0x1ec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	789a      	ldrb	r2, [r3, #2]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	440b      	add	r3, r1
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d109      	bne.n	8000a8c <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f817 	bl	8000aac <decodeData>
                    }
                }

                break;
 8000a7e:	e005      	b.n	8000a8c <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <DecodeHeader+0x1ec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
                break;
 8000a86:	e002      	b.n	8000a8e <DecodeHeader+0x1d6>
                break;
 8000a88:	bf00      	nop
 8000a8a:	e000      	b.n	8000a8e <DecodeHeader+0x1d6>
                break;
 8000a8c:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	7bfa      	ldrb	r2, [r7, #15]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	f47f af17 	bne.w	80008c8 <DecodeHeader+0x10>
        }
    }
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200003bb 	.word	0x200003bb
 8000aa8:	200003bc 	.word	0x200003bc

08000aac <decodeData>:
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;

     CDC_Transmit_FS((uint8_t*)datosComSerie.bufferTx, sizeof(bufAux));
}

void decodeData(_sDato *datosCom){
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	@ 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,cks=0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77fb      	strb	r3, [r7, #31]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	77bb      	strb	r3, [r7, #30]

    bufAux[indiceAux++]='U';
 8000abc:	7ffb      	ldrb	r3, [r7, #31]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	77fa      	strb	r2, [r7, #31]
 8000ac2:	3320      	adds	r3, #32
 8000ac4:	443b      	add	r3, r7
 8000ac6:	2255      	movs	r2, #85	@ 0x55
 8000ac8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	77fa      	strb	r2, [r7, #31]
 8000ad2:	3320      	adds	r3, #32
 8000ad4:	443b      	add	r3, r7
 8000ad6:	224e      	movs	r2, #78	@ 0x4e
 8000ad8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000adc:	7ffb      	ldrb	r3, [r7, #31]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	77fa      	strb	r2, [r7, #31]
 8000ae2:	3320      	adds	r3, #32
 8000ae4:	443b      	add	r3, r7
 8000ae6:	2245      	movs	r2, #69	@ 0x45
 8000ae8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000aec:	7ffb      	ldrb	r3, [r7, #31]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	77fa      	strb	r2, [r7, #31]
 8000af2:	3320      	adds	r3, #32
 8000af4:	443b      	add	r3, r7
 8000af6:	2252      	movs	r2, #82	@ 0x52
 8000af8:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000afc:	7ffb      	ldrb	r3, [r7, #31]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	77fa      	strb	r2, [r7, #31]
 8000b02:	3320      	adds	r3, #32
 8000b04:	443b      	add	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	77fa      	strb	r2, [r7, #31]
 8000b12:	3320      	adds	r3, #32
 8000b14:	443b      	add	r3, r7
 8000b16:	223a      	movs	r2, #58	@ 0x3a
 8000b18:	f803 2c18 	strb.w	r2, [r3, #-24]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//ID EN LA POSICION 2
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	3302      	adds	r3, #2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	79db      	ldrb	r3, [r3, #7]
 8000b28:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b2a:	d002      	beq.n	8000b32 <decodeData+0x86>
 8000b2c:	2bf1      	cmp	r3, #241	@ 0xf1
 8000b2e:	d013      	beq.n	8000b58 <decodeData+0xac>
 8000b30:	e025      	b.n	8000b7e <decodeData+0xd2>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000b32:	7ffb      	ldrb	r3, [r7, #31]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	77fa      	strb	r2, [r7, #31]
 8000b38:	3320      	adds	r3, #32
 8000b3a:	443b      	add	r3, r7
 8000b3c:	22f0      	movs	r2, #240	@ 0xf0
 8000b3e:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0x0D;
 8000b42:	7ffb      	ldrb	r3, [r7, #31]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	77fa      	strb	r2, [r7, #31]
 8000b48:	3320      	adds	r3, #32
 8000b4a:	443b      	add	r3, r7
 8000b4c:	220d      	movs	r2, #13
 8000b4e:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000b52:	2303      	movs	r3, #3
 8000b54:	733b      	strb	r3, [r7, #12]

    break;
 8000b56:	e01d      	b.n	8000b94 <decodeData+0xe8>
    case FIRMWARE:

        bufAux[indiceAux++]=FIRMWARE;
 8000b58:	7ffb      	ldrb	r3, [r7, #31]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	77fa      	strb	r2, [r7, #31]
 8000b5e:	3320      	adds	r3, #32
 8000b60:	443b      	add	r3, r7
 8000b62:	22f1      	movs	r2, #241	@ 0xf1
 8000b64:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0xF1;
 8000b68:	7ffb      	ldrb	r3, [r7, #31]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	77fa      	strb	r2, [r7, #31]
 8000b6e:	3320      	adds	r3, #32
 8000b70:	443b      	add	r3, r7
 8000b72:	22f1      	movs	r2, #241	@ 0xf1
 8000b74:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	733b      	strb	r3, [r7, #12]

    break;
 8000b7c:	e00a      	b.n	8000b94 <decodeData+0xe8>

    default:

        bufAux[indiceAux++]=0xFF;
 8000b7e:	7ffb      	ldrb	r3, [r7, #31]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	77fa      	strb	r2, [r7, #31]
 8000b84:	3320      	adds	r3, #32
 8000b86:	443b      	add	r3, r7
 8000b88:	22ff      	movs	r2, #255	@ 0xff
 8000b8a:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x02;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	733b      	strb	r3, [r7, #12]

        break;
 8000b92:	bf00      	nop
    }
    cks=0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	777b      	strb	r3, [r7, #29]
 8000b9c:	e01b      	b.n	8000bd6 <decodeData+0x12a>

        cks^= bufAux[i];
 8000b9e:	7f7b      	ldrb	r3, [r7, #29]
 8000ba0:	3320      	adds	r3, #32
 8000ba2:	443b      	add	r3, r7
 8000ba4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000ba8:	7fbb      	ldrb	r3, [r7, #30]
 8000baa:	4053      	eors	r3, r2
 8000bac:	77bb      	strb	r3, [r7, #30]
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
 8000bae:	7f7a      	ldrb	r2, [r7, #29]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	795b      	ldrb	r3, [r3, #5]
 8000bb4:	1c59      	adds	r1, r3, #1
 8000bb6:	b2c8      	uxtb	r0, r1
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	7148      	strb	r0, [r1, #5]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f102 0320 	add.w	r3, r2, #32
 8000bc2:	443b      	add	r3, r7
 8000bc4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000bd0:	7f7b      	ldrb	r3, [r7, #29]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	777b      	strb	r3, [r7, #29]
 8000bd6:	7f7a      	ldrb	r2, [r7, #29]
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d3df      	bcc.n	8000b9e <decodeData+0xf2>

    }

     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	795b      	ldrb	r3, [r3, #5]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	b2d1      	uxtb	r1, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7151      	strb	r1, [r2, #5]
 8000bea:	461a      	mov	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	7fba      	ldrb	r2, [r7, #30]
 8000bf2:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	791a      	ldrb	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	78db      	ldrb	r3, [r3, #3]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d002      	beq.n	8000c1c <comunicationsTask+0x1a>
		DecodeHeader(datosCom);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fe4e 	bl	80008b8 <DecodeHeader>
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000c30:	2300      	movs	r3, #0
 8000c32:	81fb      	strh	r3, [r7, #14]
 8000c34:	e012      	b.n	8000c5c <datafromUSB+0x38>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c78 <datafromUSB+0x54>)
 8000c3e:	78d2      	ldrb	r2, [r2, #3]
 8000c40:	4611      	mov	r1, r2
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <datafromUSB+0x54>)
 8000c46:	440b      	add	r3, r1
 8000c48:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <datafromUSB+0x54>)
 8000c4c:	78db      	ldrb	r3, [r3, #3]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <datafromUSB+0x54>)
 8000c54:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	81fb      	strh	r3, [r7, #14]
 8000c5c:	89fa      	ldrh	r2, [r7, #14]
 8000c5e:	887b      	ldrh	r3, [r7, #2]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3e8      	bcc.n	8000c36 <datafromUSB+0x12>
  }

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <datafromUSB+0x58>)
 8000c6a:	f000 feda 	bl	8001a22 <HAL_GPIO_TogglePin>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001b4 	.word	0x200001b4
 8000c7c:	40020800 	.word	0x40020800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_ADC_MspInit+0x7c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d127      	bne.n	8000d4e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a15      	ldr	r2, [pc, #84]	@ (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <HAL_ADC_MspInit+0x80>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d36:	23ff      	movs	r3, #255	@ 0xff
 8000d38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_ADC_MspInit+0x84>)
 8000d4a:	f000 fccd 	bl	80016e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40012000 	.word	0x40012000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_TIM_Base_MspInit+0x48>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d115      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000db0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	201a      	movs	r0, #26
 8000d98:	f000 fc6f 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d9c:	201a      	movs	r0, #26
 8000d9e:	f000 fc88 	bl	80016b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40014800 	.word	0x40014800
 8000db0:	40023800 	.word	0x40023800

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f8a5 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e1a:	f002 fd51 	bl	80038c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000168 	.word	0x20000168

08000e28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <OTG_FS_IRQHandler+0x10>)
 8000e2e:	f000 ff56 	bl	8001cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000ca8 	.word	0x20000ca8

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e64:	f7ff ffea 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f006 ff27 	bl	8007ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb47 	bl	8000524 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000ea4:	08007da8 	.word	0x08007da8
  ldr r2, =_sbss
 8000ea8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000eac:	200013ac 	.word	0x200013ac

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 fbc1 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fed0 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fbd9 	bl	80016ce <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 fba1 	bl	800167a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	200003c0 	.word	0x200003c0

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200003c0 	.word	0x200003c0

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e033      	b.n	800105e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d109      	bne.n	8001012 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fe6c 	bl	8000cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	2b00      	cmp	r3, #0
 800101c:	d118      	bne.n	8001050 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001026:	f023 0302 	bic.w	r3, r3, #2
 800102a:	f043 0202 	orr.w	r2, r3, #2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f94a 	bl	80012cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40
 800104e:	e001      	b.n	8001054 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x1c>
 8001080:	2302      	movs	r3, #2
 8001082:	e113      	b.n	80012ac <HAL_ADC_ConfigChannel+0x244>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d925      	bls.n	80010e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68d9      	ldr	r1, [r3, #12]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	3b1e      	subs	r3, #30
 80010aa:	2207      	movs	r2, #7
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43da      	mvns	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	400a      	ands	r2, r1
 80010b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68d9      	ldr	r1, [r3, #12]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4403      	add	r3, r0
 80010d2:	3b1e      	subs	r3, #30
 80010d4:	409a      	lsls	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	e022      	b.n	8001126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6919      	ldr	r1, [r3, #16]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	2207      	movs	r2, #7
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	400a      	ands	r2, r1
 8001102:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6919      	ldr	r1, [r3, #16]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	4603      	mov	r3, r0
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4403      	add	r3, r0
 800111c:	409a      	lsls	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b06      	cmp	r3, #6
 800112c:	d824      	bhi.n	8001178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b05      	subs	r3, #5
 8001140:	221f      	movs	r2, #31
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	400a      	ands	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4618      	mov	r0, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b05      	subs	r3, #5
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	@ 0x34
 8001176:	e04c      	b.n	8001212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b0c      	cmp	r3, #12
 800117e:	d824      	bhi.n	80011ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3b23      	subs	r3, #35	@ 0x23
 8001192:	221f      	movs	r2, #31
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	3b23      	subs	r3, #35	@ 0x23
 80011bc:	fa00 f203 	lsl.w	r2, r0, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011c8:	e023      	b.n	8001212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	3b41      	subs	r3, #65	@ 0x41
 80011dc:	221f      	movs	r2, #31
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	3b41      	subs	r3, #65	@ 0x41
 8001206:	fa00 f203 	lsl.w	r2, r0, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001212:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <HAL_ADC_ConfigChannel+0x250>)
 8001214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a28      	ldr	r2, [pc, #160]	@ (80012bc <HAL_ADC_ConfigChannel+0x254>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d10f      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d8>
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b12      	cmp	r3, #18
 8001226:	d10b      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <HAL_ADC_ConfigChannel+0x254>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x23a>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <HAL_ADC_ConfigChannel+0x258>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_ADC_ConfigChannel+0x1f4>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b11      	cmp	r3, #17
 800125a:	d122      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <HAL_ADC_ConfigChannel+0x258>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d111      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a11      	ldr	r2, [pc, #68]	@ (80012c8 <HAL_ADC_ConfigChannel+0x260>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	0c9a      	lsrs	r2, r3, #18
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001294:	e002      	b.n	800129c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3b01      	subs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40012300 	.word	0x40012300
 80012bc:	40012000 	.word	0x40012000
 80012c0:	10000012 	.word	0x10000012
 80012c4:	20000000 	.word	0x20000000
 80012c8:	431bde83 	.word	0x431bde83

080012cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d4:	4b79      	ldr	r3, [pc, #484]	@ (80014bc <ADC_Init+0x1f0>)
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	021a      	lsls	r2, r3, #8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6899      	ldr	r1, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	4a58      	ldr	r2, [pc, #352]	@ (80014c0 <ADC_Init+0x1f4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d022      	beq.n	80013aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001372:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6899      	ldr	r1, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6899      	ldr	r1, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	e00f      	b.n	80013ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0202 	bic.w	r2, r2, #2
 80013d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6899      	ldr	r1, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7e1b      	ldrb	r3, [r3, #24]
 80013e4:	005a      	lsls	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d01b      	beq.n	8001430 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001406:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001416:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6859      	ldr	r1, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	3b01      	subs	r3, #1
 8001424:	035a      	lsls	r2, r3, #13
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	e007      	b.n	8001440 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800143e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	3b01      	subs	r3, #1
 800145c:	051a      	lsls	r2, r3, #20
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6899      	ldr	r1, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001482:	025a      	lsls	r2, r3, #9
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800149a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6899      	ldr	r1, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	029a      	lsls	r2, r3, #10
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40012300 	.word	0x40012300
 80014c0:	0f000001 	.word	0x0f000001

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	@ (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	@ 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff29 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800168c:	f7ff ff3e 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	6978      	ldr	r0, [r7, #20]
 8001698:	f7ff ff8e 	bl	80015b8 <NVIC_EncodePriority>
 800169c:	4602      	mov	r2, r0
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff5d 	bl	8001564 <__NVIC_SetPriority>
}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff31 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ffa2 	bl	8001620 <SysTick_Config>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	e159      	b.n	80019b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	429a      	cmp	r2, r3
 800171e:	f040 8148 	bne.w	80019b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d005      	beq.n	800173a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001736:	2b02      	cmp	r3, #2
 8001738:	d130      	bne.n	800179c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0201 	and.w	r2, r3, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d017      	beq.n	80017d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d123      	bne.n	800182c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	69b9      	ldr	r1, [r7, #24]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80a2 	beq.w	80019b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b57      	ldr	r3, [pc, #348]	@ (80019d0 <HAL_GPIO_Init+0x2e8>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	4a56      	ldr	r2, [pc, #344]	@ (80019d0 <HAL_GPIO_Init+0x2e8>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800187c:	6453      	str	r3, [r2, #68]	@ 0x44
 800187e:	4b54      	ldr	r3, [pc, #336]	@ (80019d0 <HAL_GPIO_Init+0x2e8>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188a:	4a52      	ldr	r2, [pc, #328]	@ (80019d4 <HAL_GPIO_Init+0x2ec>)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a49      	ldr	r2, [pc, #292]	@ (80019d8 <HAL_GPIO_Init+0x2f0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d019      	beq.n	80018ea <HAL_GPIO_Init+0x202>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a48      	ldr	r2, [pc, #288]	@ (80019dc <HAL_GPIO_Init+0x2f4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x1fe>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a47      	ldr	r2, [pc, #284]	@ (80019e0 <HAL_GPIO_Init+0x2f8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x1fa>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a46      	ldr	r2, [pc, #280]	@ (80019e4 <HAL_GPIO_Init+0x2fc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x1f6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a45      	ldr	r2, [pc, #276]	@ (80019e8 <HAL_GPIO_Init+0x300>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x1f2>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x204>
 80018da:	2307      	movs	r3, #7
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x204>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x204>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x204>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x204>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fc:	4935      	ldr	r1, [pc, #212]	@ (80019d4 <HAL_GPIO_Init+0x2ec>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190a:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <HAL_GPIO_Init+0x304>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192e:	4a2f      	ldr	r2, [pc, #188]	@ (80019ec <HAL_GPIO_Init+0x304>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001934:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_GPIO_Init+0x304>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001958:	4a24      	ldr	r2, [pc, #144]	@ (80019ec <HAL_GPIO_Init+0x304>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195e:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <HAL_GPIO_Init+0x304>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001982:	4a1a      	ldr	r2, [pc, #104]	@ (80019ec <HAL_GPIO_Init+0x304>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <HAL_GPIO_Init+0x304>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ac:	4a0f      	ldr	r2, [pc, #60]	@ (80019ec <HAL_GPIO_Init+0x304>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f aea2 	bls.w	8001704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40013c00 	.word	0x40013c00

080019f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a00:	787b      	ldrb	r3, [r7, #1]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a0c:	e003      	b.n	8001a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	619a      	str	r2, [r3, #24]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	041a      	lsls	r2, r3, #16
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	400b      	ands	r3, r1
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af02      	add	r7, sp, #8
 8001a5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e101      	b.n	8001c6c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f005 fe1a 	bl	80076bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a96:	d102      	bne.n	8001a9e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 f9d5 	bl	8003e52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7c1a      	ldrb	r2, [r3, #16]
 8001ab0:	f88d 2000 	strb.w	r2, [sp]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	f002 f8b4 	bl	8003c24 <USB_CoreInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0ce      	b.n	8001c6c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 f9cd 	bl	8003e74 <USB_SetCurrentMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0bf      	b.n	8001c6c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e04a      	b.n	8001b88 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3315      	adds	r3, #21
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3314      	adds	r3, #20
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	b298      	uxth	r0, r3
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	332e      	adds	r3, #46	@ 0x2e
 8001b2e:	4602      	mov	r2, r0
 8001b30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	3318      	adds	r3, #24
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	331c      	adds	r3, #28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3320      	adds	r3, #32
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3324      	adds	r3, #36	@ 0x24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	3301      	adds	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3af      	bcc.n	8001af2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	e044      	b.n	8001c22 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bc4:	7bfa      	ldrb	r2, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	791b      	ldrb	r3, [r3, #4]
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3b5      	bcc.n	8001b98 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7c1a      	ldrb	r2, [r3, #16]
 8001c34:	f88d 2000 	strb.w	r2, [sp]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3c:	f002 f966 	bl	8003f0c <USB_DevInit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00c      	b.n	8001c6c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f9b0 	bl	8004fca <USB_DevDisconnect>

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_PCD_Start+0x1c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e022      	b.n	8001cd6 <HAL_PCD_Start+0x62>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 f8b7 	bl	8003e30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f95e 	bl	8004f88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b08d      	sub	sp, #52	@ 0x34
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fa1c 	bl	8005132 <USB_GetMode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 848c 	bne.w	800261a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 f980 	bl	800500c <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8482 	beq.w	8002618 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 f96d 	bl	800500c <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d107      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f002 0202 	and.w	r2, r2, #2
 8001d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 f95b 	bl	800500c <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d161      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0210 	bic.w	r2, r2, #16
 8001d6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001d96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d9a:	d124      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d035      	beq.n	8001e14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6a38      	ldr	r0, [r7, #32]
 8001dbc:	f002 ff92 	bl	8004ce4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dcc:	441a      	add	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dde:	441a      	add	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	e016      	b.n	8001e14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001dec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001df0:	d110      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f002 ff71 	bl	8004ce4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e0e:	441a      	add	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0210 	orr.w	r2, r2, #16
 8001e22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f8ef 	bl	800500c <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e38:	f040 80a7 	bne.w	8001f8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 f8f4 	bl	8005032 <USB_ReadDevAllOutEpInterrupt>
 8001e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001e4c:	e099      	b.n	8001f82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 808e 	beq.w	8001f76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f918 	bl	800509a <USB_ReadDevOutEPInterrupt>
 8001e6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e82:	461a      	mov	r2, r3
 8001e84:	2301      	movs	r3, #1
 8001e86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fea4 	bl	8002bd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001eac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 ff7a 	bl	8002da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2310      	movs	r3, #16
 8001ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d030      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b80      	cmp	r3, #128	@ 0x80
 8001ee4:	d109      	bne.n	8001efa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ef4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f005 fcc5 	bl	80078b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f36:	461a      	mov	r2, r3
 8001f38:	2302      	movs	r3, #2
 8001f3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f af62 	bne.w	8001e4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f83c 	bl	800500c <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f9e:	f040 80db 	bne.w	8002158 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f85d 	bl	8005066 <USB_ReadDevAllInEpInterrupt>
 8001fac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001fb2:	e0cd      	b.n	8002150 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80c2 	beq.w	8002144 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f883 	bl	80050d6 <USB_ReadDevInEPInterrupt>
 8001fd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d057      	beq.n	800208c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69f9      	ldr	r1, [r7, #28]
 8001ff8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800200c:	461a      	mov	r2, r3
 800200e:	2301      	movs	r3, #1
 8002010:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	799b      	ldrb	r3, [r3, #6]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d132      	bne.n	8002080 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	3320      	adds	r3, #32
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4403      	add	r3, r0
 800203a:	331c      	adds	r3, #28
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4419      	add	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4403      	add	r3, r0
 800204e:	3320      	adds	r3, #32
 8002050:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d113      	bne.n	8002080 <HAL_PCD_IRQHandler+0x3a2>
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3324      	adds	r3, #36	@ 0x24
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002078:	461a      	mov	r2, r3
 800207a:	2101      	movs	r1, #1
 800207c:	f003 f88a 	bl	8005194 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f005 fb99 	bl	80077be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020a2:	461a      	mov	r2, r3
 80020a4:	2308      	movs	r3, #8
 80020a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020be:	461a      	mov	r2, r3
 80020c0:	2310      	movs	r3, #16
 80020c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020da:	461a      	mov	r2, r3
 80020dc:	2340      	movs	r3, #64	@ 0x40
 80020de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d023      	beq.n	8002132 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ec:	6a38      	ldr	r0, [r7, #32]
 80020ee:	f002 f871 	bl	80041d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80020f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3310      	adds	r3, #16
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d108      	bne.n	8002120 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f005 fbdc 	bl	80078d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2302      	movs	r3, #2
 8002130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800213c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fcbd 	bl	8002abe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800214a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	f47f af2e 	bne.w	8001fb4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f002 ff55 	bl	800500c <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800216c:	d122      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002194:	2100      	movs	r1, #0
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fea4 	bl	8002ee4 <HAL_PCDEx_LPM_Callback>
 800219c:	e002      	b.n	80021a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f005 fb7a 	bl	8007898 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 ff27 	bl	800500c <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021c8:	d112      	bne.n	80021f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f005 fb36 	bl	800784c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80021ee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 ff09 	bl	800500c <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002204:	f040 80b7 	bne.w	8002376 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2110      	movs	r1, #16
 8002222:	4618      	mov	r0, r3
 8002224:	f001 ffd6 	bl	80041d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222c:	e046      	b.n	80022bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002240:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002252:	0151      	lsls	r1, r2, #5
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	440a      	add	r2, r1
 8002258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800225c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002260:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226e:	461a      	mov	r2, r3
 8002270:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002274:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	440a      	add	r2, r1
 800228c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002290:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002294:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80022b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80022b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b8:	3301      	adds	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	791b      	ldrb	r3, [r3, #4]
 80022c0:	461a      	mov	r2, r3
 80022c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d3b2      	bcc.n	800222e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80022da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7bdb      	ldrb	r3, [r3, #15]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d016      	beq.n	8002312 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022f4:	f043 030b 	orr.w	r3, r3, #11
 80022f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800230a:	f043 030b 	orr.w	r3, r3, #11
 800230e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002310:	e015      	b.n	800233e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002324:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002328:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002338:	f043 030b 	orr.w	r3, r3, #11
 800233c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800234c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002350:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002360:	461a      	mov	r2, r3
 8002362:	f002 ff17 	bl	8005194 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fe46 	bl	800500c <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800238a:	d123      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fedc 	bl	800514e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f001 ff93 	bl	80042c6 <USB_GetDevSpeed>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681c      	ldr	r4, [r3, #0]
 80023ac:	f001 f9ca 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 80023b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023b6:	461a      	mov	r2, r3
 80023b8:	4620      	mov	r0, r4
 80023ba:	f001 fc97 	bl	8003cec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f005 fa25 	bl	800780e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80023d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fe17 	bl	800500c <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d10a      	bne.n	80023fe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f005 fa02 	bl	80077f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 0208 	and.w	r2, r2, #8
 80023fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f002 fe02 	bl	800500c <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	2b80      	cmp	r3, #128	@ 0x80
 8002410:	d123      	bne.n	800245a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800241e:	2301      	movs	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
 8002422:	e014      	b.n	800244e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fb0a 	bl	8002a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	791b      	ldrb	r3, [r3, #4]
 8002452:	461a      	mov	r2, r3
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	4293      	cmp	r3, r2
 8002458:	d3e4      	bcc.n	8002424 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 fdd4 	bl	800500c <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800246a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800246e:	d13c      	bne.n	80024ea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002470:	2301      	movs	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
 8002474:	e02b      	b.n	80024ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3318      	adds	r3, #24
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d115      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800249c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	da12      	bge.n	80024c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3317      	adds	r3, #23
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 faca 	bl	8002a5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	3301      	adds	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	791b      	ldrb	r3, [r3, #4]
 80024d2:	461a      	mov	r2, r3
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d3cd      	bcc.n	8002476 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80024e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fd8c 	bl	800500c <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024fe:	d156      	bne.n	80025ae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
 8002504:	e045      	b.n	8002592 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d12e      	bne.n	800258c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800252e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002530:	2b00      	cmp	r3, #0
 8002532:	da2b      	bge.n	800258c <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	0c1a      	lsrs	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800253e:	4053      	eors	r3, r2
 8002540:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d121      	bne.n	800258c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002584:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002588:	6053      	str	r3, [r2, #4]
            break;
 800258a:	e008      	b.n	800259e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	3301      	adds	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	4293      	cmp	r3, r2
 800259c:	d3b3      	bcc.n	8002506 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80025ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fd2a 	bl	800500c <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c2:	d10a      	bne.n	80025da <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f005 f999 	bl	80078fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80025d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fd14 	bl	800500c <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d115      	bne.n	800261a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f005 f989 	bl	8007918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e000      	b.n	800261a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002618:	bf00      	nop
    }
  }
}
 800261a:	3734      	adds	r7, #52	@ 0x34
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}

08002620 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_PCD_SetAddress+0x1a>
 8002636:	2302      	movs	r3, #2
 8002638:	e012      	b.n	8002660 <HAL_PCD_SetAddress+0x40>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fc73 	bl	8004f3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	4608      	mov	r0, r1
 8002672:	4611      	mov	r1, r2
 8002674:	461a      	mov	r2, r3
 8002676:	4603      	mov	r3, r0
 8002678:	70fb      	strb	r3, [r7, #3]
 800267a:	460b      	mov	r3, r1
 800267c:	803b      	strh	r3, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da0f      	bge.n	80026ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	3310      	adds	r3, #16
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00f      	b.n	80026ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 020f 	and.w	r2, r3, #15
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	3304      	adds	r3, #4
 80026c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80026da:	883b      	ldrh	r3, [r7, #0]
 80026dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	78ba      	ldrb	r2, [r7, #2]
 80026e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026fc:	78bb      	ldrb	r3, [r7, #2]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d102      	bne.n	8002708 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_PCD_EP_Open+0xae>
 8002712:	2302      	movs	r3, #2
 8002714:	e00e      	b.n	8002734 <HAL_PCD_EP_Open+0xcc>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68f9      	ldr	r1, [r7, #12]
 8002724:	4618      	mov	r0, r3
 8002726:	f001 fdf3 	bl	8004310 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002732:	7afb      	ldrb	r3, [r7, #11]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da0f      	bge.n	8002770 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 020f 	and.w	r2, r3, #15
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	3310      	adds	r3, #16
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	705a      	strb	r2, [r3, #1]
 800276e:	e00f      	b.n	8002790 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	b2da      	uxtb	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_PCD_EP_Close+0x6e>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e00e      	b.n	80027c8 <HAL_PCD_EP_Close+0x8c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fe31 	bl	8004420 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	460b      	mov	r3, r1
 80027de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	799b      	ldrb	r3, [r3, #6]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	799b      	ldrb	r3, [r3, #6]
 8002834:	461a      	mov	r2, r3
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	f001 fece 	bl	80045d8 <USB_EPStartXfer>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002868:	681b      	ldr	r3, [r3, #0]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	460b      	mov	r3, r1
 8002884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	7afb      	ldrb	r3, [r7, #11]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3310      	adds	r3, #16
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2201      	movs	r2, #1
 80028b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b6:	7afb      	ldrb	r3, [r7, #11]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	799b      	ldrb	r3, [r3, #6]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	799b      	ldrb	r3, [r3, #6]
 80028d8:	461a      	mov	r2, r3
 80028da:	6979      	ldr	r1, [r7, #20]
 80028dc:	f001 fe7c 	bl	80045d8 <USB_EPStartXfer>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	7912      	ldrb	r2, [r2, #4]
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e04f      	b.n	80029a8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da0f      	bge.n	8002930 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	f003 020f 	and.w	r2, r3, #15
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	3310      	adds	r3, #16
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	705a      	strb	r2, [r3, #1]
 800292e:	e00d      	b.n	800294c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	3304      	adds	r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_PCD_EP_SetStall+0x82>
 8002968:	2302      	movs	r3, #2
 800296a:	e01d      	b.n	80029a8 <HAL_PCD_EP_SetStall+0xbe>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68f9      	ldr	r1, [r7, #12]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fa0a 	bl	8004d94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7999      	ldrb	r1, [r3, #6]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002998:	461a      	mov	r2, r3
 800299a:	f002 fbfb 	bl	8005194 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	7912      	ldrb	r2, [r2, #4]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e042      	b.n	8002a54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da0f      	bge.n	80029f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	3310      	adds	r3, #16
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	3304      	adds	r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	705a      	strb	r2, [r3, #1]
 80029f4:	e00f      	b.n	8002a16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 020f 	and.w	r2, r3, #15
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_ClrStall+0x86>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e00e      	b.n	8002a54 <HAL_PCD_EP_ClrStall+0xa4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fa13 	bl	8004e70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da0c      	bge.n	8002a8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	3310      	adds	r3, #16
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e00c      	b.n	8002aa4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 f832 	bl	8004b14 <USB_EPStopXfer>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ab4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b08a      	sub	sp, #40	@ 0x28
 8002ac2:	af02      	add	r7, sp, #8
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	3310      	adds	r3, #16
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d901      	bls.n	8002af6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d902      	bls.n	8002b12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3303      	adds	r3, #3
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b1a:	e02a      	b.n	8002b72 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d902      	bls.n	8002b38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3303      	adds	r3, #3
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68d9      	ldr	r1, [r3, #12]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4603      	mov	r3, r0
 8002b54:	6978      	ldr	r0, [r7, #20]
 8002b56:	f002 f887 	bl	8004c68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	441a      	add	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d809      	bhi.n	8002b9c <PCD_WriteEmptyTxFifo+0xde>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d203      	bcs.n	8002b9c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1bf      	bne.n	8002b1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d811      	bhi.n	8002bcc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	2201      	movs	r2, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	6939      	ldr	r1, [r7, #16]
 8002bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bc8:	4013      	ands	r3, r2
 8002bca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	333c      	adds	r3, #60	@ 0x3c
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d17b      	bne.n	8002d06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	4a61      	ldr	r2, [pc, #388]	@ (8002da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f240 80b9 	bls.w	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80b3 	beq.w	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c40:	6093      	str	r3, [r2, #8]
 8002c42:	e0a7      	b.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	6093      	str	r3, [r2, #8]
 8002c60:	e098      	b.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 8093 	bne.w	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4a4b      	ldr	r2, [pc, #300]	@ (8002da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d90f      	bls.n	8002c96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c92:	6093      	str	r3, [r2, #8]
 8002c94:	e07e      	b.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	1ad2      	subs	r2, r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d114      	bne.n	8002cf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	f002 fa56 	bl	8005194 <USB_EP0_OutStart>
 8002ce8:	e006      	b.n	8002cf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f004 fd42 	bl	8007788 <HAL_PCD_DataOutStageCallback>
 8002d04:	e046      	b.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4a26      	ldr	r2, [pc, #152]	@ (8002da4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d124      	bne.n	8002d58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d2a:	6093      	str	r3, [r2, #8]
 8002d2c:	e032      	b.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	2320      	movs	r3, #32
 8002d48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f004 fd19 	bl	8007788 <HAL_PCD_DataOutStageCallback>
 8002d56:	e01d      	b.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d80:	461a      	mov	r2, r3
 8002d82:	2100      	movs	r1, #0
 8002d84:	f002 fa06 	bl	8005194 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f004 fcfa 	bl	8007788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	4f54300a 	.word	0x4f54300a
 8002da4:	4f54310a 	.word	0x4f54310a

08002da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	333c      	adds	r3, #60	@ 0x3c
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d90e      	bls.n	8002dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df4:	461a      	mov	r2, r3
 8002df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f004 fcb1 	bl	8007764 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d90c      	bls.n	8002e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	799b      	ldrb	r3, [r3, #6]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d108      	bne.n	8002e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2101      	movs	r1, #1
 8002e20:	f002 f9b8 	bl	8005194 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	4f54300a 	.word	0x4f54300a

08002e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
 8002e40:	4613      	mov	r3, r2
 8002e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d107      	bne.n	8002e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e52:	883b      	ldrh	r3, [r7, #0]
 8002e54:	0419      	lsls	r1, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e60:	e028      	b.n	8002eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e00d      	b.n	8002e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	3340      	adds	r3, #64	@ 0x40
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4413      	add	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d3ec      	bcc.n	8002e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e9c:	883b      	ldrh	r3, [r7, #0]
 8002e9e:	0418      	lsls	r0, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4302      	orrs	r2, r0
 8002eac:	3340      	adds	r3, #64	@ 0x40
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e267      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d075      	beq.n	8003006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f1a:	4b88      	ldr	r3, [pc, #544]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b85      	ldr	r3, [pc, #532]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b82      	ldr	r3, [pc, #520]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b7e      	ldr	r3, [pc, #504]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e242      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x74>
 8002f62:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b70      	ldr	r3, [pc, #448]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b6d      	ldr	r3, [pc, #436]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f94:	4b69      	ldr	r3, [pc, #420]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a68      	ldr	r2, [pc, #416]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b66      	ldr	r3, [pc, #408]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a65      	ldr	r2, [pc, #404]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fd ffe4 	bl	8000f80 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fd ffe0 	bl	8000f80 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e207      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fd ffd0 	bl	8000f80 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fd ffcc 	bl	8000f80 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1f3      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b51      	ldr	r3, [pc, #324]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d063      	beq.n	80030da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003012:	4b4a      	ldr	r3, [pc, #296]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b44      	ldr	r3, [pc, #272]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b41      	ldr	r3, [pc, #260]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1c7      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4937      	ldr	r1, [pc, #220]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e03a      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_RCC_OscConfig+0x244>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fd ff85 	bl	8000f80 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307a:	f7fd ff81 	bl	8000f80 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1a8      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b28      	ldr	r3, [pc, #160]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4925      	ldr	r1, [pc, #148]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ae:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <HAL_RCC_OscConfig+0x244>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd ff64 	bl	8000f80 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fd ff60 	bl	8000f80 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e187      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d036      	beq.n	8003154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_RCC_OscConfig+0x248>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fd ff44 	bl	8000f80 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fd ff40 	bl	8000f80 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e167      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x200>
 800311a:	e01b      	b.n	8003154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_RCC_OscConfig+0x248>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fd ff2d 	bl	8000f80 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e00e      	b.n	8003148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fd ff29 	bl	8000f80 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d907      	bls.n	8003148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e150      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
 800313c:	40023800 	.word	0x40023800
 8003140:	42470000 	.word	0x42470000
 8003144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ea      	bne.n	800312a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8097 	beq.w	8003290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003166:	4b81      	ldr	r3, [pc, #516]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	4b7d      	ldr	r3, [pc, #500]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	4a7c      	ldr	r2, [pc, #496]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	@ 0x40
 8003182:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b77      	ldr	r3, [pc, #476]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319e:	4b74      	ldr	r3, [pc, #464]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a73      	ldr	r2, [pc, #460]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fd fee9 	bl	8000f80 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fd fee5 	bl	8000f80 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e10c      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x2ea>
 80031d8:	4b64      	ldr	r3, [pc, #400]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	4a63      	ldr	r2, [pc, #396]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x324>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x30c>
 80031ee:	4b5f      	ldr	r3, [pc, #380]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f2:	4a5e      	ldr	r2, [pc, #376]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fa:	4b5c      	ldr	r3, [pc, #368]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	@ 0x70
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0x324>
 8003208:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4a57      	ldr	r2, [pc, #348]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	@ 0x70
 8003214:	4b55      	ldr	r3, [pc, #340]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	4a54      	ldr	r2, [pc, #336]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800321a:	f023 0304 	bic.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fd feaa 	bl	8000f80 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fd fea6 	bl	8000f80 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0cb      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	4b49      	ldr	r3, [pc, #292]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ee      	beq.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fd fe94 	bl	8000f80 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fd fe90 	bl	8000f80 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0b5      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ee      	bne.n	800325c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d105      	bne.n	8003290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003284:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	4a38      	ldr	r2, [pc, #224]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800328a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a1 	beq.w	80033dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329a:	4b34      	ldr	r3, [pc, #208]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d05c      	beq.n	8003360 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d141      	bne.n	8003332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <HAL_RCC_OscConfig+0x478>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fe64 	bl	8000f80 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fe60 	bl	8000f80 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e087      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	019b      	lsls	r3, r3, #6
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	491b      	ldr	r1, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x478>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fd fe39 	bl	8000f80 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fd fe35 	bl	8000f80 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e05c      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x416>
 8003330:	e054      	b.n	80033dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RCC_OscConfig+0x478>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fd fe22 	bl	8000f80 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd fe1e 	bl	8000f80 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e045      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
 800335e:	e03d      	b.n	80033dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e038      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
 800336c:	40023800 	.word	0x40023800
 8003370:	40007000 	.word	0x40007000
 8003374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x4ec>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d028      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d121      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d11a      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d111      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	3b01      	subs	r3, #1
 80033c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cc      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b68      	ldr	r3, [pc, #416]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d90c      	bls.n	8003428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b65      	ldr	r3, [pc, #404]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a58      	ldr	r2, [pc, #352]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800344a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d044      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d119      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b3f      	ldr	r3, [pc, #252]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b3b      	ldr	r3, [pc, #236]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e067      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b37      	ldr	r3, [pc, #220]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4934      	ldr	r1, [pc, #208]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7fd fd50 	bl	8000f80 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fd fd4c 	bl	8000f80 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b25      	ldr	r3, [pc, #148]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d20c      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	@ (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	@ (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fcb0 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023c00 	.word	0x40023c00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08007d88 	.word	0x08007d88
 80035b0:	20000000 	.word	0x20000000
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035bc:	b090      	sub	sp, #64	@ 0x40
 80035be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d0:	4b59      	ldr	r3, [pc, #356]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x180>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d00d      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x40>
 80035dc:	2b08      	cmp	r3, #8
 80035de:	f200 80a1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x16c>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x34>
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d003      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ea:	e09b      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b53      	ldr	r3, [pc, #332]	@ (800373c <HAL_RCC_GetSysClockFreq+0x184>)
 80035ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f0:	e09b      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f2:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x188>)
 80035f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f6:	e098      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003602:	4b4d      	ldr	r3, [pc, #308]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x180>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d028      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x180>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	2200      	movs	r2, #0
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	627a      	str	r2, [r7, #36]	@ 0x24
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003620:	2100      	movs	r1, #0
 8003622:	4b47      	ldr	r3, [pc, #284]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x188>)
 8003624:	fb03 f201 	mul.w	r2, r3, r1
 8003628:	2300      	movs	r3, #0
 800362a:	fb00 f303 	mul.w	r3, r0, r3
 800362e:	4413      	add	r3, r2
 8003630:	4a43      	ldr	r2, [pc, #268]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x188>)
 8003632:	fba0 1202 	umull	r1, r2, r0, r2
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003638:	460a      	mov	r2, r1
 800363a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800363c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800363e:	4413      	add	r3, r2
 8003640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003644:	2200      	movs	r2, #0
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	61fa      	str	r2, [r7, #28]
 800364a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800364e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003652:	f7fc fdc1 	bl	80001d8 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4613      	mov	r3, r2
 800365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800365e:	e053      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003660:	4b35      	ldr	r3, [pc, #212]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x180>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	2200      	movs	r2, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	617a      	str	r2, [r7, #20]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003672:	f04f 0b00 	mov.w	fp, #0
 8003676:	4652      	mov	r2, sl
 8003678:	465b      	mov	r3, fp
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	0159      	lsls	r1, r3, #5
 8003684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003688:	0150      	lsls	r0, r2, #5
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	ebb2 080a 	subs.w	r8, r2, sl
 8003692:	eb63 090b 	sbc.w	r9, r3, fp
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036aa:	ebb2 0408 	subs.w	r4, r2, r8
 80036ae:	eb63 0509 	sbc.w	r5, r3, r9
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	00eb      	lsls	r3, r5, #3
 80036bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c0:	00e2      	lsls	r2, r4, #3
 80036c2:	4614      	mov	r4, r2
 80036c4:	461d      	mov	r5, r3
 80036c6:	eb14 030a 	adds.w	r3, r4, sl
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	eb45 030b 	adc.w	r3, r5, fp
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	2200      	movs	r2, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	60fa      	str	r2, [r7, #12]
 80036f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036fc:	f7fc fd6c 	bl	80001d8 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x184>)
 8003726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800372c:	4618      	mov	r0, r3
 800372e:	3740      	adds	r7, #64	@ 0x40
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400
 8003740:	017d7840 	.word	0x017d7840

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e041      	b.n	80037f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd faee 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 f9a8 	bl	8003af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d001      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e044      	b.n	800389e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1e      	ldr	r2, [pc, #120]	@ (80038ac <HAL_TIM_Base_Start_IT+0xb0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d018      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x6c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383e:	d013      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x6c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00e      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x6c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a19      	ldr	r2, [pc, #100]	@ (80038b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x6c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a17      	ldr	r2, [pc, #92]	@ (80038b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x6c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a16      	ldr	r2, [pc, #88]	@ (80038bc <HAL_TIM_Base_Start_IT+0xc0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d111      	bne.n	800388c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d010      	beq.n	800389c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	e007      	b.n	800389c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800
 80038b8:	40000c00 	.word	0x40000c00
 80038bc:	40014000 	.word	0x40014000

080038c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0202 	mvn.w	r2, #2
 80038f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8d2 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8c4 	bl	8003aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8d5 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d020      	beq.n	8003970 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0204 	mvn.w	r2, #4
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8ac 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f89e 	bl	8003aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f8af 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0208 	mvn.w	r2, #8
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2204      	movs	r2, #4
 8003992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f886 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f878 	bl	8003aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f889 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d020      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0210 	mvn.w	r2, #16
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2208      	movs	r2, #8
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f860 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f852 	bl	8003aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f863 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0201 	mvn.w	r2, #1
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fc fd6c 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8e0 	bl	8003c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f834 	bl	8003adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0220 	mvn.w	r2, #32
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8b2 	bl	8003bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a37      	ldr	r2, [pc, #220]	@ (8003be0 <TIM_Base_SetConfig+0xf0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00f      	beq.n	8003b28 <TIM_Base_SetConfig+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x38>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a34      	ldr	r2, [pc, #208]	@ (8003be4 <TIM_Base_SetConfig+0xf4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x38>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a33      	ldr	r2, [pc, #204]	@ (8003be8 <TIM_Base_SetConfig+0xf8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x38>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a32      	ldr	r2, [pc, #200]	@ (8003bec <TIM_Base_SetConfig+0xfc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a28      	ldr	r2, [pc, #160]	@ (8003be0 <TIM_Base_SetConfig+0xf0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01b      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b48:	d017      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	@ (8003be4 <TIM_Base_SetConfig+0xf4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <TIM_Base_SetConfig+0xf8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00f      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a23      	ldr	r2, [pc, #140]	@ (8003bec <TIM_Base_SetConfig+0xfc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a22      	ldr	r2, [pc, #136]	@ (8003bf0 <TIM_Base_SetConfig+0x100>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <TIM_Base_SetConfig+0x104>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a20      	ldr	r2, [pc, #128]	@ (8003bf8 <TIM_Base_SetConfig+0x108>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a0c      	ldr	r2, [pc, #48]	@ (8003be0 <TIM_Base_SetConfig+0xf0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d103      	bne.n	8003bba <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f043 0204 	orr.w	r2, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	601a      	str	r2, [r3, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400
 8003bf8:	40014800 	.word	0x40014800

08003bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c24:	b084      	sub	sp, #16
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	f107 001c 	add.w	r0, r7, #28
 8003c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d123      	bne.n	8003c86 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f001 fae8 	bl	8005250 <USB_CoreReset>
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e01b      	b.n	8003cbe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f001 fadc 	bl	8005250 <USB_CoreReset>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cb0:	e005      	b.n	8003cbe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cbe:	7fbb      	ldrb	r3, [r7, #30]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10b      	bne.n	8003cdc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f043 0206 	orr.w	r2, r3, #6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ce8:	b004      	add	sp, #16
 8003cea:	4770      	bx	lr

08003cec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b087      	sub	sp, #28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d165      	bne.n	8003dcc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a41      	ldr	r2, [pc, #260]	@ (8003e08 <USB_SetTurnaroundTime+0x11c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d906      	bls.n	8003d16 <USB_SetTurnaroundTime+0x2a>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a40      	ldr	r2, [pc, #256]	@ (8003e0c <USB_SetTurnaroundTime+0x120>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d202      	bcs.n	8003d16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d10:	230f      	movs	r3, #15
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e062      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a3c      	ldr	r2, [pc, #240]	@ (8003e0c <USB_SetTurnaroundTime+0x120>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d306      	bcc.n	8003d2c <USB_SetTurnaroundTime+0x40>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4a3b      	ldr	r2, [pc, #236]	@ (8003e10 <USB_SetTurnaroundTime+0x124>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d202      	bcs.n	8003d2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d26:	230e      	movs	r3, #14
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e057      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4a38      	ldr	r2, [pc, #224]	@ (8003e10 <USB_SetTurnaroundTime+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d306      	bcc.n	8003d42 <USB_SetTurnaroundTime+0x56>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a37      	ldr	r2, [pc, #220]	@ (8003e14 <USB_SetTurnaroundTime+0x128>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d202      	bcs.n	8003d42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d3c:	230d      	movs	r3, #13
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e04c      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a33      	ldr	r2, [pc, #204]	@ (8003e14 <USB_SetTurnaroundTime+0x128>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d306      	bcc.n	8003d58 <USB_SetTurnaroundTime+0x6c>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4a32      	ldr	r2, [pc, #200]	@ (8003e18 <USB_SetTurnaroundTime+0x12c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d802      	bhi.n	8003d58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d52:	230c      	movs	r3, #12
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e041      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e18 <USB_SetTurnaroundTime+0x12c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d906      	bls.n	8003d6e <USB_SetTurnaroundTime+0x82>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4a2e      	ldr	r2, [pc, #184]	@ (8003e1c <USB_SetTurnaroundTime+0x130>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d802      	bhi.n	8003d6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d68:	230b      	movs	r3, #11
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e036      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4a2a      	ldr	r2, [pc, #168]	@ (8003e1c <USB_SetTurnaroundTime+0x130>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d906      	bls.n	8003d84 <USB_SetTurnaroundTime+0x98>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <USB_SetTurnaroundTime+0x134>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d802      	bhi.n	8003d84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d7e:	230a      	movs	r3, #10
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e02b      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4a26      	ldr	r2, [pc, #152]	@ (8003e20 <USB_SetTurnaroundTime+0x134>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d906      	bls.n	8003d9a <USB_SetTurnaroundTime+0xae>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a25      	ldr	r2, [pc, #148]	@ (8003e24 <USB_SetTurnaroundTime+0x138>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d202      	bcs.n	8003d9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d94:	2309      	movs	r3, #9
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e020      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <USB_SetTurnaroundTime+0x138>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d306      	bcc.n	8003db0 <USB_SetTurnaroundTime+0xc4>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <USB_SetTurnaroundTime+0x13c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d802      	bhi.n	8003db0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003daa:	2308      	movs	r3, #8
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e015      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e28 <USB_SetTurnaroundTime+0x13c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d906      	bls.n	8003dc6 <USB_SetTurnaroundTime+0xda>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	@ (8003e2c <USB_SetTurnaroundTime+0x140>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d202      	bcs.n	8003dc6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e00a      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dc6:	2306      	movs	r3, #6
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e007      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dd2:	2309      	movs	r3, #9
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e001      	b.n	8003ddc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003dd8:	2309      	movs	r3, #9
 8003dda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	00d8acbf 	.word	0x00d8acbf
 8003e0c:	00e4e1c0 	.word	0x00e4e1c0
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	01067380 	.word	0x01067380
 8003e18:	011a499f 	.word	0x011a499f
 8003e1c:	01312cff 	.word	0x01312cff
 8003e20:	014ca43f 	.word	0x014ca43f
 8003e24:	016e3600 	.word	0x016e3600
 8003e28:	01a6ab1f 	.word	0x01a6ab1f
 8003e2c:	01e84800 	.word	0x01e84800

08003e30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d115      	bne.n	8003ec2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ea2:	200a      	movs	r0, #10
 8003ea4:	f7fd f878 	bl	8000f98 <HAL_Delay>
      ms += 10U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	330a      	adds	r3, #10
 8003eac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 f93f 	bl	8005132 <USB_GetMode>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d01e      	beq.n	8003ef8 <USB_SetCurrentMode+0x84>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ebe:	d9f0      	bls.n	8003ea2 <USB_SetCurrentMode+0x2e>
 8003ec0:	e01a      	b.n	8003ef8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d115      	bne.n	8003ef4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ed4:	200a      	movs	r0, #10
 8003ed6:	f7fd f85f 	bl	8000f98 <HAL_Delay>
      ms += 10U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	330a      	adds	r3, #10
 8003ede:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f001 f926 	bl	8005132 <USB_GetMode>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <USB_SetCurrentMode+0x84>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ef0:	d9f0      	bls.n	8003ed4 <USB_SetCurrentMode+0x60>
 8003ef2:	e001      	b.n	8003ef8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e005      	b.n	8003f04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2bc8      	cmp	r3, #200	@ 0xc8
 8003efc:	d101      	bne.n	8003f02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	e009      	b.n	8003f40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3340      	adds	r3, #64	@ 0x40
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	2200      	movs	r2, #0
 8003f38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2b0e      	cmp	r3, #14
 8003f44:	d9f2      	bls.n	8003f2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11c      	bne.n	8003f88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f86:	e00b      	b.n	8003fa0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10d      	bne.n	8003fd0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f968 	bl	8004294 <USB_SetDevSpeed>
 8003fc4:	e008      	b.n	8003fd8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f963 	bl	8004294 <USB_SetDevSpeed>
 8003fce:	e003      	b.n	8003fd8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fd0:	2103      	movs	r1, #3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f95e 	bl	8004294 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fd8:	2110      	movs	r1, #16
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8fa 	bl	80041d4 <USB_FlushTxFifo>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f924 	bl	8004238 <USB_FlushRxFifo>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004000:	461a      	mov	r2, r3
 8004002:	2300      	movs	r3, #0
 8004004:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e043      	b.n	80040ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800403a:	d118      	bne.n	800406e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e013      	b.n	8004080 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e008      	b.n	8004080 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408c:	461a      	mov	r2, r3
 800408e:	2300      	movs	r3, #0
 8004090:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409e:	461a      	mov	r2, r3
 80040a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	3301      	adds	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040b0:	461a      	mov	r2, r3
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d3b5      	bcc.n	8004024 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e043      	b.n	8004146 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040d4:	d118      	bne.n	8004108 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e013      	b.n	800411a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040fe:	461a      	mov	r2, r3
 8004100:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e008      	b.n	800411a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004114:	461a      	mov	r2, r3
 8004116:	2300      	movs	r3, #0
 8004118:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	2300      	movs	r3, #0
 800412a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004138:	461a      	mov	r2, r3
 800413a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800413e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3301      	adds	r3, #1
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800414a:	461a      	mov	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4293      	cmp	r3, r2
 8004150:	d3b5      	bcc.n	80040be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004164:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004172:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004174:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f043 0210 	orr.w	r2, r3, #16
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699a      	ldr	r2, [r3, #24]
 800418c:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <USB_DevInit+0x2c4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004194:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f043 0208 	orr.w	r2, r3, #8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d107      	bne.n	80041c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041cc:	b004      	add	sp, #16
 80041ce:	4770      	bx	lr
 80041d0:	803c3800 	.word	0x803c3800

080041d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041ee:	d901      	bls.n	80041f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e01b      	b.n	800422c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	daf2      	bge.n	80041e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	019b      	lsls	r3, r3, #6
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004218:	d901      	bls.n	800421e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e006      	b.n	800422c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b20      	cmp	r3, #32
 8004228:	d0f0      	beq.n	800420c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004250:	d901      	bls.n	8004256 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e018      	b.n	8004288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	daf2      	bge.n	8004244 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2210      	movs	r2, #16
 8004266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004274:	d901      	bls.n	800427a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e006      	b.n	8004288 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b10      	cmp	r3, #16
 8004284:	d0f0      	beq.n	8004268 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 0306 	and.w	r3, r3, #6
 80042de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
 80042ea:	e00a      	b.n	8004302 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d002      	beq.n	80042f8 <USB_GetDevSpeed+0x32>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d102      	bne.n	80042fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042f8:	2302      	movs	r3, #2
 80042fa:	75fb      	strb	r3, [r7, #23]
 80042fc:	e001      	b.n	8004302 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042fe:	230f      	movs	r3, #15
 8004300:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004302:	7dfb      	ldrb	r3, [r7, #23]
}
 8004304:	4618      	mov	r0, r3
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d13a      	bne.n	80043a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800434a:	4313      	orrs	r3, r2
 800434c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d155      	bne.n	8004410 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	791b      	ldrb	r3, [r3, #4]
 800437e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004380:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	059b      	lsls	r3, r3, #22
 8004386:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004388:	4313      	orrs	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	e036      	b.n	8004410 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	2101      	movs	r1, #1
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d11a      	bne.n	8004410 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	791b      	ldrb	r3, [r3, #4]
 80043f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043f6:	430b      	orrs	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800440e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d161      	bne.n	8004500 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800444e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004452:	d11f      	bne.n	8004494 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4413      	add	r3, r2
 800445c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	0151      	lsls	r1, r2, #5
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	440a      	add	r2, r1
 800446a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800446e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004472:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800448e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800449a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	2101      	movs	r1, #1
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044b4:	4013      	ands	r3, r2
 80044b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	2101      	movs	r1, #1
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044d8:	4013      	ands	r3, r2
 80044da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	0159      	lsls	r1, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f6:	4619      	mov	r1, r3
 80044f8:	4b35      	ldr	r3, [pc, #212]	@ (80045d0 <USB_DeactivateEndpoint+0x1b0>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
 80044fe:	e060      	b.n	80045c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004516:	d11f      	bne.n	8004558 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004532:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004536:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004552:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004556:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	041b      	lsls	r3, r3, #16
 8004570:	43db      	mvns	r3, r3
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004578:	4013      	ands	r3, r2
 800457a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	43db      	mvns	r3, r3
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800459c:	4013      	ands	r3, r2
 800459e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	0159      	lsls	r1, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	440b      	add	r3, r1
 80045b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ba:	4619      	mov	r1, r3
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <USB_DeactivateEndpoint+0x1b4>)
 80045be:	4013      	ands	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	ec337800 	.word	0xec337800
 80045d4:	eff37800 	.word	0xeff37800

080045d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	f040 817f 	bne.w	80048f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d132      	bne.n	8004668 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004620:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	440a      	add	r2, r1
 800465c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004660:	0cdb      	lsrs	r3, r3, #19
 8004662:	04db      	lsls	r3, r3, #19
 8004664:	6113      	str	r3, [r2, #16]
 8004666:	e097      	b.n	8004798 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004682:	0cdb      	lsrs	r3, r3, #19
 8004684:	04db      	lsls	r3, r3, #19
 8004686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046aa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d11a      	bne.n	80046e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d903      	bls.n	80046c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046e4:	6113      	str	r3, [r2, #16]
 80046e6:	e044      	b.n	8004772 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4413      	add	r3, r2
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	8afb      	ldrh	r3, [r7, #22]
 800470e:	04d9      	lsls	r1, r3, #19
 8004710:	4ba4      	ldr	r3, [pc, #656]	@ (80049a4 <USB_EPStartXfer+0x3cc>)
 8004712:	400b      	ands	r3, r1
 8004714:	69b9      	ldr	r1, [r7, #24]
 8004716:	0148      	lsls	r0, r1, #5
 8004718:	69f9      	ldr	r1, [r7, #28]
 800471a:	4401      	add	r1, r0
 800471c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004720:	4313      	orrs	r3, r2
 8004722:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	791b      	ldrb	r3, [r3, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d122      	bne.n	8004772 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004746:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800474a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	8afb      	ldrh	r3, [r7, #22]
 800475c:	075b      	lsls	r3, r3, #29
 800475e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004762:	69b9      	ldr	r1, [r7, #24]
 8004764:	0148      	lsls	r0, r1, #5
 8004766:	69f9      	ldr	r1, [r7, #28]
 8004768:	4401      	add	r1, r0
 800476a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800476e:	4313      	orrs	r3, r2
 8004770:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	0148      	lsls	r0, r1, #5
 800478c:	69f9      	ldr	r1, [r7, #28]
 800478e:	4401      	add	r1, r0
 8004790:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004794:	4313      	orrs	r3, r2
 8004796:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d14b      	bne.n	8004836 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	791b      	ldrb	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d128      	bne.n	8004814 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d110      	bne.n	80047f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e00f      	b.n	8004814 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800480e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004812:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800482e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e166      	b.n	8004b04 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004850:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004854:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	791b      	ldrb	r3, [r3, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d015      	beq.n	800488a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 814e 	beq.w	8004b04 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f303 	lsl.w	r3, r1, r3
 800487e:	69f9      	ldr	r1, [r7, #28]
 8004880:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004884:	4313      	orrs	r3, r2
 8004886:	634b      	str	r3, [r1, #52]	@ 0x34
 8004888:	e13c      	b.n	8004b04 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d110      	bne.n	80048bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e00f      	b.n	80048dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	68d9      	ldr	r1, [r3, #12]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	b298      	uxth	r0, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4603      	mov	r3, r0
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f9b9 	bl	8004c68 <USB_WritePacket>
 80048f6:	e105      	b.n	8004b04 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004912:	0cdb      	lsrs	r3, r3, #19
 8004914:	04db      	lsls	r3, r3, #19
 8004916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004932:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004936:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800493a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d132      	bne.n	80049a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004970:	69b9      	ldr	r1, [r7, #24]
 8004972:	0148      	lsls	r0, r1, #5
 8004974:	69f9      	ldr	r1, [r7, #28]
 8004976:	4401      	add	r1, r0
 8004978:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800497c:	4313      	orrs	r3, r2
 800497e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800499a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800499e:	6113      	str	r3, [r2, #16]
 80049a0:	e062      	b.n	8004a68 <USB_EPStartXfer+0x490>
 80049a2:	bf00      	nop
 80049a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d123      	bne.n	80049f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	0148      	lsls	r0, r1, #5
 80049ca:	69f9      	ldr	r1, [r7, #28]
 80049cc:	4401      	add	r1, r0
 80049ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049d2:	4313      	orrs	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	0151      	lsls	r1, r2, #5
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	440a      	add	r2, r1
 80049ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049f4:	6113      	str	r3, [r2, #16]
 80049f6:	e037      	b.n	8004a68 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4413      	add	r3, r2
 8004a02:	1e5a      	subs	r2, r3, #1
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	8afa      	ldrh	r2, [r7, #22]
 8004a14:	fb03 f202 	mul.w	r2, r3, r2
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	8afb      	ldrh	r3, [r7, #22]
 8004a2c:	04d9      	lsls	r1, r3, #19
 8004a2e:	4b38      	ldr	r3, [pc, #224]	@ (8004b10 <USB_EPStartXfer+0x538>)
 8004a30:	400b      	ands	r3, r1
 8004a32:	69b9      	ldr	r1, [r7, #24]
 8004a34:	0148      	lsls	r0, r1, #5
 8004a36:	69f9      	ldr	r1, [r7, #28]
 8004a38:	4401      	add	r1, r0
 8004a3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	0148      	lsls	r0, r1, #5
 8004a5c:	69f9      	ldr	r1, [r7, #28]
 8004a5e:	4401      	add	r1, r0
 8004a60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a64:	4313      	orrs	r3, r2
 8004a66:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d10d      	bne.n	8004a8a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	68d9      	ldr	r1, [r3, #12]
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a86:	460a      	mov	r2, r1
 8004a88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d128      	bne.n	8004ae4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004abc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e00f      	b.n	8004ae4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004afe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	1ff80000 	.word	0x1ff80000

08004b14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	785b      	ldrb	r3, [r3, #1]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d14a      	bne.n	8004bc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b4a:	f040 8086 	bne.w	8004c5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d902      	bls.n	8004bac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8004baa:	e056      	b.n	8004c5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc4:	d0e7      	beq.n	8004b96 <USB_EPStopXfer+0x82>
 8004bc6:	e048      	b.n	8004c5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004be0:	d13b      	bne.n	8004c5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d902      	bls.n	8004c40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c3e:	e00c      	b.n	8004c5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c58:	d0e7      	beq.n	8004c2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	@ 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	460b      	mov	r3, r1
 8004c78:	71fb      	strb	r3, [r7, #7]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d123      	bne.n	8004cd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c8e:	88bb      	ldrh	r3, [r7, #4]
 8004c90:	3303      	adds	r3, #3
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e018      	b.n	8004cce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	031a      	lsls	r2, r3, #12
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca8:	461a      	mov	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3e2      	bcc.n	8004c9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3724      	adds	r7, #36	@ 0x24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b08b      	sub	sp, #44	@ 0x2c
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	e014      	b.n	8004d3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	3301      	adds	r3, #1
 8004d20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	3301      	adds	r3, #1
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	3301      	adds	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	3301      	adds	r3, #1
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	6a3a      	ldr	r2, [r7, #32]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d3e6      	bcc.n	8004d10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d42:	8bfb      	ldrh	r3, [r7, #30]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01e      	beq.n	8004d86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d52:	461a      	mov	r2, r3
 8004d54:	f107 0310 	add.w	r3, r7, #16
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	701a      	strb	r2, [r3, #0]
      i++;
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	3301      	adds	r3, #1
 8004d72:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	3301      	adds	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d7a:	8bfb      	ldrh	r3, [r7, #30]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d80:	8bfb      	ldrh	r3, [r7, #30]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1ea      	bne.n	8004d5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	372c      	adds	r7, #44	@ 0x2c
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d12c      	bne.n	8004e0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	db12      	blt.n	8004de8 <USB_EPSetStall+0x54>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00f      	beq.n	8004de8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004de6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	e02b      	b.n	8004e62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	db12      	blt.n	8004e42 <USB_EPSetStall+0xae>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00f      	beq.n	8004e42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d128      	bne.n	8004ede <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	791b      	ldrb	r3, [r3, #4]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d003      	beq.n	8004ebc <USB_EPClearStall+0x4c>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	791b      	ldrb	r3, [r3, #4]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d138      	bne.n	8004f2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	e027      	b.n	8004f2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ef8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004efc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	791b      	ldrb	r3, [r3, #4]
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d003      	beq.n	8004f0e <USB_EPClearStall+0x9e>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	791b      	ldrb	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d10f      	bne.n	8004f2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	0151      	lsls	r1, r2, #5
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	440a      	add	r2, r1
 8004f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f70:	68f9      	ldr	r1, [r7, #12]
 8004f72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb6:	f023 0302 	bic.w	r3, r3, #2
 8004fba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fe4:	f023 0303 	bic.w	r3, r3, #3
 8004fe8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4013      	ands	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005024:	68fb      	ldr	r3, [r7, #12]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	4013      	ands	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	0c1b      	lsrs	r3, r3, #16
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	b29b      	uxth	r3, r3
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050c8:	68bb      	ldr	r3, [r7, #8]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	460b      	mov	r3, r1
 80050e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	01db      	lsls	r3, r3, #7
 8005108:	b2db      	uxtb	r3, r3
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4013      	ands	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005124:	68bb      	ldr	r3, [r7, #8]
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0301 	and.w	r3, r3, #1
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005168:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800516c:	f023 0307 	bic.w	r3, r3, #7
 8005170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	460b      	mov	r3, r1
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	333c      	adds	r3, #60	@ 0x3c
 80051aa:	3304      	adds	r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4a26      	ldr	r2, [pc, #152]	@ (800524c <USB_EP0_OutStart+0xb8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d90a      	bls.n	80051ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051c8:	d101      	bne.n	80051ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e037      	b.n	800523e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051fc:	f043 0318 	orr.w	r3, r3, #24
 8005200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005210:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005214:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005216:	7afb      	ldrb	r3, [r7, #11]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10f      	bne.n	800523c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005236:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800523a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	4f54300a 	.word	0x4f54300a

08005250 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005268:	d901      	bls.n	800526e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e022      	b.n	80052b4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	daf2      	bge.n	800525c <USB_CoreReset+0xc>

  count = 10U;
 8005276:	230a      	movs	r3, #10
 8005278:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800527a:	e002      	b.n	8005282 <USB_CoreReset+0x32>
  {
    count--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f9      	bne.n	800527c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3301      	adds	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052a0:	d901      	bls.n	80052a6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e006      	b.n	80052b4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d0f0      	beq.n	8005294 <USB_CoreReset+0x44>

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80052d0:	f002 fcba 	bl	8007c48 <USBD_static_malloc>
 80052d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	32b0      	adds	r2, #176	@ 0xb0
 80052e6:	2100      	movs	r1, #0
 80052e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0d4      	b.n	800549a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80052f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80052f4:	2100      	movs	r1, #0
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f002 fcea 	bl	8007cd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	32b0      	adds	r2, #176	@ 0xb0
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	32b0      	adds	r2, #176	@ 0xb0
 8005316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7c1b      	ldrb	r3, [r3, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d138      	bne.n	800539a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005328:	4b5e      	ldr	r3, [pc, #376]	@ (80054a4 <USBD_CDC_Init+0x1e4>)
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005330:	2202      	movs	r2, #2
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f002 fb65 	bl	8007a02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005338:	4b5a      	ldr	r3, [pc, #360]	@ (80054a4 <USBD_CDC_Init+0x1e4>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	3323      	adds	r3, #35	@ 0x23
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005352:	4b55      	ldr	r3, [pc, #340]	@ (80054a8 <USBD_CDC_Init+0x1e8>)
 8005354:	7819      	ldrb	r1, [r3, #0]
 8005356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800535a:	2202      	movs	r2, #2
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f002 fb50 	bl	8007a02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005362:	4b51      	ldr	r3, [pc, #324]	@ (80054a8 <USBD_CDC_Init+0x1e8>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	f003 020f 	and.w	r2, r3, #15
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800537e:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <USBD_CDC_Init+0x1ec>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f003 020f 	and.w	r2, r3, #15
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	331c      	adds	r3, #28
 8005394:	2210      	movs	r2, #16
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e035      	b.n	8005406 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800539a:	4b42      	ldr	r3, [pc, #264]	@ (80054a4 <USBD_CDC_Init+0x1e4>)
 800539c:	7819      	ldrb	r1, [r3, #0]
 800539e:	2340      	movs	r3, #64	@ 0x40
 80053a0:	2202      	movs	r2, #2
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f002 fb2d 	bl	8007a02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053a8:	4b3e      	ldr	r3, [pc, #248]	@ (80054a4 <USBD_CDC_Init+0x1e4>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	440b      	add	r3, r1
 80053bc:	3323      	adds	r3, #35	@ 0x23
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053c2:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <USBD_CDC_Init+0x1e8>)
 80053c4:	7819      	ldrb	r1, [r3, #0]
 80053c6:	2340      	movs	r3, #64	@ 0x40
 80053c8:	2202      	movs	r2, #2
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f002 fb19 	bl	8007a02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053d0:	4b35      	ldr	r3, [pc, #212]	@ (80054a8 <USBD_CDC_Init+0x1e8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 020f 	and.w	r2, r3, #15
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053ec:	4b2f      	ldr	r3, [pc, #188]	@ (80054ac <USBD_CDC_Init+0x1ec>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	331c      	adds	r3, #28
 8005402:	2210      	movs	r2, #16
 8005404:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005406:	4b29      	ldr	r3, [pc, #164]	@ (80054ac <USBD_CDC_Init+0x1ec>)
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	2308      	movs	r3, #8
 800540c:	2203      	movs	r2, #3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f002 faf7 	bl	8007a02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005414:	4b25      	ldr	r3, [pc, #148]	@ (80054ac <USBD_CDC_Init+0x1ec>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	3323      	adds	r3, #35	@ 0x23
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	33b0      	adds	r3, #176	@ 0xb0
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005464:	2302      	movs	r3, #2
 8005466:	e018      	b.n	800549a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7c1b      	ldrb	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005470:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <USBD_CDC_Init+0x1e8>)
 8005472:	7819      	ldrb	r1, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800547a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f002 fbae 	bl	8007be0 <USBD_LL_PrepareReceive>
 8005484:	e008      	b.n	8005498 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <USBD_CDC_Init+0x1e8>)
 8005488:	7819      	ldrb	r1, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005490:	2340      	movs	r3, #64	@ 0x40
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f002 fba4 	bl	8007be0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000093 	.word	0x20000093
 80054a8:	20000094 	.word	0x20000094
 80054ac:	20000095 	.word	0x20000095

080054b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80054bc:	4b3a      	ldr	r3, [pc, #232]	@ (80055a8 <USBD_CDC_DeInit+0xf8>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f002 fac3 	bl	8007a4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80054c8:	4b37      	ldr	r3, [pc, #220]	@ (80055a8 <USBD_CDC_DeInit+0xf8>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 020f 	and.w	r2, r3, #15
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	3323      	adds	r3, #35	@ 0x23
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80054e2:	4b32      	ldr	r3, [pc, #200]	@ (80055ac <USBD_CDC_DeInit+0xfc>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f002 fab0 	bl	8007a4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80054ee:	4b2f      	ldr	r3, [pc, #188]	@ (80055ac <USBD_CDC_DeInit+0xfc>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 020f 	and.w	r2, r3, #15
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800550a:	4b29      	ldr	r3, [pc, #164]	@ (80055b0 <USBD_CDC_DeInit+0x100>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 fa9c 	bl	8007a4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005516:	4b26      	ldr	r3, [pc, #152]	@ (80055b0 <USBD_CDC_DeInit+0x100>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	3323      	adds	r3, #35	@ 0x23
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005530:	4b1f      	ldr	r3, [pc, #124]	@ (80055b0 <USBD_CDC_DeInit+0x100>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	331c      	adds	r3, #28
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	32b0      	adds	r2, #176	@ 0xb0
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01f      	beq.n	800559c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	33b0      	adds	r3, #176	@ 0xb0
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	32b0      	adds	r2, #176	@ 0xb0
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	4618      	mov	r0, r3
 8005580:	f002 fb70 	bl	8007c64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32b0      	adds	r2, #176	@ 0xb0
 800558e:	2100      	movs	r1, #0
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000093 	.word	0x20000093
 80055ac:	20000094 	.word	0x20000094
 80055b0:	20000095 	.word	0x20000095

080055b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	32b0      	adds	r2, #176	@ 0xb0
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0bf      	b.n	8005764 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d050      	beq.n	8005692 <USBD_CDC_Setup+0xde>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	f040 80af 	bne.w	8005754 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03a      	beq.n	8005674 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b25b      	sxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	da1b      	bge.n	8005640 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	33b0      	adds	r3, #176	@ 0xb0
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800561e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	88d2      	ldrh	r2, [r2, #6]
 8005624:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	88db      	ldrh	r3, [r3, #6]
 800562a:	2b07      	cmp	r3, #7
 800562c:	bf28      	it	cs
 800562e:	2307      	movcs	r3, #7
 8005630:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	89fa      	ldrh	r2, [r7, #14]
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fd69 	bl	8007110 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800563e:	e090      	b.n	8005762 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	785a      	ldrb	r2, [r3, #1]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	88db      	ldrh	r3, [r3, #6]
 800564e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005650:	d803      	bhi.n	800565a <USBD_CDC_Setup+0xa6>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	88db      	ldrh	r3, [r3, #6]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	e000      	b.n	800565c <USBD_CDC_Setup+0xa8>
 800565a:	2240      	movs	r2, #64	@ 0x40
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005662:	6939      	ldr	r1, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800566a:	461a      	mov	r2, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fd7e 	bl	800716e <USBD_CtlPrepareRx>
      break;
 8005672:	e076      	b.n	8005762 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	33b0      	adds	r3, #176	@ 0xb0
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	7850      	ldrb	r0, [r2, #1]
 800568a:	2200      	movs	r2, #0
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4798      	blx	r3
      break;
 8005690:	e067      	b.n	8005762 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b0b      	cmp	r3, #11
 8005698:	d851      	bhi.n	800573e <USBD_CDC_Setup+0x18a>
 800569a:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <USBD_CDC_Setup+0xec>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056d1 	.word	0x080056d1
 80056a4:	0800574d 	.word	0x0800574d
 80056a8:	0800573f 	.word	0x0800573f
 80056ac:	0800573f 	.word	0x0800573f
 80056b0:	0800573f 	.word	0x0800573f
 80056b4:	0800573f 	.word	0x0800573f
 80056b8:	0800573f 	.word	0x0800573f
 80056bc:	0800573f 	.word	0x0800573f
 80056c0:	0800573f 	.word	0x0800573f
 80056c4:	0800573f 	.word	0x0800573f
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	08005725 	.word	0x08005725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d107      	bne.n	80056ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056dc:	f107 030a 	add.w	r3, r7, #10
 80056e0:	2202      	movs	r2, #2
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fd13 	bl	8007110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056ea:	e032      	b.n	8005752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fc91 	bl	8007016 <USBD_CtlError>
            ret = USBD_FAIL;
 80056f4:	2303      	movs	r3, #3
 80056f6:	75fb      	strb	r3, [r7, #23]
          break;
 80056f8:	e02b      	b.n	8005752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d107      	bne.n	8005716 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005706:	f107 030d 	add.w	r3, r7, #13
 800570a:	2201      	movs	r2, #1
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fcfe 	bl	8007110 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005714:	e01d      	b.n	8005752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fc7c 	bl	8007016 <USBD_CtlError>
            ret = USBD_FAIL;
 800571e:	2303      	movs	r3, #3
 8005720:	75fb      	strb	r3, [r7, #23]
          break;
 8005722:	e016      	b.n	8005752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b03      	cmp	r3, #3
 800572e:	d00f      	beq.n	8005750 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fc6f 	bl	8007016 <USBD_CtlError>
            ret = USBD_FAIL;
 8005738:	2303      	movs	r3, #3
 800573a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800573c:	e008      	b.n	8005750 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fc68 	bl	8007016 <USBD_CtlError>
          ret = USBD_FAIL;
 8005746:	2303      	movs	r3, #3
 8005748:	75fb      	strb	r3, [r7, #23]
          break;
 800574a:	e002      	b.n	8005752 <USBD_CDC_Setup+0x19e>
          break;
 800574c:	bf00      	nop
 800574e:	e008      	b.n	8005762 <USBD_CDC_Setup+0x1ae>
          break;
 8005750:	bf00      	nop
      }
      break;
 8005752:	e006      	b.n	8005762 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fc5d 	bl	8007016 <USBD_CtlError>
      ret = USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	75fb      	strb	r3, [r7, #23]
      break;
 8005760:	bf00      	nop
  }

  return (uint8_t)ret;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800577e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	32b0      	adds	r2, #176	@ 0xb0
 800578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	e065      	b.n	8005862 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	@ 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	3314      	adds	r3, #20
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02f      	beq.n	8005820 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	3314      	adds	r3, #20
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	f003 010f 	and.w	r1, r3, #15
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	460b      	mov	r3, r1
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	440b      	add	r3, r1
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4403      	add	r3, r0
 80057e8:	331c      	adds	r3, #28
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d112      	bne.n	8005820 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3314      	adds	r3, #20
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005812:	78f9      	ldrb	r1, [r7, #3]
 8005814:	2300      	movs	r3, #0
 8005816:	2200      	movs	r2, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f002 f9c0 	bl	8007b9e <USBD_LL_Transmit>
 800581e:	e01f      	b.n	8005860 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	33b0      	adds	r3, #176	@ 0xb0
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	33b0      	adds	r3, #176	@ 0xb0
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	460b      	mov	r3, r1
 8005874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	32b0      	adds	r2, #176	@ 0xb0
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	32b0      	adds	r2, #176	@ 0xb0
 8005890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	e01a      	b.n	80058d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 f9be 	bl	8007c22 <USBD_LL_GetRxDataSize>
 80058a6:	4602      	mov	r2, r0
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	33b0      	adds	r3, #176	@ 0xb0
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80058cc:	4611      	mov	r1, r2
 80058ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	32b0      	adds	r2, #176	@ 0xb0
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e024      	b.n	8005946 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	33b0      	adds	r3, #176	@ 0xb0
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d019      	beq.n	8005944 <USBD_CDC_EP0_RxReady+0x6a>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005916:	2bff      	cmp	r3, #255	@ 0xff
 8005918:	d014      	beq.n	8005944 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	33b0      	adds	r3, #176	@ 0xb0
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005932:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800593a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	22ff      	movs	r2, #255	@ 0xff
 8005940:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005958:	2182      	movs	r1, #130	@ 0x82
 800595a:	4818      	ldr	r0, [pc, #96]	@ (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800595c:	f000 fd22 	bl	80063a4 <USBD_GetEpDesc>
 8005960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005962:	2101      	movs	r1, #1
 8005964:	4815      	ldr	r0, [pc, #84]	@ (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005966:	f000 fd1d 	bl	80063a4 <USBD_GetEpDesc>
 800596a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800596c:	2181      	movs	r1, #129	@ 0x81
 800596e:	4813      	ldr	r0, [pc, #76]	@ (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005970:	f000 fd18 	bl	80063a4 <USBD_GetEpDesc>
 8005974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2210      	movs	r2, #16
 8005980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d006      	beq.n	8005996 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2200      	movs	r2, #0
 800598c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005990:	711a      	strb	r2, [r3, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059a4:	711a      	strb	r2, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2243      	movs	r2, #67	@ 0x43
 80059ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059b0:	4b02      	ldr	r3, [pc, #8]	@ (80059bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000050 	.word	0x20000050

080059c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059c8:	2182      	movs	r1, #130	@ 0x82
 80059ca:	4818      	ldr	r0, [pc, #96]	@ (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059cc:	f000 fcea 	bl	80063a4 <USBD_GetEpDesc>
 80059d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059d2:	2101      	movs	r1, #1
 80059d4:	4815      	ldr	r0, [pc, #84]	@ (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059d6:	f000 fce5 	bl	80063a4 <USBD_GetEpDesc>
 80059da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059dc:	2181      	movs	r1, #129	@ 0x81
 80059de:	4813      	ldr	r0, [pc, #76]	@ (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80059e0:	f000 fce0 	bl	80063a4 <USBD_GetEpDesc>
 80059e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2210      	movs	r2, #16
 80059f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	2200      	movs	r2, #0
 80059fc:	711a      	strb	r2, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f042 0202 	orr.w	r2, r2, #2
 8005a04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d006      	beq.n	8005a1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	711a      	strb	r2, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f042 0202 	orr.w	r2, r2, #2
 8005a18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2243      	movs	r2, #67	@ 0x43
 8005a1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a20:	4b02      	ldr	r3, [pc, #8]	@ (8005a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000050 	.word	0x20000050

08005a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a38:	2182      	movs	r1, #130	@ 0x82
 8005a3a:	4818      	ldr	r0, [pc, #96]	@ (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a3c:	f000 fcb2 	bl	80063a4 <USBD_GetEpDesc>
 8005a40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a42:	2101      	movs	r1, #1
 8005a44:	4815      	ldr	r0, [pc, #84]	@ (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a46:	f000 fcad 	bl	80063a4 <USBD_GetEpDesc>
 8005a4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a4c:	2181      	movs	r1, #129	@ 0x81
 8005a4e:	4813      	ldr	r0, [pc, #76]	@ (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a50:	f000 fca8 	bl	80063a4 <USBD_GetEpDesc>
 8005a54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d006      	beq.n	8005a76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a70:	711a      	strb	r2, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a84:	711a      	strb	r2, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2243      	movs	r2, #67	@ 0x43
 8005a8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a90:	4b02      	ldr	r3, [pc, #8]	@ (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000050 	.word	0x20000050

08005aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	220a      	movs	r2, #10
 8005aac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005aae:	4b03      	ldr	r3, [pc, #12]	@ (8005abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000000c 	.word	0x2000000c

08005ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e009      	b.n	8005ae8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	33b0      	adds	r3, #176	@ 0xb0
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	32b0      	adds	r2, #176	@ 0xb0
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e008      	b.n	8005b2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	32b0      	adds	r2, #176	@ 0xb0
 8005b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e004      	b.n	8005b66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	32b0      	adds	r2, #176	@ 0xb0
 8005b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	32b0      	adds	r2, #176	@ 0xb0
 8005b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e018      	b.n	8005bd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	7c1b      	ldrb	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005baa:	4b0c      	ldr	r3, [pc, #48]	@ (8005bdc <USBD_CDC_ReceivePacket+0x68>)
 8005bac:	7819      	ldrb	r1, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f002 f811 	bl	8007be0 <USBD_LL_PrepareReceive>
 8005bbe:	e008      	b.n	8005bd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <USBD_CDC_ReceivePacket+0x68>)
 8005bc2:	7819      	ldrb	r1, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005bca:	2340      	movs	r3, #64	@ 0x40
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f002 f807 	bl	8007be0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000094 	.word	0x20000094

08005be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e01f      	b.n	8005c38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f001 fe81 	bl	8007934 <USBD_LL_Init>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e025      	b.n	8005ca4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	32ae      	adds	r2, #174	@ 0xae
 8005c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00f      	beq.n	8005c94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	32ae      	adds	r2, #174	@ 0xae
 8005c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	f107 020e 	add.w	r2, r7, #14
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fe89 	bl	80079cc <USBD_LL_Start>
 8005cba:	4603      	mov	r3, r0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f922 	bl	8006fa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d01a      	beq.n	8005db8 <USBD_LL_SetupStage+0x72>
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d822      	bhi.n	8005dcc <USBD_LL_SetupStage+0x86>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <USBD_LL_SetupStage+0x4a>
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d00a      	beq.n	8005da4 <USBD_LL_SetupStage+0x5e>
 8005d8e:	e01d      	b.n	8005dcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb77 	bl	800648c <USBD_StdDevReq>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
      break;
 8005da2:	e020      	b.n	8005de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fbdf 	bl	8006570 <USBD_StdItfReq>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
      break;
 8005db6:	e016      	b.n	8005de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fc41 	bl	8006648 <USBD_StdEPReq>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dca:	e00c      	b.n	8005de6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005dd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fe56 	bl	8007a8c <USBD_LL_StallEP>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	bf00      	nop
  }

  return ret;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d177      	bne.n	8005ef8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	f040 80a1 	bne.w	8005f5e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	8992      	ldrh	r2, [r2, #12]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d91c      	bls.n	8005e62 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	8992      	ldrh	r2, [r2, #12]
 8005e30:	1a9a      	subs	r2, r3, r2
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	8992      	ldrh	r2, [r2, #12]
 8005e3e:	441a      	add	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6919      	ldr	r1, [r3, #16]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	899b      	ldrh	r3, [r3, #12]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4293      	cmp	r3, r2
 8005e54:	bf38      	it	cc
 8005e56:	4613      	movcc	r3, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f001 f9a8 	bl	80071b0 <USBD_CtlContinueRx>
 8005e60:	e07d      	b.n	8005f5e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d014      	beq.n	8005e9a <USBD_LL_DataOutStage+0xaa>
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d81d      	bhi.n	8005eb0 <USBD_LL_DataOutStage+0xc0>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <USBD_LL_DataOutStage+0x8e>
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d003      	beq.n	8005e84 <USBD_LL_DataOutStage+0x94>
 8005e7c:	e018      	b.n	8005eb0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	75bb      	strb	r3, [r7, #22]
            break;
 8005e82:	e018      	b.n	8005eb6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fa6e 	bl	8006370 <USBD_CoreFindIF>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75bb      	strb	r3, [r7, #22]
            break;
 8005e98:	e00d      	b.n	8005eb6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fa70 	bl	800638a <USBD_CoreFindEP>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75bb      	strb	r3, [r7, #22]
            break;
 8005eae:	e002      	b.n	8005eb6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75bb      	strb	r3, [r7, #22]
            break;
 8005eb4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005eb6:	7dbb      	ldrb	r3, [r7, #22]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d119      	bne.n	8005ef0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d113      	bne.n	8005ef0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ec8:	7dba      	ldrb	r2, [r7, #22]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	32ae      	adds	r2, #174	@ 0xae
 8005ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005ed8:	7dba      	ldrb	r2, [r7, #22]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ee0:	7dba      	ldrb	r2, [r7, #22]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	32ae      	adds	r2, #174	@ 0xae
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f001 f96e 	bl	80071d2 <USBD_CtlSendStatus>
 8005ef6:	e032      	b.n	8005f5e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ef8:	7afb      	ldrb	r3, [r7, #11]
 8005efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 fa41 	bl	800638a <USBD_CoreFindEP>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f0c:	7dbb      	ldrb	r3, [r7, #22]
 8005f0e:	2bff      	cmp	r3, #255	@ 0xff
 8005f10:	d025      	beq.n	8005f5e <USBD_LL_DataOutStage+0x16e>
 8005f12:	7dbb      	ldrb	r3, [r7, #22]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d122      	bne.n	8005f5e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d117      	bne.n	8005f54 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f24:	7dba      	ldrb	r2, [r7, #22]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	32ae      	adds	r2, #174	@ 0xae
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00f      	beq.n	8005f54 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005f34:	7dba      	ldrb	r2, [r7, #22]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f3c:	7dba      	ldrb	r2, [r7, #22]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	32ae      	adds	r2, #174	@ 0xae
 8005f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	7afa      	ldrb	r2, [r7, #11]
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	4798      	blx	r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
 8005f5c:	e000      	b.n	8005f60 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	460b      	mov	r3, r1
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d178      	bne.n	800606e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3314      	adds	r3, #20
 8005f80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d163      	bne.n	8006054 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	8992      	ldrh	r2, [r2, #12]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d91c      	bls.n	8005fd2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	8992      	ldrh	r2, [r2, #12]
 8005fa0:	1a9a      	subs	r2, r3, r2
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	8992      	ldrh	r2, [r2, #12]
 8005fae:	441a      	add	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6919      	ldr	r1, [r3, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f001 f8c4 	bl	800714c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2100      	movs	r1, #0
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 fe08 	bl	8007be0 <USBD_LL_PrepareReceive>
 8005fd0:	e040      	b.n	8006054 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	899b      	ldrh	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d11c      	bne.n	800601a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d316      	bcc.n	800601a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d20f      	bcs.n	800601a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f001 f8a4 	bl	800714c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800600c:	2300      	movs	r3, #0
 800600e:	2200      	movs	r2, #0
 8006010:	2100      	movs	r1, #0
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f001 fde4 	bl	8007be0 <USBD_LL_PrepareReceive>
 8006018:	e01c      	b.n	8006054 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d10f      	bne.n	8006046 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006046:	2180      	movs	r1, #128	@ 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 fd1f 	bl	8007a8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f001 f8d2 	bl	80071f8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d03a      	beq.n	80060d4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff fe30 	bl	8005cc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800606c:	e032      	b.n	80060d4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006074:	b2db      	uxtb	r3, r3
 8006076:	4619      	mov	r1, r3
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f986 	bl	800638a <USBD_CoreFindEP>
 800607e:	4603      	mov	r3, r0
 8006080:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	2bff      	cmp	r3, #255	@ 0xff
 8006086:	d025      	beq.n	80060d4 <USBD_LL_DataInStage+0x16c>
 8006088:	7dfb      	ldrb	r3, [r7, #23]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d122      	bne.n	80060d4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d11c      	bne.n	80060d4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800609a:	7dfa      	ldrb	r2, [r7, #23]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	32ae      	adds	r2, #174	@ 0xae
 80060a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80060aa:	7dfa      	ldrb	r2, [r7, #23]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060b2:	7dfa      	ldrb	r2, [r7, #23]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	32ae      	adds	r2, #174	@ 0xae
 80060b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	7afa      	ldrb	r2, [r7, #11]
 80060c0:	4611      	mov	r1, r2
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060ca:	7dbb      	ldrb	r3, [r7, #22]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80060d0:	7dbb      	ldrb	r3, [r7, #22]
 80060d2:	e000      	b.n	80060d6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d014      	beq.n	8006144 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6852      	ldr	r2, [r2, #4]
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	4611      	mov	r1, r2
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	4798      	blx	r3
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006140:	2303      	movs	r3, #3
 8006142:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006144:	2340      	movs	r3, #64	@ 0x40
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 fc59 	bl	8007a02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2240      	movs	r2, #64	@ 0x40
 800615c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006160:	2340      	movs	r3, #64	@ 0x40
 8006162:	2200      	movs	r2, #0
 8006164:	2180      	movs	r1, #128	@ 0x80
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fc4b 	bl	8007a02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2240      	movs	r2, #64	@ 0x40
 8006178:	841a      	strh	r2, [r3, #32]

  return ret;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d006      	beq.n	80061c6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2204      	movs	r2, #4
 80061ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d106      	bne.n	80061fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d110      	bne.n	8006242 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	32ae      	adds	r2, #174	@ 0xae
 8006262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800626a:	2303      	movs	r3, #3
 800626c:	e01c      	b.n	80062a8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b03      	cmp	r3, #3
 8006278:	d115      	bne.n	80062a6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	32ae      	adds	r2, #174	@ 0xae
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	32ae      	adds	r2, #174	@ 0xae
 8006298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	4611      	mov	r1, r2
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	32ae      	adds	r2, #174	@ 0xae
 80062c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e01c      	b.n	800630c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d115      	bne.n	800630a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	32ae      	adds	r2, #174	@ 0xae
 80062e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00b      	beq.n	800630a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	32ae      	adds	r2, #174	@ 0xae
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	4611      	mov	r1, r2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6852      	ldr	r2, [r2, #4]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	4611      	mov	r1, r2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006362:	2303      	movs	r3, #3
 8006364:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800637c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006396:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d91f      	bls.n	800640a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063d0:	e013      	b.n	80063fa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063d2:	f107 030a 	add.w	r3, r7, #10
 80063d6:	4619      	mov	r1, r3
 80063d8:	6978      	ldr	r0, [r7, #20]
 80063da:	f000 f81b 	bl	8006414 <USBD_GetNextDesc>
 80063de:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	d108      	bne.n	80063fa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	789b      	ldrb	r3, [r3, #2]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d008      	beq.n	8006408 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	885b      	ldrh	r3, [r3, #2]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	897b      	ldrh	r3, [r7, #10]
 8006402:	429a      	cmp	r2, r3
 8006404:	d8e5      	bhi.n	80063d2 <USBD_GetEpDesc+0x2e>
 8006406:	e000      	b.n	800640a <USBD_GetEpDesc+0x66>
          break;
 8006408:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800640a:	693b      	ldr	r3, [r7, #16]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	7812      	ldrb	r2, [r2, #0]
 800642a:	4413      	add	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800646a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800646e:	021b      	lsls	r3, r3, #8
 8006470:	b21a      	sxth	r2, r3
 8006472:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006476:	4313      	orrs	r3, r2
 8006478:	b21b      	sxth	r3, r3
 800647a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800647c:	89fb      	ldrh	r3, [r7, #14]
}
 800647e:	4618      	mov	r0, r3
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064a2:	2b40      	cmp	r3, #64	@ 0x40
 80064a4:	d005      	beq.n	80064b2 <USBD_StdDevReq+0x26>
 80064a6:	2b40      	cmp	r3, #64	@ 0x40
 80064a8:	d857      	bhi.n	800655a <USBD_StdDevReq+0xce>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00f      	beq.n	80064ce <USBD_StdDevReq+0x42>
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d153      	bne.n	800655a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	32ae      	adds	r2, #174	@ 0xae
 80064bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]
      break;
 80064cc:	e04a      	b.n	8006564 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	d83b      	bhi.n	800654e <USBD_StdDevReq+0xc2>
 80064d6:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <USBD_StdDevReq+0x50>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006531 	.word	0x08006531
 80064e0:	08006545 	.word	0x08006545
 80064e4:	0800654f 	.word	0x0800654f
 80064e8:	0800653b 	.word	0x0800653b
 80064ec:	0800654f 	.word	0x0800654f
 80064f0:	0800650f 	.word	0x0800650f
 80064f4:	08006505 	.word	0x08006505
 80064f8:	0800654f 	.word	0x0800654f
 80064fc:	08006527 	.word	0x08006527
 8006500:	08006519 	.word	0x08006519
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa3e 	bl	8006988 <USBD_GetDescriptor>
          break;
 800650c:	e024      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fba3 	bl	8006c5c <USBD_SetAddress>
          break;
 8006516:	e01f      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fbe2 	bl	8006ce4 <USBD_SetConfig>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
          break;
 8006524:	e018      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fc85 	bl	8006e38 <USBD_GetConfig>
          break;
 800652e:	e013      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fcb6 	bl	8006ea4 <USBD_GetStatus>
          break;
 8006538:	e00e      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fce5 	bl	8006f0c <USBD_SetFeature>
          break;
 8006542:	e009      	b.n	8006558 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fd09 	bl	8006f5e <USBD_ClrFeature>
          break;
 800654c:	e004      	b.n	8006558 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fd60 	bl	8007016 <USBD_CtlError>
          break;
 8006556:	bf00      	nop
      }
      break;
 8006558:	e004      	b.n	8006564 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fd5a 	bl	8007016 <USBD_CtlError>
      break;
 8006562:	bf00      	nop
  }

  return ret;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop

08006570 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d005      	beq.n	8006596 <USBD_StdItfReq+0x26>
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d852      	bhi.n	8006634 <USBD_StdItfReq+0xc4>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <USBD_StdItfReq+0x26>
 8006592:	2b20      	cmp	r3, #32
 8006594:	d14e      	bne.n	8006634 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d840      	bhi.n	8006626 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	889b      	ldrh	r3, [r3, #4]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d836      	bhi.n	800661c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	889b      	ldrh	r3, [r3, #4]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff feda 	bl	8006370 <USBD_CoreFindIF>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2bff      	cmp	r3, #255	@ 0xff
 80065c4:	d01d      	beq.n	8006602 <USBD_StdItfReq+0x92>
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11a      	bne.n	8006602 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065cc:	7bba      	ldrb	r2, [r7, #14]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32ae      	adds	r2, #174	@ 0xae
 80065d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00f      	beq.n	80065fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065dc:	7bba      	ldrb	r2, [r7, #14]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065e4:	7bba      	ldrb	r2, [r7, #14]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	32ae      	adds	r2, #174	@ 0xae
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065fa:	e004      	b.n	8006606 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006600:	e001      	b.n	8006606 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006602:	2303      	movs	r3, #3
 8006604:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	88db      	ldrh	r3, [r3, #6]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d110      	bne.n	8006630 <USBD_StdItfReq+0xc0>
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fddc 	bl	80071d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800661a:	e009      	b.n	8006630 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fcf9 	bl	8007016 <USBD_CtlError>
          break;
 8006624:	e004      	b.n	8006630 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fcf4 	bl	8007016 <USBD_CtlError>
          break;
 800662e:	e000      	b.n	8006632 <USBD_StdItfReq+0xc2>
          break;
 8006630:	bf00      	nop
      }
      break;
 8006632:	e004      	b.n	800663e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fced 	bl	8007016 <USBD_CtlError>
      break;
 800663c:	bf00      	nop
  }

  return ret;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	889b      	ldrh	r3, [r3, #4]
 800665a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006664:	2b40      	cmp	r3, #64	@ 0x40
 8006666:	d007      	beq.n	8006678 <USBD_StdEPReq+0x30>
 8006668:	2b40      	cmp	r3, #64	@ 0x40
 800666a:	f200 8181 	bhi.w	8006970 <USBD_StdEPReq+0x328>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d02a      	beq.n	80066c8 <USBD_StdEPReq+0x80>
 8006672:	2b20      	cmp	r3, #32
 8006674:	f040 817c 	bne.w	8006970 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fe84 	bl	800638a <USBD_CoreFindEP>
 8006682:	4603      	mov	r3, r0
 8006684:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006686:	7b7b      	ldrb	r3, [r7, #13]
 8006688:	2bff      	cmp	r3, #255	@ 0xff
 800668a:	f000 8176 	beq.w	800697a <USBD_StdEPReq+0x332>
 800668e:	7b7b      	ldrb	r3, [r7, #13]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f040 8172 	bne.w	800697a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006696:	7b7a      	ldrb	r2, [r7, #13]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800669e:	7b7a      	ldrb	r2, [r7, #13]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	32ae      	adds	r2, #174	@ 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8165 	beq.w	800697a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066b0:	7b7a      	ldrb	r2, [r7, #13]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32ae      	adds	r2, #174	@ 0xae
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066c6:	e158      	b.n	800697a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d008      	beq.n	80066e2 <USBD_StdEPReq+0x9a>
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	f300 8147 	bgt.w	8006964 <USBD_StdEPReq+0x31c>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 809b 	beq.w	8006812 <USBD_StdEPReq+0x1ca>
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d03c      	beq.n	800675a <USBD_StdEPReq+0x112>
 80066e0:	e140      	b.n	8006964 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d002      	beq.n	80066f4 <USBD_StdEPReq+0xac>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d016      	beq.n	8006720 <USBD_StdEPReq+0xd8>
 80066f2:	e02c      	b.n	800674e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <USBD_StdEPReq+0xce>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b80      	cmp	r3, #128	@ 0x80
 80066fe:	d00a      	beq.n	8006716 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 f9c1 	bl	8007a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f9bd 	bl	8007a8c <USBD_LL_StallEP>
 8006712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006714:	e020      	b.n	8006758 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc7c 	bl	8007016 <USBD_CtlError>
              break;
 800671e:	e01b      	b.n	8006758 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10e      	bne.n	8006746 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <USBD_StdEPReq+0xfe>
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b80      	cmp	r3, #128	@ 0x80
 8006732:	d008      	beq.n	8006746 <USBD_StdEPReq+0xfe>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	88db      	ldrh	r3, [r3, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 f9a3 	bl	8007a8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fd43 	bl	80071d2 <USBD_CtlSendStatus>

              break;
 800674c:	e004      	b.n	8006758 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fc60 	bl	8007016 <USBD_CtlError>
              break;
 8006756:	bf00      	nop
          }
          break;
 8006758:	e109      	b.n	800696e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d002      	beq.n	800676c <USBD_StdEPReq+0x124>
 8006766:	2b03      	cmp	r3, #3
 8006768:	d016      	beq.n	8006798 <USBD_StdEPReq+0x150>
 800676a:	e04b      	b.n	8006804 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00d      	beq.n	800678e <USBD_StdEPReq+0x146>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b80      	cmp	r3, #128	@ 0x80
 8006776:	d00a      	beq.n	800678e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f985 	bl	8007a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006782:	2180      	movs	r1, #128	@ 0x80
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f981 	bl	8007a8c <USBD_LL_StallEP>
 800678a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800678c:	e040      	b.n	8006810 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fc40 	bl	8007016 <USBD_CtlError>
              break;
 8006796:	e03b      	b.n	8006810 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	885b      	ldrh	r3, [r3, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d136      	bne.n	800680e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f98b 	bl	8007aca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fd0c 	bl	80071d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067ba:	7bbb      	ldrb	r3, [r7, #14]
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fde3 	bl	800638a <USBD_CoreFindEP>
 80067c4:	4603      	mov	r3, r0
 80067c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c8:	7b7b      	ldrb	r3, [r7, #13]
 80067ca:	2bff      	cmp	r3, #255	@ 0xff
 80067cc:	d01f      	beq.n	800680e <USBD_StdEPReq+0x1c6>
 80067ce:	7b7b      	ldrb	r3, [r7, #13]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d11c      	bne.n	800680e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067d4:	7b7a      	ldrb	r2, [r7, #13]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067dc:	7b7a      	ldrb	r2, [r7, #13]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32ae      	adds	r2, #174	@ 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d010      	beq.n	800680e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067ec:	7b7a      	ldrb	r2, [r7, #13]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32ae      	adds	r2, #174	@ 0xae
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006802:	e004      	b.n	800680e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc05 	bl	8007016 <USBD_CtlError>
              break;
 800680c:	e000      	b.n	8006810 <USBD_StdEPReq+0x1c8>
              break;
 800680e:	bf00      	nop
          }
          break;
 8006810:	e0ad      	b.n	800696e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d002      	beq.n	8006824 <USBD_StdEPReq+0x1dc>
 800681e:	2b03      	cmp	r3, #3
 8006820:	d033      	beq.n	800688a <USBD_StdEPReq+0x242>
 8006822:	e099      	b.n	8006958 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <USBD_StdEPReq+0x1f2>
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b80      	cmp	r3, #128	@ 0x80
 800682e:	d004      	beq.n	800683a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fbef 	bl	8007016 <USBD_CtlError>
                break;
 8006838:	e093      	b.n	8006962 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800683a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800683e:	2b00      	cmp	r3, #0
 8006840:	da0b      	bge.n	800685a <USBD_StdEPReq+0x212>
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	3310      	adds	r3, #16
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	e00b      	b.n	8006872 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	4413      	add	r3, r2
 8006870:	3304      	adds	r3, #4
 8006872:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	330e      	adds	r3, #14
 800687e:	2202      	movs	r2, #2
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fc44 	bl	8007110 <USBD_CtlSendData>
              break;
 8006888:	e06b      	b.n	8006962 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800688a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800688e:	2b00      	cmp	r3, #0
 8006890:	da11      	bge.n	80068b6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	f003 020f 	and.w	r2, r3, #15
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3323      	adds	r3, #35	@ 0x23
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d117      	bne.n	80068dc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fbb1 	bl	8007016 <USBD_CtlError>
                  break;
 80068b4:	e055      	b.n	8006962 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	f003 020f 	and.w	r2, r3, #15
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fb9e 	bl	8007016 <USBD_CtlError>
                  break;
 80068da:	e042      	b.n	8006962 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da0b      	bge.n	80068fc <USBD_StdEPReq+0x2b4>
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	3310      	adds	r3, #16
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	3304      	adds	r3, #4
 80068fa:	e00b      	b.n	8006914 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068fc:	7bbb      	ldrb	r3, [r7, #14]
 80068fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	4413      	add	r3, r2
 8006912:	3304      	adds	r3, #4
 8006914:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <USBD_StdEPReq+0x2da>
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b80      	cmp	r3, #128	@ 0x80
 8006920:	d103      	bne.n	800692a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	739a      	strb	r2, [r3, #14]
 8006928:	e00e      	b.n	8006948 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 f8ea 	bl	8007b08 <USBD_LL_IsStallEP>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2201      	movs	r2, #1
 800693e:	739a      	strb	r2, [r3, #14]
 8006940:	e002      	b.n	8006948 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	330e      	adds	r3, #14
 800694c:	2202      	movs	r2, #2
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fbdd 	bl	8007110 <USBD_CtlSendData>
              break;
 8006956:	e004      	b.n	8006962 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb5b 	bl	8007016 <USBD_CtlError>
              break;
 8006960:	bf00      	nop
          }
          break;
 8006962:	e004      	b.n	800696e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fb55 	bl	8007016 <USBD_CtlError>
          break;
 800696c:	bf00      	nop
      }
      break;
 800696e:	e005      	b.n	800697c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fb4f 	bl	8007016 <USBD_CtlError>
      break;
 8006978:	e000      	b.n	800697c <USBD_StdEPReq+0x334>
      break;
 800697a:	bf00      	nop
  }

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	0a1b      	lsrs	r3, r3, #8
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	2b06      	cmp	r3, #6
 80069aa:	f200 8128 	bhi.w	8006bfe <USBD_GetDescriptor+0x276>
 80069ae:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <USBD_GetDescriptor+0x2c>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069d1 	.word	0x080069d1
 80069b8:	080069e9 	.word	0x080069e9
 80069bc:	08006a29 	.word	0x08006a29
 80069c0:	08006bff 	.word	0x08006bff
 80069c4:	08006bff 	.word	0x08006bff
 80069c8:	08006b9f 	.word	0x08006b9f
 80069cc:	08006bcb 	.word	0x08006bcb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
      break;
 80069e6:	e112      	b.n	8006c0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7c1b      	ldrb	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10d      	bne.n	8006a0c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	f107 0208 	add.w	r2, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	2202      	movs	r2, #2
 8006a08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a0a:	e100      	b.n	8006c0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	f107 0208 	add.w	r2, r7, #8
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4798      	blx	r3
 8006a1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	2202      	movs	r2, #2
 8006a24:	701a      	strb	r2, [r3, #0]
      break;
 8006a26:	e0f2      	b.n	8006c0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	885b      	ldrh	r3, [r3, #2]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	f200 80ac 	bhi.w	8006b8c <USBD_GetDescriptor+0x204>
 8006a34:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <USBD_GetDescriptor+0xb4>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a55 	.word	0x08006a55
 8006a40:	08006a89 	.word	0x08006a89
 8006a44:	08006abd 	.word	0x08006abd
 8006a48:	08006af1 	.word	0x08006af1
 8006a4c:	08006b25 	.word	0x08006b25
 8006a50:	08006b59 	.word	0x08006b59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	7c12      	ldrb	r2, [r2, #16]
 8006a6c:	f107 0108 	add.w	r1, r7, #8
 8006a70:	4610      	mov	r0, r2
 8006a72:	4798      	blx	r3
 8006a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a76:	e091      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 facb 	bl	8007016 <USBD_CtlError>
            err++;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	3301      	adds	r3, #1
 8006a84:	72fb      	strb	r3, [r7, #11]
          break;
 8006a86:	e089      	b.n	8006b9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	7c12      	ldrb	r2, [r2, #16]
 8006aa0:	f107 0108 	add.w	r1, r7, #8
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
 8006aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aaa:	e077      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fab1 	bl	8007016 <USBD_CtlError>
            err++;
 8006ab4:	7afb      	ldrb	r3, [r7, #11]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aba:	e06f      	b.n	8006b9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	7c12      	ldrb	r2, [r2, #16]
 8006ad4:	f107 0108 	add.w	r1, r7, #8
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
 8006adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ade:	e05d      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa97 	bl	8007016 <USBD_CtlError>
            err++;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	3301      	adds	r3, #1
 8006aec:	72fb      	strb	r3, [r7, #11]
          break;
 8006aee:	e055      	b.n	8006b9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	7c12      	ldrb	r2, [r2, #16]
 8006b08:	f107 0108 	add.w	r1, r7, #8
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4798      	blx	r3
 8006b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b12:	e043      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa7d 	bl	8007016 <USBD_CtlError>
            err++;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	72fb      	strb	r3, [r7, #11]
          break;
 8006b22:	e03b      	b.n	8006b9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	7c12      	ldrb	r2, [r2, #16]
 8006b3c:	f107 0108 	add.w	r1, r7, #8
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
 8006b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b46:	e029      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa63 	bl	8007016 <USBD_CtlError>
            err++;
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	3301      	adds	r3, #1
 8006b54:	72fb      	strb	r3, [r7, #11]
          break;
 8006b56:	e021      	b.n	8006b9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	7c12      	ldrb	r2, [r2, #16]
 8006b70:	f107 0108 	add.w	r1, r7, #8
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7a:	e00f      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa49 	bl	8007016 <USBD_CtlError>
            err++;
 8006b84:	7afb      	ldrb	r3, [r7, #11]
 8006b86:	3301      	adds	r3, #1
 8006b88:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8a:	e007      	b.n	8006b9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa41 	bl	8007016 <USBD_CtlError>
          err++;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	3301      	adds	r3, #1
 8006b98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b9a:	bf00      	nop
      }
      break;
 8006b9c:	e037      	b.n	8006c0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7c1b      	ldrb	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bae:	f107 0208 	add.w	r2, r7, #8
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	4798      	blx	r3
 8006bb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bb8:	e029      	b.n	8006c0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa2a 	bl	8007016 <USBD_CtlError>
        err++;
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006bc8:	e021      	b.n	8006c0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7c1b      	ldrb	r3, [r3, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bda:	f107 0208 	add.w	r2, r7, #8
 8006bde:	4610      	mov	r0, r2
 8006be0:	4798      	blx	r3
 8006be2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	2207      	movs	r2, #7
 8006bea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bec:	e00f      	b.n	8006c0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fa10 	bl	8007016 <USBD_CtlError>
        err++;
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	72fb      	strb	r3, [r7, #11]
      break;
 8006bfc:	e007      	b.n	8006c0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fa08 	bl	8007016 <USBD_CtlError>
      err++;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c0c:	bf00      	nop
  }

  if (err != 0U)
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11e      	bne.n	8006c52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	88db      	ldrh	r3, [r3, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d016      	beq.n	8006c4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c1c:	893b      	ldrh	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00e      	beq.n	8006c40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	88da      	ldrh	r2, [r3, #6]
 8006c26:	893b      	ldrh	r3, [r7, #8]
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	bf28      	it	cs
 8006c2c:	4613      	movcs	r3, r2
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c32:	893b      	ldrh	r3, [r7, #8]
 8006c34:	461a      	mov	r2, r3
 8006c36:	68f9      	ldr	r1, [r7, #12]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa69 	bl	8007110 <USBD_CtlSendData>
 8006c3e:	e009      	b.n	8006c54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9e7 	bl	8007016 <USBD_CtlError>
 8006c48:	e004      	b.n	8006c54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fac1 	bl	80071d2 <USBD_CtlSendStatus>
 8006c50:	e000      	b.n	8006c54 <USBD_GetDescriptor+0x2cc>
    return;
 8006c52:	bf00      	nop
  }
}
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop

08006c5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	889b      	ldrh	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d131      	bne.n	8006cd2 <USBD_SetAddress+0x76>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	88db      	ldrh	r3, [r3, #6]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d12d      	bne.n	8006cd2 <USBD_SetAddress+0x76>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	885b      	ldrh	r3, [r3, #2]
 8006c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c7c:	d829      	bhi.n	8006cd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d104      	bne.n	8006ca0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9bc 	bl	8007016 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9e:	e01d      	b.n	8006cdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7bfa      	ldrb	r2, [r7, #15]
 8006ca4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ff57 	bl	8007b60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa8d 	bl	80071d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc6:	e009      	b.n	8006cdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd0:	e004      	b.n	8006cdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f99e 	bl	8007016 <USBD_CtlError>
  }
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	885b      	ldrh	r3, [r3, #2]
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006cfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d905      	bls.n	8006d10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f985 	bl	8007016 <USBD_CtlError>
    return USBD_FAIL;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e08c      	b.n	8006e2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d002      	beq.n	8006d22 <USBD_SetConfig+0x3e>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d029      	beq.n	8006d74 <USBD_SetConfig+0x90>
 8006d20:	e075      	b.n	8006e0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d22:	4b44      	ldr	r3, [pc, #272]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d020      	beq.n	8006d6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d2a:	4b42      	ldr	r3, [pc, #264]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d34:	4b3f      	ldr	r3, [pc, #252]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fe ffcd 	bl	8005cda <USBD_SetClassConfig>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f962 	bl	8007016 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d5a:	e065      	b.n	8006e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fa38 	bl	80071d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2203      	movs	r2, #3
 8006d66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d6a:	e05d      	b.n	8006e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa30 	bl	80071d2 <USBD_CtlSendStatus>
      break;
 8006d72:	e059      	b.n	8006e28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d74:	4b2f      	ldr	r3, [pc, #188]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d112      	bne.n	8006da2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d84:	4b2b      	ldr	r3, [pc, #172]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d8e:	4b29      	ldr	r3, [pc, #164]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7fe ffbc 	bl	8005d12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa19 	bl	80071d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006da0:	e042      	b.n	8006e28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006da2:	4b24      	ldr	r3, [pc, #144]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d02a      	beq.n	8006e06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fe ffaa 	bl	8005d12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fe ff83 	bl	8005cda <USBD_SetClassConfig>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00f      	beq.n	8006dfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f918 	bl	8007016 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fe ff8f 	bl	8005d12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006dfc:	e014      	b.n	8006e28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9e7 	bl	80071d2 <USBD_CtlSendStatus>
      break;
 8006e04:	e010      	b.n	8006e28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f9e3 	bl	80071d2 <USBD_CtlSendStatus>
      break;
 8006e0c:	e00c      	b.n	8006e28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f900 	bl	8007016 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e16:	4b07      	ldr	r3, [pc, #28]	@ (8006e34 <USBD_SetConfig+0x150>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fe ff78 	bl	8005d12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e22:	2303      	movs	r3, #3
 8006e24:	73fb      	strb	r3, [r7, #15]
      break;
 8006e26:	bf00      	nop
  }

  return ret;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200003c4 	.word	0x200003c4

08006e38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	88db      	ldrh	r3, [r3, #6]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d004      	beq.n	8006e54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8e2 	bl	8007016 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e52:	e023      	b.n	8006e9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	dc02      	bgt.n	8006e66 <USBD_GetConfig+0x2e>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dc03      	bgt.n	8006e6c <USBD_GetConfig+0x34>
 8006e64:	e015      	b.n	8006e92 <USBD_GetConfig+0x5a>
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d00b      	beq.n	8006e82 <USBD_GetConfig+0x4a>
 8006e6a:	e012      	b.n	8006e92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3308      	adds	r3, #8
 8006e76:	2201      	movs	r2, #1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f948 	bl	8007110 <USBD_CtlSendData>
        break;
 8006e80:	e00c      	b.n	8006e9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3304      	adds	r3, #4
 8006e86:	2201      	movs	r2, #1
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f940 	bl	8007110 <USBD_CtlSendData>
        break;
 8006e90:	e004      	b.n	8006e9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f8be 	bl	8007016 <USBD_CtlError>
        break;
 8006e9a:	bf00      	nop
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d81e      	bhi.n	8006efa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	88db      	ldrh	r3, [r3, #6]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d004      	beq.n	8006ece <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f8a5 	bl	8007016 <USBD_CtlError>
        break;
 8006ecc:	e01a      	b.n	8006f04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f043 0202 	orr.w	r2, r3, #2
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	330c      	adds	r3, #12
 8006eee:	2202      	movs	r2, #2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f90c 	bl	8007110 <USBD_CtlSendData>
      break;
 8006ef8:	e004      	b.n	8006f04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f88a 	bl	8007016 <USBD_CtlError>
      break;
 8006f02:	bf00      	nop
  }
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d107      	bne.n	8006f2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f953 	bl	80071d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f2c:	e013      	b.n	8006f56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	885b      	ldrh	r3, [r3, #2]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d10b      	bne.n	8006f4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	889b      	ldrh	r3, [r3, #4]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f943 	bl	80071d2 <USBD_CtlSendStatus>
}
 8006f4c:	e003      	b.n	8006f56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f860 	bl	8007016 <USBD_CtlError>
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d80b      	bhi.n	8006f8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d10c      	bne.n	8006f98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f923 	bl	80071d2 <USBD_CtlSendStatus>
      }
      break;
 8006f8c:	e004      	b.n	8006f98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f840 	bl	8007016 <USBD_CtlError>
      break;
 8006f96:	e000      	b.n	8006f9a <USBD_ClrFeature+0x3c>
      break;
 8006f98:	bf00      	nop
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	781a      	ldrb	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fa3d 	bl	800644c <SWAPBYTE>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fa30 	bl	800644c <SWAPBYTE>
 8006fec:	4603      	mov	r3, r0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff fa23 	bl	800644c <SWAPBYTE>
 8007006:	4603      	mov	r3, r0
 8007008:	461a      	mov	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	80da      	strh	r2, [r3, #6]
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fd32 	bl	8007a8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007028:	2100      	movs	r1, #0
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fd2e 	bl	8007a8c <USBD_LL_StallEP>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d042      	beq.n	80070d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007052:	6938      	ldr	r0, [r7, #16]
 8007054:	f000 f842 	bl	80070dc <USBD_GetLen>
 8007058:	4603      	mov	r3, r0
 800705a:	3301      	adds	r3, #1
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007062:	d808      	bhi.n	8007076 <USBD_GetString+0x3e>
 8007064:	6938      	ldr	r0, [r7, #16]
 8007066:	f000 f839 	bl	80070dc <USBD_GetLen>
 800706a:	4603      	mov	r3, r0
 800706c:	3301      	adds	r3, #1
 800706e:	b29b      	uxth	r3, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	e001      	b.n	800707a <USBD_GetString+0x42>
 8007076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4413      	add	r3, r2
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7812      	ldrb	r2, [r2, #0]
 8007088:	701a      	strb	r2, [r3, #0]
  idx++;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4413      	add	r3, r2
 8007096:	2203      	movs	r2, #3
 8007098:	701a      	strb	r2, [r3, #0]
  idx++;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070a0:	e013      	b.n	80070ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	4413      	add	r3, r2
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
    idx++;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	3301      	adds	r3, #1
 80070b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	4413      	add	r3, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	3301      	adds	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e7      	bne.n	80070a2 <USBD_GetString+0x6a>
 80070d2:	e000      	b.n	80070d6 <USBD_GetString+0x9e>
    return;
 80070d4:	bf00      	nop
  }
}
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070ec:	e005      	b.n	80070fa <USBD_GetLen+0x1e>
  {
    len++;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	3301      	adds	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f5      	bne.n	80070ee <USBD_GetLen+0x12>
  }

  return len;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2202      	movs	r2, #2
 8007120:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	2100      	movs	r1, #0
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fd2e 	bl	8007b9e <USBD_LL_Transmit>

  return USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fd1d 	bl	8007b9e <USBD_LL_Transmit>

  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2203      	movs	r2, #3
 800717e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	2100      	movs	r1, #0
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fd1d 	bl	8007be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	2100      	movs	r1, #0
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fd0c 	bl	8007be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2204      	movs	r2, #4
 80071de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071e2:	2300      	movs	r3, #0
 80071e4:	2200      	movs	r2, #0
 80071e6:	2100      	movs	r1, #0
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fcd8 	bl	8007b9e <USBD_LL_Transmit>

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2205      	movs	r2, #5
 8007204:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007208:	2300      	movs	r3, #0
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fce6 	bl	8007be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007224:	2200      	movs	r2, #0
 8007226:	4912      	ldr	r1, [pc, #72]	@ (8007270 <MX_USB_DEVICE_Init+0x50>)
 8007228:	4812      	ldr	r0, [pc, #72]	@ (8007274 <MX_USB_DEVICE_Init+0x54>)
 800722a:	f7fe fcd9 	bl	8005be0 <USBD_Init>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007234:	f7f9 fd24 	bl	8000c80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007238:	490f      	ldr	r1, [pc, #60]	@ (8007278 <MX_USB_DEVICE_Init+0x58>)
 800723a:	480e      	ldr	r0, [pc, #56]	@ (8007274 <MX_USB_DEVICE_Init+0x54>)
 800723c:	f7fe fd00 	bl	8005c40 <USBD_RegisterClass>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007246:	f7f9 fd1b 	bl	8000c80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800724a:	490c      	ldr	r1, [pc, #48]	@ (800727c <MX_USB_DEVICE_Init+0x5c>)
 800724c:	4809      	ldr	r0, [pc, #36]	@ (8007274 <MX_USB_DEVICE_Init+0x54>)
 800724e:	f7fe fc37 	bl	8005ac0 <USBD_CDC_RegisterInterface>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007258:	f7f9 fd12 	bl	8000c80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800725c:	4805      	ldr	r0, [pc, #20]	@ (8007274 <MX_USB_DEVICE_Init+0x54>)
 800725e:	f7fe fd25 	bl	8005cac <USBD_Start>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007268:	f7f9 fd0a 	bl	8000c80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800726c:	bf00      	nop
 800726e:	bd80      	pop	{r7, pc}
 8007270:	200000b4 	.word	0x200000b4
 8007274:	200003c8 	.word	0x200003c8
 8007278:	20000018 	.word	0x20000018
 800727c:	200000a0 	.word	0x200000a0

08007280 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007284:	2200      	movs	r2, #0
 8007286:	4905      	ldr	r1, [pc, #20]	@ (800729c <CDC_Init_FS+0x1c>)
 8007288:	4805      	ldr	r0, [pc, #20]	@ (80072a0 <CDC_Init_FS+0x20>)
 800728a:	f7fe fc33 	bl	8005af4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800728e:	4905      	ldr	r1, [pc, #20]	@ (80072a4 <CDC_Init_FS+0x24>)
 8007290:	4803      	ldr	r0, [pc, #12]	@ (80072a0 <CDC_Init_FS+0x20>)
 8007292:	f7fe fc51 	bl	8005b38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007296:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007298:	4618      	mov	r0, r3
 800729a:	bd80      	pop	{r7, pc}
 800729c:	200008a4 	.word	0x200008a4
 80072a0:	200003c8 	.word	0x200003c8
 80072a4:	200006a4 	.word	0x200006a4

080072a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	71fb      	strb	r3, [r7, #7]
 80072c4:	4613      	mov	r3, r2
 80072c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	2b23      	cmp	r3, #35	@ 0x23
 80072cc:	f200 8098 	bhi.w	8007400 <CDC_Control_FS+0x148>
 80072d0:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <CDC_Control_FS+0x20>)
 80072d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d6:	bf00      	nop
 80072d8:	08007401 	.word	0x08007401
 80072dc:	08007401 	.word	0x08007401
 80072e0:	08007401 	.word	0x08007401
 80072e4:	08007401 	.word	0x08007401
 80072e8:	08007401 	.word	0x08007401
 80072ec:	08007401 	.word	0x08007401
 80072f0:	08007401 	.word	0x08007401
 80072f4:	08007401 	.word	0x08007401
 80072f8:	08007401 	.word	0x08007401
 80072fc:	08007401 	.word	0x08007401
 8007300:	08007401 	.word	0x08007401
 8007304:	08007401 	.word	0x08007401
 8007308:	08007401 	.word	0x08007401
 800730c:	08007401 	.word	0x08007401
 8007310:	08007401 	.word	0x08007401
 8007314:	08007401 	.word	0x08007401
 8007318:	08007401 	.word	0x08007401
 800731c:	08007401 	.word	0x08007401
 8007320:	08007401 	.word	0x08007401
 8007324:	08007401 	.word	0x08007401
 8007328:	08007401 	.word	0x08007401
 800732c:	08007401 	.word	0x08007401
 8007330:	08007401 	.word	0x08007401
 8007334:	08007401 	.word	0x08007401
 8007338:	08007401 	.word	0x08007401
 800733c:	08007401 	.word	0x08007401
 8007340:	08007401 	.word	0x08007401
 8007344:	08007401 	.word	0x08007401
 8007348:	08007401 	.word	0x08007401
 800734c:	08007401 	.word	0x08007401
 8007350:	08007401 	.word	0x08007401
 8007354:	08007401 	.word	0x08007401
 8007358:	08007369 	.word	0x08007369
 800735c:	080073ad 	.word	0x080073ad
 8007360:	08007401 	.word	0x08007401
 8007364:	08007401 	.word	0x08007401
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	3301      	adds	r3, #1
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	021b      	lsls	r3, r3, #8
 8007376:	431a      	orrs	r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	3302      	adds	r3, #2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	041b      	lsls	r3, r3, #16
 8007380:	431a      	orrs	r2, r3
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	3303      	adds	r3, #3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	4313      	orrs	r3, r2
 800738c:	461a      	mov	r2, r3
 800738e:	4b20      	ldr	r3, [pc, #128]	@ (8007410 <CDC_Control_FS+0x158>)
 8007390:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	791a      	ldrb	r2, [r3, #4]
 8007396:	4b1e      	ldr	r3, [pc, #120]	@ (8007410 <CDC_Control_FS+0x158>)
 8007398:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	795a      	ldrb	r2, [r3, #5]
 800739e:	4b1c      	ldr	r3, [pc, #112]	@ (8007410 <CDC_Control_FS+0x158>)
 80073a0:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	799a      	ldrb	r2, [r3, #6]
 80073a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007410 <CDC_Control_FS+0x158>)
 80073a8:	719a      	strb	r2, [r3, #6]
     break;
 80073aa:	e02a      	b.n	8007402 <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80073ac:	4b18      	ldr	r3, [pc, #96]	@ (8007410 <CDC_Control_FS+0x158>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80073b6:	4b16      	ldr	r3, [pc, #88]	@ (8007410 <CDC_Control_FS+0x158>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	0a1a      	lsrs	r2, r3, #8
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80073c4:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <CDC_Control_FS+0x158>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	0c1a      	lsrs	r2, r3, #16
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	3302      	adds	r3, #2
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <CDC_Control_FS+0x158>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	0e1a      	lsrs	r2, r3, #24
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	3303      	adds	r3, #3
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007410 <CDC_Control_FS+0x158>)
 80073e6:	7912      	ldrb	r2, [r2, #4]
 80073e8:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	3305      	adds	r3, #5
 80073ee:	4a08      	ldr	r2, [pc, #32]	@ (8007410 <CDC_Control_FS+0x158>)
 80073f0:	7952      	ldrb	r2, [r2, #5]
 80073f2:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	3306      	adds	r3, #6
 80073f8:	4a05      	ldr	r2, [pc, #20]	@ (8007410 <CDC_Control_FS+0x158>)
 80073fa:	7992      	ldrb	r2, [r2, #6]
 80073fc:	701a      	strb	r2, [r3, #0]
     break;
 80073fe:	e000      	b.n	8007402 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007400:	bf00      	nop
  }

  return (USBD_OK);
 8007402:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20000098 	.word	0x20000098

08007414 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800741e:	4b0c      	ldr	r3, [pc, #48]	@ (8007450 <CDC_Receive_FS+0x3c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 8007426:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <CDC_Receive_FS+0x3c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	b292      	uxth	r2, r2
 8007430:	4611      	mov	r1, r2
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4806      	ldr	r0, [pc, #24]	@ (8007454 <CDC_Receive_FS+0x40>)
 800743a:	f7fe fb7d 	bl	8005b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800743e:	4805      	ldr	r0, [pc, #20]	@ (8007454 <CDC_Receive_FS+0x40>)
 8007440:	f7fe fb98 	bl	8005b74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007444:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000aa4 	.word	0x20000aa4
 8007454:	200003c8 	.word	0x200003c8

08007458 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800746a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8007484:	4a04      	ldr	r2, [pc, #16]	@ (8007498 <CDC_AttachRxData+0x1c>)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6013      	str	r3, [r2, #0]
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000aa4 	.word	0x20000aa4

0800749c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	6039      	str	r1, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2212      	movs	r2, #18
 80074ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074ae:	4b03      	ldr	r3, [pc, #12]	@ (80074bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	200000d0 	.word	0x200000d0

080074c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2204      	movs	r2, #4
 80074d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074d2:	4b03      	ldr	r3, [pc, #12]	@ (80074e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	200000e4 	.word	0x200000e4

080074e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074f0:	79fb      	ldrb	r3, [r7, #7]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d105      	bne.n	8007502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4907      	ldr	r1, [pc, #28]	@ (8007518 <USBD_FS_ProductStrDescriptor+0x34>)
 80074fa:	4808      	ldr	r0, [pc, #32]	@ (800751c <USBD_FS_ProductStrDescriptor+0x38>)
 80074fc:	f7ff fd9c 	bl	8007038 <USBD_GetString>
 8007500:	e004      	b.n	800750c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	4904      	ldr	r1, [pc, #16]	@ (8007518 <USBD_FS_ProductStrDescriptor+0x34>)
 8007506:	4805      	ldr	r0, [pc, #20]	@ (800751c <USBD_FS_ProductStrDescriptor+0x38>)
 8007508:	f7ff fd96 	bl	8007038 <USBD_GetString>
  }
  return USBD_StrDesc;
 800750c:	4b02      	ldr	r3, [pc, #8]	@ (8007518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000aa8 	.word	0x20000aa8
 800751c:	08007d40 	.word	0x08007d40

08007520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	4904      	ldr	r1, [pc, #16]	@ (8007540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007530:	4804      	ldr	r0, [pc, #16]	@ (8007544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007532:	f7ff fd81 	bl	8007038 <USBD_GetString>
  return USBD_StrDesc;
 8007536:	4b02      	ldr	r3, [pc, #8]	@ (8007540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	20000aa8 	.word	0x20000aa8
 8007544:	08007d58 	.word	0x08007d58

08007548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	221a      	movs	r2, #26
 8007558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800755a:	f000 f843 	bl	80075e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800755e:	4b02      	ldr	r3, [pc, #8]	@ (8007568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200000e8 	.word	0x200000e8

0800756c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4907      	ldr	r1, [pc, #28]	@ (80075a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007582:	4808      	ldr	r0, [pc, #32]	@ (80075a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007584:	f7ff fd58 	bl	8007038 <USBD_GetString>
 8007588:	e004      	b.n	8007594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4904      	ldr	r1, [pc, #16]	@ (80075a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800758e:	4805      	ldr	r0, [pc, #20]	@ (80075a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007590:	f7ff fd52 	bl	8007038 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000aa8 	.word	0x20000aa8
 80075a4:	08007d6c 	.word	0x08007d6c

080075a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	4907      	ldr	r1, [pc, #28]	@ (80075dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075be:	4808      	ldr	r0, [pc, #32]	@ (80075e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075c0:	f7ff fd3a 	bl	8007038 <USBD_GetString>
 80075c4:	e004      	b.n	80075d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	4904      	ldr	r1, [pc, #16]	@ (80075dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075ca:	4805      	ldr	r0, [pc, #20]	@ (80075e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075cc:	f7ff fd34 	bl	8007038 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075d0:	4b02      	ldr	r3, [pc, #8]	@ (80075dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000aa8 	.word	0x20000aa8
 80075e0:	08007d78 	.word	0x08007d78

080075e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007628 <Get_SerialNum+0x44>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075f0:	4b0e      	ldr	r3, [pc, #56]	@ (800762c <Get_SerialNum+0x48>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007630 <Get_SerialNum+0x4c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800760a:	2208      	movs	r2, #8
 800760c:	4909      	ldr	r1, [pc, #36]	@ (8007634 <Get_SerialNum+0x50>)
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f814 	bl	800763c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007614:	2204      	movs	r2, #4
 8007616:	4908      	ldr	r1, [pc, #32]	@ (8007638 <Get_SerialNum+0x54>)
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	f000 f80f 	bl	800763c <IntToUnicode>
  }
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	1fff7a10 	.word	0x1fff7a10
 800762c:	1fff7a14 	.word	0x1fff7a14
 8007630:	1fff7a18 	.word	0x1fff7a18
 8007634:	200000ea 	.word	0x200000ea
 8007638:	200000fa 	.word	0x200000fa

0800763c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800764e:	2300      	movs	r3, #0
 8007650:	75fb      	strb	r3, [r7, #23]
 8007652:	e027      	b.n	80076a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	0f1b      	lsrs	r3, r3, #28
 8007658:	2b09      	cmp	r3, #9
 800765a:	d80b      	bhi.n	8007674 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	0f1b      	lsrs	r3, r3, #28
 8007660:	b2da      	uxtb	r2, r3
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	4619      	mov	r1, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	440b      	add	r3, r1
 800766c:	3230      	adds	r2, #48	@ 0x30
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	e00a      	b.n	800768a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	0f1b      	lsrs	r3, r3, #28
 8007678:	b2da      	uxtb	r2, r3
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	4619      	mov	r1, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	440b      	add	r3, r1
 8007684:	3237      	adds	r2, #55	@ 0x37
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	3301      	adds	r3, #1
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	4413      	add	r3, r2
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	3301      	adds	r3, #1
 80076a2:	75fb      	strb	r3, [r7, #23]
 80076a4:	7dfa      	ldrb	r2, [r7, #23]
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d3d3      	bcc.n	8007654 <IntToUnicode+0x18>
  }
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	@ 0x28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c4:	f107 0314 	add.w	r3, r7, #20
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	60da      	str	r2, [r3, #12]
 80076d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076dc:	d13a      	bne.n	8007754 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	4b1e      	ldr	r3, [pc, #120]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e6:	4a1d      	ldr	r2, [pc, #116]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 80076e8:	f043 0301 	orr.w	r3, r3, #1
 80076ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80076ee:	4b1b      	ldr	r3, [pc, #108]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	613b      	str	r3, [r7, #16]
 80076f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80076fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80076fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007700:	2302      	movs	r3, #2
 8007702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007708:	2303      	movs	r3, #3
 800770a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800770c:	230a      	movs	r3, #10
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	4619      	mov	r1, r3
 8007716:	4812      	ldr	r0, [pc, #72]	@ (8007760 <HAL_PCD_MspInit+0xa4>)
 8007718:	f7f9 ffe6 	bl	80016e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800771c:	4b0f      	ldr	r3, [pc, #60]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 800771e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007720:	4a0e      	ldr	r2, [pc, #56]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 8007722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007726:	6353      	str	r3, [r2, #52]	@ 0x34
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 800772e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007730:	4a0a      	ldr	r2, [pc, #40]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 8007732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007736:	6453      	str	r3, [r2, #68]	@ 0x44
 8007738:	4b08      	ldr	r3, [pc, #32]	@ (800775c <HAL_PCD_MspInit+0xa0>)
 800773a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007744:	2200      	movs	r2, #0
 8007746:	2100      	movs	r1, #0
 8007748:	2043      	movs	r0, #67	@ 0x43
 800774a:	f7f9 ff96 	bl	800167a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800774e:	2043      	movs	r0, #67	@ 0x43
 8007750:	f7f9 ffaf 	bl	80016b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007754:	bf00      	nop
 8007756:	3728      	adds	r7, #40	@ 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40023800 	.word	0x40023800
 8007760:	40020000 	.word	0x40020000

08007764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7fe fae3 	bl	8005d46 <USBD_LL_SetupStage>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7fe fb1d 	bl	8005df0 <USBD_LL_DataOutStage>
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	3320      	adds	r3, #32
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	4619      	mov	r1, r3
 80077e6:	f7fe fbbf 	bl	8005f68 <USBD_LL_DataInStage>
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fd03 	bl	800620c <USBD_LL_SOF>
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007816:	2301      	movs	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	79db      	ldrb	r3, [r3, #7]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d001      	beq.n	8007826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007822:	f7f9 fa2d 	bl	8000c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fca7 	bl	8006184 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fc4e 	bl	80060de <USBD_LL_Reset>
}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fca2 	bl	80061a4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	6812      	ldr	r2, [r2, #0]
 800786e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7adb      	ldrb	r3, [r3, #11]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007880:	4b04      	ldr	r3, [pc, #16]	@ (8007894 <HAL_PCD_SuspendCallback+0x48>)
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	4a03      	ldr	r2, [pc, #12]	@ (8007894 <HAL_PCD_SuspendCallback+0x48>)
 8007886:	f043 0306 	orr.w	r3, r3, #6
 800788a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000ed00 	.word	0xe000ed00

08007898 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fc98 	bl	80061dc <USBD_LL_Resume>
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	4611      	mov	r1, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fcf0 	bl	80062b0 <USBD_LL_IsoOUTIncomplete>
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fcac 	bl	800624c <USBD_LL_IsoINIncomplete>
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800790a:	4618      	mov	r0, r3
 800790c:	f7fe fd02 	bl	8006314 <USBD_LL_DevConnected>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fcff 	bl	800632a <USBD_LL_DevDisconnected>
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d13c      	bne.n	80079be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007944:	4a20      	ldr	r2, [pc, #128]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a1e      	ldr	r2, [pc, #120]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007950:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007954:	4b1c      	ldr	r3, [pc, #112]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007956:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800795a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800795c:	4b1a      	ldr	r3, [pc, #104]	@ (80079c8 <USBD_LL_Init+0x94>)
 800795e:	2204      	movs	r2, #4
 8007960:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007962:	4b19      	ldr	r3, [pc, #100]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007964:	2202      	movs	r2, #2
 8007966:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007968:	4b17      	ldr	r3, [pc, #92]	@ (80079c8 <USBD_LL_Init+0x94>)
 800796a:	2200      	movs	r2, #0
 800796c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800796e:	4b16      	ldr	r3, [pc, #88]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007970:	2202      	movs	r2, #2
 8007972:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007974:	4b14      	ldr	r3, [pc, #80]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007976:	2200      	movs	r2, #0
 8007978:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800797a:	4b13      	ldr	r3, [pc, #76]	@ (80079c8 <USBD_LL_Init+0x94>)
 800797c:	2200      	movs	r2, #0
 800797e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007980:	4b11      	ldr	r3, [pc, #68]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007982:	2200      	movs	r2, #0
 8007984:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007986:	4b10      	ldr	r3, [pc, #64]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007988:	2200      	movs	r2, #0
 800798a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800798c:	4b0e      	ldr	r3, [pc, #56]	@ (80079c8 <USBD_LL_Init+0x94>)
 800798e:	2200      	movs	r2, #0
 8007990:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007992:	480d      	ldr	r0, [pc, #52]	@ (80079c8 <USBD_LL_Init+0x94>)
 8007994:	f7fa f85f 	bl	8001a56 <HAL_PCD_Init>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800799e:	f7f9 f96f 	bl	8000c80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80079a2:	2180      	movs	r1, #128	@ 0x80
 80079a4:	4808      	ldr	r0, [pc, #32]	@ (80079c8 <USBD_LL_Init+0x94>)
 80079a6:	f7fb fa8c 	bl	8002ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80079aa:	2240      	movs	r2, #64	@ 0x40
 80079ac:	2100      	movs	r1, #0
 80079ae:	4806      	ldr	r0, [pc, #24]	@ (80079c8 <USBD_LL_Init+0x94>)
 80079b0:	f7fb fa40 	bl	8002e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80079b4:	2280      	movs	r2, #128	@ 0x80
 80079b6:	2101      	movs	r1, #1
 80079b8:	4803      	ldr	r0, [pc, #12]	@ (80079c8 <USBD_LL_Init+0x94>)
 80079ba:	f7fb fa3b 	bl	8002e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000ca8 	.word	0x20000ca8

080079cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fa f946 	bl	8001c74 <HAL_PCD_Start>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f942 	bl	8007c78 <USBD_Get_USB_Status>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	461a      	mov	r2, r3
 8007a10:	4603      	mov	r3, r0
 8007a12:	70fb      	strb	r3, [r7, #3]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70bb      	strb	r3, [r7, #2]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007a2a:	78bb      	ldrb	r3, [r7, #2]
 8007a2c:	883a      	ldrh	r2, [r7, #0]
 8007a2e:	78f9      	ldrb	r1, [r7, #3]
 8007a30:	f7fa fe1a 	bl	8002668 <HAL_PCD_EP_Open>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f91c 	bl	8007c78 <USBD_Get_USB_Status>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a68:	78fa      	ldrb	r2, [r7, #3]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fa fe65 	bl	800273c <HAL_PCD_EP_Close>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 f8fd 	bl	8007c78 <USBD_Get_USB_Status>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fa ff1d 	bl	80028ea <HAL_PCD_EP_SetStall>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f8de 	bl	8007c78 <USBD_Get_USB_Status>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fa ff61 	bl	80029b0 <HAL_PCD_EP_ClrStall>
 8007aee:	4603      	mov	r3, r0
 8007af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 f8bf 	bl	8007c78 <USBD_Get_USB_Status>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	da0b      	bge.n	8007b3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	440b      	add	r3, r1
 8007b36:	3316      	adds	r3, #22
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	e00b      	b.n	8007b54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b42:	68f9      	ldr	r1, [r7, #12]
 8007b44:	4613      	mov	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007b52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fa fd4e 	bl	8002620 <HAL_PCD_SetAddress>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f874 	bl	8007c78 <USBD_Get_USB_Status>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b086      	sub	sp, #24
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
 8007baa:	460b      	mov	r3, r1
 8007bac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007bbc:	7af9      	ldrb	r1, [r7, #11]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	f7fa fe58 	bl	8002876 <HAL_PCD_EP_Transmit>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f853 	bl	8007c78 <USBD_Get_USB_Status>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	460b      	mov	r3, r1
 8007bee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007bfe:	7af9      	ldrb	r1, [r7, #11]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	f7fa fde4 	bl	80027d0 <HAL_PCD_EP_Receive>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f832 	bl	8007c78 <USBD_Get_USB_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c18:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c34:	78fa      	ldrb	r2, [r7, #3]
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fa fe04 	bl	8002846 <HAL_PCD_EP_GetRxCount>
 8007c3e:	4603      	mov	r3, r0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c50:	4b03      	ldr	r3, [pc, #12]	@ (8007c60 <USBD_static_malloc+0x18>)
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	2000118c 	.word	0x2000118c

08007c64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]

}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d817      	bhi.n	8007cbc <USBD_Get_USB_Status+0x44>
 8007c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <USBD_Get_USB_Status+0x1c>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cab 	.word	0x08007cab
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cb7 	.word	0x08007cb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca8:	e00b      	b.n	8007cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007caa:	2303      	movs	r3, #3
 8007cac:	73fb      	strb	r3, [r7, #15]
    break;
 8007cae:	e008      	b.n	8007cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb4:	e005      	b.n	8007cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cba:	e002      	b.n	8007cc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007cc0:	bf00      	nop
  }
  return usb_status;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <memset>:
 8007cd0:	4402      	add	r2, r0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d100      	bne.n	8007cda <memset+0xa>
 8007cd8:	4770      	bx	lr
 8007cda:	f803 1b01 	strb.w	r1, [r3], #1
 8007cde:	e7f9      	b.n	8007cd4 <memset+0x4>

08007ce0 <__libc_init_array>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8007d18 <__libc_init_array+0x38>)
 8007ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8007d1c <__libc_init_array+0x3c>)
 8007ce6:	1b64      	subs	r4, r4, r5
 8007ce8:	10a4      	asrs	r4, r4, #2
 8007cea:	2600      	movs	r6, #0
 8007cec:	42a6      	cmp	r6, r4
 8007cee:	d109      	bne.n	8007d04 <__libc_init_array+0x24>
 8007cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8007d20 <__libc_init_array+0x40>)
 8007cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8007d24 <__libc_init_array+0x44>)
 8007cf4:	f000 f818 	bl	8007d28 <_init>
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	42a6      	cmp	r6, r4
 8007d00:	d105      	bne.n	8007d0e <__libc_init_array+0x2e>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d08:	4798      	blx	r3
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7ee      	b.n	8007cec <__libc_init_array+0xc>
 8007d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d12:	4798      	blx	r3
 8007d14:	3601      	adds	r6, #1
 8007d16:	e7f2      	b.n	8007cfe <__libc_init_array+0x1e>
 8007d18:	08007da0 	.word	0x08007da0
 8007d1c:	08007da0 	.word	0x08007da0
 8007d20:	08007da0 	.word	0x08007da0
 8007d24:	08007da4 	.word	0x08007da4

08007d28 <_init>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr

08007d34 <_fini>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr
