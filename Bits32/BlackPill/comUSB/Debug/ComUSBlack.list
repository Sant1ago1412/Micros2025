
ComUSBlack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007f60  08007f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  00009104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fb8  08007fb8  00008fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  00009104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00008fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08007fc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a8  20000104  080080cc  00009104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  080080cc  000093ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f2f  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b7  00000000  00000000  0001d063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00020420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da2  00000000  00000000  00021600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a042  00000000  00000000  000223a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162d6  00000000  00000000  0003c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b961  00000000  00000000  000526ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee01b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab0  00000000  00000000  000ee060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f2b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f48 	.word	0x08007f48

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	08007f48 	.word	0x08007f48

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
void datafromUSB(uint8_t *buf, uint16_t length);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	is10ms=1;
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200001b0 	.word	0x200001b0

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fd5f 	bl	8000fec <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t counter;
  CDC_AttachRxData(&datafromUSB);
 800052e:	4819      	ldr	r0, [pc, #100]	@ (8000594 <main+0x70>)
 8000530:	f007 f8a6 	bl	8007680 <CDC_AttachRxData>
  bufaux[0]= 'a';
 8000534:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <main+0x74>)
 8000536:	2261      	movs	r2, #97	@ 0x61
 8000538:	701a      	strb	r2, [r3, #0]
  bufaux[1]= 'b';
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <main+0x74>)
 800053c:	2262      	movs	r2, #98	@ 0x62
 800053e:	705a      	strb	r2, [r3, #1]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f834 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f972 	bl	800082c <MX_GPIO_Init>
  MX_TIM11_Init();
 8000548:	f000 f94c 	bl	80007e4 <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 800054c:	f006 ff44 	bl	80073d8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000550:	f000 f894 	bl	800067c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000554:	4811      	ldr	r0, [pc, #68]	@ (800059c <main+0x78>)
 8000556:	f003 f9ed 	bl	8003934 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  comunicationsTask(&datosComSerie);
 800055a:	4811      	ldr	r0, [pc, #68]	@ (80005a0 <main+0x7c>)
 800055c:	f000 fbed 	bl	8000d3a <comunicationsTask>
	  if(is10ms){
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <main+0x80>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0f8      	beq.n	800055a <main+0x36>
		  is10ms=0;
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <main+0x80>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		  counter++;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	3301      	adds	r3, #1
 8000572:	71fb      	strb	r3, [r7, #7]
		  if(counter>10){
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d9ef      	bls.n	800055a <main+0x36>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800057a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057e:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <main+0x84>)
 8000580:	f001 faeb 	bl	8001b5a <HAL_GPIO_TogglePin>
			  SendInfo(bufaux, 2);
 8000584:	2102      	movs	r1, #2
 8000586:	4804      	ldr	r0, [pc, #16]	@ (8000598 <main+0x74>)
 8000588:	f000 fa9c 	bl	8000ac4 <SendInfo>
			  counter=0;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
	  comunicationsTask(&datosComSerie);
 8000590:	e7e3      	b.n	800055a <main+0x36>
 8000592:	bf00      	nop
 8000594:	08000d5d 	.word	0x08000d5d
 8000598:	200003bc 	.word	0x200003bc
 800059c:	20000168 	.word	0x20000168
 80005a0:	200001b4 	.word	0x200001b4
 80005a4:	200001b0 	.word	0x200001b0
 80005a8:	40020800 	.word	0x40020800

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f007 fc98 	bl	8007ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	4a26      	ldr	r2, [pc, #152]	@ (8000674 <SystemClock_Config+0xc8>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800061c:	2319      	movs	r3, #25
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000620:	23c0      	movs	r3, #192	@ 0xc0
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fcff 	bl	8003034 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 fbbc 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2103      	movs	r1, #3
 800065c:	4618      	mov	r0, r3
 800065e:	f002 ff61 	bl	8003524 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000668:	f000 fba6 	bl	8000db8 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068e:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 8000690:	4a52      	ldr	r2, [pc, #328]	@ (80007dc <MX_ADC1_Init+0x160>)
 8000692:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000694:	4b50      	ldr	r3, [pc, #320]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 8000696:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800069a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800069c:	4b4e      	ldr	r3, [pc, #312]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006a2:	4b4d      	ldr	r3, [pc, #308]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a8:	4b4b      	ldr	r3, [pc, #300]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b4a      	ldr	r3, [pc, #296]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b6:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006bc:	4b46      	ldr	r3, [pc, #280]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006be:	4a48      	ldr	r2, [pc, #288]	@ (80007e0 <MX_ADC1_Init+0x164>)
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c2:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80006c8:	4b43      	ldr	r3, [pc, #268]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ce:	4b42      	ldr	r3, [pc, #264]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d6:	4b40      	ldr	r3, [pc, #256]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006dc:	483e      	ldr	r0, [pc, #248]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006de:	f000 fd1b 	bl	8001118 <HAL_ADC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 fb66 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4836      	ldr	r0, [pc, #216]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80006fe:	f000 fd4f 	bl	80011a0 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000708:	f000 fb56 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800070c:	2301      	movs	r3, #1
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	482f      	ldr	r0, [pc, #188]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 800071a:	f000 fd41 	bl	80011a0 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000724:	f000 fb48 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000728:	2302      	movs	r3, #2
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800072c:	2303      	movs	r3, #3
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4828      	ldr	r0, [pc, #160]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 8000736:	f000 fd33 	bl	80011a0 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000740:	f000 fb3a 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000744:	2303      	movs	r3, #3
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4821      	ldr	r0, [pc, #132]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 8000752:	f000 fd25 	bl	80011a0 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800075c:	f000 fb2c 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000760:	2304      	movs	r3, #4
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000764:	2305      	movs	r3, #5
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	481a      	ldr	r0, [pc, #104]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 800076e:	f000 fd17 	bl	80011a0 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000778:	f000 fb1e 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800077c:	2305      	movs	r3, #5
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000780:	2306      	movs	r3, #6
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4813      	ldr	r0, [pc, #76]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 800078a:	f000 fd09 	bl	80011a0 <HAL_ADC_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000794:	f000 fb10 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000798:	2306      	movs	r3, #6
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800079c:	2307      	movs	r3, #7
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80007a6:	f000 fcfb 	bl	80011a0 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80007b0:	f000 fb02 	bl	8000db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007b4:	2307      	movs	r3, #7
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80007b8:	2308      	movs	r3, #8
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_ADC1_Init+0x15c>)
 80007c2:	f000 fced 	bl	80011a0 <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80007cc:	f000 faf4 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000120 	.word	0x20000120
 80007dc:	40012000 	.word	0x40012000
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_TIM11_Init+0x40>)
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <MX_TIM11_Init+0x44>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <MX_TIM11_Init+0x40>)
 80007f0:	2210      	movs	r2, #16
 80007f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_TIM11_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 60000;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_TIM11_Init+0x40>)
 80007fc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000800:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_TIM11_Init+0x40>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_TIM11_Init+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_TIM11_Init+0x40>)
 8000810:	f003 f840 	bl	8003894 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800081a:	f000 facd 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000168 	.word	0x20000168
 8000828:	40014800 	.word	0x40014800

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a11      	ldr	r2, [pc, #68]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_GPIO_Init+0x9c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <MX_GPIO_Init+0xa0>)
 800089e:	f001 f943 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_GPIO_Init+0xa0>)
 80008bc:	f000 ffb0 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020800 	.word	0x40020800

080008d0 <DecodeHeader>:

/* USER CODE BEGIN 4 */
void DecodeHeader(_sDato *datosCom){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	78db      	ldrb	r3, [r3, #3]
 80008dc:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80008de:	e0e2      	b.n	8000aa6 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80008e0:	4b76      	ldr	r3, [pc, #472]	@ (8000abc <DecodeHeader+0x1ec>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	f200 80d7 	bhi.w	8000a98 <DecodeHeader+0x1c8>
 80008ea:	a201      	add	r2, pc, #4	@ (adr r2, 80008f0 <DecodeHeader+0x20>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	0800090d 	.word	0x0800090d
 80008f4:	08000935 	.word	0x08000935
 80008f8:	08000969 	.word	0x08000969
 80008fc:	0800099d 	.word	0x0800099d
 8000900:	080009d1 	.word	0x080009d1
 8000904:	080009f9 	.word	0x080009f9
 8000908:	08000a3b 	.word	0x08000a3b
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	b2d1      	uxtb	r1, r2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	7111      	strb	r1, [r2, #4]
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	79db      	ldrb	r3, [r3, #7]
 8000920:	2b55      	cmp	r3, #85	@ 0x55
 8000922:	f040 80bd 	bne.w	8000aa0 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000926:	4b65      	ldr	r3, [pc, #404]	@ (8000abc <DecodeHeader+0x1ec>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	709a      	strb	r2, [r3, #2]
                }
                break;
 8000932:	e0b5      	b.n	8000aa0 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	b2d1      	uxtb	r1, r2
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	7111      	strb	r1, [r2, #4]
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	79db      	ldrb	r3, [r3, #7]
 8000948:	2b4e      	cmp	r3, #78	@ 0x4e
 800094a:	d103      	bne.n	8000954 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 800094c:	4b5b      	ldr	r3, [pc, #364]	@ (8000abc <DecodeHeader+0x1ec>)
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000952:	e0a8      	b.n	8000aa6 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	3b01      	subs	r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000960:	4b56      	ldr	r3, [pc, #344]	@ (8000abc <DecodeHeader+0x1ec>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
                break;
 8000966:	e09e      	b.n	8000aa6 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	b2d1      	uxtb	r1, r2
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7111      	strb	r1, [r2, #4]
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	79db      	ldrb	r3, [r3, #7]
 800097c:	2b45      	cmp	r3, #69	@ 0x45
 800097e:	d103      	bne.n	8000988 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000980:	4b4e      	ldr	r3, [pc, #312]	@ (8000abc <DecodeHeader+0x1ec>)
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000986:	e08e      	b.n	8000aa6 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	791b      	ldrb	r3, [r3, #4]
 800098c:	3b01      	subs	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000994:	4b49      	ldr	r3, [pc, #292]	@ (8000abc <DecodeHeader+0x1ec>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
                break;
 800099a:	e084      	b.n	8000aa6 <DecodeHeader+0x1d6>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	b2d1      	uxtb	r1, r2
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7111      	strb	r1, [r2, #4]
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	79db      	ldrb	r3, [r3, #7]
 80009b0:	2b52      	cmp	r3, #82	@ 0x52
 80009b2:	d103      	bne.n	80009bc <DecodeHeader+0xec>
                estadoProtocolo=NBYTES;
 80009b4:	4b41      	ldr	r3, [pc, #260]	@ (8000abc <DecodeHeader+0x1ec>)
 80009b6:	2204      	movs	r2, #4
 80009b8:	701a      	strb	r2, [r3, #0]
            else{
                datosCom->indexReadRx--;
               estadoProtocolo=START;
            }
            break;
 80009ba:	e074      	b.n	8000aa6 <DecodeHeader+0x1d6>
                datosCom->indexReadRx--;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	3b01      	subs	r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	711a      	strb	r2, [r3, #4]
               estadoProtocolo=START;
 80009c8:	4b3c      	ldr	r3, [pc, #240]	@ (8000abc <DecodeHeader+0x1ec>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
            break;
 80009ce:	e06a      	b.n	8000aa6 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791a      	ldrb	r2, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	b2d1      	uxtb	r1, r2
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	7111      	strb	r1, [r2, #4]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	79da      	ldrb	r2, [r3, #7]
 80009ec:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <DecodeHeader+0x1f0>)
 80009ee:	701a      	strb	r2, [r3, #0]
               estadoProtocolo=TOKEN;
 80009f0:	4b32      	ldr	r3, [pc, #200]	@ (8000abc <DecodeHeader+0x1ec>)
 80009f2:	2205      	movs	r2, #5
 80009f4:	701a      	strb	r2, [r3, #0]
                break;
 80009f6:	e056      	b.n	8000aa6 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	791b      	ldrb	r3, [r3, #4]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	b2d1      	uxtb	r1, r2
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	7111      	strb	r1, [r2, #4]
 8000a04:	461a      	mov	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	79db      	ldrb	r3, [r3, #7]
 8000a0c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000a0e:	d10a      	bne.n	8000a26 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <DecodeHeader+0x1ec>)
 8000a12:	2206      	movs	r2, #6
 8000a14:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <DecodeHeader+0x1f0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000a24:	e03f      	b.n	8000aa6 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000a32:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <DecodeHeader+0x1ec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
                break;
 8000a38:	e035      	b.n	8000aa6 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <DecodeHeader+0x1f0>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d90f      	bls.n	8000a62 <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	b2d1      	uxtb	r1, r2
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	7111      	strb	r1, [r2, #4]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	79da      	ldrb	r2, [r3, #7]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	4053      	eors	r3, r2
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <DecodeHeader+0x1f0>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <DecodeHeader+0x1f0>)
 8000a6c:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <DecodeHeader+0x1f0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d116      	bne.n	8000aa4 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <DecodeHeader+0x1ec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	789a      	ldrb	r2, [r3, #2]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	440b      	add	r3, r1
 8000a8a:	79db      	ldrb	r3, [r3, #7]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d109      	bne.n	8000aa4 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 f8a7 	bl	8000be4 <decodeData>
                    }
                }

                break;
 8000a96:	e005      	b.n	8000aa4 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <DecodeHeader+0x1ec>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
                break;
 8000a9e:	e002      	b.n	8000aa6 <DecodeHeader+0x1d6>
                break;
 8000aa0:	bf00      	nop
 8000aa2:	e000      	b.n	8000aa6 <DecodeHeader+0x1d6>
                break;
 8000aa4:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	7bfa      	ldrb	r2, [r7, #15]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	f47f af17 	bne.w	80008e0 <DecodeHeader+0x10>
        }
    }
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200003bb 	.word	0x200003bb
 8000ac0:	200003be 	.word	0x200003be

08000ac4 <SendInfo>:

void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
    uint8_t bufAux[20], indiceAux=0,cks=0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	77fb      	strb	r3, [r7, #31]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	77bb      	strb	r3, [r7, #30]
    #define NBYTES  4
    bufAux[indiceAux++]='U';
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	77fa      	strb	r2, [r7, #31]
 8000ade:	3320      	adds	r3, #32
 8000ae0:	443b      	add	r3, r7
 8000ae2:	2255      	movs	r2, #85	@ 0x55
 8000ae4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000ae8:	7ffb      	ldrb	r3, [r7, #31]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	77fa      	strb	r2, [r7, #31]
 8000aee:	3320      	adds	r3, #32
 8000af0:	443b      	add	r3, r7
 8000af2:	224e      	movs	r2, #78	@ 0x4e
 8000af4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	77fa      	strb	r2, [r7, #31]
 8000afe:	3320      	adds	r3, #32
 8000b00:	443b      	add	r3, r7
 8000b02:	2245      	movs	r2, #69	@ 0x45
 8000b04:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000b08:	7ffb      	ldrb	r3, [r7, #31]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	77fa      	strb	r2, [r7, #31]
 8000b0e:	3320      	adds	r3, #32
 8000b10:	443b      	add	r3, r7
 8000b12:	2252      	movs	r2, #82	@ 0x52
 8000b14:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000b18:	7ffb      	ldrb	r3, [r7, #31]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	77fa      	strb	r2, [r7, #31]
 8000b1e:	3320      	adds	r3, #32
 8000b20:	443b      	add	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000b28:	7ffb      	ldrb	r3, [r7, #31]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	77fa      	strb	r2, [r7, #31]
 8000b2e:	3320      	adds	r3, #32
 8000b30:	443b      	add	r3, r7
 8000b32:	223a      	movs	r2, #58	@ 0x3a
 8000b34:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(uint8_t i=0; i<bytes-1; i++){
 8000b38:	2300      	movs	r3, #0
 8000b3a:	777b      	strb	r3, [r7, #29]
 8000b3c:	e00d      	b.n	8000b5a <SendInfo+0x96>
        bufAux[indiceAux++] = bufferAux[i];
 8000b3e:	7f7b      	ldrb	r3, [r7, #29]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	441a      	add	r2, r3
 8000b44:	7ffb      	ldrb	r3, [r7, #31]
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	77f9      	strb	r1, [r7, #31]
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	3320      	adds	r3, #32
 8000b4e:	443b      	add	r3, r7
 8000b50:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(uint8_t i=0; i<bytes-1; i++){
 8000b54:	7f7b      	ldrb	r3, [r7, #29]
 8000b56:	3301      	adds	r3, #1
 8000b58:	777b      	strb	r3, [r7, #29]
 8000b5a:	7f7a      	ldrb	r2, [r7, #29]
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbec      	blt.n	8000b3e <SendInfo+0x7a>
    }
    bufAux[NBYTES] = bytes;
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	733b      	strb	r3, [r7, #12]
        cks=0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	773b      	strb	r3, [r7, #28]
 8000b70:	e01b      	b.n	8000baa <SendInfo+0xe6>
        cks^= bufAux[i];
 8000b72:	7f3b      	ldrb	r3, [r7, #28]
 8000b74:	3320      	adds	r3, #32
 8000b76:	443b      	add	r3, r7
 8000b78:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000b7c:	7fbb      	ldrb	r3, [r7, #30]
 8000b7e:	4053      	eors	r3, r2
 8000b80:	77bb      	strb	r3, [r7, #30]
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 8000b82:	7f3a      	ldrb	r2, [r7, #28]
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <SendInfo+0x118>)
 8000b86:	795b      	ldrb	r3, [r3, #5]
 8000b88:	1c59      	adds	r1, r3, #1
 8000b8a:	b2c8      	uxtb	r0, r1
 8000b8c:	4913      	ldr	r1, [pc, #76]	@ (8000bdc <SendInfo+0x118>)
 8000b8e:	7148      	strb	r0, [r1, #5]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f102 0320 	add.w	r3, r2, #32
 8000b96:	443b      	add	r3, r7
 8000b98:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <SendInfo+0x118>)
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000ba4:	7f3b      	ldrb	r3, [r7, #28]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	773b      	strb	r3, [r7, #28]
 8000baa:	7f3a      	ldrb	r2, [r7, #28]
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3df      	bcc.n	8000b72 <SendInfo+0xae>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <SendInfo+0x118>)
 8000bb4:	795b      	ldrb	r3, [r3, #5]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	b2d1      	uxtb	r1, r2
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <SendInfo+0x118>)
 8000bbc:	7151      	strb	r1, [r2, #5]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <SendInfo+0x118>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	7fba      	ldrb	r2, [r7, #30]
 8000bc6:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

     CDC_Transmit_FS((uint8_t*)datosComSerie.bufferTx, sizeof(bufAux));
 8000bca:	2114      	movs	r1, #20
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <SendInfo+0x11c>)
 8000bce:	f006 fd1f 	bl	8007610 <CDC_Transmit_FS>
}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001b4 	.word	0x200001b4
 8000be0:	200002bb 	.word	0x200002bb

08000be4 <decodeData>:

void decodeData(_sDato *datosCom){
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	@ 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,cks=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	77fb      	strb	r3, [r7, #31]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	77bb      	strb	r3, [r7, #30]

    bufAux[indiceAux++]='U';
 8000bf4:	7ffb      	ldrb	r3, [r7, #31]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	77fa      	strb	r2, [r7, #31]
 8000bfa:	3320      	adds	r3, #32
 8000bfc:	443b      	add	r3, r7
 8000bfe:	2255      	movs	r2, #85	@ 0x55
 8000c00:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000c04:	7ffb      	ldrb	r3, [r7, #31]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	77fa      	strb	r2, [r7, #31]
 8000c0a:	3320      	adds	r3, #32
 8000c0c:	443b      	add	r3, r7
 8000c0e:	224e      	movs	r2, #78	@ 0x4e
 8000c10:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000c14:	7ffb      	ldrb	r3, [r7, #31]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	77fa      	strb	r2, [r7, #31]
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	443b      	add	r3, r7
 8000c1e:	2245      	movs	r2, #69	@ 0x45
 8000c20:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	77fa      	strb	r2, [r7, #31]
 8000c2a:	3320      	adds	r3, #32
 8000c2c:	443b      	add	r3, r7
 8000c2e:	2252      	movs	r2, #82	@ 0x52
 8000c30:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000c34:	7ffb      	ldrb	r3, [r7, #31]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	77fa      	strb	r2, [r7, #31]
 8000c3a:	3320      	adds	r3, #32
 8000c3c:	443b      	add	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	77fa      	strb	r2, [r7, #31]
 8000c4a:	3320      	adds	r3, #32
 8000c4c:	443b      	add	r3, r7
 8000c4e:	223a      	movs	r2, #58	@ 0x3a
 8000c50:	f803 2c18 	strb.w	r2, [r3, #-24]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//ID EN LA POSICION 2
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	785b      	ldrb	r3, [r3, #1]
 8000c58:	3302      	adds	r3, #2
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	79db      	ldrb	r3, [r3, #7]
 8000c60:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c62:	d002      	beq.n	8000c6a <decodeData+0x86>
 8000c64:	2bf1      	cmp	r3, #241	@ 0xf1
 8000c66:	d013      	beq.n	8000c90 <decodeData+0xac>
 8000c68:	e025      	b.n	8000cb6 <decodeData+0xd2>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	77fa      	strb	r2, [r7, #31]
 8000c70:	3320      	adds	r3, #32
 8000c72:	443b      	add	r3, r7
 8000c74:	22f0      	movs	r2, #240	@ 0xf0
 8000c76:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0x0D;
 8000c7a:	7ffb      	ldrb	r3, [r7, #31]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	77fa      	strb	r2, [r7, #31]
 8000c80:	3320      	adds	r3, #32
 8000c82:	443b      	add	r3, r7
 8000c84:	220d      	movs	r2, #13
 8000c86:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	733b      	strb	r3, [r7, #12]

    break;
 8000c8e:	e01d      	b.n	8000ccc <decodeData+0xe8>
    case FIRMWARE:

        bufAux[indiceAux++]=FIRMWARE;
 8000c90:	7ffb      	ldrb	r3, [r7, #31]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	77fa      	strb	r2, [r7, #31]
 8000c96:	3320      	adds	r3, #32
 8000c98:	443b      	add	r3, r7
 8000c9a:	22f1      	movs	r2, #241	@ 0xf1
 8000c9c:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0xF1;
 8000ca0:	7ffb      	ldrb	r3, [r7, #31]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	77fa      	strb	r2, [r7, #31]
 8000ca6:	3320      	adds	r3, #32
 8000ca8:	443b      	add	r3, r7
 8000caa:	22f1      	movs	r2, #241	@ 0xf1
 8000cac:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	733b      	strb	r3, [r7, #12]

    break;
 8000cb4:	e00a      	b.n	8000ccc <decodeData+0xe8>

    default:

        bufAux[indiceAux++]=0xFF;
 8000cb6:	7ffb      	ldrb	r3, [r7, #31]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	77fa      	strb	r2, [r7, #31]
 8000cbc:	3320      	adds	r3, #32
 8000cbe:	443b      	add	r3, r7
 8000cc0:	22ff      	movs	r2, #255	@ 0xff
 8000cc2:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x02;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	733b      	strb	r3, [r7, #12]

        break;
 8000cca:	bf00      	nop
    }
    cks=0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	777b      	strb	r3, [r7, #29]
 8000cd4:	e01b      	b.n	8000d0e <decodeData+0x12a>

        cks^= bufAux[i];
 8000cd6:	7f7b      	ldrb	r3, [r7, #29]
 8000cd8:	3320      	adds	r3, #32
 8000cda:	443b      	add	r3, r7
 8000cdc:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000ce0:	7fbb      	ldrb	r3, [r7, #30]
 8000ce2:	4053      	eors	r3, r2
 8000ce4:	77bb      	strb	r3, [r7, #30]
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
 8000ce6:	7f7a      	ldrb	r2, [r7, #29]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	795b      	ldrb	r3, [r3, #5]
 8000cec:	1c59      	adds	r1, r3, #1
 8000cee:	b2c8      	uxtb	r0, r1
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	7148      	strb	r0, [r1, #5]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f102 0320 	add.w	r3, r2, #32
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000d08:	7f7b      	ldrb	r3, [r7, #29]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	777b      	strb	r3, [r7, #29]
 8000d0e:	7f7a      	ldrb	r2, [r7, #29]
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3df      	bcc.n	8000cd6 <decodeData+0xf2>

    }

     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	795b      	ldrb	r3, [r3, #5]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	b2d1      	uxtb	r1, r2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	7151      	strb	r1, [r2, #5]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	7fba      	ldrb	r2, [r7, #30]
 8000d2a:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
}
 8000d2e:	bf00      	nop
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791a      	ldrb	r2, [r3, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d002      	beq.n	8000d54 <comunicationsTask+0x1a>
		DecodeHeader(datosCom);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fdbe 	bl	80008d0 <DecodeHeader>
	}
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	81fb      	strh	r3, [r7, #14]
 8000d6c:	e012      	b.n	8000d94 <datafromUSB+0x38>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <datafromUSB+0x54>)
 8000d76:	78d2      	ldrb	r2, [r2, #3]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <datafromUSB+0x54>)
 8000d7e:	440b      	add	r3, r1
 8000d80:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <datafromUSB+0x54>)
 8000d84:	78db      	ldrb	r3, [r3, #3]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <datafromUSB+0x54>)
 8000d8c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	3301      	adds	r3, #1
 8000d92:	81fb      	strh	r3, [r7, #14]
 8000d94:	89fa      	ldrh	r2, [r7, #14]
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3e8      	bcc.n	8000d6e <datafromUSB+0x12>
  }

  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da0:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <datafromUSB+0x58>)
 8000da2:	f000 feda 	bl	8001b5a <HAL_GPIO_TogglePin>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200001b4 	.word	0x200001b4
 8000db4:	40020800 	.word	0x40020800

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <HAL_ADC_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d127      	bne.n	8000e86 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a15      	ldr	r2, [pc, #84]	@ (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_ADC_MspInit+0x80>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <HAL_ADC_MspInit+0x84>)
 8000e82:	f000 fccd 	bl	8001820 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40012000 	.word	0x40012000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee4 <HAL_TIM_Base_MspInit+0x48>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d115      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x4c>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201a      	movs	r0, #26
 8000ed0:	f000 fc6f 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ed4:	201a      	movs	r0, #26
 8000ed6:	f000 fc88 	bl	80017ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40014800 	.word	0x40014800
 8000ee8:	40023800 	.word	0x40023800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f8a5 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f52:	f002 fd51 	bl	80039f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000168 	.word	0x20000168

08000f60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <OTG_FS_IRQHandler+0x10>)
 8000f66:	f000 ff56 	bl	8001e16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000ca8 	.word	0x20000ca8

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9c:	f7ff ffea 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f006 ff9b 	bl	8007f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff faab 	bl	8000524 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000fdc:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 8000fe0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000fe4:	200013ac 	.word	0x200013ac

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 fbc1 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fed0 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fbd9 	bl	8001806 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 fba1 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	200003c0 	.word	0x200003c0

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200003c0 	.word	0x200003c0

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e033      	b.n	8001196 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fe6c 	bl	8000e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800115e:	f023 0302 	bic.w	r3, r3, #2
 8001162:	f043 0202 	orr.w	r2, r3, #2
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f94a 	bl	8001404 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	@ 0x40
 8001186:	e001      	b.n	800118c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x1c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e113      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x244>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	d925      	bls.n	8001218 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68d9      	ldr	r1, [r3, #12]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	3b1e      	subs	r3, #30
 80011e2:	2207      	movs	r2, #7
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43da      	mvns	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	400a      	ands	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68d9      	ldr	r1, [r3, #12]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4618      	mov	r0, r3
 8001204:	4603      	mov	r3, r0
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4403      	add	r3, r0
 800120a:	3b1e      	subs	r3, #30
 800120c:	409a      	lsls	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	e022      	b.n	800125e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6919      	ldr	r1, [r3, #16]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	2207      	movs	r2, #7
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	4603      	mov	r3, r0
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4403      	add	r3, r0
 8001254:	409a      	lsls	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b06      	cmp	r3, #6
 8001264:	d824      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b05      	subs	r3, #5
 8001278:	221f      	movs	r2, #31
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	3b05      	subs	r3, #5
 80012a2:	fa00 f203 	lsl.w	r2, r0, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ae:	e04c      	b.n	800134a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d824      	bhi.n	8001302 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b23      	subs	r3, #35	@ 0x23
 80012ca:	221f      	movs	r2, #31
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43da      	mvns	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	400a      	ands	r2, r1
 80012d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	3b23      	subs	r3, #35	@ 0x23
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001300:	e023      	b.n	800134a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3b41      	subs	r3, #65	@ 0x41
 8001314:	221f      	movs	r2, #31
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b41      	subs	r3, #65	@ 0x41
 800133e:	fa00 f203 	lsl.w	r2, r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134a:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <HAL_ADC_ConfigChannel+0x250>)
 800134c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a28      	ldr	r2, [pc, #160]	@ (80013f4 <HAL_ADC_ConfigChannel+0x254>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d10f      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1d8>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b12      	cmp	r3, #18
 800135e:	d10b      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <HAL_ADC_ConfigChannel+0x254>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_ADC_ConfigChannel+0x23a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1c      	ldr	r2, [pc, #112]	@ (80013f8 <HAL_ADC_ConfigChannel+0x258>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d003      	beq.n	8001394 <HAL_ADC_ConfigChannel+0x1f4>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b11      	cmp	r3, #17
 8001392:	d122      	bne.n	80013da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a11      	ldr	r2, [pc, #68]	@ (80013f8 <HAL_ADC_ConfigChannel+0x258>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d111      	bne.n	80013da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_ADC_ConfigChannel+0x25c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_ADC_ConfigChannel+0x260>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9a      	lsrs	r2, r3, #18
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40012300 	.word	0x40012300
 80013f4:	40012000 	.word	0x40012000
 80013f8:	10000012 	.word	0x10000012
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140c:	4b79      	ldr	r3, [pc, #484]	@ (80015f4 <ADC_Init+0x1f0>)
 800140e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	431a      	orrs	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	021a      	lsls	r2, r3, #8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800145c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800147e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6899      	ldr	r1, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001496:	4a58      	ldr	r2, [pc, #352]	@ (80015f8 <ADC_Init+0x1f4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d022      	beq.n	80014e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6899      	ldr	r1, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	e00f      	b.n	8001502 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001500:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0202 	bic.w	r2, r2, #2
 8001510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7e1b      	ldrb	r3, [r3, #24]
 800151c:	005a      	lsls	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01b      	beq.n	8001568 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800153e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800154e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6859      	ldr	r1, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	3b01      	subs	r3, #1
 800155c:	035a      	lsls	r2, r3, #13
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	e007      	b.n	8001578 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001576:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	3b01      	subs	r3, #1
 8001594:	051a      	lsls	r2, r3, #20
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6899      	ldr	r1, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015ba:	025a      	lsls	r2, r3, #9
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6899      	ldr	r1, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	029a      	lsls	r2, r3, #10
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40012300 	.word	0x40012300
 80015f8:	0f000001 	.word	0x0f000001

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	@ (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e159      	b.n	8001af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8148 	bne.w	8001aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d005      	beq.n	8001872 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	2b02      	cmp	r3, #2
 8001870:	d130      	bne.n	80018d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 0201 	and.w	r2, r3, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d017      	beq.n	8001910 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d123      	bne.n	8001964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a2 	beq.w	8001aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b57      	ldr	r3, [pc, #348]	@ (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a56      	ldr	r2, [pc, #344]	@ (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b54      	ldr	r3, [pc, #336]	@ (8001b08 <HAL_GPIO_Init+0x2e8>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <HAL_GPIO_Init+0x2ec>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a49      	ldr	r2, [pc, #292]	@ (8001b10 <HAL_GPIO_Init+0x2f0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x202>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <HAL_GPIO_Init+0x2f4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1fe>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a47      	ldr	r2, [pc, #284]	@ (8001b18 <HAL_GPIO_Init+0x2f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1fa>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a46      	ldr	r2, [pc, #280]	@ (8001b1c <HAL_GPIO_Init+0x2fc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1f6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	@ (8001b20 <HAL_GPIO_Init+0x300>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1f2>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a12:	2307      	movs	r3, #7
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x204>
 8001a22:	2300      	movs	r3, #0
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	@ (8001b0c <HAL_GPIO_Init+0x2ec>)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b38      	ldr	r3, [pc, #224]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a66:	4a2f      	ldr	r2, [pc, #188]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a90:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a96:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aba:	4a1a      	ldr	r2, [pc, #104]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b24 <HAL_GPIO_Init+0x304>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3301      	adds	r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	f67f aea2 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40013800 	.word	0x40013800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af02      	add	r7, sp, #8
 8001b94:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e101      	b.n	8001da4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f005 fe80 	bl	80078c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 f9d5 	bl	8003f8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7c1a      	ldrb	r2, [r3, #16]
 8001be8:	f88d 2000 	strb.w	r2, [sp]
 8001bec:	3304      	adds	r3, #4
 8001bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf0:	f002 f8b4 	bl	8003d5c <USB_CoreInit>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0ce      	b.n	8001da4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 f9cd 	bl	8003fac <USB_SetCurrentMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0bf      	b.n	8001da4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e04a      	b.n	8001cc0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	3315      	adds	r3, #21
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3314      	adds	r3, #20
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	b298      	uxth	r0, r3
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	332e      	adds	r3, #46	@ 0x2e
 8001c66:	4602      	mov	r2, r0
 8001c68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3318      	adds	r3, #24
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	331c      	adds	r3, #28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	3320      	adds	r3, #32
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3324      	adds	r3, #36	@ 0x24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3af      	bcc.n	8001c2a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e044      	b.n	8001d5a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	3301      	adds	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	791b      	ldrb	r3, [r3, #4]
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3b5      	bcc.n	8001cd0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7c1a      	ldrb	r2, [r3, #16]
 8001d6c:	f88d 2000 	strb.w	r2, [sp]
 8001d70:	3304      	adds	r3, #4
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	f002 f966 	bl	8004044 <USB_DevInit>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00c      	b.n	8001da4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f9b0 	bl	8005102 <USB_DevDisconnect>

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_Start+0x1c>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e022      	b.n	8001e0e <HAL_PCD_Start+0x62>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d009      	beq.n	8001df0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f002 f8b7 	bl	8003f68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f95e 	bl	80050c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e16:	b590      	push	{r4, r7, lr}
 8001e18:	b08d      	sub	sp, #52	@ 0x34
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fa1c 	bl	800526a <USB_GetMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 848c 	bne.w	8002752 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f980 	bl	8005144 <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8482 	beq.w	8002750 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 f96d 	bl	8005144 <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d107      	bne.n	8001e84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f002 0202 	and.w	r2, r2, #2
 8001e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 f95b 	bl	8005144 <USB_ReadInterrupts>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d161      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0210 	bic.w	r2, r2, #16
 8001ea6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001ece:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ed2:	d124      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d035      	beq.n	8001f4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6a38      	ldr	r0, [r7, #32]
 8001ef4:	f002 ff92 	bl	8004e1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f04:	441a      	add	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f16:	441a      	add	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	e016      	b.n	8001f4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001f24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001f28:	d110      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f30:	2208      	movs	r2, #8
 8001f32:	4619      	mov	r1, r3
 8001f34:	6a38      	ldr	r0, [r7, #32]
 8001f36:	f002 ff71 	bl	8004e1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f46:	441a      	add	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0210 	orr.w	r2, r2, #16
 8001f5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 f8ef 	bl	8005144 <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f70:	f040 80a7 	bne.w	80020c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 f8f4 	bl	800516a <USB_ReadDevAllOutEpInterrupt>
 8001f82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001f84:	e099      	b.n	80020ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 808e 	beq.w	80020ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 f918 	bl	80051d2 <USB_ReadDevOutEPInterrupt>
 8001fa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fea4 	bl	8002d10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 ff7a 	bl	8002ee0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002002:	461a      	mov	r2, r3
 8002004:	2310      	movs	r3, #16
 8002006:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d030      	beq.n	8002074 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002012:	6a3b      	ldr	r3, [r7, #32]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201a:	2b80      	cmp	r3, #128	@ 0x80
 800201c:	d109      	bne.n	8002032 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800202c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002030:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	78db      	ldrb	r3, [r3, #3]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	b2db      	uxtb	r3, r3
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f005 fd39 	bl	8007ad4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800206e:	461a      	mov	r2, r3
 8002070:	2302      	movs	r3, #2
 8002072:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208a:	461a      	mov	r2, r3
 800208c:	2320      	movs	r3, #32
 800208e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	3301      	adds	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f47f af62 	bne.w	8001f86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 f83c 	bl	8005144 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80020d6:	f040 80db 	bne.w	8002290 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f85d 	bl	800519e <USB_ReadDevAllInEpInterrupt>
 80020e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80020ea:	e0cd      	b.n	8002288 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80c2 	beq.w	800227c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f883 	bl	800520e <USB_ReadDevInEPInterrupt>
 8002108:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d057      	beq.n	80021c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	2201      	movs	r2, #1
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	69f9      	ldr	r1, [r7, #28]
 8002130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002134:	4013      	ands	r3, r2
 8002136:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002144:	461a      	mov	r2, r3
 8002146:	2301      	movs	r3, #1
 8002148:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	799b      	ldrb	r3, [r3, #6]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d132      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3320      	adds	r3, #32
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4403      	add	r3, r0
 8002172:	331c      	adds	r3, #28
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4419      	add	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4403      	add	r3, r0
 8002186:	3320      	adds	r3, #32
 8002188:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d113      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x3a2>
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002194:	4613      	mov	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3324      	adds	r3, #36	@ 0x24
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021b0:	461a      	mov	r2, r3
 80021b2:	2101      	movs	r1, #1
 80021b4:	f003 f88a 	bl	80052cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f005 fc0d 	bl	80079de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021da:	461a      	mov	r2, r3
 80021dc:	2308      	movs	r3, #8
 80021de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021f6:	461a      	mov	r2, r3
 80021f8:	2310      	movs	r3, #16
 80021fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002212:	461a      	mov	r2, r3
 8002214:	2340      	movs	r3, #64	@ 0x40
 8002216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d023      	beq.n	800226a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002222:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002224:	6a38      	ldr	r0, [r7, #32]
 8002226:	f002 f871 	bl	800430c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800222a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	3310      	adds	r3, #16
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	78db      	ldrb	r3, [r3, #3]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2200      	movs	r2, #0
 800224a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f005 fc50 	bl	8007af8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002264:	461a      	mov	r2, r3
 8002266:	2302      	movs	r3, #2
 8002268:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fcbd 	bl	8002bf6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	3301      	adds	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f af2e 	bne.w	80020ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f002 ff55 	bl	8005144 <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022a4:	d122      	bne.n	80022ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022cc:	2100      	movs	r1, #0
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fea4 	bl	800301c <HAL_PCDEx_LPM_Callback>
 80022d4:	e002      	b.n	80022dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 fbee 	bl	8007ab8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80022ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 ff27 	bl	8005144 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002300:	d112      	bne.n	8002328 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f005 fbaa 	bl	8007a6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002326:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f002 ff09 	bl	8005144 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800233c:	f040 80b7 	bne.w	80024ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2110      	movs	r1, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f001 ffd6 	bl	800430c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002364:	e046      	b.n	80023f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002372:	461a      	mov	r2, r3
 8002374:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002378:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	4413      	add	r3, r2
 8002382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800238a:	0151      	lsls	r1, r2, #5
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	440a      	add	r2, r1
 8002390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002394:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002398:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a6:	461a      	mov	r2, r3
 80023a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80023c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023de:	0151      	lsls	r1, r2, #5
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	440a      	add	r2, r1
 80023e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80023e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80023ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f0:	3301      	adds	r3, #1
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	791b      	ldrb	r3, [r3, #4]
 80023f8:	461a      	mov	r2, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d3b2      	bcc.n	8002366 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800240e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002412:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7bdb      	ldrb	r3, [r3, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d016      	beq.n	800244a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800242c:	f043 030b 	orr.w	r3, r3, #11
 8002430:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800243a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002442:	f043 030b 	orr.w	r3, r3, #11
 8002446:	6453      	str	r3, [r2, #68]	@ 0x44
 8002448:	e015      	b.n	8002476 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002458:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800245c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002460:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002470:	f043 030b 	orr.w	r3, r3, #11
 8002474:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002484:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002488:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002498:	461a      	mov	r2, r3
 800249a:	f002 ff17 	bl	80052cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fe46 	bl	8005144 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c2:	d123      	bne.n	800250c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 fedc 	bl	8005286 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 ff93 	bl	80043fe <USB_GetDevSpeed>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681c      	ldr	r4, [r3, #0]
 80024e4:	f001 f9ca 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80024e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024ee:	461a      	mov	r2, r3
 80024f0:	4620      	mov	r0, r4
 80024f2:	f001 fc97 	bl	8003e24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f005 fa99 	bl	8007a2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800250a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f002 fe17 	bl	8005144 <USB_ReadInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b08      	cmp	r3, #8
 800251e:	d10a      	bne.n	8002536 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f005 fa76 	bl	8007a12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f002 0208 	and.w	r2, r2, #8
 8002534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fe02 	bl	8005144 <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002546:	2b80      	cmp	r3, #128	@ 0x80
 8002548:	d123      	bne.n	8002592 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002556:	2301      	movs	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
 800255a:	e014      	b.n	8002586 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fb0a 	bl	8002b94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	3301      	adds	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	461a      	mov	r2, r3
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	4293      	cmp	r3, r2
 8002590:	d3e4      	bcc.n	800255c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fdd4 	bl	8005144 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025a6:	d13c      	bne.n	8002622 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025a8:	2301      	movs	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ac:	e02b      	b.n	8002606 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3318      	adds	r3, #24
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d115      	bne.n	8002600 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da12      	bge.n	8002600 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3317      	adds	r3, #23
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 faca 	bl	8002b94 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	4293      	cmp	r3, r2
 8002610:	d3cd      	bcc.n	80025ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fd8c 	bl	8005144 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002632:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002636:	d156      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002638:	2301      	movs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
 800263c:	e045      	b.n	80026ca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d12e      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002666:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	da2b      	bge.n	80026c4 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	0c1a      	lsrs	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002676:	4053      	eors	r3, r2
 8002678:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026c0:	6053      	str	r3, [r2, #4]
            break;
 80026c2:	e008      	b.n	80026d6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	3301      	adds	r3, #1
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	791b      	ldrb	r3, [r3, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d3b3      	bcc.n	800263e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80026e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fd2a 	bl	8005144 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80026f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026fa:	d10a      	bne.n	8002712 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 fa0d 	bl	8007b1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fd14 	bl	8005144 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d115      	bne.n	8002752 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f005 f9fd 	bl	8007b38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e000      	b.n	8002752 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002750:	bf00      	nop
    }
  }
}
 8002752:	3734      	adds	r7, #52	@ 0x34
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_PCD_SetAddress+0x1a>
 800276e:	2302      	movs	r3, #2
 8002770:	e012      	b.n	8002798 <HAL_PCD_SetAddress+0x40>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fc73 	bl	8005074 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	70fb      	strb	r3, [r7, #3]
 80027b2:	460b      	mov	r3, r1
 80027b4:	803b      	strh	r3, [r7, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da0f      	bge.n	80027e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	3310      	adds	r3, #16
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	705a      	strb	r2, [r3, #1]
 80027e4:	e00f      	b.n	8002806 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 020f 	and.w	r2, r3, #15
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002812:	883b      	ldrh	r3, [r7, #0]
 8002814:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	78ba      	ldrb	r2, [r7, #2]
 8002820:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	785b      	ldrb	r3, [r3, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d004      	beq.n	8002834 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002834:	78bb      	ldrb	r3, [r7, #2]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d102      	bne.n	8002840 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_PCD_EP_Open+0xae>
 800284a:	2302      	movs	r3, #2
 800284c:	e00e      	b.n	800286c <HAL_PCD_EP_Open+0xcc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fdf3 	bl	8004448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800286a:	7afb      	ldrb	r3, [r7, #11]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002884:	2b00      	cmp	r3, #0
 8002886:	da0f      	bge.n	80028a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	3310      	adds	r3, #16
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4413      	add	r3, r2
 800289c:	3304      	adds	r3, #4
 800289e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	705a      	strb	r2, [r3, #1]
 80028a6:	e00f      	b.n	80028c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 020f 	and.w	r2, r3, #15
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_PCD_EP_Close+0x6e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e00e      	b.n	8002900 <HAL_PCD_EP_Close+0x8c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fe31 	bl	8004558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	460b      	mov	r3, r1
 8002916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2200      	movs	r2, #0
 8002948:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800294a:	7afb      	ldrb	r3, [r7, #11]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	b2da      	uxtb	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	799b      	ldrb	r3, [r3, #6]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	799b      	ldrb	r3, [r3, #6]
 800296c:	461a      	mov	r2, r3
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	f001 fece 	bl	8004710 <USB_EPStartXfer>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 020f 	and.w	r2, r3, #15
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80029a0:	681b      	ldr	r3, [r3, #0]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	460b      	mov	r3, r1
 80029bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	3310      	adds	r3, #16
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2201      	movs	r2, #1
 80029ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	799b      	ldrb	r3, [r3, #6]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d102      	bne.n	8002a08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	799b      	ldrb	r3, [r3, #6]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6979      	ldr	r1, [r7, #20]
 8002a14:	f001 fe7c 	bl	8004710 <USB_EPStartXfer>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	7912      	ldrb	r2, [r2, #4]
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e04f      	b.n	8002ae0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da0f      	bge.n	8002a68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 020f 	and.w	r2, r3, #15
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	3310      	adds	r3, #16
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	705a      	strb	r2, [r3, #1]
 8002a66:	e00d      	b.n	8002a84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_EP_SetStall+0x82>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e01d      	b.n	8002ae0 <HAL_PCD_EP_SetStall+0xbe>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 fa0a 	bl	8004ecc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7999      	ldrb	r1, [r3, #6]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f002 fbfb 	bl	80052cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	7912      	ldrb	r2, [r2, #4]
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e042      	b.n	8002b8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	da0f      	bge.n	8002b2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	3310      	adds	r3, #16
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	705a      	strb	r2, [r3, #1]
 8002b2c:	e00f      	b.n	8002b4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 020f 	and.w	r2, r3, #15
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_PCD_EP_ClrStall+0x86>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e00e      	b.n	8002b8c <HAL_PCD_EP_ClrStall+0xa4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 fa13 	bl	8004fa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	da0c      	bge.n	8002bc2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e00c      	b.n	8002bdc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 f832 	bl	8004c4c <USB_EPStopXfer>
 8002be8:	4603      	mov	r3, r0
 8002bea:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bec:	7afb      	ldrb	r3, [r7, #11]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08a      	sub	sp, #40	@ 0x28
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3310      	adds	r3, #16
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d901      	bls.n	8002c2e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06b      	b.n	8002d06 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d902      	bls.n	8002c4a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3303      	adds	r3, #3
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c52:	e02a      	b.n	8002caa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d902      	bls.n	8002c70 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3303      	adds	r3, #3
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f002 f887 	bl	8004da0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	441a      	add	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d809      	bhi.n	8002cd4 <PCD_WriteEmptyTxFifo+0xde>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d203      	bcs.n	8002cd4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1bf      	bne.n	8002c54 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d811      	bhi.n	8002d04 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	6939      	ldr	r1, [r7, #16]
 8002cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d00:	4013      	ands	r3, r2
 8002d02:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	333c      	adds	r3, #60	@ 0x3c
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	799b      	ldrb	r3, [r3, #6]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d17b      	bne.n	8002e3e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4a61      	ldr	r2, [pc, #388]	@ (8002ed8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	f240 80b9 	bls.w	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80b3 	beq.w	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d72:	461a      	mov	r2, r3
 8002d74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d78:	6093      	str	r3, [r2, #8]
 8002d7a:	e0a7      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d92:	461a      	mov	r2, r3
 8002d94:	2320      	movs	r3, #32
 8002d96:	6093      	str	r3, [r2, #8]
 8002d98:	e098      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f040 8093 	bne.w	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d90f      	bls.n	8002dce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	e07e      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	0159      	lsls	r1, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d114      	bne.n	8002e30 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	f002 fa56 	bl	80052cc <USB_EP0_OutStart>
 8002e20:	e006      	b.n	8002e30 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f004 fdb6 	bl	80079a8 <HAL_PCD_DataOutStageCallback>
 8002e3c:	e046      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4a26      	ldr	r2, [pc, #152]	@ (8002edc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d124      	bne.n	8002e90 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e62:	6093      	str	r3, [r2, #8]
 8002e64:	e032      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2320      	movs	r3, #32
 8002e80:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f004 fd8d 	bl	80079a8 <HAL_PCD_DataOutStageCallback>
 8002e8e:	e01d      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d114      	bne.n	8002ec0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f002 fa06 	bl	80052cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f004 fd6e 	bl	80079a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	4f54300a 	.word	0x4f54300a
 8002edc:	4f54310a 	.word	0x4f54310a

08002ee0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	333c      	adds	r3, #60	@ 0x3c
 8002ef8:	3304      	adds	r3, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d90e      	bls.n	8002f34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f004 fd25 	bl	8007984 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d90c      	bls.n	8002f5c <PCD_EP_OutSetupPacket_int+0x7c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	799b      	ldrb	r3, [r3, #6]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f54:	461a      	mov	r2, r3
 8002f56:	2101      	movs	r1, #1
 8002f58:	f002 f9b8 	bl	80052cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	4f54300a 	.word	0x4f54300a

08002f6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f8a:	883b      	ldrh	r3, [r7, #0]
 8002f8c:	0419      	lsls	r1, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f98:	e028      	b.n	8002fec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e00d      	b.n	8002fca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	3340      	adds	r3, #64	@ 0x40
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3ec      	bcc.n	8002fae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fd4:	883b      	ldrh	r3, [r7, #0]
 8002fd6:	0418      	lsls	r0, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4302      	orrs	r2, r0
 8002fe4:	3340      	adds	r3, #64	@ 0x40
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e267      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d075      	beq.n	800313e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003052:	4b88      	ldr	r3, [pc, #544]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b04      	cmp	r3, #4
 800305c:	d00c      	beq.n	8003078 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b85      	ldr	r3, [pc, #532]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003066:	2b08      	cmp	r3, #8
 8003068:	d112      	bne.n	8003090 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b82      	ldr	r3, [pc, #520]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003072:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003076:	d10b      	bne.n	8003090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b7e      	ldr	r3, [pc, #504]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05b      	beq.n	800313c <HAL_RCC_OscConfig+0x108>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d157      	bne.n	800313c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e242      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_OscConfig+0x74>
 800309a:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a75      	ldr	r2, [pc, #468]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e01d      	b.n	80030e4 <HAL_RCC_OscConfig+0xb0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x98>
 80030b2:	4b70      	ldr	r3, [pc, #448]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b6d      	ldr	r3, [pc, #436]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0xb0>
 80030cc:	4b69      	ldr	r3, [pc, #420]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a68      	ldr	r2, [pc, #416]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b66      	ldr	r3, [pc, #408]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd ffe4 	bl	80010b8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd ffe0 	bl	80010b8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e207      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b5b      	ldr	r3, [pc, #364]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0xc0>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd ffd0 	bl	80010b8 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fd ffcc 	bl	80010b8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1f3      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	4b51      	ldr	r3, [pc, #324]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0xe8>
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d063      	beq.n	8003212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800314a:	4b4a      	ldr	r3, [pc, #296]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800315e:	2b08      	cmp	r3, #8
 8003160:	d11c      	bne.n	800319c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b44      	ldr	r3, [pc, #272]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d116      	bne.n	800319c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	4b41      	ldr	r3, [pc, #260]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_RCC_OscConfig+0x152>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1c7      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4937      	ldr	r1, [pc, #220]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	e03a      	b.n	8003212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a4:	4b34      	ldr	r3, [pc, #208]	@ (8003278 <HAL_RCC_OscConfig+0x244>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fd ff85 	bl	80010b8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fd ff81 	bl	80010b8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1a8      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d0:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4925      	ldr	r1, [pc, #148]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
 80031e4:	e015      	b.n	8003212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e6:	4b24      	ldr	r3, [pc, #144]	@ (8003278 <HAL_RCC_OscConfig+0x244>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd ff64 	bl	80010b8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f4:	f7fd ff60 	bl	80010b8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e187      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d036      	beq.n	800328c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d016      	beq.n	8003254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <HAL_RCC_OscConfig+0x248>)
 8003228:	2201      	movs	r2, #1
 800322a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd ff44 	bl	80010b8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fd ff40 	bl	80010b8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e167      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_OscConfig+0x240>)
 8003248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x200>
 8003252:	e01b      	b.n	800328c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003254:	4b09      	ldr	r3, [pc, #36]	@ (800327c <HAL_RCC_OscConfig+0x248>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fd ff2d 	bl	80010b8 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003260:	e00e      	b.n	8003280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003262:	f7fd ff29 	bl	80010b8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d907      	bls.n	8003280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e150      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
 8003274:	40023800 	.word	0x40023800
 8003278:	42470000 	.word	0x42470000
 800327c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003280:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ea      	bne.n	8003262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8097 	beq.w	80033c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329a:	2300      	movs	r3, #0
 800329c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329e:	4b81      	ldr	r3, [pc, #516]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	4b7d      	ldr	r3, [pc, #500]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	4a7c      	ldr	r2, [pc, #496]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ba:	4b7a      	ldr	r3, [pc, #488]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b77      	ldr	r3, [pc, #476]	@ (80034a8 <HAL_RCC_OscConfig+0x474>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b74      	ldr	r3, [pc, #464]	@ (80034a8 <HAL_RCC_OscConfig+0x474>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a73      	ldr	r2, [pc, #460]	@ (80034a8 <HAL_RCC_OscConfig+0x474>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fd fee9 	bl	80010b8 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fd fee5 	bl	80010b8 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e10c      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b6a      	ldr	r3, [pc, #424]	@ (80034a8 <HAL_RCC_OscConfig+0x474>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x2ea>
 8003310:	4b64      	ldr	r3, [pc, #400]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a63      	ldr	r2, [pc, #396]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
 800331c:	e01c      	b.n	8003358 <HAL_RCC_OscConfig+0x324>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b05      	cmp	r3, #5
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x30c>
 8003326:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332a:	4a5e      	ldr	r2, [pc, #376]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 800332c:	f043 0304 	orr.w	r3, r3, #4
 8003330:	6713      	str	r3, [r2, #112]	@ 0x70
 8003332:	4b5c      	ldr	r3, [pc, #368]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	4a5b      	ldr	r2, [pc, #364]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6713      	str	r3, [r2, #112]	@ 0x70
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0x324>
 8003340:	4b58      	ldr	r3, [pc, #352]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003344:	4a57      	ldr	r2, [pc, #348]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6713      	str	r3, [r2, #112]	@ 0x70
 800334c:	4b55      	ldr	r3, [pc, #340]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a54      	ldr	r2, [pc, #336]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd feaa 	bl	80010b8 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd fea6 	bl	80010b8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0cb      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337e:	4b49      	ldr	r3, [pc, #292]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ee      	beq.n	8003368 <HAL_RCC_OscConfig+0x334>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338c:	f7fd fe94 	bl	80010b8 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003394:	f7fd fe90 	bl	80010b8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0b5      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033aa:	4b3e      	ldr	r3, [pc, #248]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ee      	bne.n	8003394 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033bc:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	4a38      	ldr	r2, [pc, #224]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a1 	beq.w	8003514 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033d2:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d05c      	beq.n	8003498 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d141      	bne.n	800346a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b31      	ldr	r3, [pc, #196]	@ (80034ac <HAL_RCC_OscConfig+0x478>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe64 	bl	80010b8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd fe60 	bl	80010b8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e087      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003406:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	3b01      	subs	r3, #1
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	491b      	ldr	r1, [pc, #108]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_RCC_OscConfig+0x478>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fd fe39 	bl	80010b8 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fd fe35 	bl	80010b8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e05c      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x416>
 8003468:	e054      	b.n	8003514 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <HAL_RCC_OscConfig+0x478>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fd fe22 	bl	80010b8 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fd fe1e 	bl	80010b8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e045      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCC_OscConfig+0x470>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x444>
 8003496:	e03d      	b.n	8003514 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e038      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40007000 	.word	0x40007000
 80034ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_RCC_OscConfig+0x4ec>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d028      	beq.n	8003510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d121      	bne.n	8003510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d11a      	bne.n	8003510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034e0:	4013      	ands	r3, r2
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d111      	bne.n	8003510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	085b      	lsrs	r3, r3, #1
 80034f8:	3b01      	subs	r3, #1
 80034fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800

08003524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0cc      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003538:	4b68      	ldr	r3, [pc, #416]	@ (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d90c      	bls.n	8003560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b65      	ldr	r3, [pc, #404]	@ (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b63      	ldr	r3, [pc, #396]	@ (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0b8      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d020      	beq.n	80035ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003578:	4b59      	ldr	r3, [pc, #356]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a58      	ldr	r2, [pc, #352]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003590:	4b53      	ldr	r3, [pc, #332]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a52      	ldr	r2, [pc, #328]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800359a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359c:	4b50      	ldr	r3, [pc, #320]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	494d      	ldr	r1, [pc, #308]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d044      	beq.n	8003644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d119      	bne.n	8003602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e07f      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d003      	beq.n	80035e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d107      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06f      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f2:	4b3b      	ldr	r3, [pc, #236]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e067      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003602:	4b37      	ldr	r3, [pc, #220]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f023 0203 	bic.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4934      	ldr	r1, [pc, #208]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	4313      	orrs	r3, r2
 8003612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003614:	f7fd fd50 	bl	80010b8 <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	e00a      	b.n	8003632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361c:	f7fd fd4c 	bl	80010b8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e04f      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 020c 	and.w	r2, r3, #12
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	429a      	cmp	r2, r3
 8003642:	d1eb      	bne.n	800361c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003644:	4b25      	ldr	r3, [pc, #148]	@ (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d20c      	bcs.n	800366c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e032      	b.n	80036d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003678:	4b19      	ldr	r3, [pc, #100]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4916      	ldr	r1, [pc, #88]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003696:	4b12      	ldr	r3, [pc, #72]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	490e      	ldr	r1, [pc, #56]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036aa:	f000 f821 	bl	80036f0 <HAL_RCC_GetSysClockFreq>
 80036ae:	4602      	mov	r2, r0
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	490a      	ldr	r1, [pc, #40]	@ (80036e4 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	5ccb      	ldrb	r3, [r1, r3]
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fcb0 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023c00 	.word	0x40023c00
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08007fa8 	.word	0x08007fa8
 80036e8:	20000000 	.word	0x20000000
 80036ec:	20000004 	.word	0x20000004

080036f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f4:	b090      	sub	sp, #64	@ 0x40
 80036f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003708:	4b59      	ldr	r3, [pc, #356]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
 8003710:	2b08      	cmp	r3, #8
 8003712:	d00d      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x40>
 8003714:	2b08      	cmp	r3, #8
 8003716:	f200 80a1 	bhi.w	800385c <HAL_RCC_GetSysClockFreq+0x16c>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x34>
 800371e:	2b04      	cmp	r3, #4
 8003720:	d003      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x3a>
 8003722:	e09b      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b53      	ldr	r3, [pc, #332]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x184>)
 8003726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003728:	e09b      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800372a:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x188>)
 800372c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800372e:	e098      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003730:	4b4f      	ldr	r3, [pc, #316]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003738:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800373a:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d028      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003746:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	099b      	lsrs	r3, r3, #6
 800374c:	2200      	movs	r2, #0
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	627a      	str	r2, [r7, #36]	@ 0x24
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003758:	2100      	movs	r1, #0
 800375a:	4b47      	ldr	r3, [pc, #284]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x188>)
 800375c:	fb03 f201 	mul.w	r2, r3, r1
 8003760:	2300      	movs	r3, #0
 8003762:	fb00 f303 	mul.w	r3, r0, r3
 8003766:	4413      	add	r3, r2
 8003768:	4a43      	ldr	r2, [pc, #268]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x188>)
 800376a:	fba0 1202 	umull	r1, r2, r0, r2
 800376e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003770:	460a      	mov	r2, r1
 8003772:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003776:	4413      	add	r3, r2
 8003778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800377a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377c:	2200      	movs	r2, #0
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	61fa      	str	r2, [r7, #28]
 8003782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003786:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800378a:	f7fc fd25 	bl	80001d8 <__aeabi_uldivmod>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4613      	mov	r3, r2
 8003794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003796:	e053      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003798:	4b35      	ldr	r3, [pc, #212]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	2200      	movs	r2, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	617a      	str	r2, [r7, #20]
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037aa:	f04f 0b00 	mov.w	fp, #0
 80037ae:	4652      	mov	r2, sl
 80037b0:	465b      	mov	r3, fp
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	0159      	lsls	r1, r3, #5
 80037bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c0:	0150      	lsls	r0, r2, #5
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	ebb2 080a 	subs.w	r8, r2, sl
 80037ca:	eb63 090b 	sbc.w	r9, r3, fp
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037e2:	ebb2 0408 	subs.w	r4, r2, r8
 80037e6:	eb63 0509 	sbc.w	r5, r3, r9
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	00eb      	lsls	r3, r5, #3
 80037f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f8:	00e2      	lsls	r2, r4, #3
 80037fa:	4614      	mov	r4, r2
 80037fc:	461d      	mov	r5, r3
 80037fe:	eb14 030a 	adds.w	r3, r4, sl
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	eb45 030b 	adc.w	r3, r5, fp
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003816:	4629      	mov	r1, r5
 8003818:	028b      	lsls	r3, r1, #10
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003820:	4621      	mov	r1, r4
 8003822:	028a      	lsls	r2, r1, #10
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382a:	2200      	movs	r2, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003834:	f7fc fcd0 	bl	80001d8 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x180>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	3301      	adds	r3, #1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003850:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800385a:	e002      	b.n	8003862 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x184>)
 800385e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003864:	4618      	mov	r0, r3
 8003866:	3740      	adds	r7, #64	@ 0x40
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	00f42400 	.word	0x00f42400
 8003878:	017d7840 	.word	0x017d7840

0800387c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003880:	4b03      	ldr	r3, [pc, #12]	@ (8003890 <HAL_RCC_GetHCLKFreq+0x14>)
 8003882:	681b      	ldr	r3, [r3, #0]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000000 	.word	0x20000000

08003894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e041      	b.n	800392a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd faee 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f000 f9a8 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e044      	b.n	80039d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1e      	ldr	r2, [pc, #120]	@ (80039e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003976:	d013      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1a      	ldr	r2, [pc, #104]	@ (80039e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d111      	bne.n	80039c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d010      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	e007      	b.n	80039d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40014000 	.word	0x40014000

080039f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d020      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0202 	mvn.w	r2, #2
 8003a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8d2 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8c4 	bl	8003bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f8d5 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0204 	mvn.w	r2, #4
 8003a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8ac 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 8003a94:	e005      	b.n	8003aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f89e 	bl	8003bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8af 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d020      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01b      	beq.n	8003af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0208 	mvn.w	r2, #8
 8003ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f886 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f878 	bl	8003bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f889 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d020      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0210 	mvn.w	r2, #16
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2208      	movs	r2, #8
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f860 	bl	8003bec <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f852 	bl	8003bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f863 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0201 	mvn.w	r2, #1
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fc fcd0 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8e0 	bl	8003d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f834 	bl	8003c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0220 	mvn.w	r2, #32
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f8b2 	bl	8003d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a37      	ldr	r2, [pc, #220]	@ (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	@ (8003d1c <TIM_Base_SetConfig+0xf4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a33      	ldr	r2, [pc, #204]	@ (8003d20 <TIM_Base_SetConfig+0xf8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a32      	ldr	r2, [pc, #200]	@ (8003d24 <TIM_Base_SetConfig+0xfc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c80:	d017      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <TIM_Base_SetConfig+0xf4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a24      	ldr	r2, [pc, #144]	@ (8003d20 <TIM_Base_SetConfig+0xf8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a23      	ldr	r2, [pc, #140]	@ (8003d24 <TIM_Base_SetConfig+0xfc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <TIM_Base_SetConfig+0x100>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <TIM_Base_SetConfig+0x104>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a20      	ldr	r2, [pc, #128]	@ (8003d30 <TIM_Base_SetConfig+0x108>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d103      	bne.n	8003cf2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800

08003d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	f107 001c 	add.w	r0, r7, #28
 8003d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d123      	bne.n	8003dbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 fae8 	bl	8005388 <USB_CoreReset>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e01b      	b.n	8003df6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f001 fadc 	bl	8005388 <USB_CoreReset>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	@ 0x38
 8003de8:	e005      	b.n	8003df6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003df6:	7fbb      	ldrb	r3, [r7, #30]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10b      	bne.n	8003e14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f043 0206 	orr.w	r2, r3, #6
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e20:	b004      	add	sp, #16
 8003e22:	4770      	bx	lr

08003e24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d165      	bne.n	8003f04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a41      	ldr	r2, [pc, #260]	@ (8003f40 <USB_SetTurnaroundTime+0x11c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d906      	bls.n	8003e4e <USB_SetTurnaroundTime+0x2a>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4a40      	ldr	r2, [pc, #256]	@ (8003f44 <USB_SetTurnaroundTime+0x120>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d202      	bcs.n	8003e4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e48:	230f      	movs	r3, #15
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e062      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	@ (8003f44 <USB_SetTurnaroundTime+0x120>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d306      	bcc.n	8003e64 <USB_SetTurnaroundTime+0x40>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4a3b      	ldr	r2, [pc, #236]	@ (8003f48 <USB_SetTurnaroundTime+0x124>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d202      	bcs.n	8003e64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e5e:	230e      	movs	r3, #14
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e057      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4a38      	ldr	r2, [pc, #224]	@ (8003f48 <USB_SetTurnaroundTime+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d306      	bcc.n	8003e7a <USB_SetTurnaroundTime+0x56>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4a37      	ldr	r2, [pc, #220]	@ (8003f4c <USB_SetTurnaroundTime+0x128>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d202      	bcs.n	8003e7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e74:	230d      	movs	r3, #13
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e04c      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4a33      	ldr	r2, [pc, #204]	@ (8003f4c <USB_SetTurnaroundTime+0x128>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d306      	bcc.n	8003e90 <USB_SetTurnaroundTime+0x6c>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4a32      	ldr	r2, [pc, #200]	@ (8003f50 <USB_SetTurnaroundTime+0x12c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d802      	bhi.n	8003e90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e041      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	@ (8003f50 <USB_SetTurnaroundTime+0x12c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d906      	bls.n	8003ea6 <USB_SetTurnaroundTime+0x82>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f54 <USB_SetTurnaroundTime+0x130>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d802      	bhi.n	8003ea6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ea0:	230b      	movs	r3, #11
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e036      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f54 <USB_SetTurnaroundTime+0x130>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d906      	bls.n	8003ebc <USB_SetTurnaroundTime+0x98>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4a29      	ldr	r2, [pc, #164]	@ (8003f58 <USB_SetTurnaroundTime+0x134>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d802      	bhi.n	8003ebc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003eb6:	230a      	movs	r3, #10
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e02b      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <USB_SetTurnaroundTime+0x134>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d906      	bls.n	8003ed2 <USB_SetTurnaroundTime+0xae>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4a25      	ldr	r2, [pc, #148]	@ (8003f5c <USB_SetTurnaroundTime+0x138>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d202      	bcs.n	8003ed2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ecc:	2309      	movs	r3, #9
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e020      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <USB_SetTurnaroundTime+0x138>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d306      	bcc.n	8003ee8 <USB_SetTurnaroundTime+0xc4>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4a20      	ldr	r2, [pc, #128]	@ (8003f60 <USB_SetTurnaroundTime+0x13c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d802      	bhi.n	8003ee8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e015      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a1d      	ldr	r2, [pc, #116]	@ (8003f60 <USB_SetTurnaroundTime+0x13c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d906      	bls.n	8003efe <USB_SetTurnaroundTime+0xda>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <USB_SetTurnaroundTime+0x140>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d202      	bcs.n	8003efe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ef8:	2307      	movs	r3, #7
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e00a      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003efe:	2306      	movs	r3, #6
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e007      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f0a:	2309      	movs	r3, #9
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e001      	b.n	8003f14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f10:	2309      	movs	r3, #9
 8003f12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	029b      	lsls	r3, r3, #10
 8003f28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	00d8acbf 	.word	0x00d8acbf
 8003f44:	00e4e1c0 	.word	0x00e4e1c0
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	01067380 	.word	0x01067380
 8003f50:	011a499f 	.word	0x011a499f
 8003f54:	01312cff 	.word	0x01312cff
 8003f58:	014ca43f 	.word	0x014ca43f
 8003f5c:	016e3600 	.word	0x016e3600
 8003f60:	01a6ab1f 	.word	0x01a6ab1f
 8003f64:	01e84800 	.word	0x01e84800

08003f68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d115      	bne.n	8003ffa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003fda:	200a      	movs	r0, #10
 8003fdc:	f7fd f878 	bl	80010d0 <HAL_Delay>
      ms += 10U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	330a      	adds	r3, #10
 8003fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 f93f 	bl	800526a <USB_GetMode>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d01e      	beq.n	8004030 <USB_SetCurrentMode+0x84>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ff6:	d9f0      	bls.n	8003fda <USB_SetCurrentMode+0x2e>
 8003ff8:	e01a      	b.n	8004030 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d115      	bne.n	800402c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800400c:	200a      	movs	r0, #10
 800400e:	f7fd f85f 	bl	80010d0 <HAL_Delay>
      ms += 10U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	330a      	adds	r3, #10
 8004016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f001 f926 	bl	800526a <USB_GetMode>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <USB_SetCurrentMode+0x84>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2bc7      	cmp	r3, #199	@ 0xc7
 8004028:	d9f0      	bls.n	800400c <USB_SetCurrentMode+0x60>
 800402a:	e001      	b.n	8004030 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e005      	b.n	800403c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2bc8      	cmp	r3, #200	@ 0xc8
 8004034:	d101      	bne.n	800403a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004044:	b084      	sub	sp, #16
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e009      	b.n	8004078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3340      	adds	r3, #64	@ 0x40
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	2200      	movs	r2, #0
 8004070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	3301      	adds	r3, #1
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b0e      	cmp	r3, #14
 800407c:	d9f2      	bls.n	8004064 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800407e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004082:	2b00      	cmp	r3, #0
 8004084:	d11c      	bne.n	80040c0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004094:	f043 0302 	orr.w	r3, r3, #2
 8004098:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80040be:	e00b      	b.n	80040d8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040de:	461a      	mov	r2, r3
 80040e0:	2300      	movs	r3, #0
 80040e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10d      	bne.n	8004108 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040f4:	2100      	movs	r1, #0
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f968 	bl	80043cc <USB_SetDevSpeed>
 80040fc:	e008      	b.n	8004110 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040fe:	2101      	movs	r1, #1
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f963 	bl	80043cc <USB_SetDevSpeed>
 8004106:	e003      	b.n	8004110 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004108:	2103      	movs	r1, #3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f95e 	bl	80043cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004110:	2110      	movs	r1, #16
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8fa 	bl	800430c <USB_FlushTxFifo>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f924 	bl	8004370 <USB_FlushRxFifo>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004138:	461a      	mov	r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004144:	461a      	mov	r2, r3
 8004146:	2300      	movs	r3, #0
 8004148:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	e043      	b.n	80041e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800416e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004172:	d118      	bne.n	80041a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004186:	461a      	mov	r2, r3
 8004188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e013      	b.n	80041b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800419c:	461a      	mov	r2, r3
 800419e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	e008      	b.n	80041b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b2:	461a      	mov	r2, r3
 80041b4:	2300      	movs	r3, #0
 80041b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c4:	461a      	mov	r2, r3
 80041c6:	2300      	movs	r3, #0
 80041c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d6:	461a      	mov	r2, r3
 80041d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3301      	adds	r3, #1
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80041e8:	461a      	mov	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d3b5      	bcc.n	800415c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e043      	b.n	800427e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800420c:	d118      	bne.n	8004240 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	e013      	b.n	8004252 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004236:	461a      	mov	r2, r3
 8004238:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e008      	b.n	8004252 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424c:	461a      	mov	r2, r3
 800424e:	2300      	movs	r3, #0
 8004250:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004270:	461a      	mov	r2, r3
 8004272:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004282:	461a      	mov	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4293      	cmp	r3, r2
 8004288:	d3b5      	bcc.n	80041f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800429c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80042aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <USB_DevInit+0x2c4>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f043 0208 	orr.w	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004304:	b004      	add	sp, #16
 8004306:	4770      	bx	lr
 8004308:	803c3800 	.word	0x803c3800

0800430c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004326:	d901      	bls.n	800432c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e01b      	b.n	8004364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	daf2      	bge.n	800431a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	019b      	lsls	r3, r3, #6
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004350:	d901      	bls.n	8004356 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e006      	b.n	8004364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b20      	cmp	r3, #32
 8004360:	d0f0      	beq.n	8004344 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3301      	adds	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004388:	d901      	bls.n	800438e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e018      	b.n	80043c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	daf2      	bge.n	800437c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2210      	movs	r2, #16
 800439e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043ac:	d901      	bls.n	80043b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e006      	b.n	80043c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d0f0      	beq.n	80043a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0306 	and.w	r3, r3, #6
 8004416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
 8004422:	e00a      	b.n	800443a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d002      	beq.n	8004430 <USB_GetDevSpeed+0x32>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d102      	bne.n	8004436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004430:	2302      	movs	r3, #2
 8004432:	75fb      	strb	r3, [r7, #23]
 8004434:	e001      	b.n	800443a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004436:	230f      	movs	r3, #15
 8004438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d13a      	bne.n	80044da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	b29b      	uxth	r3, r3
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004482:	4313      	orrs	r3, r2
 8004484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d155      	bne.n	8004548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	791b      	ldrb	r3, [r3, #4]
 80044b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	059b      	lsls	r3, r3, #22
 80044be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044c0:	4313      	orrs	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e036      	b.n	8004548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11a      	bne.n	8004548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	791b      	ldrb	r3, [r3, #4]
 800452c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800452e:	430b      	orrs	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d161      	bne.n	8004638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800458a:	d11f      	bne.n	80045cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	68f9      	ldr	r1, [r7, #12]
 80045e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045ec:	4013      	ands	r3, r2
 80045ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004610:	4013      	ands	r3, r2
 8004612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	0159      	lsls	r1, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	440b      	add	r3, r1
 800462a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800462e:	4619      	mov	r1, r3
 8004630:	4b35      	ldr	r3, [pc, #212]	@ (8004708 <USB_DeactivateEndpoint+0x1b0>)
 8004632:	4013      	ands	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
 8004636:	e060      	b.n	80046fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800464a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800464e:	d11f      	bne.n	8004690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800466a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800466e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800468e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	43db      	mvns	r3, r3
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046b0:	4013      	ands	r3, r2
 80046b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	43db      	mvns	r3, r3
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046d4:	4013      	ands	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0159      	lsls	r1, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	440b      	add	r3, r1
 80046ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f2:	4619      	mov	r1, r3
 80046f4:	4b05      	ldr	r3, [pc, #20]	@ (800470c <USB_DeactivateEndpoint+0x1b4>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	ec337800 	.word	0xec337800
 800470c:	eff37800 	.word	0xeff37800

08004710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b01      	cmp	r3, #1
 800472e:	f040 817f 	bne.w	8004a30 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d132      	bne.n	80047a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004754:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004758:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800475c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800477c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004798:	0cdb      	lsrs	r3, r3, #19
 800479a:	04db      	lsls	r3, r3, #19
 800479c:	6113      	str	r3, [r2, #16]
 800479e:	e097      	b.n	80048d0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ba:	0cdb      	lsrs	r3, r3, #19
 80047bc:	04db      	lsls	r3, r3, #19
 80047be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047e2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d11a      	bne.n	8004820 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d903      	bls.n	80047fe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004818:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800481c:	6113      	str	r3, [r2, #16]
 800481e:	e044      	b.n	80048aa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4413      	add	r3, r2
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	8afb      	ldrh	r3, [r7, #22]
 8004846:	04d9      	lsls	r1, r3, #19
 8004848:	4ba4      	ldr	r3, [pc, #656]	@ (8004adc <USB_EPStartXfer+0x3cc>)
 800484a:	400b      	ands	r3, r1
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	0148      	lsls	r0, r1, #5
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	4401      	add	r1, r0
 8004854:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004858:	4313      	orrs	r3, r2
 800485a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	791b      	ldrb	r3, [r3, #4]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d122      	bne.n	80048aa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800487e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004882:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	8afb      	ldrh	r3, [r7, #22]
 8004894:	075b      	lsls	r3, r3, #29
 8004896:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	0148      	lsls	r0, r1, #5
 800489e:	69f9      	ldr	r1, [r7, #28]
 80048a0:	4401      	add	r1, r0
 80048a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80048a6:	4313      	orrs	r3, r2
 80048a8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	0148      	lsls	r0, r1, #5
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	4401      	add	r1, r0
 80048c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d14b      	bne.n	800496e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	791b      	ldrb	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d128      	bne.n	800494c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d110      	bne.n	800492c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	440a      	add	r2, r1
 8004920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e00f      	b.n	800494c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800494a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004966:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e166      	b.n	8004c3c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004988:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800498c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	791b      	ldrb	r3, [r3, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d015      	beq.n	80049c2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 814e 	beq.w	8004c3c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	2101      	movs	r1, #1
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049bc:	4313      	orrs	r3, r2
 80049be:	634b      	str	r3, [r1, #52]	@ 0x34
 80049c0:	e13c      	b.n	8004c3c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d110      	bne.n	80049f4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e00f      	b.n	8004a14 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a12:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	68d9      	ldr	r1, [r3, #12]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781a      	ldrb	r2, [r3, #0]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	b298      	uxth	r0, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4603      	mov	r3, r0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f9b9 	bl	8004da0 <USB_WritePacket>
 8004a2e:	e105      	b.n	8004c3c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a4a:	0cdb      	lsrs	r3, r3, #19
 8004a4c:	04db      	lsls	r3, r3, #19
 8004a4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a72:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d132      	bne.n	8004ae0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	0148      	lsls	r0, r1, #5
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	4401      	add	r1, r0
 8004ab0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ad6:	6113      	str	r3, [r2, #16]
 8004ad8:	e062      	b.n	8004ba0 <USB_EPStartXfer+0x490>
 8004ada:	bf00      	nop
 8004adc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d123      	bne.n	8004b30 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afe:	69b9      	ldr	r1, [r7, #24]
 8004b00:	0148      	lsls	r0, r1, #5
 8004b02:	69f9      	ldr	r1, [r7, #28]
 8004b04:	4401      	add	r1, r0
 8004b06:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b2c:	6113      	str	r3, [r2, #16]
 8004b2e:	e037      	b.n	8004ba0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	8afa      	ldrh	r2, [r7, #22]
 8004b4c:	fb03 f202 	mul.w	r2, r3, r2
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	04d9      	lsls	r1, r3, #19
 8004b66:	4b38      	ldr	r3, [pc, #224]	@ (8004c48 <USB_EPStartXfer+0x538>)
 8004b68:	400b      	ands	r3, r1
 8004b6a:	69b9      	ldr	r1, [r7, #24]
 8004b6c:	0148      	lsls	r0, r1, #5
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	4401      	add	r1, r0
 8004b72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	0148      	lsls	r0, r1, #5
 8004b94:	69f9      	ldr	r1, [r7, #28]
 8004b96:	4401      	add	r1, r0
 8004b98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10d      	bne.n	8004bc2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68d9      	ldr	r1, [r3, #12]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	791b      	ldrb	r3, [r3, #4]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d128      	bne.n	8004c1c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d110      	bne.n	8004bfc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e00f      	b.n	8004c1c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	1ff80000 	.word	0x1ff80000

08004c4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d14a      	bne.n	8004d00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c82:	f040 8086 	bne.w	8004d92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ca8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	7812      	ldrb	r2, [r2, #0]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ccc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d902      	bls.n	8004ce4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ce2:	e056      	b.n	8004d92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cfc:	d0e7      	beq.n	8004cce <USB_EPStopXfer+0x82>
 8004cfe:	e048      	b.n	8004d92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d18:	d13b      	bne.n	8004d92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	0151      	lsls	r1, r2, #5
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	440a      	add	r2, r1
 8004d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	7812      	ldrb	r2, [r2, #0]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d902      	bls.n	8004d78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
          break;
 8004d76:	e00c      	b.n	8004d92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d90:	d0e7      	beq.n	8004d62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4611      	mov	r1, r2
 8004dac:	461a      	mov	r2, r3
 8004dae:	460b      	mov	r3, r1
 8004db0:	71fb      	strb	r3, [r7, #7]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d123      	bne.n	8004e0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004dc6:	88bb      	ldrh	r3, [r7, #4]
 8004dc8:	3303      	adds	r3, #3
 8004dca:	089b      	lsrs	r3, r3, #2
 8004dcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e018      	b.n	8004e06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	031a      	lsls	r2, r3, #12
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de0:	461a      	mov	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	3301      	adds	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3301      	adds	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3301      	adds	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3e2      	bcc.n	8004dd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3724      	adds	r7, #36	@ 0x24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b08b      	sub	sp, #44	@ 0x2c
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	e014      	b.n	8004e72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	3301      	adds	r3, #1
 8004e58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	3301      	adds	r3, #1
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	3301      	adds	r3, #1
 8004e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	623b      	str	r3, [r7, #32]
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3e6      	bcc.n	8004e48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e7a:	8bfb      	ldrh	r3, [r7, #30]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01e      	beq.n	8004ebe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f107 0310 	add.w	r3, r7, #16
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	623b      	str	r3, [r7, #32]
      pDest++;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004eb2:	8bfb      	ldrh	r3, [r7, #30]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004eb8:	8bfb      	ldrh	r3, [r7, #30]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ea      	bne.n	8004e94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	372c      	adds	r7, #44	@ 0x2c
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d12c      	bne.n	8004f42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	db12      	blt.n	8004f20 <USB_EPSetStall+0x54>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00f      	beq.n	8004f20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	e02b      	b.n	8004f9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	db12      	blt.n	8004f7a <USB_EPSetStall+0xae>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00f      	beq.n	8004f7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d128      	bne.n	8005016 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fe2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	791b      	ldrb	r3, [r3, #4]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d003      	beq.n	8004ff4 <USB_EPClearStall+0x4c>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	791b      	ldrb	r3, [r3, #4]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d138      	bne.n	8005066 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800500e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e027      	b.n	8005066 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005030:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005034:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	791b      	ldrb	r3, [r3, #4]
 800503a:	2b03      	cmp	r3, #3
 800503c:	d003      	beq.n	8005046 <USB_EPClearStall+0x9e>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	791b      	ldrb	r3, [r3, #4]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d10f      	bne.n	8005066 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005092:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005096:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80050a8:	68f9      	ldr	r1, [r7, #12]
 80050aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050ee:	f023 0302 	bic.w	r3, r3, #2
 80050f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800511c:	f023 0303 	bic.w	r3, r3, #3
 8005120:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	0c1b      	lsrs	r3, r3, #16
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	4013      	ands	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	b29b      	uxth	r3, r3
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005200:	68bb      	ldr	r3, [r7, #8]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800522e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005230:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	fa22 f303 	lsr.w	r3, r2, r3
 800523e:	01db      	lsls	r3, r3, #7
 8005240:	b2db      	uxtb	r3, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4013      	ands	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800525c:	68bb      	ldr	r3, [r7, #8]
}
 800525e:	4618      	mov	r0, r3
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0301 	and.w	r3, r3, #1
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80052a4:	f023 0307 	bic.w	r3, r3, #7
 80052a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	460b      	mov	r3, r1
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	333c      	adds	r3, #60	@ 0x3c
 80052e2:	3304      	adds	r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4a26      	ldr	r2, [pc, #152]	@ (8005384 <USB_EP0_OutStart+0xb8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d90a      	bls.n	8005306 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005300:	d101      	bne.n	8005306 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e037      	b.n	8005376 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800530c:	461a      	mov	r2, r3
 800530e:	2300      	movs	r3, #0
 8005310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005320:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005334:	f043 0318 	orr.w	r3, r3, #24
 8005338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005348:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800534c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10f      	bne.n	8005374 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800536e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	4f54300a 	.word	0x4f54300a

08005388 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053a0:	d901      	bls.n	80053a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e022      	b.n	80053ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	daf2      	bge.n	8005394 <USB_CoreReset+0xc>

  count = 10U;
 80053ae:	230a      	movs	r3, #10
 80053b0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80053b2:	e002      	b.n	80053ba <USB_CoreReset+0x32>
  {
    count--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f9      	bne.n	80053b4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f043 0201 	orr.w	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053d8:	d901      	bls.n	80053de <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e006      	b.n	80053ec <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d0f0      	beq.n	80053cc <USB_CoreReset+0x44>

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005404:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005408:	f002 fd2e 	bl	8007e68 <USBD_static_malloc>
 800540c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	32b0      	adds	r2, #176	@ 0xb0
 800541e:	2100      	movs	r1, #0
 8005420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005424:	2302      	movs	r3, #2
 8005426:	e0d4      	b.n	80055d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005428:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800542c:	2100      	movs	r1, #0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f002 fd5e 	bl	8007ef0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	32b0      	adds	r2, #176	@ 0xb0
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	32b0      	adds	r2, #176	@ 0xb0
 800544e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	7c1b      	ldrb	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d138      	bne.n	80054d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005460:	4b5e      	ldr	r3, [pc, #376]	@ (80055dc <USBD_CDC_Init+0x1e4>)
 8005462:	7819      	ldrb	r1, [r3, #0]
 8005464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005468:	2202      	movs	r2, #2
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f002 fbd9 	bl	8007c22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005470:	4b5a      	ldr	r3, [pc, #360]	@ (80055dc <USBD_CDC_Init+0x1e4>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f003 020f 	and.w	r2, r3, #15
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	3323      	adds	r3, #35	@ 0x23
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800548a:	4b55      	ldr	r3, [pc, #340]	@ (80055e0 <USBD_CDC_Init+0x1e8>)
 800548c:	7819      	ldrb	r1, [r3, #0]
 800548e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005492:	2202      	movs	r2, #2
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f002 fbc4 	bl	8007c22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800549a:	4b51      	ldr	r3, [pc, #324]	@ (80055e0 <USBD_CDC_Init+0x1e8>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	f003 020f 	and.w	r2, r3, #15
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80054b6:	4b4b      	ldr	r3, [pc, #300]	@ (80055e4 <USBD_CDC_Init+0x1ec>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	f003 020f 	and.w	r2, r3, #15
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	331c      	adds	r3, #28
 80054cc:	2210      	movs	r2, #16
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e035      	b.n	800553e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054d2:	4b42      	ldr	r3, [pc, #264]	@ (80055dc <USBD_CDC_Init+0x1e4>)
 80054d4:	7819      	ldrb	r1, [r3, #0]
 80054d6:	2340      	movs	r3, #64	@ 0x40
 80054d8:	2202      	movs	r2, #2
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f002 fba1 	bl	8007c22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054e0:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <USBD_CDC_Init+0x1e4>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3323      	adds	r3, #35	@ 0x23
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054fa:	4b39      	ldr	r3, [pc, #228]	@ (80055e0 <USBD_CDC_Init+0x1e8>)
 80054fc:	7819      	ldrb	r1, [r3, #0]
 80054fe:	2340      	movs	r3, #64	@ 0x40
 8005500:	2202      	movs	r2, #2
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fb8d 	bl	8007c22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005508:	4b35      	ldr	r3, [pc, #212]	@ (80055e0 <USBD_CDC_Init+0x1e8>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005524:	4b2f      	ldr	r3, [pc, #188]	@ (80055e4 <USBD_CDC_Init+0x1ec>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	331c      	adds	r3, #28
 800553a:	2210      	movs	r2, #16
 800553c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800553e:	4b29      	ldr	r3, [pc, #164]	@ (80055e4 <USBD_CDC_Init+0x1ec>)
 8005540:	7819      	ldrb	r1, [r3, #0]
 8005542:	2308      	movs	r3, #8
 8005544:	2203      	movs	r2, #3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f002 fb6b 	bl	8007c22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800554c:	4b25      	ldr	r3, [pc, #148]	@ (80055e4 <USBD_CDC_Init+0x1ec>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3323      	adds	r3, #35	@ 0x23
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	33b0      	adds	r3, #176	@ 0xb0
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800559c:	2302      	movs	r3, #2
 800559e:	e018      	b.n	80055d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7c1b      	ldrb	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055a8:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <USBD_CDC_Init+0x1e8>)
 80055aa:	7819      	ldrb	r1, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80055b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f002 fc22 	bl	8007e00 <USBD_LL_PrepareReceive>
 80055bc:	e008      	b.n	80055d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055be:	4b08      	ldr	r3, [pc, #32]	@ (80055e0 <USBD_CDC_Init+0x1e8>)
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80055c8:	2340      	movs	r3, #64	@ 0x40
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f002 fc18 	bl	8007e00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000093 	.word	0x20000093
 80055e0:	20000094 	.word	0x20000094
 80055e4:	20000095 	.word	0x20000095

080055e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80055f4:	4b3a      	ldr	r3, [pc, #232]	@ (80056e0 <USBD_CDC_DeInit+0xf8>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f002 fb37 	bl	8007c6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005600:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <USBD_CDC_DeInit+0xf8>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	3323      	adds	r3, #35	@ 0x23
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800561a:	4b32      	ldr	r3, [pc, #200]	@ (80056e4 <USBD_CDC_DeInit+0xfc>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f002 fb24 	bl	8007c6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005626:	4b2f      	ldr	r3, [pc, #188]	@ (80056e4 <USBD_CDC_DeInit+0xfc>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f003 020f 	and.w	r2, r3, #15
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005642:	4b29      	ldr	r3, [pc, #164]	@ (80056e8 <USBD_CDC_DeInit+0x100>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f002 fb10 	bl	8007c6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800564e:	4b26      	ldr	r3, [pc, #152]	@ (80056e8 <USBD_CDC_DeInit+0x100>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	3323      	adds	r3, #35	@ 0x23
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005668:	4b1f      	ldr	r3, [pc, #124]	@ (80056e8 <USBD_CDC_DeInit+0x100>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 020f 	and.w	r2, r3, #15
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	331c      	adds	r3, #28
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	32b0      	adds	r2, #176	@ 0xb0
 800568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01f      	beq.n	80056d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	33b0      	adds	r3, #176	@ 0xb0
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	32b0      	adds	r2, #176	@ 0xb0
 80056b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 fbe4 	bl	8007e84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	32b0      	adds	r2, #176	@ 0xb0
 80056c6:	2100      	movs	r1, #0
 80056c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000093 	.word	0x20000093
 80056e4:	20000094 	.word	0x20000094
 80056e8:	20000095 	.word	0x20000095

080056ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	32b0      	adds	r2, #176	@ 0xb0
 8005700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005704:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005718:	2303      	movs	r3, #3
 800571a:	e0bf      	b.n	800589c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005724:	2b00      	cmp	r3, #0
 8005726:	d050      	beq.n	80057ca <USBD_CDC_Setup+0xde>
 8005728:	2b20      	cmp	r3, #32
 800572a:	f040 80af 	bne.w	800588c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	88db      	ldrh	r3, [r3, #6]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d03a      	beq.n	80057ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	b25b      	sxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	da1b      	bge.n	8005778 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	33b0      	adds	r3, #176	@ 0xb0
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005756:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	88d2      	ldrh	r2, [r2, #6]
 800575c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	88db      	ldrh	r3, [r3, #6]
 8005762:	2b07      	cmp	r3, #7
 8005764:	bf28      	it	cs
 8005766:	2307      	movcs	r3, #7
 8005768:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	89fa      	ldrh	r2, [r7, #14]
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 fda9 	bl	80072c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005776:	e090      	b.n	800589a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	785a      	ldrb	r2, [r3, #1]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	88db      	ldrh	r3, [r3, #6]
 8005786:	2b3f      	cmp	r3, #63	@ 0x3f
 8005788:	d803      	bhi.n	8005792 <USBD_CDC_Setup+0xa6>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	88db      	ldrh	r3, [r3, #6]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	e000      	b.n	8005794 <USBD_CDC_Setup+0xa8>
 8005792:	2240      	movs	r2, #64	@ 0x40
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800579a:	6939      	ldr	r1, [r7, #16]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80057a2:	461a      	mov	r2, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fdbe 	bl	8007326 <USBD_CtlPrepareRx>
      break;
 80057aa:	e076      	b.n	800589a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	33b0      	adds	r3, #176	@ 0xb0
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	7850      	ldrb	r0, [r2, #1]
 80057c2:	2200      	movs	r2, #0
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	4798      	blx	r3
      break;
 80057c8:	e067      	b.n	800589a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b0b      	cmp	r3, #11
 80057d0:	d851      	bhi.n	8005876 <USBD_CDC_Setup+0x18a>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <USBD_CDC_Setup+0xec>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	08005809 	.word	0x08005809
 80057dc:	08005885 	.word	0x08005885
 80057e0:	08005877 	.word	0x08005877
 80057e4:	08005877 	.word	0x08005877
 80057e8:	08005877 	.word	0x08005877
 80057ec:	08005877 	.word	0x08005877
 80057f0:	08005877 	.word	0x08005877
 80057f4:	08005877 	.word	0x08005877
 80057f8:	08005877 	.word	0x08005877
 80057fc:	08005877 	.word	0x08005877
 8005800:	08005833 	.word	0x08005833
 8005804:	0800585d 	.word	0x0800585d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b03      	cmp	r3, #3
 8005812:	d107      	bne.n	8005824 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005814:	f107 030a 	add.w	r3, r7, #10
 8005818:	2202      	movs	r2, #2
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 fd53 	bl	80072c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005822:	e032      	b.n	800588a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fcd1 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 800582c:	2303      	movs	r3, #3
 800582e:	75fb      	strb	r3, [r7, #23]
          break;
 8005830:	e02b      	b.n	800588a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b03      	cmp	r3, #3
 800583c:	d107      	bne.n	800584e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800583e:	f107 030d 	add.w	r3, r7, #13
 8005842:	2201      	movs	r2, #1
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fd3e 	bl	80072c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800584c:	e01d      	b.n	800588a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fcbc 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005856:	2303      	movs	r3, #3
 8005858:	75fb      	strb	r3, [r7, #23]
          break;
 800585a:	e016      	b.n	800588a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d00f      	beq.n	8005888 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fcaf 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005870:	2303      	movs	r3, #3
 8005872:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005874:	e008      	b.n	8005888 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fca8 	bl	80071ce <USBD_CtlError>
          ret = USBD_FAIL;
 800587e:	2303      	movs	r3, #3
 8005880:	75fb      	strb	r3, [r7, #23]
          break;
 8005882:	e002      	b.n	800588a <USBD_CDC_Setup+0x19e>
          break;
 8005884:	bf00      	nop
 8005886:	e008      	b.n	800589a <USBD_CDC_Setup+0x1ae>
          break;
 8005888:	bf00      	nop
      }
      break;
 800588a:	e006      	b.n	800589a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fc9d 	bl	80071ce <USBD_CtlError>
      ret = USBD_FAIL;
 8005894:	2303      	movs	r3, #3
 8005896:	75fb      	strb	r3, [r7, #23]
      break;
 8005898:	bf00      	nop
  }

  return (uint8_t)ret;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80058b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	32b0      	adds	r2, #176	@ 0xb0
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e065      	b.n	800599a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	32b0      	adds	r2, #176	@ 0xb0
 80058d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	440b      	add	r3, r1
 80058f0:	3314      	adds	r3, #20
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02f      	beq.n	8005958 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	3314      	adds	r3, #20
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	f003 010f 	and.w	r1, r3, #15
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	460b      	mov	r3, r1
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4403      	add	r3, r0
 8005920:	331c      	adds	r3, #28
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	fbb2 f1f3 	udiv	r1, r2, r3
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800592e:	2b00      	cmp	r3, #0
 8005930:	d112      	bne.n	8005958 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3314      	adds	r3, #20
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800594a:	78f9      	ldrb	r1, [r7, #3]
 800594c:	2300      	movs	r3, #0
 800594e:	2200      	movs	r2, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f002 fa34 	bl	8007dbe <USBD_LL_Transmit>
 8005956:	e01f      	b.n	8005998 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	33b0      	adds	r3, #176	@ 0xb0
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	33b0      	adds	r3, #176	@ 0xb0
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	460b      	mov	r3, r1
 80059ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	32b0      	adds	r2, #176	@ 0xb0
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	32b0      	adds	r2, #176	@ 0xb0
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e01a      	b.n	8005a0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f002 fa32 	bl	8007e42 <USBD_LL_GetRxDataSize>
 80059de:	4602      	mov	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	33b0      	adds	r3, #176	@ 0xb0
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005a04:	4611      	mov	r1, r2
 8005a06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	32b0      	adds	r2, #176	@ 0xb0
 8005a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e024      	b.n	8005a7e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	33b0      	adds	r3, #176	@ 0xb0
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d019      	beq.n	8005a7c <USBD_CDC_EP0_RxReady+0x6a>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005a4e:	2bff      	cmp	r3, #255	@ 0xff
 8005a50:	d014      	beq.n	8005a7c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	33b0      	adds	r3, #176	@ 0xb0
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005a6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	22ff      	movs	r2, #255	@ 0xff
 8005a78:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a90:	2182      	movs	r1, #130	@ 0x82
 8005a92:	4818      	ldr	r0, [pc, #96]	@ (8005af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a94:	f000 fd62 	bl	800655c <USBD_GetEpDesc>
 8005a98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4815      	ldr	r0, [pc, #84]	@ (8005af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a9e:	f000 fd5d 	bl	800655c <USBD_GetEpDesc>
 8005aa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005aa4:	2181      	movs	r1, #129	@ 0x81
 8005aa6:	4813      	ldr	r0, [pc, #76]	@ (8005af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005aa8:	f000 fd58 	bl	800655c <USBD_GetEpDesc>
 8005aac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d006      	beq.n	8005ace <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ac8:	711a      	strb	r2, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d006      	beq.n	8005ae2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005adc:	711a      	strb	r2, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2243      	movs	r2, #67	@ 0x43
 8005ae6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ae8:	4b02      	ldr	r3, [pc, #8]	@ (8005af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000050 	.word	0x20000050

08005af8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b00:	2182      	movs	r1, #130	@ 0x82
 8005b02:	4818      	ldr	r0, [pc, #96]	@ (8005b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b04:	f000 fd2a 	bl	800655c <USBD_GetEpDesc>
 8005b08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	4815      	ldr	r0, [pc, #84]	@ (8005b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b0e:	f000 fd25 	bl	800655c <USBD_GetEpDesc>
 8005b12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b14:	2181      	movs	r1, #129	@ 0x81
 8005b16:	4813      	ldr	r0, [pc, #76]	@ (8005b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b18:	f000 fd20 	bl	800655c <USBD_GetEpDesc>
 8005b1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2210      	movs	r2, #16
 8005b28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d006      	beq.n	8005b3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2200      	movs	r2, #0
 8005b34:	711a      	strb	r2, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f042 0202 	orr.w	r2, r2, #2
 8005b3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	711a      	strb	r2, [r3, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f042 0202 	orr.w	r2, r2, #2
 8005b50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2243      	movs	r2, #67	@ 0x43
 8005b56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b58:	4b02      	ldr	r3, [pc, #8]	@ (8005b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000050 	.word	0x20000050

08005b68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b70:	2182      	movs	r1, #130	@ 0x82
 8005b72:	4818      	ldr	r0, [pc, #96]	@ (8005bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b74:	f000 fcf2 	bl	800655c <USBD_GetEpDesc>
 8005b78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4815      	ldr	r0, [pc, #84]	@ (8005bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b7e:	f000 fced 	bl	800655c <USBD_GetEpDesc>
 8005b82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b84:	2181      	movs	r1, #129	@ 0x81
 8005b86:	4813      	ldr	r0, [pc, #76]	@ (8005bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b88:	f000 fce8 	bl	800655c <USBD_GetEpDesc>
 8005b8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2210      	movs	r2, #16
 8005b98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba8:	711a      	strb	r2, [r3, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d006      	beq.n	8005bc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bbc:	711a      	strb	r2, [r3, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2243      	movs	r2, #67	@ 0x43
 8005bc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bc8:	4b02      	ldr	r3, [pc, #8]	@ (8005bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000050 	.word	0x20000050

08005bd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	220a      	movs	r2, #10
 8005be4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005be6:	4b03      	ldr	r3, [pc, #12]	@ (8005bf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	2000000c 	.word	0x2000000c

08005bf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e009      	b.n	8005c20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	33b0      	adds	r3, #176	@ 0xb0
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	32b0      	adds	r2, #176	@ 0xb0
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e008      	b.n	8005c64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	32b0      	adds	r2, #176	@ 0xb0
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e004      	b.n	8005c9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	32b0      	adds	r2, #176	@ 0xb0
 8005cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e025      	b.n	8005d1e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11f      	bne.n	8005d1c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005ce4:	4b10      	ldr	r3, [pc, #64]	@ (8005d28 <USBD_CDC_TransmitPacket+0x7c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4403      	add	r3, r0
 8005cfe:	3314      	adds	r3, #20
 8005d00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d02:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <USBD_CDC_TransmitPacket+0x7c>)
 8005d04:	7819      	ldrb	r1, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f002 f853 	bl	8007dbe <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000093 	.word	0x20000093

08005d2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32b0      	adds	r2, #176	@ 0xb0
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	32b0      	adds	r2, #176	@ 0xb0
 8005d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e018      	b.n	8005d8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7c1b      	ldrb	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d62:	4b0c      	ldr	r3, [pc, #48]	@ (8005d94 <USBD_CDC_ReceivePacket+0x68>)
 8005d64:	7819      	ldrb	r1, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f002 f845 	bl	8007e00 <USBD_LL_PrepareReceive>
 8005d76:	e008      	b.n	8005d8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d78:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <USBD_CDC_ReceivePacket+0x68>)
 8005d7a:	7819      	ldrb	r1, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d82:	2340      	movs	r3, #64	@ 0x40
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f002 f83b 	bl	8007e00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000094 	.word	0x20000094

08005d98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e01f      	b.n	8005df0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	79fa      	ldrb	r2, [r7, #7]
 8005de2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f001 feb5 	bl	8007b54 <USBD_LL_Init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e025      	b.n	8005e5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	32ae      	adds	r2, #174	@ 0xae
 8005e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00f      	beq.n	8005e4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	32ae      	adds	r2, #174	@ 0xae
 8005e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	f107 020e 	add.w	r2, r7, #14
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	4602      	mov	r2, r0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 febd 	bl	8007bec <USBD_LL_Start>
 8005e72:	4603      	mov	r3, r0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f922 	bl	800715a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d01a      	beq.n	8005f70 <USBD_LL_SetupStage+0x72>
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d822      	bhi.n	8005f84 <USBD_LL_SetupStage+0x86>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <USBD_LL_SetupStage+0x4a>
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d00a      	beq.n	8005f5c <USBD_LL_SetupStage+0x5e>
 8005f46:	e01d      	b.n	8005f84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fb77 	bl	8006644 <USBD_StdDevReq>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
      break;
 8005f5a:	e020      	b.n	8005f9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fbdf 	bl	8006728 <USBD_StdItfReq>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6e:	e016      	b.n	8005f9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fc41 	bl	8006800 <USBD_StdEPReq>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	73fb      	strb	r3, [r7, #15]
      break;
 8005f82:	e00c      	b.n	8005f9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fe8a 	bl	8007cac <USBD_LL_StallEP>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	bf00      	nop
  }

  return ret;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d177      	bne.n	80060b0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005fc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f040 80a1 	bne.w	8006116 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	8992      	ldrh	r2, [r2, #12]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d91c      	bls.n	800601a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	8992      	ldrh	r2, [r2, #12]
 8005fe8:	1a9a      	subs	r2, r3, r2
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	8992      	ldrh	r2, [r2, #12]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6919      	ldr	r1, [r3, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	899b      	ldrh	r3, [r3, #12]
 8006004:	461a      	mov	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4293      	cmp	r3, r2
 800600c:	bf38      	it	cc
 800600e:	4613      	movcc	r3, r2
 8006010:	461a      	mov	r2, r3
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f001 f9a8 	bl	8007368 <USBD_CtlContinueRx>
 8006018:	e07d      	b.n	8006116 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2b02      	cmp	r3, #2
 8006026:	d014      	beq.n	8006052 <USBD_LL_DataOutStage+0xaa>
 8006028:	2b02      	cmp	r3, #2
 800602a:	d81d      	bhi.n	8006068 <USBD_LL_DataOutStage+0xc0>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <USBD_LL_DataOutStage+0x8e>
 8006030:	2b01      	cmp	r3, #1
 8006032:	d003      	beq.n	800603c <USBD_LL_DataOutStage+0x94>
 8006034:	e018      	b.n	8006068 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	75bb      	strb	r3, [r7, #22]
            break;
 800603a:	e018      	b.n	800606e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006042:	b2db      	uxtb	r3, r3
 8006044:	4619      	mov	r1, r3
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fa6e 	bl	8006528 <USBD_CoreFindIF>
 800604c:	4603      	mov	r3, r0
 800604e:	75bb      	strb	r3, [r7, #22]
            break;
 8006050:	e00d      	b.n	800606e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006058:	b2db      	uxtb	r3, r3
 800605a:	4619      	mov	r1, r3
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fa70 	bl	8006542 <USBD_CoreFindEP>
 8006062:	4603      	mov	r3, r0
 8006064:	75bb      	strb	r3, [r7, #22]
            break;
 8006066:	e002      	b.n	800606e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	75bb      	strb	r3, [r7, #22]
            break;
 800606c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800606e:	7dbb      	ldrb	r3, [r7, #22]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d119      	bne.n	80060a8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b03      	cmp	r3, #3
 800607e:	d113      	bne.n	80060a8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006080:	7dba      	ldrb	r2, [r7, #22]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	32ae      	adds	r2, #174	@ 0xae
 8006086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006090:	7dba      	ldrb	r2, [r7, #22]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006098:	7dba      	ldrb	r2, [r7, #22]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	32ae      	adds	r2, #174	@ 0xae
 800609e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f001 f96e 	bl	800738a <USBD_CtlSendStatus>
 80060ae:	e032      	b.n	8006116 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fa41 	bl	8006542 <USBD_CoreFindEP>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060c4:	7dbb      	ldrb	r3, [r7, #22]
 80060c6:	2bff      	cmp	r3, #255	@ 0xff
 80060c8:	d025      	beq.n	8006116 <USBD_LL_DataOutStage+0x16e>
 80060ca:	7dbb      	ldrb	r3, [r7, #22]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d122      	bne.n	8006116 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d117      	bne.n	800610c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80060dc:	7dba      	ldrb	r2, [r7, #22]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	32ae      	adds	r2, #174	@ 0xae
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00f      	beq.n	800610c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80060ec:	7dba      	ldrb	r2, [r7, #22]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80060f4:	7dba      	ldrb	r2, [r7, #22]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	32ae      	adds	r2, #174	@ 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	7afa      	ldrb	r2, [r7, #11]
 8006102:	4611      	mov	r1, r2
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	4798      	blx	r3
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	e000      	b.n	8006118 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	460b      	mov	r3, r1
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d178      	bne.n	8006226 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3314      	adds	r3, #20
 8006138:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006140:	2b02      	cmp	r3, #2
 8006142:	d163      	bne.n	800620c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	8992      	ldrh	r2, [r2, #12]
 800614c:	4293      	cmp	r3, r2
 800614e:	d91c      	bls.n	800618a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	8992      	ldrh	r2, [r2, #12]
 8006158:	1a9a      	subs	r2, r3, r2
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	8992      	ldrh	r2, [r2, #12]
 8006166:	441a      	add	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	6919      	ldr	r1, [r3, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	461a      	mov	r2, r3
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f001 f8c4 	bl	8007304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800617c:	2300      	movs	r3, #0
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f001 fe3c 	bl	8007e00 <USBD_LL_PrepareReceive>
 8006188:	e040      	b.n	800620c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	899b      	ldrh	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d11c      	bne.n	80061d2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d316      	bcc.n	80061d2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d20f      	bcs.n	80061d2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061b2:	2200      	movs	r2, #0
 80061b4:	2100      	movs	r1, #0
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f001 f8a4 	bl	8007304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061c4:	2300      	movs	r3, #0
 80061c6:	2200      	movs	r2, #0
 80061c8:	2100      	movs	r1, #0
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f001 fe18 	bl	8007e00 <USBD_LL_PrepareReceive>
 80061d0:	e01c      	b.n	800620c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d10f      	bne.n	80061fe <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061fe:	2180      	movs	r1, #128	@ 0x80
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f001 fd53 	bl	8007cac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 f8d2 	bl	80073b0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d03a      	beq.n	800628c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fe30 	bl	8005e7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006224:	e032      	b.n	800628c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800622c:	b2db      	uxtb	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f986 	bl	8006542 <USBD_CoreFindEP>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2bff      	cmp	r3, #255	@ 0xff
 800623e:	d025      	beq.n	800628c <USBD_LL_DataInStage+0x16c>
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d122      	bne.n	800628c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b03      	cmp	r3, #3
 8006250:	d11c      	bne.n	800628c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006252:	7dfa      	ldrb	r2, [r7, #23]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	32ae      	adds	r2, #174	@ 0xae
 8006258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d014      	beq.n	800628c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006262:	7dfa      	ldrb	r2, [r7, #23]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800626a:	7dfa      	ldrb	r2, [r7, #23]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	32ae      	adds	r2, #174	@ 0xae
 8006270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	7afa      	ldrb	r2, [r7, #11]
 8006278:	4611      	mov	r1, r2
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	4798      	blx	r3
 800627e:	4603      	mov	r3, r0
 8006280:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006282:	7dbb      	ldrb	r3, [r7, #22]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006288:	7dbb      	ldrb	r3, [r7, #22]
 800628a:	e000      	b.n	800628e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d014      	beq.n	80062fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6852      	ldr	r2, [r2, #4]
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	4611      	mov	r1, r2
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80062f8:	2303      	movs	r3, #3
 80062fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062fc:	2340      	movs	r3, #64	@ 0x40
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fc8d 	bl	8007c22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2240      	movs	r2, #64	@ 0x40
 8006314:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006318:	2340      	movs	r3, #64	@ 0x40
 800631a:	2200      	movs	r2, #0
 800631c:	2180      	movs	r1, #128	@ 0x80
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 fc7f 	bl	8007c22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2240      	movs	r2, #64	@ 0x40
 8006330:	841a      	strh	r2, [r3, #32]

  return ret;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b04      	cmp	r3, #4
 800636e:	d006      	beq.n	800637e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2204      	movs	r2, #4
 8006382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d106      	bne.n	80063b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d110      	bne.n	80063fa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	32ae      	adds	r2, #174	@ 0xae
 800641a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	e01c      	b.n	8006460 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d115      	bne.n	800645e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	32ae      	adds	r2, #174	@ 0xae
 800643c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	32ae      	adds	r2, #174	@ 0xae
 8006450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	4611      	mov	r1, r2
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32ae      	adds	r2, #174	@ 0xae
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006486:	2303      	movs	r3, #3
 8006488:	e01c      	b.n	80064c4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d115      	bne.n	80064c2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	32ae      	adds	r2, #174	@ 0xae
 80064a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	32ae      	adds	r2, #174	@ 0xae
 80064b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	78fa      	ldrb	r2, [r7, #3]
 80064bc:	4611      	mov	r1, r2
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6852      	ldr	r2, [r2, #4]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	4611      	mov	r1, r2
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006534:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	460b      	mov	r3, r1
 800654c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800654e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	885b      	ldrh	r3, [r3, #2]
 8006578:	b29b      	uxth	r3, r3
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	7812      	ldrb	r2, [r2, #0]
 800657e:	4293      	cmp	r3, r2
 8006580:	d91f      	bls.n	80065c2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006588:	e013      	b.n	80065b2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800658a:	f107 030a 	add.w	r3, r7, #10
 800658e:	4619      	mov	r1, r3
 8006590:	6978      	ldr	r0, [r7, #20]
 8006592:	f000 f81b 	bl	80065cc <USBD_GetNextDesc>
 8006596:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b05      	cmp	r3, #5
 800659e:	d108      	bne.n	80065b2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	789b      	ldrb	r3, [r3, #2]
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d008      	beq.n	80065c0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	897b      	ldrh	r3, [r7, #10]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d8e5      	bhi.n	800658a <USBD_GetEpDesc+0x2e>
 80065be:	e000      	b.n	80065c2 <USBD_GetEpDesc+0x66>
          break;
 80065c0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80065c2:	693b      	ldr	r3, [r7, #16]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80065f6:	68fb      	ldr	r3, [r7, #12]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	3301      	adds	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006622:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	b21a      	sxth	r2, r3
 800662a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800662e:	4313      	orrs	r3, r2
 8006630:	b21b      	sxth	r3, r3
 8006632:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006634:	89fb      	ldrh	r3, [r7, #14]
}
 8006636:	4618      	mov	r0, r3
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
	...

08006644 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800665a:	2b40      	cmp	r3, #64	@ 0x40
 800665c:	d005      	beq.n	800666a <USBD_StdDevReq+0x26>
 800665e:	2b40      	cmp	r3, #64	@ 0x40
 8006660:	d857      	bhi.n	8006712 <USBD_StdDevReq+0xce>
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <USBD_StdDevReq+0x42>
 8006666:	2b20      	cmp	r3, #32
 8006668:	d153      	bne.n	8006712 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	32ae      	adds	r2, #174	@ 0xae
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
      break;
 8006684:	e04a      	b.n	800671c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	785b      	ldrb	r3, [r3, #1]
 800668a:	2b09      	cmp	r3, #9
 800668c:	d83b      	bhi.n	8006706 <USBD_StdDevReq+0xc2>
 800668e:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <USBD_StdDevReq+0x50>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066e9 	.word	0x080066e9
 8006698:	080066fd 	.word	0x080066fd
 800669c:	08006707 	.word	0x08006707
 80066a0:	080066f3 	.word	0x080066f3
 80066a4:	08006707 	.word	0x08006707
 80066a8:	080066c7 	.word	0x080066c7
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	08006707 	.word	0x08006707
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066d1 	.word	0x080066d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa3e 	bl	8006b40 <USBD_GetDescriptor>
          break;
 80066c4:	e024      	b.n	8006710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fba3 	bl	8006e14 <USBD_SetAddress>
          break;
 80066ce:	e01f      	b.n	8006710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fbe2 	bl	8006e9c <USBD_SetConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
          break;
 80066dc:	e018      	b.n	8006710 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fc85 	bl	8006ff0 <USBD_GetConfig>
          break;
 80066e6:	e013      	b.n	8006710 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fcb6 	bl	800705c <USBD_GetStatus>
          break;
 80066f0:	e00e      	b.n	8006710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fce5 	bl	80070c4 <USBD_SetFeature>
          break;
 80066fa:	e009      	b.n	8006710 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fd09 	bl	8007116 <USBD_ClrFeature>
          break;
 8006704:	e004      	b.n	8006710 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fd60 	bl	80071ce <USBD_CtlError>
          break;
 800670e:	bf00      	nop
      }
      break;
 8006710:	e004      	b.n	800671c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fd5a 	bl	80071ce <USBD_CtlError>
      break;
 800671a:	bf00      	nop
  }

  return ret;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop

08006728 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800673e:	2b40      	cmp	r3, #64	@ 0x40
 8006740:	d005      	beq.n	800674e <USBD_StdItfReq+0x26>
 8006742:	2b40      	cmp	r3, #64	@ 0x40
 8006744:	d852      	bhi.n	80067ec <USBD_StdItfReq+0xc4>
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <USBD_StdItfReq+0x26>
 800674a:	2b20      	cmp	r3, #32
 800674c:	d14e      	bne.n	80067ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006754:	b2db      	uxtb	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	2b02      	cmp	r3, #2
 800675a:	d840      	bhi.n	80067de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	889b      	ldrh	r3, [r3, #4]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d836      	bhi.n	80067d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	889b      	ldrh	r3, [r3, #4]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff feda 	bl	8006528 <USBD_CoreFindIF>
 8006774:	4603      	mov	r3, r0
 8006776:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2bff      	cmp	r3, #255	@ 0xff
 800677c:	d01d      	beq.n	80067ba <USBD_StdItfReq+0x92>
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d11a      	bne.n	80067ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006784:	7bba      	ldrb	r2, [r7, #14]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	32ae      	adds	r2, #174	@ 0xae
 800678a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00f      	beq.n	80067b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006794:	7bba      	ldrb	r2, [r7, #14]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800679c:	7bba      	ldrb	r2, [r7, #14]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	32ae      	adds	r2, #174	@ 0xae
 80067a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067b2:	e004      	b.n	80067be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067b8:	e001      	b.n	80067be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	88db      	ldrh	r3, [r3, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d110      	bne.n	80067e8 <USBD_StdItfReq+0xc0>
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10d      	bne.n	80067e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fddc 	bl	800738a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067d2:	e009      	b.n	80067e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fcf9 	bl	80071ce <USBD_CtlError>
          break;
 80067dc:	e004      	b.n	80067e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fcf4 	bl	80071ce <USBD_CtlError>
          break;
 80067e6:	e000      	b.n	80067ea <USBD_StdItfReq+0xc2>
          break;
 80067e8:	bf00      	nop
      }
      break;
 80067ea:	e004      	b.n	80067f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fced 	bl	80071ce <USBD_CtlError>
      break;
 80067f4:	bf00      	nop
  }

  return ret;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	889b      	ldrh	r3, [r3, #4]
 8006812:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800681c:	2b40      	cmp	r3, #64	@ 0x40
 800681e:	d007      	beq.n	8006830 <USBD_StdEPReq+0x30>
 8006820:	2b40      	cmp	r3, #64	@ 0x40
 8006822:	f200 8181 	bhi.w	8006b28 <USBD_StdEPReq+0x328>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02a      	beq.n	8006880 <USBD_StdEPReq+0x80>
 800682a:	2b20      	cmp	r3, #32
 800682c:	f040 817c 	bne.w	8006b28 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006830:	7bbb      	ldrb	r3, [r7, #14]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fe84 	bl	8006542 <USBD_CoreFindEP>
 800683a:	4603      	mov	r3, r0
 800683c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800683e:	7b7b      	ldrb	r3, [r7, #13]
 8006840:	2bff      	cmp	r3, #255	@ 0xff
 8006842:	f000 8176 	beq.w	8006b32 <USBD_StdEPReq+0x332>
 8006846:	7b7b      	ldrb	r3, [r7, #13]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 8172 	bne.w	8006b32 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800684e:	7b7a      	ldrb	r2, [r7, #13]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006856:	7b7a      	ldrb	r2, [r7, #13]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	32ae      	adds	r2, #174	@ 0xae
 800685c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8165 	beq.w	8006b32 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006868:	7b7a      	ldrb	r2, [r7, #13]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	@ 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
 800687a:	4603      	mov	r3, r0
 800687c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800687e:	e158      	b.n	8006b32 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d008      	beq.n	800689a <USBD_StdEPReq+0x9a>
 8006888:	2b03      	cmp	r3, #3
 800688a:	f300 8147 	bgt.w	8006b1c <USBD_StdEPReq+0x31c>
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 809b 	beq.w	80069ca <USBD_StdEPReq+0x1ca>
 8006894:	2b01      	cmp	r3, #1
 8006896:	d03c      	beq.n	8006912 <USBD_StdEPReq+0x112>
 8006898:	e140      	b.n	8006b1c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d002      	beq.n	80068ac <USBD_StdEPReq+0xac>
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d016      	beq.n	80068d8 <USBD_StdEPReq+0xd8>
 80068aa:	e02c      	b.n	8006906 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <USBD_StdEPReq+0xce>
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	2b80      	cmp	r3, #128	@ 0x80
 80068b6:	d00a      	beq.n	80068ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f9f5 	bl	8007cac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068c2:	2180      	movs	r1, #128	@ 0x80
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f9f1 	bl	8007cac <USBD_LL_StallEP>
 80068ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068cc:	e020      	b.n	8006910 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fc7c 	bl	80071ce <USBD_CtlError>
              break;
 80068d6:	e01b      	b.n	8006910 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	885b      	ldrh	r3, [r3, #2]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10e      	bne.n	80068fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00b      	beq.n	80068fe <USBD_StdEPReq+0xfe>
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b80      	cmp	r3, #128	@ 0x80
 80068ea:	d008      	beq.n	80068fe <USBD_StdEPReq+0xfe>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	88db      	ldrh	r3, [r3, #6]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 f9d7 	bl	8007cac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fd43 	bl	800738a <USBD_CtlSendStatus>

              break;
 8006904:	e004      	b.n	8006910 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc60 	bl	80071ce <USBD_CtlError>
              break;
 800690e:	bf00      	nop
          }
          break;
 8006910:	e109      	b.n	8006b26 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d002      	beq.n	8006924 <USBD_StdEPReq+0x124>
 800691e:	2b03      	cmp	r3, #3
 8006920:	d016      	beq.n	8006950 <USBD_StdEPReq+0x150>
 8006922:	e04b      	b.n	80069bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00d      	beq.n	8006946 <USBD_StdEPReq+0x146>
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b80      	cmp	r3, #128	@ 0x80
 800692e:	d00a      	beq.n	8006946 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 f9b9 	bl	8007cac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800693a:	2180      	movs	r1, #128	@ 0x80
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 f9b5 	bl	8007cac <USBD_LL_StallEP>
 8006942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006944:	e040      	b.n	80069c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc40 	bl	80071ce <USBD_CtlError>
              break;
 800694e:	e03b      	b.n	80069c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	885b      	ldrh	r3, [r3, #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d136      	bne.n	80069c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f9bf 	bl	8007cea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fd0c 	bl	800738a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fde3 	bl	8006542 <USBD_CoreFindEP>
 800697c:	4603      	mov	r3, r0
 800697e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006980:	7b7b      	ldrb	r3, [r7, #13]
 8006982:	2bff      	cmp	r3, #255	@ 0xff
 8006984:	d01f      	beq.n	80069c6 <USBD_StdEPReq+0x1c6>
 8006986:	7b7b      	ldrb	r3, [r7, #13]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d11c      	bne.n	80069c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800698c:	7b7a      	ldrb	r2, [r7, #13]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006994:	7b7a      	ldrb	r2, [r7, #13]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	@ 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d010      	beq.n	80069c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069a4:	7b7a      	ldrb	r2, [r7, #13]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	32ae      	adds	r2, #174	@ 0xae
 80069aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80069ba:	e004      	b.n	80069c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fc05 	bl	80071ce <USBD_CtlError>
              break;
 80069c4:	e000      	b.n	80069c8 <USBD_StdEPReq+0x1c8>
              break;
 80069c6:	bf00      	nop
          }
          break;
 80069c8:	e0ad      	b.n	8006b26 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d002      	beq.n	80069dc <USBD_StdEPReq+0x1dc>
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d033      	beq.n	8006a42 <USBD_StdEPReq+0x242>
 80069da:	e099      	b.n	8006b10 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d007      	beq.n	80069f2 <USBD_StdEPReq+0x1f2>
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b80      	cmp	r3, #128	@ 0x80
 80069e6:	d004      	beq.n	80069f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fbef 	bl	80071ce <USBD_CtlError>
                break;
 80069f0:	e093      	b.n	8006b1a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da0b      	bge.n	8006a12 <USBD_StdEPReq+0x212>
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	3310      	adds	r3, #16
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3304      	adds	r3, #4
 8006a10:	e00b      	b.n	8006a2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	4413      	add	r3, r2
 8006a28:	3304      	adds	r3, #4
 8006a2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	330e      	adds	r3, #14
 8006a36:	2202      	movs	r2, #2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fc44 	bl	80072c8 <USBD_CtlSendData>
              break;
 8006a40:	e06b      	b.n	8006b1a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da11      	bge.n	8006a6e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	3323      	adds	r3, #35	@ 0x23
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d117      	bne.n	8006a94 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fbb1 	bl	80071ce <USBD_CtlError>
                  break;
 8006a6c:	e055      	b.n	8006b1a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	f003 020f 	and.w	r2, r3, #15
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb9e 	bl	80071ce <USBD_CtlError>
                  break;
 8006a92:	e042      	b.n	8006b1a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da0b      	bge.n	8006ab4 <USBD_StdEPReq+0x2b4>
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3310      	adds	r3, #16
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	4413      	add	r3, r2
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	e00b      	b.n	8006acc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	3304      	adds	r3, #4
 8006acc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <USBD_StdEPReq+0x2da>
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d103      	bne.n	8006ae2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	739a      	strb	r2, [r3, #14]
 8006ae0:	e00e      	b.n	8006b00 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f91e 	bl	8007d28 <USBD_LL_IsStallEP>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2201      	movs	r2, #1
 8006af6:	739a      	strb	r2, [r3, #14]
 8006af8:	e002      	b.n	8006b00 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2200      	movs	r2, #0
 8006afe:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	330e      	adds	r3, #14
 8006b04:	2202      	movs	r2, #2
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fbdd 	bl	80072c8 <USBD_CtlSendData>
              break;
 8006b0e:	e004      	b.n	8006b1a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fb5b 	bl	80071ce <USBD_CtlError>
              break;
 8006b18:	bf00      	nop
          }
          break;
 8006b1a:	e004      	b.n	8006b26 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb55 	bl	80071ce <USBD_CtlError>
          break;
 8006b24:	bf00      	nop
      }
      break;
 8006b26:	e005      	b.n	8006b34 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fb4f 	bl	80071ce <USBD_CtlError>
      break;
 8006b30:	e000      	b.n	8006b34 <USBD_StdEPReq+0x334>
      break;
 8006b32:	bf00      	nop
  }

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	f200 8128 	bhi.w	8006db6 <USBD_GetDescriptor+0x276>
 8006b66:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <USBD_GetDescriptor+0x2c>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006be1 	.word	0x08006be1
 8006b78:	08006db7 	.word	0x08006db7
 8006b7c:	08006db7 	.word	0x08006db7
 8006b80:	08006d57 	.word	0x08006d57
 8006b84:	08006d83 	.word	0x08006d83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	7c12      	ldrb	r2, [r2, #16]
 8006b94:	f107 0108 	add.w	r1, r7, #8
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	60f8      	str	r0, [r7, #12]
      break;
 8006b9e:	e112      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7c1b      	ldrb	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10d      	bne.n	8006bc4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb0:	f107 0208 	add.w	r2, r7, #8
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bc2:	e100      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	f107 0208 	add.w	r2, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	2202      	movs	r2, #2
 8006bdc:	701a      	strb	r2, [r3, #0]
      break;
 8006bde:	e0f2      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	885b      	ldrh	r3, [r3, #2]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	f200 80ac 	bhi.w	8006d44 <USBD_GetDescriptor+0x204>
 8006bec:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <USBD_GetDescriptor+0xb4>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c0d 	.word	0x08006c0d
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c75 	.word	0x08006c75
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006cdd 	.word	0x08006cdd
 8006c08:	08006d11 	.word	0x08006d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	7c12      	ldrb	r2, [r2, #16]
 8006c24:	f107 0108 	add.w	r1, r7, #8
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c2e:	e091      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 facb 	bl	80071ce <USBD_CtlError>
            err++;
 8006c38:	7afb      	ldrb	r3, [r7, #11]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c3e:	e089      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7c12      	ldrb	r2, [r2, #16]
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c62:	e077      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fab1 	bl	80071ce <USBD_CtlError>
            err++;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	72fb      	strb	r3, [r7, #11]
          break;
 8006c72:	e06f      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
 8006c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c96:	e05d      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa97 	bl	80071ce <USBD_CtlError>
            err++;
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca6:	e055      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cca:	e043      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa7d 	bl	80071ce <USBD_CtlError>
            err++;
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cda:	e03b      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7c12      	ldrb	r2, [r2, #16]
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfe:	e029      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa63 	bl	80071ce <USBD_CtlError>
            err++;
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0e:	e021      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d32:	e00f      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa49 	bl	80071ce <USBD_CtlError>
            err++;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	72fb      	strb	r3, [r7, #11]
          break;
 8006d42:	e007      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa41 	bl	80071ce <USBD_CtlError>
          err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d52:	bf00      	nop
      }
      break;
 8006d54:	e037      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7c1b      	ldrb	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d109      	bne.n	8006d72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d66:	f107 0208 	add.w	r2, r7, #8
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4798      	blx	r3
 8006d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d70:	e029      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fa2a 	bl	80071ce <USBD_CtlError>
        err++;
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d80:	e021      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7c1b      	ldrb	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	4610      	mov	r0, r2
 8006d98:	4798      	blx	r3
 8006d9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	2207      	movs	r2, #7
 8006da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006da4:	e00f      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa10 	bl	80071ce <USBD_CtlError>
        err++;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	3301      	adds	r3, #1
 8006db2:	72fb      	strb	r3, [r7, #11]
      break;
 8006db4:	e007      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa08 	bl	80071ce <USBD_CtlError>
      err++;
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006dc4:	bf00      	nop
  }

  if (err != 0U)
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11e      	bne.n	8006e0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	88db      	ldrh	r3, [r3, #6]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d016      	beq.n	8006e02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006dd4:	893b      	ldrh	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00e      	beq.n	8006df8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88da      	ldrh	r2, [r3, #6]
 8006dde:	893b      	ldrh	r3, [r7, #8]
 8006de0:	4293      	cmp	r3, r2
 8006de2:	bf28      	it	cs
 8006de4:	4613      	movcs	r3, r2
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dea:	893b      	ldrh	r3, [r7, #8]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fa69 	bl	80072c8 <USBD_CtlSendData>
 8006df6:	e009      	b.n	8006e0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9e7 	bl	80071ce <USBD_CtlError>
 8006e00:	e004      	b.n	8006e0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fac1 	bl	800738a <USBD_CtlSendStatus>
 8006e08:	e000      	b.n	8006e0c <USBD_GetDescriptor+0x2cc>
    return;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop

08006e14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	889b      	ldrh	r3, [r3, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d131      	bne.n	8006e8a <USBD_SetAddress+0x76>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d12d      	bne.n	8006e8a <USBD_SetAddress+0x76>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	885b      	ldrh	r3, [r3, #2]
 8006e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e34:	d829      	bhi.n	8006e8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d104      	bne.n	8006e58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f9bc 	bl	80071ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	e01d      	b.n	8006e94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7bfa      	ldrb	r2, [r7, #15]
 8006e5c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 ff8b 	bl	8007d80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa8d 	bl	800738a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	e009      	b.n	8006e94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e88:	e004      	b.n	8006e94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f99e 	bl	80071ce <USBD_CtlError>
  }
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	885b      	ldrh	r3, [r3, #2]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8006fec <USBD_SetConfig+0x150>)
 8006eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8006fec <USBD_SetConfig+0x150>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d905      	bls.n	8006ec8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f985 	bl	80071ce <USBD_CtlError>
    return USBD_FAIL;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e08c      	b.n	8006fe2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d002      	beq.n	8006eda <USBD_SetConfig+0x3e>
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d029      	beq.n	8006f2c <USBD_SetConfig+0x90>
 8006ed8:	e075      	b.n	8006fc6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006eda:	4b44      	ldr	r3, [pc, #272]	@ (8006fec <USBD_SetConfig+0x150>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d020      	beq.n	8006f24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006ee2:	4b42      	ldr	r3, [pc, #264]	@ (8006fec <USBD_SetConfig+0x150>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006eec:	4b3f      	ldr	r3, [pc, #252]	@ (8006fec <USBD_SetConfig+0x150>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe ffcd 	bl	8005e92 <USBD_SetClassConfig>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f962 	bl	80071ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f12:	e065      	b.n	8006fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa38 	bl	800738a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f22:	e05d      	b.n	8006fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa30 	bl	800738a <USBD_CtlSendStatus>
      break;
 8006f2a:	e059      	b.n	8006fe0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006fec <USBD_SetConfig+0x150>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d112      	bne.n	8006f5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fec <USBD_SetConfig+0x150>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f46:	4b29      	ldr	r3, [pc, #164]	@ (8006fec <USBD_SetConfig+0x150>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fe ffbc 	bl	8005eca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa19 	bl	800738a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f58:	e042      	b.n	8006fe0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f5a:	4b24      	ldr	r3, [pc, #144]	@ (8006fec <USBD_SetConfig+0x150>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d02a      	beq.n	8006fbe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fe ffaa 	bl	8005eca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f76:	4b1d      	ldr	r3, [pc, #116]	@ (8006fec <USBD_SetConfig+0x150>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f80:	4b1a      	ldr	r3, [pc, #104]	@ (8006fec <USBD_SetConfig+0x150>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fe ff83 	bl	8005e92 <USBD_SetClassConfig>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f918 	bl	80071ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fe ff8f 	bl	8005eca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fb4:	e014      	b.n	8006fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f9e7 	bl	800738a <USBD_CtlSendStatus>
      break;
 8006fbc:	e010      	b.n	8006fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9e3 	bl	800738a <USBD_CtlSendStatus>
      break;
 8006fc4:	e00c      	b.n	8006fe0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f900 	bl	80071ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fce:	4b07      	ldr	r3, [pc, #28]	@ (8006fec <USBD_SetConfig+0x150>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fe ff78 	bl	8005eca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006fde:	bf00      	nop
  }

  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	200003c4 	.word	0x200003c4

08006ff0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d004      	beq.n	800700c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8e2 	bl	80071ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800700a:	e023      	b.n	8007054 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	dc02      	bgt.n	800701e <USBD_GetConfig+0x2e>
 8007018:	2b00      	cmp	r3, #0
 800701a:	dc03      	bgt.n	8007024 <USBD_GetConfig+0x34>
 800701c:	e015      	b.n	800704a <USBD_GetConfig+0x5a>
 800701e:	2b03      	cmp	r3, #3
 8007020:	d00b      	beq.n	800703a <USBD_GetConfig+0x4a>
 8007022:	e012      	b.n	800704a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3308      	adds	r3, #8
 800702e:	2201      	movs	r2, #1
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f948 	bl	80072c8 <USBD_CtlSendData>
        break;
 8007038:	e00c      	b.n	8007054 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3304      	adds	r3, #4
 800703e:	2201      	movs	r2, #1
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f940 	bl	80072c8 <USBD_CtlSendData>
        break;
 8007048:	e004      	b.n	8007054 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8be 	bl	80071ce <USBD_CtlError>
        break;
 8007052:	bf00      	nop
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800706c:	b2db      	uxtb	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	2b02      	cmp	r3, #2
 8007072:	d81e      	bhi.n	80070b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	88db      	ldrh	r3, [r3, #6]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d004      	beq.n	8007086 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8a5 	bl	80071ce <USBD_CtlError>
        break;
 8007084:	e01a      	b.n	80070bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f043 0202 	orr.w	r2, r3, #2
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	330c      	adds	r3, #12
 80070a6:	2202      	movs	r2, #2
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f90c 	bl	80072c8 <USBD_CtlSendData>
      break;
 80070b0:	e004      	b.n	80070bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f88a 	bl	80071ce <USBD_CtlError>
      break;
 80070ba:	bf00      	nop
  }
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	885b      	ldrh	r3, [r3, #2]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f953 	bl	800738a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80070e4:	e013      	b.n	800710e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d10b      	bne.n	8007106 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f943 	bl	800738a <USBD_CtlSendStatus>
}
 8007104:	e003      	b.n	800710e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f860 	bl	80071ce <USBD_CtlError>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007126:	b2db      	uxtb	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	2b02      	cmp	r3, #2
 800712c:	d80b      	bhi.n	8007146 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10c      	bne.n	8007150 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f923 	bl	800738a <USBD_CtlSendStatus>
      }
      break;
 8007144:	e004      	b.n	8007150 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f840 	bl	80071ce <USBD_CtlError>
      break;
 800714e:	e000      	b.n	8007152 <USBD_ClrFeature+0x3c>
      break;
 8007150:	bf00      	nop
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	781a      	ldrb	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fa3d 	bl	8006604 <SWAPBYTE>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff fa30 	bl	8006604 <SWAPBYTE>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fa23 	bl	8006604 <SWAPBYTE>
 80071be:	4603      	mov	r3, r0
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	80da      	strh	r2, [r3, #6]
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d8:	2180      	movs	r1, #128	@ 0x80
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fd66 	bl	8007cac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fd62 	bl	8007cac <USBD_LL_StallEP>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d042      	beq.n	800728c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800720a:	6938      	ldr	r0, [r7, #16]
 800720c:	f000 f842 	bl	8007294 <USBD_GetLen>
 8007210:	4603      	mov	r3, r0
 8007212:	3301      	adds	r3, #1
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800721a:	d808      	bhi.n	800722e <USBD_GetString+0x3e>
 800721c:	6938      	ldr	r0, [r7, #16]
 800721e:	f000 f839 	bl	8007294 <USBD_GetLen>
 8007222:	4603      	mov	r3, r0
 8007224:	3301      	adds	r3, #1
 8007226:	b29b      	uxth	r3, r3
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	e001      	b.n	8007232 <USBD_GetString+0x42>
 800722e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	4413      	add	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	7812      	ldrb	r2, [r2, #0]
 8007240:	701a      	strb	r2, [r3, #0]
  idx++;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	3301      	adds	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4413      	add	r3, r2
 800724e:	2203      	movs	r2, #3
 8007250:	701a      	strb	r2, [r3, #0]
  idx++;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	3301      	adds	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007258:	e013      	b.n	8007282 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	4413      	add	r3, r2
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	7812      	ldrb	r2, [r2, #0]
 8007264:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	3301      	adds	r3, #1
 800726a:	613b      	str	r3, [r7, #16]
    idx++;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	3301      	adds	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4413      	add	r3, r2
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
    idx++;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	3301      	adds	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e7      	bne.n	800725a <USBD_GetString+0x6a>
 800728a:	e000      	b.n	800728e <USBD_GetString+0x9e>
    return;
 800728c:	bf00      	nop
  }
}
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072a4:	e005      	b.n	80072b2 <USBD_GetLen+0x1e>
  {
    len++;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	3301      	adds	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f5      	bne.n	80072a6 <USBD_GetLen+0x12>
  }

  return len;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	2100      	movs	r1, #0
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fd62 	bl	8007dbe <USBD_LL_Transmit>

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fd51 	bl	8007dbe <USBD_LL_Transmit>

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2203      	movs	r2, #3
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	2100      	movs	r1, #0
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fd51 	bl	8007e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	2100      	movs	r1, #0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fd40 	bl	8007e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800739a:	2300      	movs	r3, #0
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fd0c 	bl	8007dbe <USBD_LL_Transmit>

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2205      	movs	r2, #5
 80073bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073c0:	2300      	movs	r3, #0
 80073c2:	2200      	movs	r2, #0
 80073c4:	2100      	movs	r1, #0
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fd1a 	bl	8007e00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073dc:	2200      	movs	r2, #0
 80073de:	4912      	ldr	r1, [pc, #72]	@ (8007428 <MX_USB_DEVICE_Init+0x50>)
 80073e0:	4812      	ldr	r0, [pc, #72]	@ (800742c <MX_USB_DEVICE_Init+0x54>)
 80073e2:	f7fe fcd9 	bl	8005d98 <USBD_Init>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073ec:	f7f9 fce4 	bl	8000db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073f0:	490f      	ldr	r1, [pc, #60]	@ (8007430 <MX_USB_DEVICE_Init+0x58>)
 80073f2:	480e      	ldr	r0, [pc, #56]	@ (800742c <MX_USB_DEVICE_Init+0x54>)
 80073f4:	f7fe fd00 	bl	8005df8 <USBD_RegisterClass>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073fe:	f7f9 fcdb 	bl	8000db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007402:	490c      	ldr	r1, [pc, #48]	@ (8007434 <MX_USB_DEVICE_Init+0x5c>)
 8007404:	4809      	ldr	r0, [pc, #36]	@ (800742c <MX_USB_DEVICE_Init+0x54>)
 8007406:	f7fe fbf7 	bl	8005bf8 <USBD_CDC_RegisterInterface>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007410:	f7f9 fcd2 	bl	8000db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007414:	4805      	ldr	r0, [pc, #20]	@ (800742c <MX_USB_DEVICE_Init+0x54>)
 8007416:	f7fe fd25 	bl	8005e64 <USBD_Start>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007420:	f7f9 fcca 	bl	8000db8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007424:	bf00      	nop
 8007426:	bd80      	pop	{r7, pc}
 8007428:	200000b4 	.word	0x200000b4
 800742c:	200003c8 	.word	0x200003c8
 8007430:	20000018 	.word	0x20000018
 8007434:	200000a0 	.word	0x200000a0

08007438 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800743c:	2200      	movs	r2, #0
 800743e:	4905      	ldr	r1, [pc, #20]	@ (8007454 <CDC_Init_FS+0x1c>)
 8007440:	4805      	ldr	r0, [pc, #20]	@ (8007458 <CDC_Init_FS+0x20>)
 8007442:	f7fe fbf3 	bl	8005c2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007446:	4905      	ldr	r1, [pc, #20]	@ (800745c <CDC_Init_FS+0x24>)
 8007448:	4803      	ldr	r0, [pc, #12]	@ (8007458 <CDC_Init_FS+0x20>)
 800744a:	f7fe fc11 	bl	8005c70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800744e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007450:	4618      	mov	r0, r3
 8007452:	bd80      	pop	{r7, pc}
 8007454:	200008a4 	.word	0x200008a4
 8007458:	200003c8 	.word	0x200003c8
 800745c:	200006a4 	.word	0x200006a4

08007460 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007464:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
 800747c:	4613      	mov	r3, r2
 800747e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	2b23      	cmp	r3, #35	@ 0x23
 8007484:	f200 8098 	bhi.w	80075b8 <CDC_Control_FS+0x148>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <CDC_Control_FS+0x20>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080075b9 	.word	0x080075b9
 8007494:	080075b9 	.word	0x080075b9
 8007498:	080075b9 	.word	0x080075b9
 800749c:	080075b9 	.word	0x080075b9
 80074a0:	080075b9 	.word	0x080075b9
 80074a4:	080075b9 	.word	0x080075b9
 80074a8:	080075b9 	.word	0x080075b9
 80074ac:	080075b9 	.word	0x080075b9
 80074b0:	080075b9 	.word	0x080075b9
 80074b4:	080075b9 	.word	0x080075b9
 80074b8:	080075b9 	.word	0x080075b9
 80074bc:	080075b9 	.word	0x080075b9
 80074c0:	080075b9 	.word	0x080075b9
 80074c4:	080075b9 	.word	0x080075b9
 80074c8:	080075b9 	.word	0x080075b9
 80074cc:	080075b9 	.word	0x080075b9
 80074d0:	080075b9 	.word	0x080075b9
 80074d4:	080075b9 	.word	0x080075b9
 80074d8:	080075b9 	.word	0x080075b9
 80074dc:	080075b9 	.word	0x080075b9
 80074e0:	080075b9 	.word	0x080075b9
 80074e4:	080075b9 	.word	0x080075b9
 80074e8:	080075b9 	.word	0x080075b9
 80074ec:	080075b9 	.word	0x080075b9
 80074f0:	080075b9 	.word	0x080075b9
 80074f4:	080075b9 	.word	0x080075b9
 80074f8:	080075b9 	.word	0x080075b9
 80074fc:	080075b9 	.word	0x080075b9
 8007500:	080075b9 	.word	0x080075b9
 8007504:	080075b9 	.word	0x080075b9
 8007508:	080075b9 	.word	0x080075b9
 800750c:	080075b9 	.word	0x080075b9
 8007510:	08007521 	.word	0x08007521
 8007514:	08007565 	.word	0x08007565
 8007518:	080075b9 	.word	0x080075b9
 800751c:	080075b9 	.word	0x080075b9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	3301      	adds	r3, #1
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	021b      	lsls	r3, r3, #8
 800752e:	431a      	orrs	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	3302      	adds	r3, #2
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	041b      	lsls	r3, r3, #16
 8007538:	431a      	orrs	r2, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	3303      	adds	r3, #3
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	061b      	lsls	r3, r3, #24
 8007542:	4313      	orrs	r3, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4b20      	ldr	r3, [pc, #128]	@ (80075c8 <CDC_Control_FS+0x158>)
 8007548:	601a      	str	r2, [r3, #0]
     	LineCoding.format = pbuf[4];
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	791a      	ldrb	r2, [r3, #4]
 800754e:	4b1e      	ldr	r3, [pc, #120]	@ (80075c8 <CDC_Control_FS+0x158>)
 8007550:	711a      	strb	r2, [r3, #4]
     	LineCoding.paritytype = pbuf[5];
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	795a      	ldrb	r2, [r3, #5]
 8007556:	4b1c      	ldr	r3, [pc, #112]	@ (80075c8 <CDC_Control_FS+0x158>)
 8007558:	715a      	strb	r2, [r3, #5]
     	LineCoding.datatype = pbuf[6];
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	799a      	ldrb	r2, [r3, #6]
 800755e:	4b1a      	ldr	r3, [pc, #104]	@ (80075c8 <CDC_Control_FS+0x158>)
 8007560:	719a      	strb	r2, [r3, #6]
     break;
 8007562:	e02a      	b.n	80075ba <CDC_Control_FS+0x14a>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8007564:	4b18      	ldr	r3, [pc, #96]	@ (80075c8 <CDC_Control_FS+0x158>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	b2da      	uxtb	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800756e:	4b16      	ldr	r3, [pc, #88]	@ (80075c8 <CDC_Control_FS+0x158>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	0a1a      	lsrs	r2, r3, #8
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800757c:	4b12      	ldr	r3, [pc, #72]	@ (80075c8 <CDC_Control_FS+0x158>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	0c1a      	lsrs	r2, r3, #16
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	3302      	adds	r3, #2
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800758a:	4b0f      	ldr	r3, [pc, #60]	@ (80075c8 <CDC_Control_FS+0x158>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	0e1a      	lsrs	r2, r3, #24
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	3303      	adds	r3, #3
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = LineCoding.format;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	3304      	adds	r3, #4
 800759c:	4a0a      	ldr	r2, [pc, #40]	@ (80075c8 <CDC_Control_FS+0x158>)
 800759e:	7912      	ldrb	r2, [r2, #4]
 80075a0:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = LineCoding.paritytype;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	3305      	adds	r3, #5
 80075a6:	4a08      	ldr	r2, [pc, #32]	@ (80075c8 <CDC_Control_FS+0x158>)
 80075a8:	7952      	ldrb	r2, [r2, #5]
 80075aa:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = LineCoding.datatype;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	3306      	adds	r3, #6
 80075b0:	4a05      	ldr	r2, [pc, #20]	@ (80075c8 <CDC_Control_FS+0x158>)
 80075b2:	7992      	ldrb	r2, [r2, #6]
 80075b4:	701a      	strb	r2, [r3, #0]
     break;
 80075b6:	e000      	b.n	80075ba <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075b8:	bf00      	nop
  }

  return (USBD_OK);
 80075ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20000098 	.word	0x20000098

080075cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 80075d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007608 <CDC_Receive_FS+0x3c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <CDC_Receive_FS+0x22>
			aPtrFunRx(Buf, *Len);
 80075de:	4b0a      	ldr	r3, [pc, #40]	@ (8007608 <CDC_Receive_FS+0x3c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	b292      	uxth	r2, r2
 80075e8:	4611      	mov	r1, r2
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4806      	ldr	r0, [pc, #24]	@ (800760c <CDC_Receive_FS+0x40>)
 80075f2:	f7fe fb3d 	bl	8005c70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075f6:	4805      	ldr	r0, [pc, #20]	@ (800760c <CDC_Receive_FS+0x40>)
 80075f8:	f7fe fb98 	bl	8005d2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000aa4 	.word	0x20000aa4
 800760c:	200003c8 	.word	0x200003c8

08007610 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007620:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <CDC_Transmit_FS+0x48>)
 8007622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007626:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007632:	2301      	movs	r3, #1
 8007634:	e00b      	b.n	800764e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007636:	887b      	ldrh	r3, [r7, #2]
 8007638:	461a      	mov	r2, r3
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4806      	ldr	r0, [pc, #24]	@ (8007658 <CDC_Transmit_FS+0x48>)
 800763e:	f7fe faf5 	bl	8005c2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007642:	4805      	ldr	r0, [pc, #20]	@ (8007658 <CDC_Transmit_FS+0x48>)
 8007644:	f7fe fb32 	bl	8005cac <USBD_CDC_TransmitPacket>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200003c8 	.word	0x200003c8

0800765c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800766e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007672:	4618      	mov	r0, r3
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8007688:	4a04      	ldr	r2, [pc, #16]	@ (800769c <CDC_AttachRxData+0x1c>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6013      	str	r3, [r2, #0]
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20000aa4 	.word	0x20000aa4

080076a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4603      	mov	r3, r0
 80076a8:	6039      	str	r1, [r7, #0]
 80076aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2212      	movs	r2, #18
 80076b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076b2:	4b03      	ldr	r3, [pc, #12]	@ (80076c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	200000d0 	.word	0x200000d0

080076c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2204      	movs	r2, #4
 80076d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076d6:	4b03      	ldr	r3, [pc, #12]	@ (80076e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	200000e4 	.word	0x200000e4

080076e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4907      	ldr	r1, [pc, #28]	@ (800771c <USBD_FS_ProductStrDescriptor+0x34>)
 80076fe:	4808      	ldr	r0, [pc, #32]	@ (8007720 <USBD_FS_ProductStrDescriptor+0x38>)
 8007700:	f7ff fd76 	bl	80071f0 <USBD_GetString>
 8007704:	e004      	b.n	8007710 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	4904      	ldr	r1, [pc, #16]	@ (800771c <USBD_FS_ProductStrDescriptor+0x34>)
 800770a:	4805      	ldr	r0, [pc, #20]	@ (8007720 <USBD_FS_ProductStrDescriptor+0x38>)
 800770c:	f7ff fd70 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007710:	4b02      	ldr	r3, [pc, #8]	@ (800771c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20000aa8 	.word	0x20000aa8
 8007720:	08007f60 	.word	0x08007f60

08007724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	4904      	ldr	r1, [pc, #16]	@ (8007744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007734:	4804      	ldr	r0, [pc, #16]	@ (8007748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007736:	f7ff fd5b 	bl	80071f0 <USBD_GetString>
  return USBD_StrDesc;
 800773a:	4b02      	ldr	r3, [pc, #8]	@ (8007744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000aa8 	.word	0x20000aa8
 8007748:	08007f78 	.word	0x08007f78

0800774c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	221a      	movs	r2, #26
 800775c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800775e:	f000 f843 	bl	80077e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007762:	4b02      	ldr	r3, [pc, #8]	@ (800776c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	200000e8 	.word	0x200000e8

08007770 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d105      	bne.n	800778e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	4907      	ldr	r1, [pc, #28]	@ (80077a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007786:	4808      	ldr	r0, [pc, #32]	@ (80077a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007788:	f7ff fd32 	bl	80071f0 <USBD_GetString>
 800778c:	e004      	b.n	8007798 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	4904      	ldr	r1, [pc, #16]	@ (80077a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007792:	4805      	ldr	r0, [pc, #20]	@ (80077a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007794:	f7ff fd2c 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007798:	4b02      	ldr	r3, [pc, #8]	@ (80077a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000aa8 	.word	0x20000aa8
 80077a8:	08007f8c 	.word	0x08007f8c

080077ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4907      	ldr	r1, [pc, #28]	@ (80077e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077c2:	4808      	ldr	r0, [pc, #32]	@ (80077e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077c4:	f7ff fd14 	bl	80071f0 <USBD_GetString>
 80077c8:	e004      	b.n	80077d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4904      	ldr	r1, [pc, #16]	@ (80077e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077ce:	4805      	ldr	r0, [pc, #20]	@ (80077e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077d0:	f7ff fd0e 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077d4:	4b02      	ldr	r3, [pc, #8]	@ (80077e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000aa8 	.word	0x20000aa8
 80077e4:	08007f98 	.word	0x08007f98

080077e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077ee:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <Get_SerialNum+0x44>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007830 <Get_SerialNum+0x48>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007834 <Get_SerialNum+0x4c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800780e:	2208      	movs	r2, #8
 8007810:	4909      	ldr	r1, [pc, #36]	@ (8007838 <Get_SerialNum+0x50>)
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f814 	bl	8007840 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007818:	2204      	movs	r2, #4
 800781a:	4908      	ldr	r1, [pc, #32]	@ (800783c <Get_SerialNum+0x54>)
 800781c:	68b8      	ldr	r0, [r7, #8]
 800781e:	f000 f80f 	bl	8007840 <IntToUnicode>
  }
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	1fff7a10 	.word	0x1fff7a10
 8007830:	1fff7a14 	.word	0x1fff7a14
 8007834:	1fff7a18 	.word	0x1fff7a18
 8007838:	200000ea 	.word	0x200000ea
 800783c:	200000fa 	.word	0x200000fa

08007840 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007852:	2300      	movs	r3, #0
 8007854:	75fb      	strb	r3, [r7, #23]
 8007856:	e027      	b.n	80078a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	0f1b      	lsrs	r3, r3, #28
 800785c:	2b09      	cmp	r3, #9
 800785e:	d80b      	bhi.n	8007878 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	0f1b      	lsrs	r3, r3, #28
 8007864:	b2da      	uxtb	r2, r3
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4619      	mov	r1, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	440b      	add	r3, r1
 8007870:	3230      	adds	r2, #48	@ 0x30
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e00a      	b.n	800788e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	0f1b      	lsrs	r3, r3, #28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4619      	mov	r1, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	440b      	add	r3, r1
 8007888:	3237      	adds	r2, #55	@ 0x37
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	3301      	adds	r3, #1
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	4413      	add	r3, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	3301      	adds	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
 80078a8:	7dfa      	ldrb	r2, [r7, #23]
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d3d3      	bcc.n	8007858 <IntToUnicode+0x18>
  }
}
 80078b0:	bf00      	nop
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	@ 0x28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	609a      	str	r2, [r3, #8]
 80078d4:	60da      	str	r2, [r3, #12]
 80078d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078e0:	d147      	bne.n	8007972 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	4b25      	ldr	r3, [pc, #148]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 80078e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ea:	4a24      	ldr	r2, [pc, #144]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80078f2:	4b22      	ldr	r3, [pc, #136]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80078fe:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8007902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007904:	2302      	movs	r3, #2
 8007906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800790c:	2303      	movs	r3, #3
 800790e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007910:	230a      	movs	r3, #10
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007914:	f107 0314 	add.w	r3, r7, #20
 8007918:	4619      	mov	r1, r3
 800791a:	4819      	ldr	r0, [pc, #100]	@ (8007980 <HAL_PCD_MspInit+0xc0>)
 800791c:	f7f9 ff80 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800792e:	f107 0314 	add.w	r3, r7, #20
 8007932:	4619      	mov	r1, r3
 8007934:	4812      	ldr	r0, [pc, #72]	@ (8007980 <HAL_PCD_MspInit+0xc0>)
 8007936:	f7f9 ff73 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800793a:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 800793c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793e:	4a0f      	ldr	r2, [pc, #60]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 8007940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007944:	6353      	str	r3, [r2, #52]	@ 0x34
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 800794c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794e:	4a0b      	ldr	r2, [pc, #44]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 8007950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007954:	6453      	str	r3, [r2, #68]	@ 0x44
 8007956:	4b09      	ldr	r3, [pc, #36]	@ (800797c <HAL_PCD_MspInit+0xbc>)
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007962:	2200      	movs	r2, #0
 8007964:	2100      	movs	r1, #0
 8007966:	2043      	movs	r0, #67	@ 0x43
 8007968:	f7f9 ff23 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800796c:	2043      	movs	r0, #67	@ 0x43
 800796e:	f7f9 ff3c 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007972:	bf00      	nop
 8007974:	3728      	adds	r7, #40	@ 0x28
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40023800 	.word	0x40023800
 8007980:	40020000 	.word	0x40020000

08007984 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe faaf 	bl	8005efe <USBD_LL_SetupStage>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	4613      	mov	r3, r2
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4413      	add	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	440b      	add	r3, r1
 80079c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	4619      	mov	r1, r3
 80079d2:	f7fe fae9 	bl	8005fa8 <USBD_LL_DataOutStage>
}
 80079d6:	bf00      	nop
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	3320      	adds	r3, #32
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	4619      	mov	r1, r3
 8007a06:	f7fe fb8b 	bl	8006120 <USBD_LL_DataInStage>
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fccf 	bl	80063c4 <USBD_LL_SOF>
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	79db      	ldrb	r3, [r3, #7]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d001      	beq.n	8007a46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a42:	f7f9 f9b9 	bl	8000db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a4c:	7bfa      	ldrb	r2, [r7, #15]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fc73 	bl	800633c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fc1a 	bl	8006296 <USBD_LL_Reset>
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fc6e 	bl	800635c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7adb      	ldrb	r3, [r3, #11]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aa0:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <HAL_PCD_SuspendCallback+0x48>)
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	4a03      	ldr	r2, [pc, #12]	@ (8007ab4 <HAL_PCD_SuspendCallback+0x48>)
 8007aa6:	f043 0306 	orr.w	r3, r3, #6
 8007aaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	e000ed00 	.word	0xe000ed00

08007ab8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fc64 	bl	8006394 <USBD_LL_Resume>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fcbc 	bl	8006468 <USBD_LL_IsoOUTIncomplete>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fc78 	bl	8006404 <USBD_LL_IsoINIncomplete>
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fcce 	bl	80064cc <USBD_LL_DevConnected>
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fccb 	bl	80064e2 <USBD_LL_DevDisconnected>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d13c      	bne.n	8007bde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b64:	4a20      	ldr	r2, [pc, #128]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b70:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b74:	4b1c      	ldr	r3, [pc, #112]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007b7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b7e:	2204      	movs	r2, #4
 8007b80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b82:	4b19      	ldr	r3, [pc, #100]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b84:	2202      	movs	r2, #2
 8007b86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b88:	4b17      	ldr	r3, [pc, #92]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b8e:	4b16      	ldr	r3, [pc, #88]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b90:	2202      	movs	r2, #2
 8007b92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007b94:	4b14      	ldr	r3, [pc, #80]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b9a:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ba0:	4b11      	ldr	r3, [pc, #68]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007ba6:	4b10      	ldr	r3, [pc, #64]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bac:	4b0e      	ldr	r3, [pc, #56]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bb2:	480d      	ldr	r0, [pc, #52]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007bb4:	f7f9 ffeb 	bl	8001b8e <HAL_PCD_Init>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bbe:	f7f9 f8fb 	bl	8000db8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bc2:	2180      	movs	r1, #128	@ 0x80
 8007bc4:	4808      	ldr	r0, [pc, #32]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007bc6:	f7fb fa18 	bl	8002ffa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bca:	2240      	movs	r2, #64	@ 0x40
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4806      	ldr	r0, [pc, #24]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007bd0:	f7fb f9cc 	bl	8002f6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bd4:	2280      	movs	r2, #128	@ 0x80
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4803      	ldr	r0, [pc, #12]	@ (8007be8 <USBD_LL_Init+0x94>)
 8007bda:	f7fb f9c7 	bl	8002f6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20000ca8 	.word	0x20000ca8

08007bec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fa f8d2 	bl	8001dac <HAL_PCD_Start>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f942 	bl	8007e98 <USBD_Get_USB_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	4608      	mov	r0, r1
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4603      	mov	r3, r0
 8007c32:	70fb      	strb	r3, [r7, #3]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70bb      	strb	r3, [r7, #2]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c4a:	78bb      	ldrb	r3, [r7, #2]
 8007c4c:	883a      	ldrh	r2, [r7, #0]
 8007c4e:	78f9      	ldrb	r1, [r7, #3]
 8007c50:	f7fa fda6 	bl	80027a0 <HAL_PCD_EP_Open>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f91c 	bl	8007e98 <USBD_Get_USB_Status>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fa fdf1 	bl	8002874 <HAL_PCD_EP_Close>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 f8fd 	bl	8007e98 <USBD_Get_USB_Status>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fa fea9 	bl	8002a22 <HAL_PCD_EP_SetStall>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f8de 	bl	8007e98 <USBD_Get_USB_Status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fa feed 	bl	8002ae8 <HAL_PCD_EP_ClrStall>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f8bf 	bl	8007e98 <USBD_Get_USB_Status>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	da0b      	bge.n	8007d5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	4413      	add	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	3316      	adds	r3, #22
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	e00b      	b.n	8007d74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007d72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fa fcda 	bl	8002758 <HAL_PCD_SetAddress>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f874 	bl	8007e98 <USBD_Get_USB_Status>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ddc:	7af9      	ldrb	r1, [r7, #11]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	f7fa fde4 	bl	80029ae <HAL_PCD_EP_Transmit>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f853 	bl	8007e98 <USBD_Get_USB_Status>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007df6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e1e:	7af9      	ldrb	r1, [r7, #11]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	f7fa fd70 	bl	8002908 <HAL_PCD_EP_Receive>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f832 	bl	8007e98 <USBD_Get_USB_Status>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e38:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e54:	78fa      	ldrb	r2, [r7, #3]
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fa fd90 	bl	800297e <HAL_PCD_EP_GetRxCount>
 8007e5e:	4603      	mov	r3, r0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e70:	4b03      	ldr	r3, [pc, #12]	@ (8007e80 <USBD_static_malloc+0x18>)
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	2000118c 	.word	0x2000118c

08007e84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]

}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d817      	bhi.n	8007edc <USBD_Get_USB_Status+0x44>
 8007eac:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <USBD_Get_USB_Status+0x1c>)
 8007eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb2:	bf00      	nop
 8007eb4:	08007ec5 	.word	0x08007ec5
 8007eb8:	08007ecb 	.word	0x08007ecb
 8007ebc:	08007ed1 	.word	0x08007ed1
 8007ec0:	08007ed7 	.word	0x08007ed7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec8:	e00b      	b.n	8007ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ece:	e008      	b.n	8007ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed4:	e005      	b.n	8007ee2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eda:	e002      	b.n	8007ee2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee0:	bf00      	nop
  }
  return usb_status;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <memset>:
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memset+0xa>
 8007ef8:	4770      	bx	lr
 8007efa:	f803 1b01 	strb.w	r1, [r3], #1
 8007efe:	e7f9      	b.n	8007ef4 <memset+0x4>

08007f00 <__libc_init_array>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	4d0d      	ldr	r5, [pc, #52]	@ (8007f38 <__libc_init_array+0x38>)
 8007f04:	4c0d      	ldr	r4, [pc, #52]	@ (8007f3c <__libc_init_array+0x3c>)
 8007f06:	1b64      	subs	r4, r4, r5
 8007f08:	10a4      	asrs	r4, r4, #2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	42a6      	cmp	r6, r4
 8007f0e:	d109      	bne.n	8007f24 <__libc_init_array+0x24>
 8007f10:	4d0b      	ldr	r5, [pc, #44]	@ (8007f40 <__libc_init_array+0x40>)
 8007f12:	4c0c      	ldr	r4, [pc, #48]	@ (8007f44 <__libc_init_array+0x44>)
 8007f14:	f000 f818 	bl	8007f48 <_init>
 8007f18:	1b64      	subs	r4, r4, r5
 8007f1a:	10a4      	asrs	r4, r4, #2
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	42a6      	cmp	r6, r4
 8007f20:	d105      	bne.n	8007f2e <__libc_init_array+0x2e>
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f28:	4798      	blx	r3
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7ee      	b.n	8007f0c <__libc_init_array+0xc>
 8007f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f32:	4798      	blx	r3
 8007f34:	3601      	adds	r6, #1
 8007f36:	e7f2      	b.n	8007f1e <__libc_init_array+0x1e>
 8007f38:	08007fc0 	.word	0x08007fc0
 8007f3c:	08007fc0 	.word	0x08007fc0
 8007f40:	08007fc0 	.word	0x08007fc0
 8007f44:	08007fc4 	.word	0x08007fc4

08007f48 <_init>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr

08007f54 <_fini>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	bf00      	nop
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr
