
ComUSBlack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007018  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080071b0  080071b0  000081b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007208  08007208  000090fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007210  08007210  000090fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007210  08007210  00008210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007214  08007214  00008214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08007218  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  200000fc  08007314  000090fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  08007314  00009d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126a1  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003067  00000000  00000000  0001b7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  0001e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb1  00000000  00000000  0001f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afa  00000000  00000000  00020599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014643  00000000  00000000  00039093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa50  00000000  00000000  0004d6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004568  00000000  00000000  000dd16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e16d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007198 	.word	0x08007198

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007198 	.word	0x08007198

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	is10ms=1;
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000160 	.word	0x20000160

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 f9db 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t counter;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f825 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8af 	bl	8000694 <MX_GPIO_Init>
  MX_TIM11_Init();
 8000536:	f000 f889 	bl	800064c <MX_TIM11_Init>
  MX_USB_DEVICE_Init();
 800053a:	f006 f917 	bl	800676c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 800053e:	480c      	ldr	r0, [pc, #48]	@ (8000570 <main+0x4c>)
 8000540:	f002 fc02 	bl	8002d48 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(is10ms){
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <main+0x50>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0fb      	beq.n	8000544 <main+0x20>
		  is10ms=0;
 800054c:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <main+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
		  counter++;
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	3301      	adds	r3, #1
 8000556:	71fb      	strb	r3, [r7, #7]
		  if(counter>10){
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b0a      	cmp	r3, #10
 800055c:	d9f2      	bls.n	8000544 <main+0x20>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800055e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000562:	4805      	ldr	r0, [pc, #20]	@ (8000578 <main+0x54>)
 8000564:	f000 fd03 	bl	8000f6e <HAL_GPIO_TogglePin>
			  counter=0;
 8000568:	2300      	movs	r3, #0
 800056a:	71fb      	strb	r3, [r7, #7]
	  if(is10ms){
 800056c:	e7ea      	b.n	8000544 <main+0x20>
 800056e:	bf00      	nop
 8000570:	20000118 	.word	0x20000118
 8000574:	20000160 	.word	0x20000160
 8000578:	40020800 	.word	0x40020800

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	@ 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fdd8 	bl	8007140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	@ (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005ec:	2319      	movs	r3, #25
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005f0:	23c0      	movs	r3, #192	@ 0xc0
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f001 ff21 	bl	8002448 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f894 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f983 	bl	8002938 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000638:	f000 f87e 	bl	8000738 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	@ 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_TIM11_Init+0x40>)
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <MX_TIM11_Init+0x44>)
 8000654:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_TIM11_Init+0x40>)
 8000658:	2210      	movs	r2, #16
 800065a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_TIM11_Init+0x40>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 60000;
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_TIM11_Init+0x40>)
 8000664:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000668:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_TIM11_Init+0x40>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_TIM11_Init+0x40>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_TIM11_Init+0x40>)
 8000678:	f002 fb16 	bl	8002ca8 <HAL_TIM_Base_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000682:	f000 f859 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000118 	.word	0x20000118
 8000690:	40014800 	.word	0x40014800

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a11      	ldr	r2, [pc, #68]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_GPIO_Init+0x9c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <MX_GPIO_Init+0xa0>)
 8000706:	f000 fc19 	bl	8000f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800070a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_GPIO_Init+0xa0>)
 8000724:	f000 fa86 	bl	8000c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020800 	.word	0x40020800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000758:	6453      	str	r3, [r2, #68]	@ 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_TIM_Base_MspInit+0x48>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d115      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	201a      	movs	r0, #26
 80007c8:	f000 f9fd 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80007cc:	201a      	movs	r0, #26
 80007ce:	f000 fa16 	bl	8000bfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40014800 	.word	0x40014800
 80007e0:	40023800 	.word	0x40023800

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <NMI_Handler+0x4>

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <UsageFault_Handler+0x4>

0800080c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f8a5 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800084a:	f002 fadf 	bl	8002e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000118 	.word	0x20000118

08000858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <OTG_FS_IRQHandler+0x10>)
 800085e:	f000 fce4 	bl	800122a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20001648 	.word	0x20001648

0800086c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <SystemInit+0x20>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000876:	4a05      	ldr	r2, [pc, #20]	@ (800088c <SystemInit+0x20>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000894:	f7ff ffea 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	@ (80008dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f006 fc47 	bl	8007150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c2:	f7ff fe2f 	bl	8000524 <main>
  bx  lr    
 80008c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80008d4:	08007218 	.word	0x08007218
  ldr r2, =_sbss
 80008d8:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80008dc:	20001d4c 	.word	0x20001d4c

080008e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <HAL_Init+0x40>)
 80008ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <HAL_Init+0x40>)
 80008fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a07      	ldr	r2, [pc, #28]	@ (8000924 <HAL_Init+0x40>)
 8000906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800090a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800090c:	2003      	movs	r0, #3
 800090e:	f000 f94f 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f808 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff ff14 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023c00 	.word	0x40023c00

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_InitTick+0x54>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x58>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f967 	bl	8000c1a <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e00e      	b.n	8000974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b0f      	cmp	r3, #15
 800095a:	d80a      	bhi.n	8000972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095c:	2200      	movs	r2, #0
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f000 f92f 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <HAL_InitTick+0x5c>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000000 	.word	0x20000000
 8000980:	20000008 	.word	0x20000008
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_IncTick+0x20>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x24>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_IncTick+0x24>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000164 	.word	0x20000164

080009b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return uwTick;
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_GetTick+0x14>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000164 	.word	0x20000164

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff ffee 	bl	80009b0 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffde 	bl	80009b0 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff3e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffa2 	bl	8000b6c <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e159      	b.n	8000f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8148 	bne.w	8000efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d005      	beq.n	8000c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d130      	bne.n	8000ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0201 	and.w	r2, r3, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d017      	beq.n	8000d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d123      	bne.n	8000d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	69b9      	ldr	r1, [r7, #24]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0203 	and.w	r2, r3, #3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80a2 	beq.w	8000efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b57      	ldr	r3, [pc, #348]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd6:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <HAL_GPIO_Init+0x2ec>)
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <HAL_GPIO_Init+0x2f0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x202>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a48      	ldr	r2, [pc, #288]	@ (8000f28 <HAL_GPIO_Init+0x2f4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x1fe>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a47      	ldr	r2, [pc, #284]	@ (8000f2c <HAL_GPIO_Init+0x2f8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x1fa>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a46      	ldr	r2, [pc, #280]	@ (8000f30 <HAL_GPIO_Init+0x2fc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x1f6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a45      	ldr	r2, [pc, #276]	@ (8000f34 <HAL_GPIO_Init+0x300>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x1f2>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e26:	2307      	movs	r3, #7
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e36:	2300      	movs	r3, #0
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <HAL_GPIO_Init+0x2ec>)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a24      	ldr	r2, [pc, #144]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ece:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f67f aea2 	bls.w	8000c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f4c:	787b      	ldrb	r3, [r7, #1]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f58:	e003      	b.n	8000f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	041a      	lsls	r2, r3, #16
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	619a      	str	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4013      	ands	r3, r2
 8000f86:	041a      	lsls	r2, r3, #16
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	400b      	ands	r3, r1
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e101      	b.n	80011b8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 fdac 	bl	8006b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe2:	d102      	bne.n	8000fea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 f9d5 	bl	800339e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7c1a      	ldrb	r2, [r3, #16]
 8000ffc:	f88d 2000 	strb.w	r2, [sp]
 8001000:	3304      	adds	r3, #4
 8001002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001004:	f002 f8b4 	bl	8003170 <USB_CoreInit>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0ce      	b.n	80011b8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f002 f9cd 	bl	80033c0 <USB_SetCurrentMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0bf      	b.n	80011b8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e04a      	b.n	80010d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	3315      	adds	r3, #21
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3314      	adds	r3, #20
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b298      	uxth	r0, r3
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	332e      	adds	r3, #46	@ 0x2e
 800107a:	4602      	mov	r2, r0
 800107c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	3318      	adds	r3, #24
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	331c      	adds	r3, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3320      	adds	r3, #32
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3324      	adds	r3, #36	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3af      	bcc.n	800103e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e044      	b.n	800116e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	3301      	adds	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3b5      	bcc.n	80010e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1a      	ldrb	r2, [r3, #16]
 8001180:	f88d 2000 	strb.w	r2, [sp]
 8001184:	3304      	adds	r3, #4
 8001186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001188:	f002 f966 	bl	8003458 <USB_DevInit>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00c      	b.n	80011b8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 f9b0 	bl	8004516 <USB_DevDisconnect>

  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_PCD_Start+0x1c>
 80011d8:	2302      	movs	r3, #2
 80011da:	e022      	b.n	8001222 <HAL_PCD_Start+0x62>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f002 f8b7 	bl	800337c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f95e 	bl	80044d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800122a:	b590      	push	{r4, r7, lr}
 800122c:	b08d      	sub	sp, #52	@ 0x34
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa1c 	bl	800467e <USB_GetMode>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 848c 	bne.w	8001b66 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f980 	bl	8004558 <USB_ReadInterrupts>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8482 	beq.w	8001b64 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f003 f96d 	bl	8004558 <USB_ReadInterrupts>
 800127e:	4603      	mov	r3, r0
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d107      	bne.n	8001298 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f002 0202 	and.w	r2, r2, #2
 8001296:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f95b 	bl	8004558 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d161      	bne.n	8001370 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0210 	bic.w	r2, r2, #16
 80012ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 020f 	and.w	r2, r3, #15
 80012c8:	4613      	mov	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80012e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80012e6:	d124      	bne.n	8001332 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d035      	beq.n	8001360 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	6a38      	ldr	r0, [r7, #32]
 8001308:	f002 ff92 	bl	8004230 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001318:	441a      	add	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800132a:	441a      	add	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	e016      	b.n	8001360 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001338:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800133c:	d110      	bne.n	8001360 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001344:	2208      	movs	r2, #8
 8001346:	4619      	mov	r1, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f002 ff71 	bl	8004230 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	441a      	add	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0210 	orr.w	r2, r2, #16
 800136e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f8ef 	bl	8004558 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001380:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001384:	f040 80a7 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f003 f8f4 	bl	800457e <USB_ReadDevAllOutEpInterrupt>
 8001396:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001398:	e099      	b.n	80014ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800139a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 808e 	beq.w	80014c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 f918 	bl	80045e6 <USB_ReadDevOutEPInterrupt>
 80013b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00c      	beq.n	80013dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fea4 	bl	8002124 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2308      	movs	r3, #8
 80013f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 ff7a 	bl	80022f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2310      	movs	r3, #16
 800141a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d030      	beq.n	8001488 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	2b80      	cmp	r3, #128	@ 0x80
 8001430:	d109      	bne.n	8001446 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001444:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	3304      	adds	r3, #4
 800145a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2200      	movs	r2, #0
 8001468:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f005 fc57 	bl	8006d24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	2302      	movs	r3, #2
 8001486:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	015a      	lsls	r2, r3, #5
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800149e:	461a      	mov	r2, r3
 80014a0:	2320      	movs	r3, #32
 80014a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d009      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ba:	461a      	mov	r2, r3
 80014bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f af62 	bne.w	800139a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 f83c 	bl	8004558 <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014ea:	f040 80db 	bne.w	80016a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 f85d 	bl	80045b2 <USB_ReadDevAllInEpInterrupt>
 80014f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014fe:	e0cd      	b.n	800169c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80c2 	beq.w	8001690 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f883 	bl	8004622 <USB_ReadDevInEPInterrupt>
 800151c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d057      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	2201      	movs	r2, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800153c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	69f9      	ldr	r1, [r7, #28]
 8001544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001548:	4013      	ands	r3, r2
 800154a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	799b      	ldrb	r3, [r3, #6]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d132      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3320      	adds	r3, #32
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4403      	add	r3, r0
 8001586:	331c      	adds	r3, #28
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4419      	add	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	3320      	adds	r3, #32
 800159c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d113      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3324      	adds	r3, #36	@ 0x24
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015c4:	461a      	mov	r2, r3
 80015c6:	2101      	movs	r1, #1
 80015c8:	f003 f88a 	bl	80046e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 fb2b 	bl	8006c2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	2308      	movs	r3, #8
 80015f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800160a:	461a      	mov	r2, r3
 800160c:	2310      	movs	r3, #16
 800160e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001626:	461a      	mov	r2, r3
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001636:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001638:	6a38      	ldr	r0, [r7, #32]
 800163a:	f002 f871 	bl	8003720 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800163e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3310      	adds	r3, #16
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	3304      	adds	r3, #4
 8001650:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f005 fb6e 	bl	8006d48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	2302      	movs	r3, #2
 800167c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fcbd 	bl	800200a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	3301      	adds	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f af2e 	bne.w	8001500 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f002 ff55 	bl	8004558 <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016b8:	d122      	bne.n	8001700 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016e0:	2100      	movs	r1, #0
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fea4 	bl	8002430 <HAL_PCDEx_LPM_Callback>
 80016e8:	e002      	b.n	80016f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f005 fb0c 	bl	8006d08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 ff27 	bl	8004558 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001714:	d112      	bne.n	800173c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d102      	bne.n	800172c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f005 fac8 	bl	8006cbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800173a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 ff09 	bl	8004558 <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800174c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001750:	f040 80b7 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2110      	movs	r1, #16
 800176e:	4618      	mov	r0, r3
 8001770:	f001 ffd6 	bl	8003720 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001778:	e046      	b.n	8001808 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800177a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001786:	461a      	mov	r2, r3
 8001788:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800178c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800178e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800179e:	0151      	lsls	r1, r2, #5
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	440a      	add	r2, r1
 80017a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ba:	461a      	mov	r2, r3
 80017bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017d2:	0151      	lsls	r1, r2, #5
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	440a      	add	r2, r1
 80017d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001800:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001804:	3301      	adds	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	791b      	ldrb	r3, [r3, #4]
 800180c:	461a      	mov	r2, r3
 800180e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001810:	4293      	cmp	r3, r2
 8001812:	d3b2      	bcc.n	800177a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001822:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001826:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7bdb      	ldrb	r3, [r3, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d016      	beq.n	800185e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001840:	f043 030b 	orr.w	r3, r3, #11
 8001844:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001856:	f043 030b 	orr.w	r3, r3, #11
 800185a:	6453      	str	r3, [r2, #68]	@ 0x44
 800185c:	e015      	b.n	800188a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800186c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001870:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001874:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001884:	f043 030b 	orr.w	r3, r3, #11
 8001888:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001898:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800189c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ac:	461a      	mov	r2, r3
 80018ae:	f002 ff17 	bl	80046e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fe46 	bl	8004558 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018d6:	d123      	bne.n	8001920 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fedc 	bl	800469a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 ff93 	bl	8003812 <USB_GetDevSpeed>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681c      	ldr	r4, [r3, #0]
 80018f8:	f001 f9ca 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001902:	461a      	mov	r2, r3
 8001904:	4620      	mov	r0, r4
 8001906:	f001 fc97 	bl	8003238 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f005 f9b7 	bl	8006c7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800191e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fe17 	bl	8004558 <USB_ReadInterrupts>
 800192a:	4603      	mov	r3, r0
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b08      	cmp	r3, #8
 8001932:	d10a      	bne.n	800194a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f005 f994 	bl	8006c62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f002 0208 	and.w	r2, r2, #8
 8001948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fe02 	bl	8004558 <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800195a:	2b80      	cmp	r3, #128	@ 0x80
 800195c:	d123      	bne.n	80019a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800196a:	2301      	movs	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
 800196e:	e014      	b.n	800199a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb0a 	bl	8001fa8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	3301      	adds	r3, #1
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	791b      	ldrb	r3, [r3, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d3e4      	bcc.n	8001970 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fdd4 	bl	8004558 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019ba:	d13c      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	e02b      	b.n	8001a1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3318      	adds	r3, #24
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d115      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da12      	bge.n	8001a14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3317      	adds	r3, #23
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 faca 	bl	8001fa8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	3301      	adds	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d3cd      	bcc.n	80019c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fd8c 	bl	8004558 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a4a:	d156      	bne.n	8001afa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a50:	e045      	b.n	8001ade <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d12e      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da2b      	bge.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	0c1a      	lsrs	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a8a:	4053      	eors	r3, r2
 8001a8c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d121      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a98:	4613      	mov	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad4:	6053      	str	r3, [r2, #4]
            break;
 8001ad6:	e008      	b.n	8001aea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	791b      	ldrb	r3, [r3, #4]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d3b3      	bcc.n	8001a52 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fd2a 	bl	8004558 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0e:	d10a      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f005 f92b 	bl	8006d6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fd14 	bl	8004558 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d115      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f005 f91b 	bl	8006d88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	e000      	b.n	8001b66 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001b64:	bf00      	nop
    }
  }
}
 8001b66:	3734      	adds	r7, #52	@ 0x34
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_PCD_SetAddress+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e012      	b.n	8001bac <HAL_PCD_SetAddress+0x40>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	78fa      	ldrb	r2, [r7, #3]
 8001b92:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fc73 	bl	8004488 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	70fb      	strb	r3, [r7, #3]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	803b      	strh	r3, [r7, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da0f      	bge.n	8001bfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3310      	adds	r3, #16
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e00f      	b.n	8001c1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3304      	adds	r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c26:	883b      	ldrh	r3, [r7, #0]
 8001c28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	78ba      	ldrb	r2, [r7, #2]
 8001c34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d004      	beq.n	8001c48 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c48:	78bb      	ldrb	r3, [r7, #2]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d102      	bne.n	8001c54 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_PCD_EP_Open+0xae>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e00e      	b.n	8001c80 <HAL_PCD_EP_Open+0xcc>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 fdf3 	bl	800385c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da0f      	bge.n	8001cbc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 020f 	and.w	r2, r3, #15
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3310      	adds	r3, #16
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
 8001cba:	e00f      	b.n	8001cdc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_PCD_EP_Close+0x6e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e00e      	b.n	8001d14 <HAL_PCD_EP_Close+0x8c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fe31 	bl	800396c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	3304      	adds	r3, #4
 8001d44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	799b      	ldrb	r3, [r3, #6]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	799b      	ldrb	r3, [r3, #6]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6979      	ldr	r1, [r7, #20]
 8001d84:	f001 fece 	bl	8003b24 <USB_EPStartXfer>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001db4:	681b      	ldr	r3, [r3, #0]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3310      	adds	r3, #16
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	799b      	ldrb	r3, [r3, #6]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d102      	bne.n	8001e1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	799b      	ldrb	r3, [r3, #6]
 8001e24:	461a      	mov	r2, r3
 8001e26:	6979      	ldr	r1, [r7, #20]
 8001e28:	f001 fe7c 	bl	8003b24 <USB_EPStartXfer>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	7912      	ldrb	r2, [r2, #4]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e04f      	b.n	8001ef4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	da0f      	bge.n	8001e7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	3310      	adds	r3, #16
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	3304      	adds	r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	705a      	strb	r2, [r3, #1]
 8001e7a:	e00d      	b.n	8001e98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_EP_SetStall+0x82>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e01d      	b.n	8001ef4 <HAL_PCD_EP_SetStall+0xbe>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fa0a 	bl	80042e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7999      	ldrb	r1, [r3, #6]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f002 fbfb 	bl	80046e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	7912      	ldrb	r2, [r2, #4]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e042      	b.n	8001fa0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0f      	bge.n	8001f42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3310      	adds	r3, #16
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00f      	b.n	8001f62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_PCD_EP_ClrStall+0x86>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e00e      	b.n	8001fa0 <HAL_PCD_EP_ClrStall+0xa4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68f9      	ldr	r1, [r7, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 fa13 	bl	80043bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0c      	bge.n	8001fd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3310      	adds	r3, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e00c      	b.n	8001ff0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 f832 	bl	8004060 <USB_EPStopXfer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002000:	7afb      	ldrb	r3, [r7, #11]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b08a      	sub	sp, #40	@ 0x28
 800200e:	af02      	add	r7, sp, #8
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3310      	adds	r3, #16
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	429a      	cmp	r2, r3
 800203c:	d901      	bls.n	8002042 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d902      	bls.n	800205e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3303      	adds	r3, #3
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002066:	e02a      	b.n	80020be <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	429a      	cmp	r2, r3
 800207c:	d902      	bls.n	8002084 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3303      	adds	r3, #3
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	6978      	ldr	r0, [r7, #20]
 80020a2:	f002 f887 	bl	80041b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	441a      	add	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	441a      	add	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d809      	bhi.n	80020e8 <PCD_WriteEmptyTxFifo+0xde>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020dc:	429a      	cmp	r2, r3
 80020de:	d203      	bcs.n	80020e8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1bf      	bne.n	8002068 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d811      	bhi.n	8002118 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	2201      	movs	r2, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	43db      	mvns	r3, r3
 800210e:	6939      	ldr	r1, [r7, #16]
 8002110:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002114:	4013      	ands	r3, r2
 8002116:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	333c      	adds	r3, #60	@ 0x3c
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	799b      	ldrb	r3, [r3, #6]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d17b      	bne.n	8002252 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a61      	ldr	r2, [pc, #388]	@ (80022ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f240 80b9 	bls.w	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80b3 	beq.w	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002186:	461a      	mov	r2, r3
 8002188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800218c:	6093      	str	r3, [r2, #8]
 800218e:	e0a7      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	2320      	movs	r3, #32
 80021aa:	6093      	str	r3, [r2, #8]
 80021ac:	e098      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 8093 	bne.w	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	@ (80022ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d90f      	bls.n	80021e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021de:	6093      	str	r3, [r2, #8]
 80021e0:	e07e      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a1a      	ldr	r2, [r3, #32]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	440b      	add	r3, r1
 8002204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d114      	bne.n	8002244 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800222c:	461a      	mov	r2, r3
 800222e:	2101      	movs	r1, #1
 8002230:	f002 fa56 	bl	80046e0 <USB_EP0_OutStart>
 8002234:	e006      	b.n	8002244 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f004 fcd4 	bl	8006bf8 <HAL_PCD_DataOutStageCallback>
 8002250:	e046      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d124      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002270:	461a      	mov	r2, r3
 8002272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e032      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	2320      	movs	r3, #32
 8002294:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f004 fcab 	bl	8006bf8 <HAL_PCD_DataOutStageCallback>
 80022a2:	e01d      	b.n	80022e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d114      	bne.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022cc:	461a      	mov	r2, r3
 80022ce:	2100      	movs	r1, #0
 80022d0:	f002 fa06 	bl	80046e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f004 fc8c 	bl	8006bf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	4f54300a 	.word	0x4f54300a
 80022f0:	4f54310a 	.word	0x4f54310a

080022f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	333c      	adds	r3, #60	@ 0x3c
 800230c:	3304      	adds	r3, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a15      	ldr	r2, [pc, #84]	@ (800237c <PCD_EP_OutSetupPacket_int+0x88>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d90e      	bls.n	8002348 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002346:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f004 fc43 	bl	8006bd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <PCD_EP_OutSetupPacket_int+0x88>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d90c      	bls.n	8002370 <PCD_EP_OutSetupPacket_int+0x7c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	799b      	ldrb	r3, [r3, #6]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d108      	bne.n	8002370 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002368:	461a      	mov	r2, r3
 800236a:	2101      	movs	r1, #1
 800236c:	f002 f9b8 	bl	80046e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	4f54300a 	.word	0x4f54300a

08002380 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
 800238c:	4613      	mov	r3, r2
 800238e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800239e:	883b      	ldrh	r3, [r7, #0]
 80023a0:	0419      	lsls	r1, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80023ac:	e028      	b.n	8002400 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e00d      	b.n	80023de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3340      	adds	r3, #64	@ 0x40
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	3301      	adds	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3ec      	bcc.n	80023c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023e8:	883b      	ldrh	r3, [r7, #0]
 80023ea:	0418      	lsls	r0, r3, #16
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4302      	orrs	r2, r0
 80023f8:	3340      	adds	r3, #64	@ 0x40
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e267      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d075      	beq.n	8002552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002466:	4b88      	ldr	r3, [pc, #544]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d00c      	beq.n	800248c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800247a:	2b08      	cmp	r3, #8
 800247c:	d112      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4b82      	ldr	r3, [pc, #520]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800248a:	d10b      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	4b7e      	ldr	r3, [pc, #504]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05b      	beq.n	8002550 <HAL_RCC_OscConfig+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d157      	bne.n	8002550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e242      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x74>
 80024ae:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a75      	ldr	r2, [pc, #468]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x98>
 80024c6:	4b70      	ldr	r3, [pc, #448]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xb0>
 80024e0:	4b69      	ldr	r3, [pc, #420]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a68      	ldr	r2, [pc, #416]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b66      	ldr	r3, [pc, #408]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a65      	ldr	r2, [pc, #404]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fa56 	bl	80009b0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fa52 	bl	80009b0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	@ 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e207      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5b      	ldr	r3, [pc, #364]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xc0>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fa42 	bl	80009b0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fa3e 	bl	80009b0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	@ 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1f3      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0xe8>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800255e:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c7      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4937      	ldr	r1, [pc, #220]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b34      	ldr	r3, [pc, #208]	@ (800268c <HAL_RCC_OscConfig+0x244>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe f9f7 	bl	80009b0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe f9f3 	bl	80009b0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a8      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4925      	ldr	r1, [pc, #148]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <HAL_RCC_OscConfig+0x244>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe f9d6 	bl	80009b0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe f9d2 	bl	80009b0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e187      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_RCC_OscConfig+0x248>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe f9b6 	bl	80009b0 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe f9b2 	bl	80009b0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e167      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_RCC_OscConfig+0x240>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x200>
 8002666:	e01b      	b.n	80026a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_RCC_OscConfig+0x248>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7fe f99f 	bl	80009b0 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	e00e      	b.n	8002694 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002676:	f7fe f99b 	bl	80009b0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d907      	bls.n	8002694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e150      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 8002688:	40023800 	.word	0x40023800
 800268c:	42470000 	.word	0x42470000
 8002690:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b88      	ldr	r3, [pc, #544]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1ea      	bne.n	8002676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8097 	beq.w	80027dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b81      	ldr	r3, [pc, #516]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b7d      	ldr	r3, [pc, #500]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	4a7c      	ldr	r2, [pc, #496]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ce:	4b7a      	ldr	r3, [pc, #488]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b77      	ldr	r3, [pc, #476]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b74      	ldr	r3, [pc, #464]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a73      	ldr	r2, [pc, #460]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe f95b 	bl	80009b0 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe f957 	bl	80009b0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e10c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <HAL_RCC_OscConfig+0x474>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ea>
 8002724:	4b64      	ldr	r3, [pc, #400]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a63      	ldr	r2, [pc, #396]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x30c>
 800273a:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	4a5e      	ldr	r2, [pc, #376]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	@ 0x70
 8002746:	4b5c      	ldr	r3, [pc, #368]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a5b      	ldr	r2, [pc, #364]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x324>
 8002754:	4b58      	ldr	r3, [pc, #352]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002758:	4a57      	ldr	r2, [pc, #348]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002760:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a54      	ldr	r2, [pc, #336]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe f91c 	bl	80009b0 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe f918 	bl	80009b0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0cb      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x334>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7fe f906 	bl	80009b0 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe f902 	bl	80009b0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b5      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d0:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	4a38      	ldr	r2, [pc, #224]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80a1 	beq.w	8002928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027e6:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d05c      	beq.n	80028ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d141      	bne.n	800287e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCC_OscConfig+0x478>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe f8d6 	bl	80009b0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe f8d2 	bl	80009b0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e087      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	019b      	lsls	r3, r3, #6
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	041b      	lsls	r3, r3, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	491b      	ldr	r1, [pc, #108]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe f8ab 	bl	80009b0 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f8a7 	bl	80009b0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e05c      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x416>
 800287c:	e054      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <HAL_RCC_OscConfig+0x478>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe f894 	bl	80009b0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f890 	bl	80009b0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e045      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_RCC_OscConfig+0x470>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x444>
 80028aa:	e03d      	b.n	8002928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e038      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x4ec>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d121      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d11a      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0cc      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b68      	ldr	r3, [pc, #416]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d90c      	bls.n	8002974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b65      	ldr	r3, [pc, #404]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b8      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800298c:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a58      	ldr	r2, [pc, #352]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a52      	ldr	r2, [pc, #328]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b50      	ldr	r3, [pc, #320]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	494d      	ldr	r1, [pc, #308]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d044      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b47      	ldr	r3, [pc, #284]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e07f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	4b3f      	ldr	r3, [pc, #252]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b3b      	ldr	r3, [pc, #236]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e067      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a16:	4b37      	ldr	r3, [pc, #220]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4934      	ldr	r1, [pc, #208]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fd ffc2 	bl	80009b0 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	e00a      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a30:	f7fd ffbe 	bl	80009b0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e04f      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 020c 	and.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1eb      	bne.n	8002a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d20c      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b20      	ldr	r3, [pc, #128]	@ (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e032      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4916      	ldr	r1, [pc, #88]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	490e      	ldr	r1, [pc, #56]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002abe:	f000 f821 	bl	8002b04 <HAL_RCC_GetSysClockFreq>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	490a      	ldr	r1, [pc, #40]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	5ccb      	ldrb	r3, [r1, r3]
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	4a09      	ldr	r2, [pc, #36]	@ (8002afc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ada:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd ff22 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00
 8002af4:	40023800 	.word	0x40023800
 8002af8:	080071f8 	.word	0x080071f8
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004

08002b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b08:	b090      	sub	sp, #64	@ 0x40
 8002b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b1c:	4b59      	ldr	r3, [pc, #356]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d00d      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x40>
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	f200 80a1 	bhi.w	8002c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x34>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b36:	e09b      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b38:	4b53      	ldr	r3, [pc, #332]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b3c:	e09b      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b3e:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b42:	e098      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b44:	4b4f      	ldr	r3, [pc, #316]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d028      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	099b      	lsrs	r3, r3, #6
 8002b60:	2200      	movs	r2, #0
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b70:	fb03 f201 	mul.w	r2, r3, r1
 8002b74:	2300      	movs	r3, #0
 8002b76:	fb00 f303 	mul.w	r3, r0, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a43      	ldr	r2, [pc, #268]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b84:	460a      	mov	r2, r1
 8002b86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b90:	2200      	movs	r2, #0
 8002b92:	61bb      	str	r3, [r7, #24]
 8002b94:	61fa      	str	r2, [r7, #28]
 8002b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b9e:	f7fd fb1b 	bl	80001d8 <__aeabi_uldivmod>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002baa:	e053      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	617a      	str	r2, [r7, #20]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bbe:	f04f 0b00 	mov.w	fp, #0
 8002bc2:	4652      	mov	r2, sl
 8002bc4:	465b      	mov	r3, fp
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	ebb2 080a 	subs.w	r8, r2, sl
 8002bde:	eb63 090b 	sbc.w	r9, r3, fp
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8002bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	00eb      	lsls	r3, r5, #3
 8002c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c0c:	00e2      	lsls	r2, r4, #3
 8002c0e:	4614      	mov	r4, r2
 8002c10:	461d      	mov	r5, r3
 8002c12:	eb14 030a 	adds.w	r3, r4, sl
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	eb45 030b 	adc.w	r3, r5, fp
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	028b      	lsls	r3, r1, #10
 8002c2e:	4621      	mov	r1, r4
 8002c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c34:	4621      	mov	r1, r4
 8002c36:	028a      	lsls	r2, r1, #10
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	60fa      	str	r2, [r7, #12]
 8002c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c48:	f7fd fac6 	bl	80001d8 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4613      	mov	r3, r2
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002c64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3740      	adds	r7, #64	@ 0x40
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	017d7840 	.word	0x017d7840

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e041      	b.n	8002d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fd60 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f9a8 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e044      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1a      	ldr	r2, [pc, #104]	@ (8002dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	@ (8002e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a17      	ldr	r2, [pc, #92]	@ (8002e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x6c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a16      	ldr	r2, [pc, #88]	@ (8002e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d010      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40014000 	.word	0x40014000

08002e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d020      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0202 	mvn.w	r2, #2
 8002e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8d2 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8c4 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8d5 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d020      	beq.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0204 	mvn.w	r2, #4
 8002e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8ac 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f89e 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f8af 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d020      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0208 	mvn.w	r2, #8
 8002ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f886 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002ef4:	e005      	b.n	8002f02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f878 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f889 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f860 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f852 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f863 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00c      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0201 	mvn.w	r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd fac6 	bl	8000504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00c      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8e0 	bl	800315c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f834 	bl	8003028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0220 	mvn.w	r2, #32
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8b2 	bl	8003148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a37      	ldr	r2, [pc, #220]	@ (800312c <TIM_Base_SetConfig+0xf0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00f      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305a:	d00b      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a34      	ldr	r2, [pc, #208]	@ (8003130 <TIM_Base_SetConfig+0xf4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a33      	ldr	r2, [pc, #204]	@ (8003134 <TIM_Base_SetConfig+0xf8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a32      	ldr	r2, [pc, #200]	@ (8003138 <TIM_Base_SetConfig+0xfc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a28      	ldr	r2, [pc, #160]	@ (800312c <TIM_Base_SetConfig+0xf0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01b      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003094:	d017      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a25      	ldr	r2, [pc, #148]	@ (8003130 <TIM_Base_SetConfig+0xf4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a24      	ldr	r2, [pc, #144]	@ (8003134 <TIM_Base_SetConfig+0xf8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00f      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a23      	ldr	r2, [pc, #140]	@ (8003138 <TIM_Base_SetConfig+0xfc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a22      	ldr	r2, [pc, #136]	@ (800313c <TIM_Base_SetConfig+0x100>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a21      	ldr	r2, [pc, #132]	@ (8003140 <TIM_Base_SetConfig+0x104>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d003      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a20      	ldr	r2, [pc, #128]	@ (8003144 <TIM_Base_SetConfig+0x108>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a0c      	ldr	r2, [pc, #48]	@ (800312c <TIM_Base_SetConfig+0xf0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d103      	bne.n	8003106 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f043 0204 	orr.w	r2, r3, #4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000
 8003130:	40000400 	.word	0x40000400
 8003134:	40000800 	.word	0x40000800
 8003138:	40000c00 	.word	0x40000c00
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800

08003148 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003170:	b084      	sub	sp, #16
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	f107 001c 	add.w	r0, r7, #28
 800317e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003182:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003186:	2b01      	cmp	r3, #1
 8003188:	d123      	bne.n	80031d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800319e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f001 fae8 	bl	800479c <USB_CoreReset>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e01b      	b.n	800320a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 fadc 	bl	800479c <USB_CoreReset>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80031fc:	e005      	b.n	800320a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003202:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800320a:	7fbb      	ldrb	r3, [r7, #30]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10b      	bne.n	8003228 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f043 0206 	orr.w	r2, r3, #6
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003234:	b004      	add	sp, #16
 8003236:	4770      	bx	lr

08003238 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d165      	bne.n	8003318 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <USB_SetTurnaroundTime+0x11c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d906      	bls.n	8003262 <USB_SetTurnaroundTime+0x2a>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4a40      	ldr	r2, [pc, #256]	@ (8003358 <USB_SetTurnaroundTime+0x120>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d202      	bcs.n	8003262 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800325c:	230f      	movs	r3, #15
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e062      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a3c      	ldr	r2, [pc, #240]	@ (8003358 <USB_SetTurnaroundTime+0x120>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d306      	bcc.n	8003278 <USB_SetTurnaroundTime+0x40>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4a3b      	ldr	r2, [pc, #236]	@ (800335c <USB_SetTurnaroundTime+0x124>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d202      	bcs.n	8003278 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003272:	230e      	movs	r3, #14
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e057      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4a38      	ldr	r2, [pc, #224]	@ (800335c <USB_SetTurnaroundTime+0x124>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d306      	bcc.n	800328e <USB_SetTurnaroundTime+0x56>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a37      	ldr	r2, [pc, #220]	@ (8003360 <USB_SetTurnaroundTime+0x128>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d202      	bcs.n	800328e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003288:	230d      	movs	r3, #13
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e04c      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a33      	ldr	r2, [pc, #204]	@ (8003360 <USB_SetTurnaroundTime+0x128>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d306      	bcc.n	80032a4 <USB_SetTurnaroundTime+0x6c>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4a32      	ldr	r2, [pc, #200]	@ (8003364 <USB_SetTurnaroundTime+0x12c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d802      	bhi.n	80032a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800329e:	230c      	movs	r3, #12
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e041      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003364 <USB_SetTurnaroundTime+0x12c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d906      	bls.n	80032ba <USB_SetTurnaroundTime+0x82>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003368 <USB_SetTurnaroundTime+0x130>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d802      	bhi.n	80032ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80032b4:	230b      	movs	r3, #11
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e036      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003368 <USB_SetTurnaroundTime+0x130>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d906      	bls.n	80032d0 <USB_SetTurnaroundTime+0x98>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4a29      	ldr	r2, [pc, #164]	@ (800336c <USB_SetTurnaroundTime+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d802      	bhi.n	80032d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032ca:	230a      	movs	r3, #10
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e02b      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4a26      	ldr	r2, [pc, #152]	@ (800336c <USB_SetTurnaroundTime+0x134>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d906      	bls.n	80032e6 <USB_SetTurnaroundTime+0xae>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4a25      	ldr	r2, [pc, #148]	@ (8003370 <USB_SetTurnaroundTime+0x138>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d202      	bcs.n	80032e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032e0:	2309      	movs	r3, #9
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e020      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4a21      	ldr	r2, [pc, #132]	@ (8003370 <USB_SetTurnaroundTime+0x138>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d306      	bcc.n	80032fc <USB_SetTurnaroundTime+0xc4>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4a20      	ldr	r2, [pc, #128]	@ (8003374 <USB_SetTurnaroundTime+0x13c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d802      	bhi.n	80032fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80032f6:	2308      	movs	r3, #8
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e015      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <USB_SetTurnaroundTime+0x13c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d906      	bls.n	8003312 <USB_SetTurnaroundTime+0xda>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4a1c      	ldr	r2, [pc, #112]	@ (8003378 <USB_SetTurnaroundTime+0x140>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d202      	bcs.n	8003312 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800330c:	2307      	movs	r3, #7
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e00a      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003312:	2306      	movs	r3, #6
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e007      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800331e:	2309      	movs	r3, #9
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e001      	b.n	8003328 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003324:	2309      	movs	r3, #9
 8003326:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	00d8acbf 	.word	0x00d8acbf
 8003358:	00e4e1c0 	.word	0x00e4e1c0
 800335c:	00f42400 	.word	0x00f42400
 8003360:	01067380 	.word	0x01067380
 8003364:	011a499f 	.word	0x011a499f
 8003368:	01312cff 	.word	0x01312cff
 800336c:	014ca43f 	.word	0x014ca43f
 8003370:	016e3600 	.word	0x016e3600
 8003374:	01a6ab1f 	.word	0x01a6ab1f
 8003378:	01e84800 	.word	0x01e84800

0800337c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d115      	bne.n	800340e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033ee:	200a      	movs	r0, #10
 80033f0:	f7fd faea 	bl	80009c8 <HAL_Delay>
      ms += 10U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	330a      	adds	r3, #10
 80033f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 f93f 	bl	800467e <USB_GetMode>
 8003400:	4603      	mov	r3, r0
 8003402:	2b01      	cmp	r3, #1
 8003404:	d01e      	beq.n	8003444 <USB_SetCurrentMode+0x84>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2bc7      	cmp	r3, #199	@ 0xc7
 800340a:	d9f0      	bls.n	80033ee <USB_SetCurrentMode+0x2e>
 800340c:	e01a      	b.n	8003444 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d115      	bne.n	8003440 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003420:	200a      	movs	r0, #10
 8003422:	f7fd fad1 	bl	80009c8 <HAL_Delay>
      ms += 10U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	330a      	adds	r3, #10
 800342a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f001 f926 	bl	800467e <USB_GetMode>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <USB_SetCurrentMode+0x84>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2bc7      	cmp	r3, #199	@ 0xc7
 800343c:	d9f0      	bls.n	8003420 <USB_SetCurrentMode+0x60>
 800343e:	e001      	b.n	8003444 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e005      	b.n	8003450 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2bc8      	cmp	r3, #200	@ 0xc8
 8003448:	d101      	bne.n	800344e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003458:	b084      	sub	sp, #16
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	e009      	b.n	800348c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3340      	adds	r3, #64	@ 0x40
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3301      	adds	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b0e      	cmp	r3, #14
 8003490:	d9f2      	bls.n	8003478 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003492:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11c      	bne.n	80034d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80034d2:	e00b      	b.n	80034ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10d      	bne.n	800351c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003508:	2100      	movs	r1, #0
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f968 	bl	80037e0 <USB_SetDevSpeed>
 8003510:	e008      	b.n	8003524 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003512:	2101      	movs	r1, #1
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f963 	bl	80037e0 <USB_SetDevSpeed>
 800351a:	e003      	b.n	8003524 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800351c:	2103      	movs	r1, #3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f95e 	bl	80037e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003524:	2110      	movs	r1, #16
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8fa 	bl	8003720 <USB_FlushTxFifo>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f924 	bl	8003784 <USB_FlushRxFifo>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800354c:	461a      	mov	r2, r3
 800354e:	2300      	movs	r3, #0
 8003550:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003558:	461a      	mov	r2, r3
 800355a:	2300      	movs	r3, #0
 800355c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003564:	461a      	mov	r2, r3
 8003566:	2300      	movs	r3, #0
 8003568:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e043      	b.n	80035f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003586:	d118      	bne.n	80035ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359a:	461a      	mov	r2, r3
 800359c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e013      	b.n	80035cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b0:	461a      	mov	r2, r3
 80035b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e008      	b.n	80035cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035c6:	461a      	mov	r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d8:	461a      	mov	r2, r3
 80035da:	2300      	movs	r3, #0
 80035dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ea:	461a      	mov	r2, r3
 80035ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3301      	adds	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035fc:	461a      	mov	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4293      	cmp	r3, r2
 8003602:	d3b5      	bcc.n	8003570 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e043      	b.n	8003692 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800361c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003620:	d118      	bne.n	8003654 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003634:	461a      	mov	r2, r3
 8003636:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e013      	b.n	8003666 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e008      	b.n	8003666 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	2300      	movs	r3, #0
 8003676:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003684:	461a      	mov	r2, r3
 8003686:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800368a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3301      	adds	r3, #1
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003696:	461a      	mov	r2, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4293      	cmp	r3, r2
 800369c:	d3b5      	bcc.n	800360a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	4b10      	ldr	r3, [pc, #64]	@ (800371c <USB_DevInit+0x2c4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f043 0208 	orr.w	r2, r3, #8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d107      	bne.n	800370c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003718:	b004      	add	sp, #16
 800371a:	4770      	bx	lr
 800371c:	803c3800 	.word	0x803c3800

08003720 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3301      	adds	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800373a:	d901      	bls.n	8003740 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e01b      	b.n	8003778 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	daf2      	bge.n	800372e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	019b      	lsls	r3, r3, #6
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003764:	d901      	bls.n	800376a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e006      	b.n	8003778 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d0f0      	beq.n	8003758 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800379c:	d901      	bls.n	80037a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e018      	b.n	80037d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	daf2      	bge.n	8003790 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2210      	movs	r2, #16
 80037b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037c0:	d901      	bls.n	80037c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e006      	b.n	80037d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d0f0      	beq.n	80037b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003812:	b480      	push	{r7}
 8003814:	b087      	sub	sp, #28
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
 8003836:	e00a      	b.n	800384e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d002      	beq.n	8003844 <USB_GetDevSpeed+0x32>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d102      	bne.n	800384a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003844:	2302      	movs	r3, #2
 8003846:	75fb      	strb	r3, [r7, #23]
 8003848:	e001      	b.n	800384e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800384a:	230f      	movs	r3, #15
 800384c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	785b      	ldrb	r3, [r3, #1]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d13a      	bne.n	80038ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003896:	4313      	orrs	r3, r2
 8003898:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d155      	bne.n	800395c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	791b      	ldrb	r3, [r3, #4]
 80038ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	059b      	lsls	r3, r3, #22
 80038d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038d4:	4313      	orrs	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e036      	b.n	800395c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11a      	bne.n	800395c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	791b      	ldrb	r3, [r3, #4]
 8003940:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003942:	430b      	orrs	r3, r1
 8003944:	4313      	orrs	r3, r2
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	0151      	lsls	r1, r2, #5
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	440a      	add	r2, r1
 800394e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800395a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d161      	bne.n	8003a4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800399a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800399e:	d11f      	bne.n	80039e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	0151      	lsls	r1, r2, #5
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	440a      	add	r2, r1
 80039d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a00:	4013      	ands	r3, r2
 8003a02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a24:	4013      	ands	r3, r2
 8003a26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	0159      	lsls	r1, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a42:	4619      	mov	r1, r3
 8003a44:	4b35      	ldr	r3, [pc, #212]	@ (8003b1c <USB_DeactivateEndpoint+0x1b0>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
 8003a4a:	e060      	b.n	8003b0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a62:	d11f      	bne.n	8003aa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	43db      	mvns	r3, r3
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	041b      	lsls	r3, r3, #16
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	4619      	mov	r1, r3
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <USB_DeactivateEndpoint+0x1b4>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	ec337800 	.word	0xec337800
 8003b20:	eff37800 	.word	0xeff37800

08003b24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	@ 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	f040 817f 	bne.w	8003e44 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d132      	bne.n	8003bb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003b6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	0151      	lsls	r1, r2, #5
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	440a      	add	r2, r1
 8003b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	0151      	lsls	r1, r2, #5
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bac:	0cdb      	lsrs	r3, r3, #19
 8003bae:	04db      	lsls	r3, r3, #19
 8003bb0:	6113      	str	r3, [r2, #16]
 8003bb2:	e097      	b.n	8003ce4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bce:	0cdb      	lsrs	r3, r3, #19
 8003bd0:	04db      	lsls	r3, r3, #19
 8003bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	0151      	lsls	r1, r2, #5
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	440a      	add	r2, r1
 8003bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003bf2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003bf6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11a      	bne.n	8003c34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d903      	bls.n	8003c12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	0151      	lsls	r1, r2, #5
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	440a      	add	r2, r1
 8003c28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c30:	6113      	str	r3, [r2, #16]
 8003c32:	e044      	b.n	8003cbe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	8afb      	ldrh	r3, [r7, #22]
 8003c5a:	04d9      	lsls	r1, r3, #19
 8003c5c:	4ba4      	ldr	r3, [pc, #656]	@ (8003ef0 <USB_EPStartXfer+0x3cc>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	0148      	lsls	r0, r1, #5
 8003c64:	69f9      	ldr	r1, [r7, #28]
 8003c66:	4401      	add	r1, r0
 8003c68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d122      	bne.n	8003cbe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003c96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	8afb      	ldrh	r3, [r7, #22]
 8003ca8:	075b      	lsls	r3, r3, #29
 8003caa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003cae:	69b9      	ldr	r1, [r7, #24]
 8003cb0:	0148      	lsls	r0, r1, #5
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	4401      	add	r1, r0
 8003cb6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd4:	69b9      	ldr	r1, [r7, #24]
 8003cd6:	0148      	lsls	r0, r1, #5
 8003cd8:	69f9      	ldr	r1, [r7, #28]
 8003cda:	4401      	add	r1, r0
 8003cdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d14b      	bne.n	8003d82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d128      	bne.n	8003d60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d110      	bne.n	8003d40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e00f      	b.n	8003d60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e166      	b.n	8004050 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003da0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	791b      	ldrb	r3, [r3, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d015      	beq.n	8003dd6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 814e 	beq.w	8004050 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	69f9      	ldr	r1, [r7, #28]
 8003dcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	634b      	str	r3, [r1, #52]	@ 0x34
 8003dd4:	e13c      	b.n	8004050 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d110      	bne.n	8003e08 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00f      	b.n	8003e28 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	68d9      	ldr	r1, [r3, #12]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	b298      	uxth	r0, r3
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f9b9 	bl	80041b4 <USB_WritePacket>
 8003e42:	e105      	b.n	8004050 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e5e:	0cdb      	lsrs	r3, r3, #19
 8003e60:	04db      	lsls	r3, r3, #19
 8003e62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003e82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003e86:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d132      	bne.n	8003ef4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	0148      	lsls	r0, r1, #5
 8003ec0:	69f9      	ldr	r1, [r7, #28]
 8003ec2:	4401      	add	r1, r0
 8003ec4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ee6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003eea:	6113      	str	r3, [r2, #16]
 8003eec:	e062      	b.n	8003fb4 <USB_EPStartXfer+0x490>
 8003eee:	bf00      	nop
 8003ef0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d123      	bne.n	8003f44 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	0148      	lsls	r0, r1, #5
 8003f16:	69f9      	ldr	r1, [r7, #28]
 8003f18:	4401      	add	r1, r0
 8003f1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	e037      	b.n	8003fb4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	1e5a      	subs	r2, r3, #1
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	8afa      	ldrh	r2, [r7, #22]
 8003f60:	fb03 f202 	mul.w	r2, r3, r2
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	8afb      	ldrh	r3, [r7, #22]
 8003f78:	04d9      	lsls	r1, r3, #19
 8003f7a:	4b38      	ldr	r3, [pc, #224]	@ (800405c <USB_EPStartXfer+0x538>)
 8003f7c:	400b      	ands	r3, r1
 8003f7e:	69b9      	ldr	r1, [r7, #24]
 8003f80:	0148      	lsls	r0, r1, #5
 8003f82:	69f9      	ldr	r1, [r7, #28]
 8003f84:	4401      	add	r1, r0
 8003f86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	0148      	lsls	r0, r1, #5
 8003fa8:	69f9      	ldr	r1, [r7, #28]
 8003faa:	4401      	add	r1, r0
 8003fac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10d      	bne.n	8003fd6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	791b      	ldrb	r3, [r3, #4]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d128      	bne.n	8004030 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d110      	bne.n	8004010 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	440a      	add	r2, r1
 8004004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004008:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00f      	b.n	8004030 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800404a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800404e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	1ff80000 	.word	0x1ff80000

08004060 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d14a      	bne.n	8004114 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004096:	f040 8086 	bne.w	80041a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d902      	bls.n	80040f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
          break;
 80040f6:	e056      	b.n	80041a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800410c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004110:	d0e7      	beq.n	80040e2 <USB_EPStopXfer+0x82>
 8004112:	e048      	b.n	80041a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800412c:	d13b      	bne.n	80041a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800414c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004150:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004174:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3301      	adds	r3, #1
 800417a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004182:	4293      	cmp	r3, r2
 8004184:	d902      	bls.n	800418c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
          break;
 800418a:	e00c      	b.n	80041a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041a4:	d0e7      	beq.n	8004176 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	@ 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4611      	mov	r1, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	460b      	mov	r3, r1
 80041c4:	71fb      	strb	r3, [r7, #7]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80041d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d123      	bne.n	8004222 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80041da:	88bb      	ldrh	r3, [r7, #4]
 80041dc:	3303      	adds	r3, #3
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e018      	b.n	800421a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	031a      	lsls	r2, r3, #12
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f4:	461a      	mov	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3301      	adds	r3, #1
 8004206:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3301      	adds	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3301      	adds	r3, #1
 8004212:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	3301      	adds	r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	429a      	cmp	r2, r3
 8004220:	d3e2      	bcc.n	80041e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3724      	adds	r7, #36	@ 0x24
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004230:	b480      	push	{r7}
 8004232:	b08b      	sub	sp, #44	@ 0x2c
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	b29b      	uxth	r3, r3
 800424c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
 800425a:	e014      	b.n	8004286 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	601a      	str	r2, [r3, #0]
    pDest++;
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	3301      	adds	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	3301      	adds	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	3301      	adds	r3, #1
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	3301      	adds	r3, #1
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	3301      	adds	r3, #1
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	6a3a      	ldr	r2, [r7, #32]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3e6      	bcc.n	800425c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800428e:	8bfb      	ldrh	r3, [r7, #30]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01e      	beq.n	80042d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429e:	461a      	mov	r2, r3
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	701a      	strb	r2, [r3, #0]
      i++;
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	3301      	adds	r3, #1
 80042be:	623b      	str	r3, [r7, #32]
      pDest++;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	3301      	adds	r3, #1
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80042c6:	8bfb      	ldrh	r3, [r7, #30]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80042cc:	8bfb      	ldrh	r3, [r7, #30]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ea      	bne.n	80042a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	372c      	adds	r7, #44	@ 0x2c
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d12c      	bne.n	8004356 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db12      	blt.n	8004334 <USB_EPSetStall+0x54>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00f      	beq.n	8004334 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004332:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800434e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e02b      	b.n	80043ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db12      	blt.n	800438e <USB_EPSetStall+0xae>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00f      	beq.n	800438e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004388:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800438c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	785b      	ldrb	r3, [r3, #1]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d128      	bne.n	800442a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	791b      	ldrb	r3, [r3, #4]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d003      	beq.n	8004408 <USB_EPClearStall+0x4c>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	791b      	ldrb	r3, [r3, #4]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d138      	bne.n	800447a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e027      	b.n	800447a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004444:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004448:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	791b      	ldrb	r3, [r3, #4]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d003      	beq.n	800445a <USB_EPClearStall+0x9e>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	791b      	ldrb	r3, [r3, #4]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d10f      	bne.n	800447a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004478:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80044aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004502:	f023 0302 	bic.w	r3, r3, #2
 8004506:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004530:	f023 0303 	bic.w	r3, r3, #3
 8004534:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004570:	68fb      	ldr	r3, [r7, #12]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	0c1b      	lsrs	r3, r3, #16
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4013      	ands	r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	b29b      	uxth	r3, r3
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004614:	68bb      	ldr	r3, [r7, #8]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004622:	b480      	push	{r7}
 8004624:	b087      	sub	sp, #28
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004644:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	01db      	lsls	r3, r3, #7
 8004654:	b2db      	uxtb	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004670:	68bb      	ldr	r3, [r7, #8]
}
 8004672:	4618      	mov	r0, r3
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0301 	and.w	r3, r3, #1
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80046b8:	f023 0307 	bic.w	r3, r3, #7
 80046bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	460b      	mov	r3, r1
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	333c      	adds	r3, #60	@ 0x3c
 80046f6:	3304      	adds	r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4a26      	ldr	r2, [pc, #152]	@ (8004798 <USB_EP0_OutStart+0xb8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d90a      	bls.n	800471a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004714:	d101      	bne.n	800471a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e037      	b.n	800478a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004748:	f043 0318 	orr.w	r3, r3, #24
 800474c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800475c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004760:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004762:	7afb      	ldrb	r3, [r7, #11]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10f      	bne.n	8004788 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004782:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	4f54300a 	.word	0x4f54300a

0800479c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047b4:	d901      	bls.n	80047ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e022      	b.n	8004800 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	daf2      	bge.n	80047a8 <USB_CoreReset+0xc>

  count = 10U;
 80047c2:	230a      	movs	r3, #10
 80047c4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80047c6:	e002      	b.n	80047ce <USB_CoreReset+0x32>
  {
    count--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f9      	bne.n	80047c8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ec:	d901      	bls.n	80047f2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e006      	b.n	8004800 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d0f0      	beq.n	80047e0 <USB_CoreReset+0x44>

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004818:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800481c:	f002 fc4c 	bl	80070b8 <USBD_static_malloc>
 8004820:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	32b0      	adds	r2, #176	@ 0xb0
 8004832:	2100      	movs	r1, #0
 8004834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004838:	2302      	movs	r3, #2
 800483a:	e0d4      	b.n	80049e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800483c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004840:	2100      	movs	r1, #0
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f002 fc7c 	bl	8007140 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	32b0      	adds	r2, #176	@ 0xb0
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	32b0      	adds	r2, #176	@ 0xb0
 8004862:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7c1b      	ldrb	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d138      	bne.n	80048e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004874:	4b5e      	ldr	r3, [pc, #376]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 8004876:	7819      	ldrb	r1, [r3, #0]
 8004878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800487c:	2202      	movs	r2, #2
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f002 faf7 	bl	8006e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004884:	4b5a      	ldr	r3, [pc, #360]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 020f 	and.w	r2, r3, #15
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	3323      	adds	r3, #35	@ 0x23
 800489a:	2201      	movs	r2, #1
 800489c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800489e:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80048a0:	7819      	ldrb	r1, [r3, #0]
 80048a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048a6:	2202      	movs	r2, #2
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f002 fae2 	bl	8006e72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80048ae:	4b51      	ldr	r3, [pc, #324]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80048ca:	4b4b      	ldr	r3, [pc, #300]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	331c      	adds	r3, #28
 80048e0:	2210      	movs	r2, #16
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e035      	b.n	8004952 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80048e6:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 80048e8:	7819      	ldrb	r1, [r3, #0]
 80048ea:	2340      	movs	r3, #64	@ 0x40
 80048ec:	2202      	movs	r2, #2
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f002 fabf 	bl	8006e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80048f4:	4b3e      	ldr	r3, [pc, #248]	@ (80049f0 <USBD_CDC_Init+0x1e4>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f003 020f 	and.w	r2, r3, #15
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3323      	adds	r3, #35	@ 0x23
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800490e:	4b39      	ldr	r3, [pc, #228]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 8004910:	7819      	ldrb	r1, [r3, #0]
 8004912:	2340      	movs	r3, #64	@ 0x40
 8004914:	2202      	movs	r2, #2
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f002 faab 	bl	8006e72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800491c:	4b35      	ldr	r3, [pc, #212]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f003 020f 	and.w	r2, r3, #15
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004938:	4b2f      	ldr	r3, [pc, #188]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	331c      	adds	r3, #28
 800494e:	2210      	movs	r2, #16
 8004950:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 8004954:	7819      	ldrb	r1, [r3, #0]
 8004956:	2308      	movs	r3, #8
 8004958:	2203      	movs	r2, #3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f002 fa89 	bl	8006e72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004960:	4b25      	ldr	r3, [pc, #148]	@ (80049f8 <USBD_CDC_Init+0x1ec>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3323      	adds	r3, #35	@ 0x23
 8004976:	2201      	movs	r2, #1
 8004978:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	33b0      	adds	r3, #176	@ 0xb0
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80049b0:	2302      	movs	r3, #2
 80049b2:	e018      	b.n	80049e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7c1b      	ldrb	r3, [r3, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80049bc:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80049be:	7819      	ldrb	r1, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f002 fb40 	bl	8007050 <USBD_LL_PrepareReceive>
 80049d0:	e008      	b.n	80049e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80049d2:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <USBD_CDC_Init+0x1e8>)
 80049d4:	7819      	ldrb	r1, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049dc:	2340      	movs	r3, #64	@ 0x40
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f002 fb36 	bl	8007050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000093 	.word	0x20000093
 80049f4:	20000094 	.word	0x20000094
 80049f8:	20000095 	.word	0x20000095

080049fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004a08:	4b3a      	ldr	r3, [pc, #232]	@ (8004af4 <USBD_CDC_DeInit+0xf8>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f002 fa55 	bl	8006ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004a14:	4b37      	ldr	r3, [pc, #220]	@ (8004af4 <USBD_CDC_DeInit+0xf8>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3323      	adds	r3, #35	@ 0x23
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004a2e:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <USBD_CDC_DeInit+0xfc>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f002 fa42 	bl	8006ebe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004af8 <USBD_CDC_DeInit+0xfc>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <USBD_CDC_DeInit+0x100>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 fa2e 	bl	8006ebe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004a62:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <USBD_CDC_DeInit+0x100>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3323      	adds	r3, #35	@ 0x23
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004afc <USBD_CDC_DeInit+0x100>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	331c      	adds	r3, #28
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	32b0      	adds	r2, #176	@ 0xb0
 8004aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	33b0      	adds	r3, #176	@ 0xb0
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	32b0      	adds	r2, #176	@ 0xb0
 8004ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f002 fb02 	bl	80070d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	32b0      	adds	r2, #176	@ 0xb0
 8004ada:	2100      	movs	r1, #0
 8004adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000093 	.word	0x20000093
 8004af8:	20000094 	.word	0x20000094
 8004afc:	20000095 	.word	0x20000095

08004b00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	32b0      	adds	r2, #176	@ 0xb0
 8004b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0bf      	b.n	8004cb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d050      	beq.n	8004bde <USBD_CDC_Setup+0xde>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	f040 80af 	bne.w	8004ca0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	88db      	ldrh	r3, [r3, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d03a      	beq.n	8004bc0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da1b      	bge.n	8004b8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	33b0      	adds	r3, #176	@ 0xb0
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004b6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	88d2      	ldrh	r2, [r2, #6]
 8004b70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	88db      	ldrh	r3, [r3, #6]
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	bf28      	it	cs
 8004b7a:	2307      	movcs	r3, #7
 8004b7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	89fa      	ldrh	r2, [r7, #14]
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f001 fd69 	bl	800665c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004b8a:	e090      	b.n	8004cae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	785a      	ldrb	r2, [r3, #1]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	88db      	ldrh	r3, [r3, #6]
 8004b9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b9c:	d803      	bhi.n	8004ba6 <USBD_CDC_Setup+0xa6>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	88db      	ldrh	r3, [r3, #6]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	e000      	b.n	8004ba8 <USBD_CDC_Setup+0xa8>
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004bae:	6939      	ldr	r1, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 fd7e 	bl	80066ba <USBD_CtlPrepareRx>
      break;
 8004bbe:	e076      	b.n	8004cae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	33b0      	adds	r3, #176	@ 0xb0
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	7850      	ldrb	r0, [r2, #1]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4798      	blx	r3
      break;
 8004bdc:	e067      	b.n	8004cae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b0b      	cmp	r3, #11
 8004be4:	d851      	bhi.n	8004c8a <USBD_CDC_Setup+0x18a>
 8004be6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <USBD_CDC_Setup+0xec>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c99 	.word	0x08004c99
 8004bf4:	08004c8b 	.word	0x08004c8b
 8004bf8:	08004c8b 	.word	0x08004c8b
 8004bfc:	08004c8b 	.word	0x08004c8b
 8004c00:	08004c8b 	.word	0x08004c8b
 8004c04:	08004c8b 	.word	0x08004c8b
 8004c08:	08004c8b 	.word	0x08004c8b
 8004c0c:	08004c8b 	.word	0x08004c8b
 8004c10:	08004c8b 	.word	0x08004c8b
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c71 	.word	0x08004c71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d107      	bne.n	8004c38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004c28:	f107 030a 	add.w	r3, r7, #10
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f001 fd13 	bl	800665c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c36:	e032      	b.n	8004c9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f001 fc91 	bl	8006562 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c40:	2303      	movs	r3, #3
 8004c42:	75fb      	strb	r3, [r7, #23]
          break;
 8004c44:	e02b      	b.n	8004c9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c52:	f107 030d 	add.w	r3, r7, #13
 8004c56:	2201      	movs	r2, #1
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fcfe 	bl	800665c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004c60:	e01d      	b.n	8004c9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fc7c 	bl	8006562 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8004c6e:	e016      	b.n	8004c9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d00f      	beq.n	8004c9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 fc6f 	bl	8006562 <USBD_CtlError>
            ret = USBD_FAIL;
 8004c84:	2303      	movs	r3, #3
 8004c86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004c88:	e008      	b.n	8004c9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 fc68 	bl	8006562 <USBD_CtlError>
          ret = USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	75fb      	strb	r3, [r7, #23]
          break;
 8004c96:	e002      	b.n	8004c9e <USBD_CDC_Setup+0x19e>
          break;
 8004c98:	bf00      	nop
 8004c9a:	e008      	b.n	8004cae <USBD_CDC_Setup+0x1ae>
          break;
 8004c9c:	bf00      	nop
      }
      break;
 8004c9e:	e006      	b.n	8004cae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 fc5d 	bl	8006562 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cac:	bf00      	nop
  }

  return (uint8_t)ret;
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004cca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	32b0      	adds	r2, #176	@ 0xb0
 8004cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e065      	b.n	8004dae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	32b0      	adds	r2, #176	@ 0xb0
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3314      	adds	r3, #20
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d02f      	beq.n	8004d6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3314      	adds	r3, #20
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 010f 	and.w	r1, r3, #15
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4403      	add	r3, r0
 8004d34:	331c      	adds	r3, #28
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d112      	bne.n	8004d6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	3314      	adds	r3, #20
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d5e:	78f9      	ldrb	r1, [r7, #3]
 8004d60:	2300      	movs	r3, #0
 8004d62:	2200      	movs	r2, #0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f002 f952 	bl	800700e <USBD_LL_Transmit>
 8004d6a:	e01f      	b.n	8004dac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	33b0      	adds	r3, #176	@ 0xb0
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	33b0      	adds	r3, #176	@ 0xb0
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	32b0      	adds	r2, #176	@ 0xb0
 8004dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	32b0      	adds	r2, #176	@ 0xb0
 8004ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e01a      	b.n	8004e1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f002 f950 	bl	8007092 <USBD_LL_GetRxDataSize>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	33b0      	adds	r3, #176	@ 0xb0
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004e18:	4611      	mov	r1, r2
 8004e1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	32b0      	adds	r2, #176	@ 0xb0
 8004e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e024      	b.n	8004e92 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	33b0      	adds	r3, #176	@ 0xb0
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <USBD_CDC_EP0_RxReady+0x6a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004e62:	2bff      	cmp	r3, #255	@ 0xff
 8004e64:	d014      	beq.n	8004e90 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	33b0      	adds	r3, #176	@ 0xb0
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004e7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004e86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	22ff      	movs	r2, #255	@ 0xff
 8004e8c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ea4:	2182      	movs	r1, #130	@ 0x82
 8004ea6:	4818      	ldr	r0, [pc, #96]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ea8:	f000 fd22 	bl	80058f0 <USBD_GetEpDesc>
 8004eac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4815      	ldr	r0, [pc, #84]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004eb2:	f000 fd1d 	bl	80058f0 <USBD_GetEpDesc>
 8004eb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004eb8:	2181      	movs	r1, #129	@ 0x81
 8004eba:	4813      	ldr	r0, [pc, #76]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ebc:	f000 fd18 	bl	80058f0 <USBD_GetEpDesc>
 8004ec0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004edc:	711a      	strb	r2, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ef0:	711a      	strb	r2, [r3, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2243      	movs	r2, #67	@ 0x43
 8004efa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004efc:	4b02      	ldr	r3, [pc, #8]	@ (8004f08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000050 	.word	0x20000050

08004f0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f14:	2182      	movs	r1, #130	@ 0x82
 8004f16:	4818      	ldr	r0, [pc, #96]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f18:	f000 fcea 	bl	80058f0 <USBD_GetEpDesc>
 8004f1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4815      	ldr	r0, [pc, #84]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f22:	f000 fce5 	bl	80058f0 <USBD_GetEpDesc>
 8004f26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f28:	2181      	movs	r1, #129	@ 0x81
 8004f2a:	4813      	ldr	r0, [pc, #76]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f2c:	f000 fce0 	bl	80058f0 <USBD_GetEpDesc>
 8004f30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2210      	movs	r2, #16
 8004f3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2200      	movs	r2, #0
 8004f48:	711a      	strb	r2, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f042 0202 	orr.w	r2, r2, #2
 8004f50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	711a      	strb	r2, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f042 0202 	orr.w	r2, r2, #2
 8004f64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2243      	movs	r2, #67	@ 0x43
 8004f6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f6c:	4b02      	ldr	r3, [pc, #8]	@ (8004f78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000050 	.word	0x20000050

08004f7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f84:	2182      	movs	r1, #130	@ 0x82
 8004f86:	4818      	ldr	r0, [pc, #96]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f88:	f000 fcb2 	bl	80058f0 <USBD_GetEpDesc>
 8004f8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4815      	ldr	r0, [pc, #84]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f92:	f000 fcad 	bl	80058f0 <USBD_GetEpDesc>
 8004f96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f98:	2181      	movs	r1, #129	@ 0x81
 8004f9a:	4813      	ldr	r0, [pc, #76]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004f9c:	f000 fca8 	bl	80058f0 <USBD_GetEpDesc>
 8004fa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2210      	movs	r2, #16
 8004fac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fbc:	711a      	strb	r2, [r3, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d006      	beq.n	8004fd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd0:	711a      	strb	r2, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2243      	movs	r2, #67	@ 0x43
 8004fda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004fdc:	4b02      	ldr	r3, [pc, #8]	@ (8004fe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000050 	.word	0x20000050

08004fec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	220a      	movs	r2, #10
 8004ff8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004ffa:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	2000000c 	.word	0x2000000c

0800500c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800501c:	2303      	movs	r3, #3
 800501e:	e009      	b.n	8005034 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	33b0      	adds	r3, #176	@ 0xb0
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	32b0      	adds	r2, #176	@ 0xb0
 8005056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005062:	2303      	movs	r3, #3
 8005064:	e008      	b.n	8005078 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	32b0      	adds	r2, #176	@ 0xb0
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e004      	b.n	80050b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	32b0      	adds	r2, #176	@ 0xb0
 80050d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	32b0      	adds	r2, #176	@ 0xb0
 80050e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e018      	b.n	8005120 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7c1b      	ldrb	r3, [r3, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <USBD_CDC_ReceivePacket+0x68>)
 80050f8:	7819      	ldrb	r1, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 ffa3 	bl	8007050 <USBD_LL_PrepareReceive>
 800510a:	e008      	b.n	800511e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800510c:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <USBD_CDC_ReceivePacket+0x68>)
 800510e:	7819      	ldrb	r1, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005116:	2340      	movs	r3, #64	@ 0x40
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f001 ff99 	bl	8007050 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000094 	.word	0x20000094

0800512c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	e01f      	b.n	8005184 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	79fa      	ldrb	r2, [r7, #7]
 8005176:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f001 fe13 	bl	8006da4 <USBD_LL_Init>
 800517e:	4603      	mov	r3, r0
 8005180:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005182:	7dfb      	ldrb	r3, [r7, #23]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e025      	b.n	80051f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	32ae      	adds	r2, #174	@ 0xae
 80051b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00f      	beq.n	80051e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	32ae      	adds	r2, #174	@ 0xae
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	f107 020e 	add.w	r2, r7, #14
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	4602      	mov	r2, r0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 fe1b 	bl	8006e3c <USBD_LL_Start>
 8005206:	4603      	mov	r3, r0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005218:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	4611      	mov	r1, r2
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	4611      	mov	r1, r2
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005284:	2303      	movs	r3, #3
 8005286:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f001 f922 	bl	80064ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80052b8:	461a      	mov	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d01a      	beq.n	8005304 <USBD_LL_SetupStage+0x72>
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d822      	bhi.n	8005318 <USBD_LL_SetupStage+0x86>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <USBD_LL_SetupStage+0x4a>
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d00a      	beq.n	80052f0 <USBD_LL_SetupStage+0x5e>
 80052da:	e01d      	b.n	8005318 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb77 	bl	80059d8 <USBD_StdDevReq>
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
      break;
 80052ee:	e020      	b.n	8005332 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fbdf 	bl	8005abc <USBD_StdItfReq>
 80052fe:	4603      	mov	r3, r0
 8005300:	73fb      	strb	r3, [r7, #15]
      break;
 8005302:	e016      	b.n	8005332 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fc41 	bl	8005b94 <USBD_StdEPReq>
 8005312:	4603      	mov	r3, r0
 8005314:	73fb      	strb	r3, [r7, #15]
      break;
 8005316:	e00c      	b.n	8005332 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800531e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005322:	b2db      	uxtb	r3, r3
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f001 fde8 	bl	8006efc <USBD_LL_StallEP>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	bf00      	nop
  }

  return ret;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	460b      	mov	r3, r1
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d177      	bne.n	8005444 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800535a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005362:	2b03      	cmp	r3, #3
 8005364:	f040 80a1 	bne.w	80054aa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	8992      	ldrh	r2, [r2, #12]
 8005370:	4293      	cmp	r3, r2
 8005372:	d91c      	bls.n	80053ae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	8992      	ldrh	r2, [r2, #12]
 800537c:	1a9a      	subs	r2, r3, r2
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	8992      	ldrh	r2, [r2, #12]
 800538a:	441a      	add	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	6919      	ldr	r1, [r3, #16]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	899b      	ldrh	r3, [r3, #12]
 8005398:	461a      	mov	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4293      	cmp	r3, r2
 80053a0:	bf38      	it	cc
 80053a2:	4613      	movcc	r3, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f001 f9a8 	bl	80066fc <USBD_CtlContinueRx>
 80053ac:	e07d      	b.n	80054aa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d014      	beq.n	80053e6 <USBD_LL_DataOutStage+0xaa>
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d81d      	bhi.n	80053fc <USBD_LL_DataOutStage+0xc0>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <USBD_LL_DataOutStage+0x8e>
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d003      	beq.n	80053d0 <USBD_LL_DataOutStage+0x94>
 80053c8:	e018      	b.n	80053fc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75bb      	strb	r3, [r7, #22]
            break;
 80053ce:	e018      	b.n	8005402 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	4619      	mov	r1, r3
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fa6e 	bl	80058bc <USBD_CoreFindIF>
 80053e0:	4603      	mov	r3, r0
 80053e2:	75bb      	strb	r3, [r7, #22]
            break;
 80053e4:	e00d      	b.n	8005402 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	4619      	mov	r1, r3
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa70 	bl	80058d6 <USBD_CoreFindEP>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75bb      	strb	r3, [r7, #22]
            break;
 80053fa:	e002      	b.n	8005402 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	75bb      	strb	r3, [r7, #22]
            break;
 8005400:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005402:	7dbb      	ldrb	r3, [r7, #22]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d119      	bne.n	800543c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b03      	cmp	r3, #3
 8005412:	d113      	bne.n	800543c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005414:	7dba      	ldrb	r2, [r7, #22]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	32ae      	adds	r2, #174	@ 0xae
 800541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005424:	7dba      	ldrb	r2, [r7, #22]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800542c:	7dba      	ldrb	r2, [r7, #22]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	32ae      	adds	r2, #174	@ 0xae
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f001 f96e 	bl	800671e <USBD_CtlSendStatus>
 8005442:	e032      	b.n	80054aa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005444:	7afb      	ldrb	r3, [r7, #11]
 8005446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fa41 	bl	80058d6 <USBD_CoreFindEP>
 8005454:	4603      	mov	r3, r0
 8005456:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005458:	7dbb      	ldrb	r3, [r7, #22]
 800545a:	2bff      	cmp	r3, #255	@ 0xff
 800545c:	d025      	beq.n	80054aa <USBD_LL_DataOutStage+0x16e>
 800545e:	7dbb      	ldrb	r3, [r7, #22]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d122      	bne.n	80054aa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b03      	cmp	r3, #3
 800546e:	d117      	bne.n	80054a0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005470:	7dba      	ldrb	r2, [r7, #22]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	32ae      	adds	r2, #174	@ 0xae
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00f      	beq.n	80054a0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005480:	7dba      	ldrb	r2, [r7, #22]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005488:	7dba      	ldrb	r2, [r7, #22]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	32ae      	adds	r2, #174	@ 0xae
 800548e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	7afa      	ldrb	r2, [r7, #11]
 8005496:	4611      	mov	r1, r2
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	4798      	blx	r3
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	e000      	b.n	80054ac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	460b      	mov	r3, r1
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80054c2:	7afb      	ldrb	r3, [r7, #11]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d178      	bne.n	80055ba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3314      	adds	r3, #20
 80054cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d163      	bne.n	80055a0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	8992      	ldrh	r2, [r2, #12]
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d91c      	bls.n	800551e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	8992      	ldrh	r2, [r2, #12]
 80054ec:	1a9a      	subs	r2, r3, r2
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	8992      	ldrh	r2, [r2, #12]
 80054fa:	441a      	add	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6919      	ldr	r1, [r3, #16]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	461a      	mov	r2, r3
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f001 f8c4 	bl	8006698 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005510:	2300      	movs	r3, #0
 8005512:	2200      	movs	r2, #0
 8005514:	2100      	movs	r1, #0
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f001 fd9a 	bl	8007050 <USBD_LL_PrepareReceive>
 800551c:	e040      	b.n	80055a0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	899b      	ldrh	r3, [r3, #12]
 8005522:	461a      	mov	r2, r3
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d11c      	bne.n	8005566 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005534:	4293      	cmp	r3, r2
 8005536:	d316      	bcc.n	8005566 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005542:	429a      	cmp	r2, r3
 8005544:	d20f      	bcs.n	8005566 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005546:	2200      	movs	r2, #0
 8005548:	2100      	movs	r1, #0
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f001 f8a4 	bl	8006698 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005558:	2300      	movs	r3, #0
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f001 fd76 	bl	8007050 <USBD_LL_PrepareReceive>
 8005564:	e01c      	b.n	80055a0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d10f      	bne.n	8005592 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005592:	2180      	movs	r1, #128	@ 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f001 fcb1 	bl	8006efc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f001 f8d2 	bl	8006744 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03a      	beq.n	8005620 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fe30 	bl	8005210 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80055b8:	e032      	b.n	8005620 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80055ba:	7afb      	ldrb	r3, [r7, #11]
 80055bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	4619      	mov	r1, r3
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f986 	bl	80058d6 <USBD_CoreFindEP>
 80055ca:	4603      	mov	r3, r0
 80055cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	2bff      	cmp	r3, #255	@ 0xff
 80055d2:	d025      	beq.n	8005620 <USBD_LL_DataInStage+0x16c>
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d122      	bne.n	8005620 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d11c      	bne.n	8005620 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80055e6:	7dfa      	ldrb	r2, [r7, #23]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	32ae      	adds	r2, #174	@ 0xae
 80055ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d014      	beq.n	8005620 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80055f6:	7dfa      	ldrb	r2, [r7, #23]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80055fe:	7dfa      	ldrb	r2, [r7, #23]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	32ae      	adds	r2, #174	@ 0xae
 8005604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	7afa      	ldrb	r2, [r7, #11]
 800560c:	4611      	mov	r1, r2
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	4798      	blx	r3
 8005612:	4603      	mov	r3, r0
 8005614:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005616:	7dbb      	ldrb	r3, [r7, #22]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800561c:	7dbb      	ldrb	r3, [r7, #22]
 800561e:	e000      	b.n	8005622 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d014      	beq.n	8005690 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6852      	ldr	r2, [r2, #4]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	4611      	mov	r1, r2
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800568c:	2303      	movs	r3, #3
 800568e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005690:	2340      	movs	r3, #64	@ 0x40
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fbeb 	bl	8006e72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2240      	movs	r2, #64	@ 0x40
 80056a8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056ac:	2340      	movs	r3, #64	@ 0x40
 80056ae:	2200      	movs	r2, #0
 80056b0:	2180      	movs	r1, #128	@ 0x80
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fbdd 	bl	8006e72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2240      	movs	r2, #64	@ 0x40
 80056c4:	841a      	strh	r2, [r3, #32]

  return ret;
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b04      	cmp	r3, #4
 8005702:	d006      	beq.n	8005712 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800570a:	b2da      	uxtb	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2204      	movs	r2, #4
 8005716:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b04      	cmp	r3, #4
 800573a:	d106      	bne.n	800574a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005742:	b2da      	uxtb	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b03      	cmp	r3, #3
 800576a:	d110      	bne.n	800578e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	32ae      	adds	r2, #174	@ 0xae
 80057ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e01c      	b.n	80057f4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d115      	bne.n	80057f2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	32ae      	adds	r2, #174	@ 0xae
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	32ae      	adds	r2, #174	@ 0xae
 80057e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	4611      	mov	r1, r2
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	32ae      	adds	r2, #174	@ 0xae
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800581a:	2303      	movs	r3, #3
 800581c:	e01c      	b.n	8005858 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d115      	bne.n	8005856 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	32ae      	adds	r2, #174	@ 0xae
 8005834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	32ae      	adds	r2, #174	@ 0xae
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	4611      	mov	r1, r2
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00e      	beq.n	80058b2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6852      	ldr	r2, [r2, #4]
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	4611      	mov	r1, r2
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80058c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80058e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	885b      	ldrh	r3, [r3, #2]
 800590c:	b29b      	uxth	r3, r3
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	4293      	cmp	r3, r2
 8005914:	d91f      	bls.n	8005956 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800591c:	e013      	b.n	8005946 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800591e:	f107 030a 	add.w	r3, r7, #10
 8005922:	4619      	mov	r1, r3
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f000 f81b 	bl	8005960 <USBD_GetNextDesc>
 800592a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b05      	cmp	r3, #5
 8005932:	d108      	bne.n	8005946 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	789b      	ldrb	r3, [r3, #2]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	429a      	cmp	r2, r3
 8005940:	d008      	beq.n	8005954 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	885b      	ldrh	r3, [r3, #2]
 800594a:	b29a      	uxth	r2, r3
 800594c:	897b      	ldrh	r3, [r7, #10]
 800594e:	429a      	cmp	r2, r3
 8005950:	d8e5      	bhi.n	800591e <USBD_GetEpDesc+0x2e>
 8005952:	e000      	b.n	8005956 <USBD_GetEpDesc+0x66>
          break;
 8005954:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005956:	693b      	ldr	r3, [r7, #16]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	4413      	add	r3, r2
 8005978:	b29a      	uxth	r2, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	3301      	adds	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80059b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	b21a      	sxth	r2, r3
 80059be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80059c8:	89fb      	ldrh	r3, [r7, #14]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059ee:	2b40      	cmp	r3, #64	@ 0x40
 80059f0:	d005      	beq.n	80059fe <USBD_StdDevReq+0x26>
 80059f2:	2b40      	cmp	r3, #64	@ 0x40
 80059f4:	d857      	bhi.n	8005aa6 <USBD_StdDevReq+0xce>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <USBD_StdDevReq+0x42>
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d153      	bne.n	8005aa6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	32ae      	adds	r2, #174	@ 0xae
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e04a      	b.n	8005ab0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b09      	cmp	r3, #9
 8005a20:	d83b      	bhi.n	8005a9a <USBD_StdDevReq+0xc2>
 8005a22:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <USBD_StdDevReq+0x50>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005a9b 	.word	0x08005a9b
 8005a34:	08005a87 	.word	0x08005a87
 8005a38:	08005a9b 	.word	0x08005a9b
 8005a3c:	08005a5b 	.word	0x08005a5b
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a9b 	.word	0x08005a9b
 8005a48:	08005a73 	.word	0x08005a73
 8005a4c:	08005a65 	.word	0x08005a65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa3e 	bl	8005ed4 <USBD_GetDescriptor>
          break;
 8005a58:	e024      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fba3 	bl	80061a8 <USBD_SetAddress>
          break;
 8005a62:	e01f      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fbe2 	bl	8006230 <USBD_SetConfig>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a70:	e018      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a72:	6839      	ldr	r1, [r7, #0]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fc85 	bl	8006384 <USBD_GetConfig>
          break;
 8005a7a:	e013      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fcb6 	bl	80063f0 <USBD_GetStatus>
          break;
 8005a84:	e00e      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fce5 	bl	8006458 <USBD_SetFeature>
          break;
 8005a8e:	e009      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fd09 	bl	80064aa <USBD_ClrFeature>
          break;
 8005a98:	e004      	b.n	8005aa4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fd60 	bl	8006562 <USBD_CtlError>
          break;
 8005aa2:	bf00      	nop
      }
      break;
 8005aa4:	e004      	b.n	8005ab0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fd5a 	bl	8006562 <USBD_CtlError>
      break;
 8005aae:	bf00      	nop
  }

  return ret;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop

08005abc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	d005      	beq.n	8005ae2 <USBD_StdItfReq+0x26>
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d852      	bhi.n	8005b80 <USBD_StdItfReq+0xc4>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <USBD_StdItfReq+0x26>
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d14e      	bne.n	8005b80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d840      	bhi.n	8005b72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	889b      	ldrh	r3, [r3, #4]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d836      	bhi.n	8005b68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	889b      	ldrh	r3, [r3, #4]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff feda 	bl	80058bc <USBD_CoreFindIF>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	2bff      	cmp	r3, #255	@ 0xff
 8005b10:	d01d      	beq.n	8005b4e <USBD_StdItfReq+0x92>
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d11a      	bne.n	8005b4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005b18:	7bba      	ldrb	r2, [r7, #14]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	32ae      	adds	r2, #174	@ 0xae
 8005b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00f      	beq.n	8005b48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005b28:	7bba      	ldrb	r2, [r7, #14]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b30:	7bba      	ldrb	r2, [r7, #14]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	32ae      	adds	r2, #174	@ 0xae
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b46:	e004      	b.n	8005b52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b4c:	e001      	b.n	8005b52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	88db      	ldrh	r3, [r3, #6]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d110      	bne.n	8005b7c <USBD_StdItfReq+0xc0>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fddc 	bl	800671e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b66:	e009      	b.n	8005b7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fcf9 	bl	8006562 <USBD_CtlError>
          break;
 8005b70:	e004      	b.n	8005b7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fcf4 	bl	8006562 <USBD_CtlError>
          break;
 8005b7a:	e000      	b.n	8005b7e <USBD_StdItfReq+0xc2>
          break;
 8005b7c:	bf00      	nop
      }
      break;
 8005b7e:	e004      	b.n	8005b8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fced 	bl	8006562 <USBD_CtlError>
      break;
 8005b88:	bf00      	nop
  }

  return ret;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	889b      	ldrh	r3, [r3, #4]
 8005ba6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d007      	beq.n	8005bc4 <USBD_StdEPReq+0x30>
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	f200 8181 	bhi.w	8005ebc <USBD_StdEPReq+0x328>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02a      	beq.n	8005c14 <USBD_StdEPReq+0x80>
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	f040 817c 	bne.w	8005ebc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fe84 	bl	80058d6 <USBD_CoreFindEP>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bd2:	7b7b      	ldrb	r3, [r7, #13]
 8005bd4:	2bff      	cmp	r3, #255	@ 0xff
 8005bd6:	f000 8176 	beq.w	8005ec6 <USBD_StdEPReq+0x332>
 8005bda:	7b7b      	ldrb	r3, [r7, #13]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 8172 	bne.w	8005ec6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005be2:	7b7a      	ldrb	r2, [r7, #13]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005bea:	7b7a      	ldrb	r2, [r7, #13]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	32ae      	adds	r2, #174	@ 0xae
 8005bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8165 	beq.w	8005ec6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005bfc:	7b7a      	ldrb	r2, [r7, #13]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32ae      	adds	r2, #174	@ 0xae
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c12:	e158      	b.n	8005ec6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d008      	beq.n	8005c2e <USBD_StdEPReq+0x9a>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	f300 8147 	bgt.w	8005eb0 <USBD_StdEPReq+0x31c>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 809b 	beq.w	8005d5e <USBD_StdEPReq+0x1ca>
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d03c      	beq.n	8005ca6 <USBD_StdEPReq+0x112>
 8005c2c:	e140      	b.n	8005eb0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d002      	beq.n	8005c40 <USBD_StdEPReq+0xac>
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d016      	beq.n	8005c6c <USBD_StdEPReq+0xd8>
 8005c3e:	e02c      	b.n	8005c9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c40:	7bbb      	ldrb	r3, [r7, #14]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <USBD_StdEPReq+0xce>
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	2b80      	cmp	r3, #128	@ 0x80
 8005c4a:	d00a      	beq.n	8005c62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 f953 	bl	8006efc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c56:	2180      	movs	r1, #128	@ 0x80
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 f94f 	bl	8006efc <USBD_LL_StallEP>
 8005c5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c60:	e020      	b.n	8005ca4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fc7c 	bl	8006562 <USBD_CtlError>
              break;
 8005c6a:	e01b      	b.n	8005ca4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	885b      	ldrh	r3, [r3, #2]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10e      	bne.n	8005c92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c74:	7bbb      	ldrb	r3, [r7, #14]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <USBD_StdEPReq+0xfe>
 8005c7a:	7bbb      	ldrb	r3, [r7, #14]
 8005c7c:	2b80      	cmp	r3, #128	@ 0x80
 8005c7e:	d008      	beq.n	8005c92 <USBD_StdEPReq+0xfe>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	88db      	ldrh	r3, [r3, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 f935 	bl	8006efc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fd43 	bl	800671e <USBD_CtlSendStatus>

              break;
 8005c98:	e004      	b.n	8005ca4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fc60 	bl	8006562 <USBD_CtlError>
              break;
 8005ca2:	bf00      	nop
          }
          break;
 8005ca4:	e109      	b.n	8005eba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d002      	beq.n	8005cb8 <USBD_StdEPReq+0x124>
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d016      	beq.n	8005ce4 <USBD_StdEPReq+0x150>
 8005cb6:	e04b      	b.n	8005d50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00d      	beq.n	8005cda <USBD_StdEPReq+0x146>
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b80      	cmp	r3, #128	@ 0x80
 8005cc2:	d00a      	beq.n	8005cda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f917 	bl	8006efc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 f913 	bl	8006efc <USBD_LL_StallEP>
 8005cd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cd8:	e040      	b.n	8005d5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fc40 	bl	8006562 <USBD_CtlError>
              break;
 8005ce2:	e03b      	b.n	8005d5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d136      	bne.n	8005d5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 f91d 	bl	8006f3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fd0c 	bl	800671e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fde3 	bl	80058d6 <USBD_CoreFindEP>
 8005d10:	4603      	mov	r3, r0
 8005d12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d14:	7b7b      	ldrb	r3, [r7, #13]
 8005d16:	2bff      	cmp	r3, #255	@ 0xff
 8005d18:	d01f      	beq.n	8005d5a <USBD_StdEPReq+0x1c6>
 8005d1a:	7b7b      	ldrb	r3, [r7, #13]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d11c      	bne.n	8005d5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005d20:	7b7a      	ldrb	r2, [r7, #13]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005d28:	7b7a      	ldrb	r2, [r7, #13]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	32ae      	adds	r2, #174	@ 0xae
 8005d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d38:	7b7a      	ldrb	r2, [r7, #13]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32ae      	adds	r2, #174	@ 0xae
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005d4e:	e004      	b.n	8005d5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fc05 	bl	8006562 <USBD_CtlError>
              break;
 8005d58:	e000      	b.n	8005d5c <USBD_StdEPReq+0x1c8>
              break;
 8005d5a:	bf00      	nop
          }
          break;
 8005d5c:	e0ad      	b.n	8005eba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d002      	beq.n	8005d70 <USBD_StdEPReq+0x1dc>
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d033      	beq.n	8005dd6 <USBD_StdEPReq+0x242>
 8005d6e:	e099      	b.n	8005ea4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <USBD_StdEPReq+0x1f2>
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	2b80      	cmp	r3, #128	@ 0x80
 8005d7a:	d004      	beq.n	8005d86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fbef 	bl	8006562 <USBD_CtlError>
                break;
 8005d84:	e093      	b.n	8005eae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da0b      	bge.n	8005da6 <USBD_StdEPReq+0x212>
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	3310      	adds	r3, #16
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	e00b      	b.n	8005dbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	330e      	adds	r3, #14
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fc44 	bl	800665c <USBD_CtlSendData>
              break;
 8005dd4:	e06b      	b.n	8005eae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da11      	bge.n	8005e02 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3323      	adds	r3, #35	@ 0x23
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d117      	bne.n	8005e28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fbb1 	bl	8006562 <USBD_CtlError>
                  break;
 8005e00:	e055      	b.n	8005eae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	f003 020f 	and.w	r2, r3, #15
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fb9e 	bl	8006562 <USBD_CtlError>
                  break;
 8005e26:	e042      	b.n	8005eae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da0b      	bge.n	8005e48 <USBD_StdEPReq+0x2b4>
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3310      	adds	r3, #16
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	3304      	adds	r3, #4
 8005e46:	e00b      	b.n	8005e60 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3304      	adds	r3, #4
 8005e60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <USBD_StdEPReq+0x2da>
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b80      	cmp	r3, #128	@ 0x80
 8005e6c:	d103      	bne.n	8005e76 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	739a      	strb	r2, [r3, #14]
 8005e74:	e00e      	b.n	8005e94 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 f87c 	bl	8006f78 <USBD_LL_IsStallEP>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	739a      	strb	r2, [r3, #14]
 8005e8c:	e002      	b.n	8005e94 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	330e      	adds	r3, #14
 8005e98:	2202      	movs	r2, #2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fbdd 	bl	800665c <USBD_CtlSendData>
              break;
 8005ea2:	e004      	b.n	8005eae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fb5b 	bl	8006562 <USBD_CtlError>
              break;
 8005eac:	bf00      	nop
          }
          break;
 8005eae:	e004      	b.n	8005eba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fb55 	bl	8006562 <USBD_CtlError>
          break;
 8005eb8:	bf00      	nop
      }
      break;
 8005eba:	e005      	b.n	8005ec8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fb4f 	bl	8006562 <USBD_CtlError>
      break;
 8005ec4:	e000      	b.n	8005ec8 <USBD_StdEPReq+0x334>
      break;
 8005ec6:	bf00      	nop
  }

  return ret;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	885b      	ldrh	r3, [r3, #2]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	2b06      	cmp	r3, #6
 8005ef6:	f200 8128 	bhi.w	800614a <USBD_GetDescriptor+0x276>
 8005efa:	a201      	add	r2, pc, #4	@ (adr r2, 8005f00 <USBD_GetDescriptor+0x2c>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f1d 	.word	0x08005f1d
 8005f04:	08005f35 	.word	0x08005f35
 8005f08:	08005f75 	.word	0x08005f75
 8005f0c:	0800614b 	.word	0x0800614b
 8005f10:	0800614b 	.word	0x0800614b
 8005f14:	080060eb 	.word	0x080060eb
 8005f18:	08006117 	.word	0x08006117
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	7c12      	ldrb	r2, [r2, #16]
 8005f28:	f107 0108 	add.w	r1, r7, #8
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
 8005f30:	60f8      	str	r0, [r7, #12]
      break;
 8005f32:	e112      	b.n	800615a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7c1b      	ldrb	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10d      	bne.n	8005f58 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	f107 0208 	add.w	r2, r7, #8
 8005f48:	4610      	mov	r0, r2
 8005f4a:	4798      	blx	r3
 8005f4c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	2202      	movs	r2, #2
 8005f54:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f56:	e100      	b.n	800615a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	f107 0208 	add.w	r2, r7, #8
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
 8005f68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	2202      	movs	r2, #2
 8005f70:	701a      	strb	r2, [r3, #0]
      break;
 8005f72:	e0f2      	b.n	800615a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	885b      	ldrh	r3, [r3, #2]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	f200 80ac 	bhi.w	80060d8 <USBD_GetDescriptor+0x204>
 8005f80:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <USBD_GetDescriptor+0xb4>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fa1 	.word	0x08005fa1
 8005f8c:	08005fd5 	.word	0x08005fd5
 8005f90:	08006009 	.word	0x08006009
 8005f94:	0800603d 	.word	0x0800603d
 8005f98:	08006071 	.word	0x08006071
 8005f9c:	080060a5 	.word	0x080060a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	7c12      	ldrb	r2, [r2, #16]
 8005fb8:	f107 0108 	add.w	r1, r7, #8
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
 8005fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fc2:	e091      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 facb 	bl	8006562 <USBD_CtlError>
            err++;
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fd2:	e089      	b.n	80060e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00b      	beq.n	8005ff8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 0108 	add.w	r1, r7, #8
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff6:	e077      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fab1 	bl	8006562 <USBD_CtlError>
            err++;
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	3301      	adds	r3, #1
 8006004:	72fb      	strb	r3, [r7, #11]
          break;
 8006006:	e06f      	b.n	80060e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	7c12      	ldrb	r2, [r2, #16]
 8006020:	f107 0108 	add.w	r1, r7, #8
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800602a:	e05d      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fa97 	bl	8006562 <USBD_CtlError>
            err++;
 8006034:	7afb      	ldrb	r3, [r7, #11]
 8006036:	3301      	adds	r3, #1
 8006038:	72fb      	strb	r3, [r7, #11]
          break;
 800603a:	e055      	b.n	80060e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	7c12      	ldrb	r2, [r2, #16]
 8006054:	f107 0108 	add.w	r1, r7, #8
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
 800605c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800605e:	e043      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa7d 	bl	8006562 <USBD_CtlError>
            err++;
 8006068:	7afb      	ldrb	r3, [r7, #11]
 800606a:	3301      	adds	r3, #1
 800606c:	72fb      	strb	r3, [r7, #11]
          break;
 800606e:	e03b      	b.n	80060e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00b      	beq.n	8006094 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	7c12      	ldrb	r2, [r2, #16]
 8006088:	f107 0108 	add.w	r1, r7, #8
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
 8006090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006092:	e029      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fa63 	bl	8006562 <USBD_CtlError>
            err++;
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	3301      	adds	r3, #1
 80060a0:	72fb      	strb	r3, [r7, #11]
          break;
 80060a2:	e021      	b.n	80060e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	7c12      	ldrb	r2, [r2, #16]
 80060bc:	f107 0108 	add.w	r1, r7, #8
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060c6:	e00f      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa49 	bl	8006562 <USBD_CtlError>
            err++;
 80060d0:	7afb      	ldrb	r3, [r7, #11]
 80060d2:	3301      	adds	r3, #1
 80060d4:	72fb      	strb	r3, [r7, #11]
          break;
 80060d6:	e007      	b.n	80060e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa41 	bl	8006562 <USBD_CtlError>
          err++;
 80060e0:	7afb      	ldrb	r3, [r7, #11]
 80060e2:	3301      	adds	r3, #1
 80060e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80060e6:	bf00      	nop
      }
      break;
 80060e8:	e037      	b.n	800615a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	7c1b      	ldrb	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fa:	f107 0208 	add.w	r2, r7, #8
 80060fe:	4610      	mov	r0, r2
 8006100:	4798      	blx	r3
 8006102:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006104:	e029      	b.n	800615a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa2a 	bl	8006562 <USBD_CtlError>
        err++;
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	3301      	adds	r3, #1
 8006112:	72fb      	strb	r3, [r7, #11]
      break;
 8006114:	e021      	b.n	800615a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	7c1b      	ldrb	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10d      	bne.n	800613a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006126:	f107 0208 	add.w	r2, r7, #8
 800612a:	4610      	mov	r0, r2
 800612c:	4798      	blx	r3
 800612e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	2207      	movs	r2, #7
 8006136:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006138:	e00f      	b.n	800615a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fa10 	bl	8006562 <USBD_CtlError>
        err++;
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	3301      	adds	r3, #1
 8006146:	72fb      	strb	r3, [r7, #11]
      break;
 8006148:	e007      	b.n	800615a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa08 	bl	8006562 <USBD_CtlError>
      err++;
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	3301      	adds	r3, #1
 8006156:	72fb      	strb	r3, [r7, #11]
      break;
 8006158:	bf00      	nop
  }

  if (err != 0U)
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11e      	bne.n	800619e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	88db      	ldrh	r3, [r3, #6]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d016      	beq.n	8006196 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006168:	893b      	ldrh	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	88da      	ldrh	r2, [r3, #6]
 8006172:	893b      	ldrh	r3, [r7, #8]
 8006174:	4293      	cmp	r3, r2
 8006176:	bf28      	it	cs
 8006178:	4613      	movcs	r3, r2
 800617a:	b29b      	uxth	r3, r3
 800617c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800617e:	893b      	ldrh	r3, [r7, #8]
 8006180:	461a      	mov	r2, r3
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa69 	bl	800665c <USBD_CtlSendData>
 800618a:	e009      	b.n	80061a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9e7 	bl	8006562 <USBD_CtlError>
 8006194:	e004      	b.n	80061a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fac1 	bl	800671e <USBD_CtlSendStatus>
 800619c:	e000      	b.n	80061a0 <USBD_GetDescriptor+0x2cc>
    return;
 800619e:	bf00      	nop
  }
}
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop

080061a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	889b      	ldrh	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d131      	bne.n	800621e <USBD_SetAddress+0x76>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	88db      	ldrh	r3, [r3, #6]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d12d      	bne.n	800621e <USBD_SetAddress+0x76>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	885b      	ldrh	r3, [r3, #2]
 80061c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c8:	d829      	bhi.n	800621e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	885b      	ldrh	r3, [r3, #2]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d104      	bne.n	80061ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9bc 	bl	8006562 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ea:	e01d      	b.n	8006228 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	7bfa      	ldrb	r2, [r7, #15]
 80061f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fee9 	bl	8006fd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa8d 	bl	800671e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006212:	e009      	b.n	8006228 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621c:	e004      	b.n	8006228 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f99e 	bl	8006562 <USBD_CtlError>
  }
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	885b      	ldrh	r3, [r3, #2]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b4e      	ldr	r3, [pc, #312]	@ (8006380 <USBD_SetConfig+0x150>)
 8006246:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006248:	4b4d      	ldr	r3, [pc, #308]	@ (8006380 <USBD_SetConfig+0x150>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d905      	bls.n	800625c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f985 	bl	8006562 <USBD_CtlError>
    return USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	e08c      	b.n	8006376 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d002      	beq.n	800626e <USBD_SetConfig+0x3e>
 8006268:	2b03      	cmp	r3, #3
 800626a:	d029      	beq.n	80062c0 <USBD_SetConfig+0x90>
 800626c:	e075      	b.n	800635a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800626e:	4b44      	ldr	r3, [pc, #272]	@ (8006380 <USBD_SetConfig+0x150>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d020      	beq.n	80062b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006276:	4b42      	ldr	r3, [pc, #264]	@ (8006380 <USBD_SetConfig+0x150>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006280:	4b3f      	ldr	r3, [pc, #252]	@ (8006380 <USBD_SetConfig+0x150>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fe ffcd 	bl	8005226 <USBD_SetClassConfig>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f962 	bl	8006562 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062a6:	e065      	b.n	8006374 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa38 	bl	800671e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80062b6:	e05d      	b.n	8006374 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa30 	bl	800671e <USBD_CtlSendStatus>
      break;
 80062be:	e059      	b.n	8006374 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80062c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006380 <USBD_SetConfig+0x150>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d112      	bne.n	80062ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80062d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006380 <USBD_SetConfig+0x150>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062da:	4b29      	ldr	r3, [pc, #164]	@ (8006380 <USBD_SetConfig+0x150>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7fe ffbc 	bl	800525e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa19 	bl	800671e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062ec:	e042      	b.n	8006374 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80062ee:	4b24      	ldr	r3, [pc, #144]	@ (8006380 <USBD_SetConfig+0x150>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d02a      	beq.n	8006352 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7fe ffaa 	bl	800525e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800630a:	4b1d      	ldr	r3, [pc, #116]	@ (8006380 <USBD_SetConfig+0x150>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006314:	4b1a      	ldr	r3, [pc, #104]	@ (8006380 <USBD_SetConfig+0x150>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fe ff83 	bl	8005226 <USBD_SetClassConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00f      	beq.n	800634a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f918 	bl	8006562 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fe ff8f 	bl	800525e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006348:	e014      	b.n	8006374 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9e7 	bl	800671e <USBD_CtlSendStatus>
      break;
 8006350:	e010      	b.n	8006374 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9e3 	bl	800671e <USBD_CtlSendStatus>
      break;
 8006358:	e00c      	b.n	8006374 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f900 	bl	8006562 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006362:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <USBD_SetConfig+0x150>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7fe ff78 	bl	800525e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800636e:	2303      	movs	r3, #3
 8006370:	73fb      	strb	r3, [r7, #15]
      break;
 8006372:	bf00      	nop
  }

  return ret;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000168 	.word	0x20000168

08006384 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d004      	beq.n	80063a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f8e2 	bl	8006562 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800639e:	e023      	b.n	80063e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	dc02      	bgt.n	80063b2 <USBD_GetConfig+0x2e>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dc03      	bgt.n	80063b8 <USBD_GetConfig+0x34>
 80063b0:	e015      	b.n	80063de <USBD_GetConfig+0x5a>
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d00b      	beq.n	80063ce <USBD_GetConfig+0x4a>
 80063b6:	e012      	b.n	80063de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3308      	adds	r3, #8
 80063c2:	2201      	movs	r2, #1
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f948 	bl	800665c <USBD_CtlSendData>
        break;
 80063cc:	e00c      	b.n	80063e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3304      	adds	r3, #4
 80063d2:	2201      	movs	r2, #1
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f940 	bl	800665c <USBD_CtlSendData>
        break;
 80063dc:	e004      	b.n	80063e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8be 	bl	8006562 <USBD_CtlError>
        break;
 80063e6:	bf00      	nop
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006400:	b2db      	uxtb	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	2b02      	cmp	r3, #2
 8006406:	d81e      	bhi.n	8006446 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	88db      	ldrh	r3, [r3, #6]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f8a5 	bl	8006562 <USBD_CtlError>
        break;
 8006418:	e01a      	b.n	8006450 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f043 0202 	orr.w	r2, r3, #2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	330c      	adds	r3, #12
 800643a:	2202      	movs	r2, #2
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f90c 	bl	800665c <USBD_CtlSendData>
      break;
 8006444:	e004      	b.n	8006450 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f88a 	bl	8006562 <USBD_CtlError>
      break;
 800644e:	bf00      	nop
  }
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	885b      	ldrh	r3, [r3, #2]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d107      	bne.n	800647a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f953 	bl	800671e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006478:	e013      	b.n	80064a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	885b      	ldrh	r3, [r3, #2]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d10b      	bne.n	800649a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	889b      	ldrh	r3, [r3, #4]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	b29b      	uxth	r3, r3
 800648a:	b2da      	uxtb	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f943 	bl	800671e <USBD_CtlSendStatus>
}
 8006498:	e003      	b.n	80064a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f860 	bl	8006562 <USBD_CtlError>
}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d80b      	bhi.n	80064da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	885b      	ldrh	r3, [r3, #2]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10c      	bne.n	80064e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f923 	bl	800671e <USBD_CtlSendStatus>
      }
      break;
 80064d8:	e004      	b.n	80064e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f840 	bl	8006562 <USBD_CtlError>
      break;
 80064e2:	e000      	b.n	80064e6 <USBD_ClrFeature+0x3c>
      break;
 80064e4:	bf00      	nop
  }
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fa3d 	bl	8005998 <SWAPBYTE>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fa30 	bl	8005998 <SWAPBYTE>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff fa23 	bl	8005998 <SWAPBYTE>
 8006552:	4603      	mov	r3, r0
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	80da      	strh	r2, [r3, #6]
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800656c:	2180      	movs	r1, #128	@ 0x80
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fcc4 	bl	8006efc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006574:	2100      	movs	r1, #0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fcc0 	bl	8006efc <USBD_LL_StallEP>
}
 800657c:	bf00      	nop
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d042      	beq.n	8006620 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800659e:	6938      	ldr	r0, [r7, #16]
 80065a0:	f000 f842 	bl	8006628 <USBD_GetLen>
 80065a4:	4603      	mov	r3, r0
 80065a6:	3301      	adds	r3, #1
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ae:	d808      	bhi.n	80065c2 <USBD_GetString+0x3e>
 80065b0:	6938      	ldr	r0, [r7, #16]
 80065b2:	f000 f839 	bl	8006628 <USBD_GetLen>
 80065b6:	4603      	mov	r3, r0
 80065b8:	3301      	adds	r3, #1
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	e001      	b.n	80065c6 <USBD_GetString+0x42>
 80065c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	4413      	add	r3, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	3301      	adds	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	2203      	movs	r2, #3
 80065e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	3301      	adds	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065ec:	e013      	b.n	8006616 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	4413      	add	r3, r2
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3301      	adds	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
    idx++;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	3301      	adds	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	4413      	add	r3, r2
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	3301      	adds	r3, #1
 8006614:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e7      	bne.n	80065ee <USBD_GetString+0x6a>
 800661e:	e000      	b.n	8006622 <USBD_GetString+0x9e>
    return;
 8006620:	bf00      	nop
  }
}
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006638:	e005      	b.n	8006646 <USBD_GetLen+0x1e>
  {
    len++;
 800663a:	7bfb      	ldrb	r3, [r7, #15]
 800663c:	3301      	adds	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3301      	adds	r3, #1
 8006644:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f5      	bne.n	800663a <USBD_GetLen+0x12>
  }

  return len;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2202      	movs	r2, #2
 800666c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	2100      	movs	r1, #0
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fcc0 	bl	800700e <USBD_LL_Transmit>

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	2100      	movs	r1, #0
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fcaf 	bl	800700e <USBD_LL_Transmit>

  return USBD_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2203      	movs	r2, #3
 80066ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	2100      	movs	r1, #0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fcaf 	bl	8007050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	2100      	movs	r1, #0
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fc9e 	bl	8007050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2204      	movs	r2, #4
 800672a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800672e:	2300      	movs	r3, #0
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc6a 	bl	800700e <USBD_LL_Transmit>

  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2205      	movs	r2, #5
 8006750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006754:	2300      	movs	r3, #0
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fc78 	bl	8007050 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006770:	2200      	movs	r2, #0
 8006772:	4912      	ldr	r1, [pc, #72]	@ (80067bc <MX_USB_DEVICE_Init+0x50>)
 8006774:	4812      	ldr	r0, [pc, #72]	@ (80067c0 <MX_USB_DEVICE_Init+0x54>)
 8006776:	f7fe fcd9 	bl	800512c <USBD_Init>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006780:	f7f9 ffda 	bl	8000738 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006784:	490f      	ldr	r1, [pc, #60]	@ (80067c4 <MX_USB_DEVICE_Init+0x58>)
 8006786:	480e      	ldr	r0, [pc, #56]	@ (80067c0 <MX_USB_DEVICE_Init+0x54>)
 8006788:	f7fe fd00 	bl	800518c <USBD_RegisterClass>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006792:	f7f9 ffd1 	bl	8000738 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006796:	490c      	ldr	r1, [pc, #48]	@ (80067c8 <MX_USB_DEVICE_Init+0x5c>)
 8006798:	4809      	ldr	r0, [pc, #36]	@ (80067c0 <MX_USB_DEVICE_Init+0x54>)
 800679a:	f7fe fc37 	bl	800500c <USBD_CDC_RegisterInterface>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80067a4:	f7f9 ffc8 	bl	8000738 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067a8:	4805      	ldr	r0, [pc, #20]	@ (80067c0 <MX_USB_DEVICE_Init+0x54>)
 80067aa:	f7fe fd25 	bl	80051f8 <USBD_Start>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80067b4:	f7f9 ffc0 	bl	8000738 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067b8:	bf00      	nop
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	200000ac 	.word	0x200000ac
 80067c0:	2000016c 	.word	0x2000016c
 80067c4:	20000018 	.word	0x20000018
 80067c8:	20000098 	.word	0x20000098

080067cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067d0:	2200      	movs	r2, #0
 80067d2:	4905      	ldr	r1, [pc, #20]	@ (80067e8 <CDC_Init_FS+0x1c>)
 80067d4:	4805      	ldr	r0, [pc, #20]	@ (80067ec <CDC_Init_FS+0x20>)
 80067d6:	f7fe fc33 	bl	8005040 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067da:	4905      	ldr	r1, [pc, #20]	@ (80067f0 <CDC_Init_FS+0x24>)
 80067dc:	4803      	ldr	r0, [pc, #12]	@ (80067ec <CDC_Init_FS+0x20>)
 80067de:	f7fe fc51 	bl	8005084 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80067e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000c48 	.word	0x20000c48
 80067ec:	2000016c 	.word	0x2000016c
 80067f0:	20000448 	.word	0x20000448

080067f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80067f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	71fb      	strb	r3, [r7, #7]
 8006810:	4613      	mov	r3, r2
 8006812:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006814:	79fb      	ldrb	r3, [r7, #7]
 8006816:	2b23      	cmp	r3, #35	@ 0x23
 8006818:	d84a      	bhi.n	80068b0 <CDC_Control_FS+0xac>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <CDC_Control_FS+0x1c>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	080068b1 	.word	0x080068b1
 8006824:	080068b1 	.word	0x080068b1
 8006828:	080068b1 	.word	0x080068b1
 800682c:	080068b1 	.word	0x080068b1
 8006830:	080068b1 	.word	0x080068b1
 8006834:	080068b1 	.word	0x080068b1
 8006838:	080068b1 	.word	0x080068b1
 800683c:	080068b1 	.word	0x080068b1
 8006840:	080068b1 	.word	0x080068b1
 8006844:	080068b1 	.word	0x080068b1
 8006848:	080068b1 	.word	0x080068b1
 800684c:	080068b1 	.word	0x080068b1
 8006850:	080068b1 	.word	0x080068b1
 8006854:	080068b1 	.word	0x080068b1
 8006858:	080068b1 	.word	0x080068b1
 800685c:	080068b1 	.word	0x080068b1
 8006860:	080068b1 	.word	0x080068b1
 8006864:	080068b1 	.word	0x080068b1
 8006868:	080068b1 	.word	0x080068b1
 800686c:	080068b1 	.word	0x080068b1
 8006870:	080068b1 	.word	0x080068b1
 8006874:	080068b1 	.word	0x080068b1
 8006878:	080068b1 	.word	0x080068b1
 800687c:	080068b1 	.word	0x080068b1
 8006880:	080068b1 	.word	0x080068b1
 8006884:	080068b1 	.word	0x080068b1
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068b1 	.word	0x080068b1
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068b1 	.word	0x080068b1
 800689c:	080068b1 	.word	0x080068b1
 80068a0:	080068b1 	.word	0x080068b1
 80068a4:	080068b1 	.word	0x080068b1
 80068a8:	080068b1 	.word	0x080068b1
 80068ac:	080068b1 	.word	0x080068b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80068b0:	bf00      	nop
  }

  return (USBD_OK);
 80068b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	4805      	ldr	r0, [pc, #20]	@ (80068e4 <CDC_Receive_FS+0x24>)
 80068ce:	f7fe fbd9 	bl	8005084 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068d2:	4804      	ldr	r0, [pc, #16]	@ (80068e4 <CDC_Receive_FS+0x24>)
 80068d4:	f7fe fbf4 	bl	80050c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80068d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	2000016c 	.word	0x2000016c

080068e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80068fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2212      	movs	r2, #18
 800691c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800691e:	4b03      	ldr	r3, [pc, #12]	@ (800692c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	200000c8 	.word	0x200000c8

08006930 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2204      	movs	r2, #4
 8006940:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006942:	4b03      	ldr	r3, [pc, #12]	@ (8006950 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	200000dc 	.word	0x200000dc

08006954 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	6039      	str	r1, [r7, #0]
 800695e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d105      	bne.n	8006972 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	4907      	ldr	r1, [pc, #28]	@ (8006988 <USBD_FS_ProductStrDescriptor+0x34>)
 800696a:	4808      	ldr	r0, [pc, #32]	@ (800698c <USBD_FS_ProductStrDescriptor+0x38>)
 800696c:	f7ff fe0a 	bl	8006584 <USBD_GetString>
 8006970:	e004      	b.n	800697c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4904      	ldr	r1, [pc, #16]	@ (8006988 <USBD_FS_ProductStrDescriptor+0x34>)
 8006976:	4805      	ldr	r0, [pc, #20]	@ (800698c <USBD_FS_ProductStrDescriptor+0x38>)
 8006978:	f7ff fe04 	bl	8006584 <USBD_GetString>
  }
  return USBD_StrDesc;
 800697c:	4b02      	ldr	r3, [pc, #8]	@ (8006988 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20001448 	.word	0x20001448
 800698c:	080071b0 	.word	0x080071b0

08006990 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	6039      	str	r1, [r7, #0]
 800699a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	4904      	ldr	r1, [pc, #16]	@ (80069b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069a0:	4804      	ldr	r0, [pc, #16]	@ (80069b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069a2:	f7ff fdef 	bl	8006584 <USBD_GetString>
  return USBD_StrDesc;
 80069a6:	4b02      	ldr	r3, [pc, #8]	@ (80069b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20001448 	.word	0x20001448
 80069b4:	080071c8 	.word	0x080071c8

080069b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	221a      	movs	r2, #26
 80069c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069ca:	f000 f843 	bl	8006a54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069ce:	4b02      	ldr	r3, [pc, #8]	@ (80069d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	200000e0 	.word	0x200000e0

080069dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	6039      	str	r1, [r7, #0]
 80069e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	4907      	ldr	r1, [pc, #28]	@ (8006a10 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069f2:	4808      	ldr	r0, [pc, #32]	@ (8006a14 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069f4:	f7ff fdc6 	bl	8006584 <USBD_GetString>
 80069f8:	e004      	b.n	8006a04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	4904      	ldr	r1, [pc, #16]	@ (8006a10 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069fe:	4805      	ldr	r0, [pc, #20]	@ (8006a14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a00:	f7ff fdc0 	bl	8006584 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20001448 	.word	0x20001448
 8006a14:	080071dc 	.word	0x080071dc

08006a18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	6039      	str	r1, [r7, #0]
 8006a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	4907      	ldr	r1, [pc, #28]	@ (8006a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a2e:	4808      	ldr	r0, [pc, #32]	@ (8006a50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a30:	f7ff fda8 	bl	8006584 <USBD_GetString>
 8006a34:	e004      	b.n	8006a40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	4904      	ldr	r1, [pc, #16]	@ (8006a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a3a:	4805      	ldr	r0, [pc, #20]	@ (8006a50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a3c:	f7ff fda2 	bl	8006584 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a40:	4b02      	ldr	r3, [pc, #8]	@ (8006a4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20001448 	.word	0x20001448
 8006a50:	080071e8 	.word	0x080071e8

08006a54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a98 <Get_SerialNum+0x44>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a60:	4b0e      	ldr	r3, [pc, #56]	@ (8006a9c <Get_SerialNum+0x48>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a66:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa0 <Get_SerialNum+0x4c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	4909      	ldr	r1, [pc, #36]	@ (8006aa4 <Get_SerialNum+0x50>)
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f814 	bl	8006aac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a84:	2204      	movs	r2, #4
 8006a86:	4908      	ldr	r1, [pc, #32]	@ (8006aa8 <Get_SerialNum+0x54>)
 8006a88:	68b8      	ldr	r0, [r7, #8]
 8006a8a:	f000 f80f 	bl	8006aac <IntToUnicode>
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	1fff7a10 	.word	0x1fff7a10
 8006a9c:	1fff7a14 	.word	0x1fff7a14
 8006aa0:	1fff7a18 	.word	0x1fff7a18
 8006aa4:	200000e2 	.word	0x200000e2
 8006aa8:	200000f2 	.word	0x200000f2

08006aac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
 8006ac2:	e027      	b.n	8006b14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	0f1b      	lsrs	r3, r3, #28
 8006ac8:	2b09      	cmp	r3, #9
 8006aca:	d80b      	bhi.n	8006ae4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	0f1b      	lsrs	r3, r3, #28
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	440b      	add	r3, r1
 8006adc:	3230      	adds	r2, #48	@ 0x30
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	e00a      	b.n	8006afa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	0f1b      	lsrs	r3, r3, #28
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4619      	mov	r1, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	440b      	add	r3, r1
 8006af4:	3237      	adds	r2, #55	@ 0x37
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	3301      	adds	r3, #1
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	4413      	add	r3, r2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	3301      	adds	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
 8006b14:	7dfa      	ldrb	r2, [r7, #23]
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d3d3      	bcc.n	8006ac4 <IntToUnicode+0x18>
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	@ 0x28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
 8006b40:	60da      	str	r2, [r3, #12]
 8006b42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b4c:	d13a      	bne.n	8006bc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	4b1e      	ldr	r3, [pc, #120]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	4a1d      	ldr	r2, [pc, #116]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b70:	2302      	movs	r3, #2
 8006b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b7c:	230a      	movs	r3, #10
 8006b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	4619      	mov	r1, r3
 8006b86:	4812      	ldr	r0, [pc, #72]	@ (8006bd0 <HAL_PCD_MspInit+0xa4>)
 8006b88:	f7fa f854 	bl	8000c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b90:	4a0e      	ldr	r2, [pc, #56]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b96:	6353      	str	r3, [r2, #52]	@ 0x34
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ba6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ba8:	4b08      	ldr	r3, [pc, #32]	@ (8006bcc <HAL_PCD_MspInit+0xa0>)
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	2043      	movs	r0, #67	@ 0x43
 8006bba:	f7fa f804 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bbe:	2043      	movs	r0, #67	@ 0x43
 8006bc0:	f7fa f81d 	bl	8000bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	3728      	adds	r7, #40	@ 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	40020000 	.word	0x40020000

08006bd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006be8:	4619      	mov	r1, r3
 8006bea:	4610      	mov	r0, r2
 8006bec:	f7fe fb51 	bl	8005292 <USBD_LL_SetupStage>
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	4619      	mov	r1, r3
 8006c22:	f7fe fb8b 	bl	800533c <USBD_LL_DataOutStage>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3320      	adds	r3, #32
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	4619      	mov	r1, r3
 8006c56:	f7fe fc2d 	bl	80054b4 <USBD_LL_DataInStage>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fd71 	bl	8005758 <USBD_LL_SOF>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c86:	2301      	movs	r3, #1
 8006c88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	79db      	ldrb	r3, [r3, #7]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d001      	beq.n	8006c96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c92:	f7f9 fd51 	bl	8000738 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fd15 	bl	80056d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fcbc 	bl	800562a <USBD_LL_Reset>
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fd10 	bl	80056f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7adb      	ldrb	r3, [r3, #11]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cf0:	4b04      	ldr	r3, [pc, #16]	@ (8006d04 <HAL_PCD_SuspendCallback+0x48>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	4a03      	ldr	r2, [pc, #12]	@ (8006d04 <HAL_PCD_SuspendCallback+0x48>)
 8006cf6:	f043 0306 	orr.w	r3, r3, #6
 8006cfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	e000ed00 	.word	0xe000ed00

08006d08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fd06 	bl	8005728 <USBD_LL_Resume>
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fe fd5e 	bl	80057fc <USBD_LL_IsoOUTIncomplete>
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fd1a 	bl	8005798 <USBD_LL_IsoINIncomplete>
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fd70 	bl	8005860 <USBD_LL_DevConnected>
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fd6d 	bl	8005876 <USBD_LL_DevDisconnected>
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d13c      	bne.n	8006e2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006db4:	4a20      	ldr	r2, [pc, #128]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dc0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dc6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006dca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dce:	2204      	movs	r2, #4
 8006dd0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006dd2:	4b19      	ldr	r3, [pc, #100]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006dd8:	4b17      	ldr	r3, [pc, #92]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dde:	4b16      	ldr	r3, [pc, #88]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006de0:	2202      	movs	r2, #2
 8006de2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006de4:	4b14      	ldr	r3, [pc, #80]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dea:	4b13      	ldr	r3, [pc, #76]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006df0:	4b11      	ldr	r3, [pc, #68]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006df6:	4b10      	ldr	r3, [pc, #64]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e02:	480d      	ldr	r0, [pc, #52]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006e04:	f7fa f8cd 	bl	8000fa2 <HAL_PCD_Init>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e0e:	f7f9 fc93 	bl	8000738 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e12:	2180      	movs	r1, #128	@ 0x80
 8006e14:	4808      	ldr	r0, [pc, #32]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006e16:	f7fb fafa 	bl	800240e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e1a:	2240      	movs	r2, #64	@ 0x40
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4806      	ldr	r0, [pc, #24]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006e20:	f7fb faae 	bl	8002380 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e24:	2280      	movs	r2, #128	@ 0x80
 8006e26:	2101      	movs	r1, #1
 8006e28:	4803      	ldr	r0, [pc, #12]	@ (8006e38 <USBD_LL_Init+0x94>)
 8006e2a:	f7fb faa9 	bl	8002380 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20001648 	.word	0x20001648

08006e3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fa f9b4 	bl	80011c0 <HAL_PCD_Start>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f942 	bl	80070e8 <USBD_Get_USB_Status>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	461a      	mov	r2, r3
 8006e80:	4603      	mov	r3, r0
 8006e82:	70fb      	strb	r3, [r7, #3]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70bb      	strb	r3, [r7, #2]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006e9a:	78bb      	ldrb	r3, [r7, #2]
 8006e9c:	883a      	ldrh	r2, [r7, #0]
 8006e9e:	78f9      	ldrb	r1, [r7, #3]
 8006ea0:	f7fa fe88 	bl	8001bb4 <HAL_PCD_EP_Open>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f91c 	bl	80070e8 <USBD_Get_USB_Status>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fa fed3 	bl	8001c88 <HAL_PCD_EP_Close>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f8fd 	bl	80070e8 <USBD_Get_USB_Status>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fa ff8b 	bl	8001e36 <HAL_PCD_EP_SetStall>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f8de 	bl	80070e8 <USBD_Get_USB_Status>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fa ffcf 	bl	8001efc <HAL_PCD_EP_ClrStall>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 f8bf 	bl	80070e8 <USBD_Get_USB_Status>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da0b      	bge.n	8006fac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	3316      	adds	r3, #22
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	e00b      	b.n	8006fc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	440b      	add	r3, r1
 8006fbe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006fc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	4611      	mov	r1, r2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fa fdbc 	bl	8001b6c <HAL_PCD_SetAddress>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f874 	bl	80070e8 <USBD_Get_USB_Status>
 8007000:	4603      	mov	r3, r0
 8007002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007004:	7bbb      	ldrb	r3, [r7, #14]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	460b      	mov	r3, r1
 800701c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800702c:	7af9      	ldrb	r1, [r7, #11]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	f7fa fec6 	bl	8001dc2 <HAL_PCD_EP_Transmit>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f853 	bl	80070e8 <USBD_Get_USB_Status>
 8007042:	4603      	mov	r3, r0
 8007044:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007046:	7dbb      	ldrb	r3, [r7, #22]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	460b      	mov	r3, r1
 800705e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800706e:	7af9      	ldrb	r1, [r7, #11]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	f7fa fe52 	bl	8001d1c <HAL_PCD_EP_Receive>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f832 	bl	80070e8 <USBD_Get_USB_Status>
 8007084:	4603      	mov	r3, r0
 8007086:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007088:	7dbb      	ldrb	r3, [r7, #22]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	4611      	mov	r1, r2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fa fe72 	bl	8001d92 <HAL_PCD_EP_GetRxCount>
 80070ae:	4603      	mov	r3, r0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070c0:	4b03      	ldr	r3, [pc, #12]	@ (80070d0 <USBD_static_malloc+0x18>)
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20001b2c 	.word	0x20001b2c

080070d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d817      	bhi.n	800712c <USBD_Get_USB_Status+0x44>
 80070fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <USBD_Get_USB_Status+0x1c>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007115 	.word	0x08007115
 8007108:	0800711b 	.word	0x0800711b
 800710c:	08007121 	.word	0x08007121
 8007110:	08007127 	.word	0x08007127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]
    break;
 8007118:	e00b      	b.n	8007132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	73fb      	strb	r3, [r7, #15]
    break;
 800711e:	e008      	b.n	8007132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007120:	2301      	movs	r3, #1
 8007122:	73fb      	strb	r3, [r7, #15]
    break;
 8007124:	e005      	b.n	8007132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007126:	2303      	movs	r3, #3
 8007128:	73fb      	strb	r3, [r7, #15]
    break;
 800712a:	e002      	b.n	8007132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800712c:	2303      	movs	r3, #3
 800712e:	73fb      	strb	r3, [r7, #15]
    break;
 8007130:	bf00      	nop
  }
  return usb_status;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <memset>:
 8007140:	4402      	add	r2, r0
 8007142:	4603      	mov	r3, r0
 8007144:	4293      	cmp	r3, r2
 8007146:	d100      	bne.n	800714a <memset+0xa>
 8007148:	4770      	bx	lr
 800714a:	f803 1b01 	strb.w	r1, [r3], #1
 800714e:	e7f9      	b.n	8007144 <memset+0x4>

08007150 <__libc_init_array>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	4d0d      	ldr	r5, [pc, #52]	@ (8007188 <__libc_init_array+0x38>)
 8007154:	4c0d      	ldr	r4, [pc, #52]	@ (800718c <__libc_init_array+0x3c>)
 8007156:	1b64      	subs	r4, r4, r5
 8007158:	10a4      	asrs	r4, r4, #2
 800715a:	2600      	movs	r6, #0
 800715c:	42a6      	cmp	r6, r4
 800715e:	d109      	bne.n	8007174 <__libc_init_array+0x24>
 8007160:	4d0b      	ldr	r5, [pc, #44]	@ (8007190 <__libc_init_array+0x40>)
 8007162:	4c0c      	ldr	r4, [pc, #48]	@ (8007194 <__libc_init_array+0x44>)
 8007164:	f000 f818 	bl	8007198 <_init>
 8007168:	1b64      	subs	r4, r4, r5
 800716a:	10a4      	asrs	r4, r4, #2
 800716c:	2600      	movs	r6, #0
 800716e:	42a6      	cmp	r6, r4
 8007170:	d105      	bne.n	800717e <__libc_init_array+0x2e>
 8007172:	bd70      	pop	{r4, r5, r6, pc}
 8007174:	f855 3b04 	ldr.w	r3, [r5], #4
 8007178:	4798      	blx	r3
 800717a:	3601      	adds	r6, #1
 800717c:	e7ee      	b.n	800715c <__libc_init_array+0xc>
 800717e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007182:	4798      	blx	r3
 8007184:	3601      	adds	r6, #1
 8007186:	e7f2      	b.n	800716e <__libc_init_array+0x1e>
 8007188:	08007210 	.word	0x08007210
 800718c:	08007210 	.word	0x08007210
 8007190:	08007210 	.word	0x08007210
 8007194:	08007214 	.word	0x08007214

08007198 <_init>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr

080071a4 <_fini>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr
