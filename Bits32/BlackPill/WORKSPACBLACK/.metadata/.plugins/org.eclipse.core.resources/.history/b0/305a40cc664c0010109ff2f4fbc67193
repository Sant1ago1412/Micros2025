/*
 * UnerProtocol.h
 *
 *  Created on: May 18, 2025
 *      Author: santi
 */

#ifndef INC_UNERPROTOCOL_H_
#define INC_UNERPROTOCOL_H_

#include "Utilities.h"
#include "stdio.h"

typedef struct ComStruct{

    uint8_t timeOut;         //!< TiemOut para reiniciar la máquina si se interrumpe la comunicación
    uint8_t indexStart;      //!< Indice para saber en que parte del buffer circular arranca el ID
    uint8_t cheksumRx;       //!< Cheksumm RX
    volatile uint8_t indexWriteRx;    //!< Indice de escritura del buffer circular de recepción
    uint8_t indexReadRx;     //!< Indice de lectura del buffer circular de recepción
    uint8_t indexWriteTx;    //!< Indice de escritura del buffer circular de transmisión
    uint8_t indexReadTx;     //!< Indice de lectura del buffer circular de transmisión
    uint8_t *bufferRx;   //!< Buffer circular de recepción
    uint8_t *bufferTx;   //!< Buffer circular de transmisión
    uint8_t bytesTosend;	 //!< Cuantos bytes voy a trasnmitir
    uint8_t buffSize;

}_sDato ;

//typedef struct Datos_UART{
//    uint8_t timeOut;         						//!< TiemOut para reiniciar la máquina si se interrumpe la comunicación
//    uint8_t indexStart;      						//!< Indice para saber en que parte del buffer circular arranca el ID
//    s_bus Tx;
//    s_bus Rx;
//    uint8_t checksumRx;       						//!< Cheksumm RX
//    void (*dataDecoder)(struct Datos_UART *selfDD);	//!< Puntero a función donde se trabajan los datos ingresados
//    void (*dataWriter)(struct Datos_UART *selfDW);	//!< Puntero a función donde se escribe el buffer en la salida
//    uint8_t auxBuffer[MAXAUXBUFFER];
//    e_protocolo protocolState;						//!< Indicador de estado del protocolo
//    uint8_t isESP01;								//!< Indicador de si es una comunicación directa o hay una ESP de por medio.
//}s_commData;

typedef enum Comands{
    ALIVE=0xF0,
    FIRMWARE=0xF1,
	TEXT = 0xF2,
	ENGINES = 0xF3,
	MPUDATA = 0xF4,
	ADCVALUES = 0xF5,
    STARTCONFIG=0xEE,
} _eEstadoMEFcmd;

typedef enum ProtocolState{
    START,
    HEADER_1,
    HEADER_2,
    HEADER_3,
    NBYTES,
    TOKEN,
    PAYLOAD
}_eProtocolo;

int16_t ret_eng_Values(uint8_t eng);
void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff);
void UP_sendInfo(_eEstadoMEFcmd CMD,uint8_t *bufferAux, uint8_t bytes);
void UP_decodeData(_sDato *datosComLib);
void UP_decodeHeader(_sDato *datosComLib);
void UP_datafromUSB(uint8_t *buf, uint16_t length) ;
void UP_comunicationsTask(_sDato *datosCom);
void UP_attachData(void(*ptrGetADCValues)(uint8_t *buf));

#endif /* INC_UNERPROTOCOL_H_ */
