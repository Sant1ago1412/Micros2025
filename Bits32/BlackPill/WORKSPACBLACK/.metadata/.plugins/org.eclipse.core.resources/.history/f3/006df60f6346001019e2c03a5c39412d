
#include <math.h>
#include "mpu6050.h"


const long Accel_Z_corrector = 14418.0;
static uint8_t (*I2C_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
static uint8_t (*I2C_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

uint8_t MPU6050_Init(MPU6050_t *MpuData){

    uint8_t check;
    uint8_t Data;

    MpuData->DMAREADY=1;
    // check device ID WHO_AM_I

    I2C_Recive_Blocking(MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1);
    if (check == 0x68)  // 0x68 will be returned by the sensor if everything goes well
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
        I2C_Transmit_Blocking(MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,1000);

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
        I2C_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000);

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
        I2C_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000);

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
        I2C_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000);

        Data = 0x03;
        I2C_Transmit_Blocking(MPU6050_ADDR, LOWPASS_CONFIG, 1, &Data, 1,1000);

        return 0;
    }
    return 1;
}


void MPU6050_Read_All(MPU6050_t *MpuData) {

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if(!MpuData->DMAREADY)
    	return;

    I2C_Recive(MPU6050_ADDR, ACCEL_XOUT_H_REG,MpuData->Rec_Data, 14);
    MpuData->DMAREADY=0;

}

void MPU6050_Calibrate(MPU6050_t *mpu){
	int32_t temp_raw[6] = {0};

	for (uint16_t i=0; i < NUM_SAMPLES; i++){
		I2C_Recive_Blocking(MPU6050_ADDR, ACCEL_XOUT_REG, 1, &mpu->Rec_Data, 14);
		temp_raw[0] += (int16_t)((mpu->Rec_Data[0] << 8) | mpu->Rec_Data[1]);
		temp_raw[1] += (int16_t)((mpu->Rec_Data[2] << 8) | mpu->Rec_Data[3]);
		temp_raw[2] += (int16_t)((mpu->Rec_Data[4] << 8) | mpu->Rec_Data[5]);

		temp_raw[3] += (int16_t)((mpu->Rec_Data[8 ] << 8) | mpu->Rec_Data[9 ]);
		temp_raw[4] += (int16_t)((mpu->Rec_Data[10] << 8) | mpu->Rec_Data[11]);
		temp_raw[5] += (int16_t)((mpu->Rec_Data[12] << 8) | mpu->Rec_Data[13]);
	}
    mpu->Accel.X_Offset = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
    mpu->Accel.Y_Offset = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
    mpu->Accel.Z_Offset = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS)/* - SCALE_FACTOR*/;

    mpu->Gyro.X_Offset = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
	mpu->Gyro.Y_Offset = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
	mpu->Gyro.Z_Offset = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}

void MPU6050_MAF(MPU6050_t *mpu){ //Moving Average Filter
	if(mpu->MAF.isOn){
		mpu->MAF.isOn = 0;
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
			mpu->MAF.sumData[channel] -= mpu->MAF.mediaBuffer[mpu->MAF.index][channel];
			mpu->MAF.sumData[channel] += mpu->MAF.rawData[channel];
			mpu->MAF.mediaBuffer[mpu->MAF.index][channel] = mpu->MAF.rawData[channel];
			mpu->MAF.filtredData[channel] = (mpu->MAF.sumData[channel] >> NUM_MAF_BITS);
		}
		mpu->MAF.index++;
		mpu->MAF.index &= (NUM_MAF - 1);

		// ACC: CALCULATE TRUE ACCELERATION

		mpu->Accel.X_filtered = mpu->MAF.filtredData[0] ;
		mpu->Accel.Y_filtered = mpu->MAF.filtredData[1] ;
		mpu->Accel.Z_filtered = mpu->MAF.filtredData[2] ;
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.X_filtered = mpu->MAF.filtredData[3] ;
		mpu->Gyro.Y_filtered = mpu->MAF.filtredData[4] ;
		mpu->Gyro.Z_filtered = mpu->MAF.filtredData[5] ;
	}
}

void MPU6050_NonBlocking_DMA(uint8_t (*Master_Transmit)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size),uint8_t (*Master_Recive)(uint16_t DevAddress,uint16_t reg,uint8_t *pData, uint16_t Size)){
	I2C_Transmit = Master_Transmit;
	I2C_Recive = Master_Recive;
}
void MPU6050_I2C_Blocking(uint8_t (*Recive_Blocking)(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size),uint8_t (*Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
	I2C_Recive_Blocking = Recive_Blocking;
	I2C_Transmit_Blocking = Transmit_Blocking;
}
