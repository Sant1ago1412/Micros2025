/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "UnerProtocol.h"
#include "engines.h"
#include "ssd1306_oled.h"
#include "fonts.h"
#include "Logo.h"
#include "mpu6050.h"
#include "math.h"
#include "Utilities.h"
#include "ADC.h"
#include "ESP01.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define NUM_CHANNELS 8
#define RINGBUFFER 	 256
#define SISINIT  	 myFlags.individualFlags.bit0
#define IS10MS 	 	 myFlags.individualFlags.bit1
#define NEWADCVALUES myFlags.individualFlags.bit2

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
_sDato datosComSerie;
_bFlags myFlags;
_sEng motorL,motorR;
MPU6050_t mpuValues;
_work casts1;
s_ADC adcValues;
char display[20];

//const uint8_t Index_to_Bar[] = {
//    21, 22, 23, 24, 25, 26, 27, 28, 29,
//    30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
//    40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
//    50, 51, 52, 53, 54, 55, 56, 57, 58, 59
//};
//
//const uint16_t ADC_to_Index[] = {
//  105,  210,  315,  420,  525,  630,  735,  840,  945,
//  1050, 1155, 1260, 1365, 1470, 1575, 1680, 1785, 1890, 1995,
//  2100, 2205, 2310, 2415, 2520, 2625, 2730, 2835, 2940, 3045,
//  3150, 3255, 3360, 3465, 3570, 3675, 3780, 3885, 3990, 4095
//};
struct ESP_DATA{
	_sESP01Handle Config;
	char *ssid;
	char *password;
	char *IP;
	_sDato data;
	uint8_t AT_Rx_data;
	uint8_t bytesToTx;
}ESP;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM11_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM9_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
// Funciones chota ESP
int ESP01_UART_Transmit(uint8_t val);
void ESP01_Data_Recived(uint8_t value);
void onESP01ChangeState(_eESP01STATUS esp01State);
//void onESP01Debug(const char *dbgStr);
void setESP01_CHPD(uint8_t val);
void writeOn_ESP(_sDato *data);

uint8_t CDC_Transmit_FS(uint8_t *buf, uint16_t leng);  // Envia una letra
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len));
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void task10ms();
void Engines_task();
void SSD1306_Task();
void Get_ADCValues(uint8_t *buf);
uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size);
uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size);
uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	adcValues.newValue=1;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if (htim->Instance == TIM11) {
		IS10MS = TRUE;
	}

//	if (htim->Instance == TIM10) {
//		MPU6050_Read_All(&mpuValues);
//		mpuValues.DMAREADY=1;
//		SSD1306_DMAREADY(0);
//	}
	if(htim->Instance == TIM9){
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValues.raw_Data, 8);
	}
}

//void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
//	if(hi2c->Devaddress==SSD1306_I2C_ADDR){
//		SSD1306_DMAREADY(1);
//	}
//}
//
//void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
//	if(hi2c->Devaddress==MPU6050_ADDR){
//
//	    mpuValues.MAF.rawData[0] = (int16_t) (mpuValues.Rec_Data[0] << 8 | mpuValues.Rec_Data[1]);
//	    mpuValues.MAF.rawData[1] = (int16_t) (mpuValues.Rec_Data[2] << 8 | mpuValues.Rec_Data[3]);
//	    mpuValues.MAF.rawData[2] = (int16_t) (mpuValues.Rec_Data[4] << 8 | mpuValues.Rec_Data[5]);
//	    mpuValues.MAF.rawData[3] = (int16_t) (mpuValues.Rec_Data[8] << 8 | mpuValues.Rec_Data[9]);
//	    mpuValues.MAF.rawData[4] = (int16_t) (mpuValues.Rec_Data[10]<< 8 | mpuValues.Rec_Data[11]);
//	    mpuValues.MAF.rawData[5] = (int16_t) (mpuValues.Rec_Data[12]<< 8 | mpuValues.Rec_Data[13]);
//
//		mpuValues.MAF.isOn=1;
//		SSD1306_DMAREADY(1);
//	}
//}

/* ESP FUNCTION */
void onESP01ChangeState(_eESP01STATUS esp01State) {
   switch (esp01State) {
        case ESP01_NOT_INIT:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: No inicializado");
            break;
        case ESP01_WIFI_DISCONNECTED:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: WiFi desconectado");
            break;
        case ESP01_WIFI_NOT_SETED:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: WiFi no configurado");
            break;
        case ESP01_WIFI_CONNECTING_WIFI:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Conectando a WiFi...");
            break;
        case ESP01_WIFI_CONNECTED:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: WiFi conectado");
            break;
        case ESP01_WIFI_NEW_IP:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Nueva IP asignada");
            break;
        case ESP01_UDPTCP_DISCONNECTED:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: UDP/TCP desconectado");
            break;
        case ESP01_UDPTCP_CONNECTING:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Conectando UDP/TCP...");
            break;
        case ESP01_UDPTCP_CONNECTED:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: UDP/TCP conectado");
            break;
        case ESP01_SEND_BUSY:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Enviando datos...");
            break;
        case ESP01_SEND_READY:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Listo para enviar");
            break;
        case ESP01_SEND_OK:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Envío OK");
            break;
        case ESP01_SEND_ERROR:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Error al enviar");
            break;
        default:
            sprintf((char*)datosComSerie.auxBuffer, "ESP01: Estado desconocido");
            break;
    }

    // Cast explícito también aplicado aquí
    UP_sendInfo(TEXT, datosComSerie.auxBuffer,strlen((char*)datosComSerie.auxBuffer));
}

void onESP01Debug(const char *dbgStr) {
    UP_sendInfo(TEXT, (uint8_t *)dbgStr, strlen(dbgStr));
}

void setESP01_CHPD(uint8_t val){
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
		ESP01_WriteRX(ESP.AT_Rx_data);
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);

	}
}

int ESP01_UART_Transmit(uint8_t val){
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
		USART1->DR = val;
		return 1;
	}
	return 0;
}

void ESP01_Data_Recived(uint8_t value){
	ESP.data.bufferRx[ESP.data.indexWriteRx++] = value;
}

void writeOn_ESP(_sDato *data){
	//comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)"writeONESP", 10);
	if(data->indexWriteTx > data->indexReadTx){
		ESP.bytesToTx = data->indexWriteTx - data->indexReadTx;
	}else{
		ESP.bytesToTx = 256 - data->indexReadTx;
	}
	if(ESP01_Send(data->bufferTx,  data->indexReadTx,  ESP.bytesToTx,  256) == ESP01_SEND_READY){
		data->indexReadTx += ESP.bytesToTx;
		//comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)"dice mandar", 11);
	}
	/*switch(ESP01_Send(data->Tx.buffer,  data->Tx.read,  ESP.bytesToTx,  RINGBUFFLENGTH)){
	case ESP01_NOT_INIT:
		comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)"noinit", 6);
		break;
	case ESP01_UDPTCP_DISCONNECTED:
		comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)"discon", 6);
		break;
	case ESP01_SEND_READY:
		data->Tx.read += ESP.bytesToTx;
		break;
	case ESP01_SEND_BUSY:
		break;
	}*/
}

//void SSD1306_Task(){
//
//	uint32_t guiaBarras;
//
//	if(SISINIT){
//		SSD1306_DrawBitmap(0, 0, MainScreen, 128, 64,WHITE);
//
//		sprintf(display, "X:%c%d",(mpuValues.Accel.X_filtered >= 0) ? '+' : '-',abs(mpuValues.Accel.X_filtered));
//		SSD1306_GotoXY(43, 20);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		sprintf(display, "Y:%c%d",(mpuValues.Accel.Y_filtered >= 0) ? '+' : '-',abs(mpuValues.Accel.Y_filtered));
//		SSD1306_GotoXY(43, 35);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		sprintf(display, "Z:%c%d",(mpuValues.Accel.Z_filtered >= 0) ? '+' : '-',abs(mpuValues.Accel.Z_filtered));
//		SSD1306_GotoXY(43, 50);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		sprintf(display, "X:%c%d ", (mpuValues.Gyro.X_filtered >= 0) ? '+' : '-', abs(mpuValues.Gyro.X_filtered));
//		SSD1306_GotoXY(90, 20);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		sprintf(display, "Y:%c%d ", (mpuValues.Gyro.Y_filtered >= 0) ? '+' : '-', abs(mpuValues.Gyro.Y_filtered));
//		SSD1306_GotoXY(90, 35);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		sprintf(display, "Z:%c%d ", (mpuValues.Gyro.Z_filtered) ? '+' : '-', abs(mpuValues.Gyro.Z_filtered));
//		SSD1306_GotoXY(90, 50);
//		SSD1306_Puts(display, &Font_7x10, BLACK);
//		for(uint8_t i = 0; i < 9; i++){
//			for(uint8_t j = 0; j < 39; j++){
//				if(adcValues.raw_Data[i] <= ADC_to_Index[j]){
//					guiaBarras = 5 + i * 4;
//					SSD1306_DrawLine(guiaBarras, 59,  guiaBarras, Index_to_Bar[j], BLACK);
//					SSD1306_DrawLine(guiaBarras+1, 59,  guiaBarras+1, Index_to_Bar[j], BLACK);
//					break;
//				}
//			}
//		}
//	}
//}

void task10ms(){

	static uint8_t ticker=0;
//	uint16_t buffaux[8];

	ESP01_Timeout10ms();

	if(ticker%10==0){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//		UP_sendInfo(MPUDATA,(uint8_t*)mpuValues.MAF.filtredData, 13);
//
//		for(uint8_t i=0;i<7;i++)
//			buffaux[i]=adcValues.raw_Data[i];
//
//		UP_sendInfo(ADCVALUES,(uint8_t*)&buffaux, 17);
//
//		SSD1306_Task();
//		SSD1306_RefreshReady();
	}
	if(ticker%100==0){

		UP_sendInfo(TEXT, datosComSerie.auxBuffer, strlen((char*)datosComSerie.auxBuffer));
	}
	if(ticker>250){
//		if(!SISINIT){
//			SSD1306_Clear();
//		}
//		SISINIT=TRUE;
		ticker=0;
	}
	ticker++;
}

void Engines_task(){

	en_HandlerENG(&motorR, ret_eng_Values(0), 0);
	en_HandlerENG(&motorL, ret_eng_Values(1), 0);

	switch(motorL.estado){
		case BRAKE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
			break;

		case FRONT:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 1);
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
			break;

		case BACK:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 1);
			break;

		case FREE:
			HAL_GPIO_WritePin(Out1_1_GPIO_Port, Out1_1_Pin, 0);
			HAL_GPIO_WritePin(Out1_2_GPIO_Port, Out1_2_Pin, 0);
			break;
		default:
			break;
	}
	switch(motorR.estado){
		case BRAKE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
			break;

		case FRONT:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 1);
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
			break;

		case BACK:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 1);
			break;

		case FREE:
			HAL_GPIO_WritePin(Out2_1_GPIO_Port, Out2_1_Pin, 0);
			HAL_GPIO_WritePin(Out2_2_GPIO_Port, Out2_2_Pin, 0);
			break;
		default:
			break;
		}

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motorL.speed);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, motorR.speed);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USB_DEVICE_Init();
  MX_TIM3_Init();
  MX_TIM11_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_TIM10_Init();
  MX_TIM9_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim11);
  HAL_TIM_Base_Start_IT(&htim10);
  HAL_TIM_Base_Start_IT(&htim9);

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

//  Display_Set_I2C_Master_Transmit(&I2C_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
//  MPU6050_I2C_Blocking(&I2C_RBlocking,&I2C_1_Abstract_Mem_Write_Blocking);
//  MPU6050_NonBlocking_DMA(&I2C_DMA_Transmit,&I2C_DMA_Recive);
//  SSD1306_Init();
//  MPU6050_Init(&mpuValues);
  CDC_AttachRxData(&UP_datafromUSB);
  myFlags.allFlags=0;
  UP_initprotocol(&datosComSerie,(uint8_t)RINGBUFFER);
  en_InitENG(&motorL, (uint16_t)htim3.Instance->ARR);
  en_InitENG(&motorR, (uint16_t)htim3.Instance->ARR);
  UP_attachData(&Get_ADCValues);

	ESP.password = "fcalconcordia.06-2019";
	ESP.ssid = "FCAL";
	ESP.IP = "172.23.206.41";
	UP_initprotocol(&ESP.data, 255);
	ESP.data.isESP01 = 1;
	HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
	ESP.Config.DoCHPD = setESP01_CHPD;
	ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
	ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;

	ESP01_Init(&ESP.Config);
	if(ESP01_StateWIFI() == ESP01_WIFI_DISCONNECTED){
	  ESP01_SetWIFI(ESP.ssid, ESP.password);
	}

	ESP01_StartUDP("172.23.206.41", 25555, 11211);
	ESP01_AttachChangeState(&onESP01ChangeState);
//    ESP01_AttachDebugStr(&onESP01Debug);

//  SSD1306_DrawBitmap(0, 0, LogoMicros, 128, 64, WHITE);
////  MPU6050_Calibrate(&mpuValues);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IS10MS){
		 task10ms();
		 IS10MS=FALSE;
		 Engines_task();
	  }
//	MPU6050_MAF(&mpuValues);
	UP_comunicationsTask(&datosComSerie);
	ADC_Filter(&adcValues);
//	SSD1306_UpdateScreen();
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 8;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
  sConfig.Rank = 5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = 6;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = 7;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 8;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 15;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 59999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
  htim9.Init.Prescaler = 0;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 23999;
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}

/**
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
  htim10.Init.Prescaler = 47;
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 9999;
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}

/**
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
  htim11.Init.Prescaler = 95;
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 9999;
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_EN_Pin|Out1_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Out2_2_Pin|Out2_1_Pin|Out1_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ESP_EN_Pin Out1_1_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|Out1_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : Out2_2_Pin Out2_1_Pin Out1_2_Pin */
  GPIO_InitStruct.Pin = Out2_2_Pin|Out2_1_Pin|Out1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void UP_comunicationsTask(_sDato *datosCom){

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
		UP_decodeHeader(datosCom);
		datosCom->indexReadRx=datosCom->indexWriteRx;
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
		    }else{
		    	datosCom->bytesTosend =  sizeof(datosCom->bufferRx) - datosCom->indexReadTx;
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
		    	datosCom->indexReadTx += datosCom->bytesTosend;
		    }
	}
}

uint8_t I2C_DMA_Transmit(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){

	HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
	return 1;
}

uint8_t I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
	return (uint8_t)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
}

uint8_t I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
	return (uint8_t)HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
}

uint8_t I2C_DMA_Recive(uint16_t Dev_Address,uint16_t reg,uint8_t *p_Data, uint16_t _Size){
	HAL_I2C_Mem_Read_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
	return 1;
}

uint8_t I2C_RBlocking(uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size){

	HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize, pData, Size,1000);
	return 1;

}

void Get_ADCValues(uint8_t *buf){

	uint8_t j=0;

	for(uint8_t i=0;i<7;i++){
		casts1.i16[0]=adcValues.filteredData[i];
		buf[j*2]=casts1.u8[0];
		buf[1+j*2]=casts1.u8[1];
		j++;
	}

}
//void I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
//	HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
//}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
