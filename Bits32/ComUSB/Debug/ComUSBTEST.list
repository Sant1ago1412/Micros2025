
ComUSBTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007a80  08007a80  00008a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aec  08007aec  0000917c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007aec  08007aec  0000917c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007aec  08007aec  0000917c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aec  08007aec  00008aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007af0  08007af0  00008af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08007af4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ec  2000017c  08007c70  0000917c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  08007c70  00009568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c039  00000000  00000000  000091a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ed  00000000  00000000  000151de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b4  00000000  00000000  00018660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190ef  00000000  00000000  00018e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5b3  00000000  00000000  00031f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848f0  00000000  00000000  000404b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4da6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000c4dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000c7654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007a68 	.word	0x08007a68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08007a68 	.word	0x08007a68

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb9c 	bl	800088c <HAL_Init>

  /* USER CODE BEGIN Init */
  pepe[0]=0xF0;
 8000154:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <main+0x2c>)
 8000156:	22f0      	movs	r2, #240	@ 0xf0
 8000158:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f811 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f869 	bl	8000234 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000162:	f006 ffb9 	bl	80070d8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  comunicationsTask(&datosComSerie);
 8000166:	4805      	ldr	r0, [pc, #20]	@ (800017c <main+0x30>)
 8000168:	f000 fae4 	bl	8000734 <comunicationsTask>

	  HAL_Delay(1000);             // Espera 1 segundo
 800016c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000170:	f000 fbee 	bl	8000950 <HAL_Delay>
	  comunicationsTask(&datosComSerie);
 8000174:	bf00      	nop
 8000176:	e7f6      	b.n	8000166 <main+0x1a>
 8000178:	200003a0 	.word	0x200003a0
 800017c:	20000198 	.word	0x20000198

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b094      	sub	sp, #80	@ 0x50
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800018a:	2228      	movs	r2, #40	@ 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f007 fc3e 	bl	8007a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	f107 0314 	add.w	r3, r7, #20
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c2:	2302      	movs	r3, #2
 80001c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001cc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fbe8 	bl	80029ac <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e2:	f000 fab9 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fe54 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800020e:	f000 faa3 	bl	8000758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000212:	2310      	movs	r3, #16
 8000214:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000216:	2300      	movs	r3, #0
 8000218:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f002 ffa3 	bl	8003168 <HAL_RCCEx_PeriphCLKConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000228:	f000 fa96 	bl	8000758 <Error_Handler>
  }
}
 800022c:	bf00      	nop
 800022e:	3750      	adds	r7, #80	@ 0x50
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000248:	4b1e      	ldr	r3, [pc, #120]	@ (80002c4 <MX_GPIO_Init+0x90>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a1d      	ldr	r2, [pc, #116]	@ (80002c4 <MX_GPIO_Init+0x90>)
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b1b      	ldr	r3, [pc, #108]	@ (80002c4 <MX_GPIO_Init+0x90>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0310 	and.w	r3, r3, #16
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000260:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <MX_GPIO_Init+0x90>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a17      	ldr	r2, [pc, #92]	@ (80002c4 <MX_GPIO_Init+0x90>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <MX_GPIO_Init+0x90>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0320 	and.w	r3, r3, #32
 8000274:	60bb      	str	r3, [r7, #8]
 8000276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000278:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <MX_GPIO_Init+0x90>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a11      	ldr	r2, [pc, #68]	@ (80002c4 <MX_GPIO_Init+0x90>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <MX_GPIO_Init+0x90>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0304 	and.w	r3, r3, #4
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <MX_GPIO_Init+0x94>)
 8000298:	f000 fe10 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800029c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	2301      	movs	r3, #1
 80002a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <MX_GPIO_Init+0x94>)
 80002b6:	f000 fc7d 	bl	8000bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002ba:	bf00      	nop
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40011000 	.word	0x40011000

080002cc <DecodeHeader>:

/* USER CODE BEGIN 4 */
void DecodeHeader(_sDato *datosCom){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	78db      	ldrb	r3, [r3, #3]
 80002d8:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80002da:	e0e2      	b.n	80004a2 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <DecodeHeader+0x1ec>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b06      	cmp	r3, #6
 80002e2:	f200 80d7 	bhi.w	8000494 <DecodeHeader+0x1c8>
 80002e6:	a201      	add	r2, pc, #4	@ (adr r2, 80002ec <DecodeHeader+0x20>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	08000309 	.word	0x08000309
 80002f0:	08000331 	.word	0x08000331
 80002f4:	08000365 	.word	0x08000365
 80002f8:	08000399 	.word	0x08000399
 80002fc:	080003cd 	.word	0x080003cd
 8000300:	080003f5 	.word	0x080003f5
 8000304:	08000437 	.word	0x08000437
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	1c5a      	adds	r2, r3, #1
 800030e:	b2d1      	uxtb	r1, r2
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	7111      	strb	r1, [r2, #4]
 8000314:	461a      	mov	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	79db      	ldrb	r3, [r3, #7]
 800031c:	2b55      	cmp	r3, #85	@ 0x55
 800031e:	f040 80bd 	bne.w	800049c <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000322:	4b65      	ldr	r3, [pc, #404]	@ (80004b8 <DecodeHeader+0x1ec>)
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800032e:	e0b5      	b.n	800049c <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	b2d1      	uxtb	r1, r2
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7111      	strb	r1, [r2, #4]
 800033c:	461a      	mov	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	79db      	ldrb	r3, [r3, #7]
 8000344:	2b4e      	cmp	r3, #78	@ 0x4e
 8000346:	d103      	bne.n	8000350 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000348:	4b5b      	ldr	r3, [pc, #364]	@ (80004b8 <DecodeHeader+0x1ec>)
 800034a:	2202      	movs	r2, #2
 800034c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800034e:	e0a8      	b.n	80004a2 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	791b      	ldrb	r3, [r3, #4]
 8000354:	3b01      	subs	r3, #1
 8000356:	b2da      	uxtb	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800035c:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <DecodeHeader+0x1ec>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
                break;
 8000362:	e09e      	b.n	80004a2 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	b2d1      	uxtb	r1, r2
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7111      	strb	r1, [r2, #4]
 8000370:	461a      	mov	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	79db      	ldrb	r3, [r3, #7]
 8000378:	2b45      	cmp	r3, #69	@ 0x45
 800037a:	d103      	bne.n	8000384 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <DecodeHeader+0x1ec>)
 800037e:	2203      	movs	r2, #3
 8000380:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000382:	e08e      	b.n	80004a2 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	3b01      	subs	r3, #1
 800038a:	b2da      	uxtb	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <DecodeHeader+0x1ec>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
                break;
 8000396:	e084      	b.n	80004a2 <DecodeHeader+0x1d6>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	1c5a      	adds	r2, r3, #1
 800039e:	b2d1      	uxtb	r1, r2
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	7111      	strb	r1, [r2, #4]
 80003a4:	461a      	mov	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	79db      	ldrb	r3, [r3, #7]
 80003ac:	2b52      	cmp	r3, #82	@ 0x52
 80003ae:	d103      	bne.n	80003b8 <DecodeHeader+0xec>
                estadoProtocolo=NBYTES;
 80003b0:	4b41      	ldr	r3, [pc, #260]	@ (80004b8 <DecodeHeader+0x1ec>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	701a      	strb	r2, [r3, #0]
            else{
                datosCom->indexReadRx--;
               estadoProtocolo=START;
            }
            break;
 80003b6:	e074      	b.n	80004a2 <DecodeHeader+0x1d6>
                datosCom->indexReadRx--;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	3b01      	subs	r3, #1
 80003be:	b2da      	uxtb	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	711a      	strb	r2, [r3, #4]
               estadoProtocolo=START;
 80003c4:	4b3c      	ldr	r3, [pc, #240]	@ (80004b8 <DecodeHeader+0x1ec>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
            break;
 80003ca:	e06a      	b.n	80004a2 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791a      	ldrb	r2, [r3, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	791b      	ldrb	r3, [r3, #4]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	b2d1      	uxtb	r1, r2
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7111      	strb	r1, [r2, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	79da      	ldrb	r2, [r3, #7]
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <DecodeHeader+0x1f0>)
 80003ea:	701a      	strb	r2, [r3, #0]
               estadoProtocolo=TOKEN;
 80003ec:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <DecodeHeader+0x1ec>)
 80003ee:	2205      	movs	r2, #5
 80003f0:	701a      	strb	r2, [r3, #0]
                break;
 80003f2:	e056      	b.n	80004a2 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	1c5a      	adds	r2, r3, #1
 80003fa:	b2d1      	uxtb	r1, r2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	7111      	strb	r1, [r2, #4]
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	79db      	ldrb	r3, [r3, #7]
 8000408:	2b3a      	cmp	r3, #58	@ 0x3a
 800040a:	d10a      	bne.n	8000422 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 800040c:	4b2a      	ldr	r3, [pc, #168]	@ (80004b8 <DecodeHeader+0x1ec>)
 800040e:	2206      	movs	r2, #6
 8000410:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000412:	4b2a      	ldr	r3, [pc, #168]	@ (80004bc <DecodeHeader+0x1f0>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800041a:	b2da      	uxtb	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000420:	e03f      	b.n	80004a2 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	3b01      	subs	r3, #1
 8000428:	b2da      	uxtb	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <DecodeHeader+0x1ec>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
                break;
 8000434:	e035      	b.n	80004a2 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000436:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <DecodeHeader+0x1f0>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d90f      	bls.n	800045e <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	b2d1      	uxtb	r1, r2
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7111      	strb	r1, [r2, #4]
 800044a:	461a      	mov	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4413      	add	r3, r2
 8000450:	79da      	ldrb	r2, [r3, #7]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	4053      	eors	r3, r2
 8000458:	b2da      	uxtb	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800045e:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <DecodeHeader+0x1f0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3b01      	subs	r3, #1
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <DecodeHeader+0x1f0>)
 8000468:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800046a:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <DecodeHeader+0x1f0>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d116      	bne.n	80004a0 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000472:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <DecodeHeader+0x1ec>)
 8000474:	2200      	movs	r2, #0
 8000476:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	789a      	ldrb	r2, [r3, #2]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	4619      	mov	r1, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	440b      	add	r3, r1
 8000486:	79db      	ldrb	r3, [r3, #7]
 8000488:	429a      	cmp	r2, r3
 800048a:	d109      	bne.n	80004a0 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 f8a7 	bl	80005e0 <decodeData>
                    }
                }

                break;
 8000492:	e005      	b.n	80004a0 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <DecodeHeader+0x1ec>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
                break;
 800049a:	e002      	b.n	80004a2 <DecodeHeader+0x1d6>
                break;
 800049c:	bf00      	nop
 800049e:	e000      	b.n	80004a2 <DecodeHeader+0x1d6>
                break;
 80004a0:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	7bfa      	ldrb	r2, [r7, #15]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	f47f af17 	bne.w	80002dc <DecodeHeader+0x10>
        }
    }
}
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	2000039f 	.word	0x2000039f
 80004bc:	200003a1 	.word	0x200003a1

080004c0 <SendInfo>:

void SendInfo(uint8_t bufferAux[], uint8_t bytes){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	460b      	mov	r3, r1
 80004ca:	70fb      	strb	r3, [r7, #3]
    uint8_t bufAux[20], indiceAux=0,cks=0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	77fb      	strb	r3, [r7, #31]
 80004d0:	2300      	movs	r3, #0
 80004d2:	77bb      	strb	r3, [r7, #30]
    #define NBYTES  4
    bufAux[indiceAux++]='U';
 80004d4:	7ffb      	ldrb	r3, [r7, #31]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	77fa      	strb	r2, [r7, #31]
 80004da:	3320      	adds	r3, #32
 80004dc:	443b      	add	r3, r7
 80004de:	2255      	movs	r2, #85	@ 0x55
 80004e0:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 80004e4:	7ffb      	ldrb	r3, [r7, #31]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	77fa      	strb	r2, [r7, #31]
 80004ea:	3320      	adds	r3, #32
 80004ec:	443b      	add	r3, r7
 80004ee:	224e      	movs	r2, #78	@ 0x4e
 80004f0:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 80004f4:	7ffb      	ldrb	r3, [r7, #31]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	77fa      	strb	r2, [r7, #31]
 80004fa:	3320      	adds	r3, #32
 80004fc:	443b      	add	r3, r7
 80004fe:	2245      	movs	r2, #69	@ 0x45
 8000500:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000504:	7ffb      	ldrb	r3, [r7, #31]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	77fa      	strb	r2, [r7, #31]
 800050a:	3320      	adds	r3, #32
 800050c:	443b      	add	r3, r7
 800050e:	2252      	movs	r2, #82	@ 0x52
 8000510:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000514:	7ffb      	ldrb	r3, [r7, #31]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	77fa      	strb	r2, [r7, #31]
 800051a:	3320      	adds	r3, #32
 800051c:	443b      	add	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000524:	7ffb      	ldrb	r3, [r7, #31]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	77fa      	strb	r2, [r7, #31]
 800052a:	3320      	adds	r3, #32
 800052c:	443b      	add	r3, r7
 800052e:	223a      	movs	r2, #58	@ 0x3a
 8000530:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(uint8_t i=0; i<bytes-1; i++){
 8000534:	2300      	movs	r3, #0
 8000536:	777b      	strb	r3, [r7, #29]
 8000538:	e00d      	b.n	8000556 <SendInfo+0x96>
        bufAux[indiceAux++] = bufferAux[i];
 800053a:	7f7b      	ldrb	r3, [r7, #29]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	441a      	add	r2, r3
 8000540:	7ffb      	ldrb	r3, [r7, #31]
 8000542:	1c59      	adds	r1, r3, #1
 8000544:	77f9      	strb	r1, [r7, #31]
 8000546:	7812      	ldrb	r2, [r2, #0]
 8000548:	3320      	adds	r3, #32
 800054a:	443b      	add	r3, r7
 800054c:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(uint8_t i=0; i<bytes-1; i++){
 8000550:	7f7b      	ldrb	r3, [r7, #29]
 8000552:	3301      	adds	r3, #1
 8000554:	777b      	strb	r3, [r7, #29]
 8000556:	7f7a      	ldrb	r2, [r7, #29]
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	3b01      	subs	r3, #1
 800055c:	429a      	cmp	r2, r3
 800055e:	dbec      	blt.n	800053a <SendInfo+0x7a>
    }
    bufAux[NBYTES] = bytes;
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	733b      	strb	r3, [r7, #12]
        cks=0;
 8000564:	2300      	movs	r3, #0
 8000566:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000568:	2300      	movs	r3, #0
 800056a:	773b      	strb	r3, [r7, #28]
 800056c:	e01b      	b.n	80005a6 <SendInfo+0xe6>
        cks^= bufAux[i];
 800056e:	7f3b      	ldrb	r3, [r7, #28]
 8000570:	3320      	adds	r3, #32
 8000572:	443b      	add	r3, r7
 8000574:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000578:	7fbb      	ldrb	r3, [r7, #30]
 800057a:	4053      	eors	r3, r2
 800057c:	77bb      	strb	r3, [r7, #30]
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 800057e:	7f3a      	ldrb	r2, [r7, #28]
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <SendInfo+0x118>)
 8000582:	795b      	ldrb	r3, [r3, #5]
 8000584:	1c59      	adds	r1, r3, #1
 8000586:	b2c8      	uxtb	r0, r1
 8000588:	4913      	ldr	r1, [pc, #76]	@ (80005d8 <SendInfo+0x118>)
 800058a:	7148      	strb	r0, [r1, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	f102 0320 	add.w	r3, r2, #32
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <SendInfo+0x118>)
 800059a:	440b      	add	r3, r1
 800059c:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 80005a0:	7f3b      	ldrb	r3, [r7, #28]
 80005a2:	3301      	adds	r3, #1
 80005a4:	773b      	strb	r3, [r7, #28]
 80005a6:	7f3a      	ldrb	r2, [r7, #28]
 80005a8:	7ffb      	ldrb	r3, [r7, #31]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d3df      	bcc.n	800056e <SendInfo+0xae>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <SendInfo+0x118>)
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	b2d1      	uxtb	r1, r2
 80005b6:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <SendInfo+0x118>)
 80005b8:	7151      	strb	r1, [r2, #5]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <SendInfo+0x118>)
 80005be:	4413      	add	r3, r2
 80005c0:	7fba      	ldrb	r2, [r7, #30]
 80005c2:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

     CDC_Transmit_FS((uint8_t*)datosComSerie.bufferTx, sizeof(bufAux));
 80005c6:	2114      	movs	r1, #20
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <SendInfo+0x11c>)
 80005ca:	f006 fe43 	bl	8007254 <CDC_Transmit_FS>
}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000198 	.word	0x20000198
 80005dc:	2000029f 	.word	0x2000029f

080005e0 <decodeData>:

void decodeData(_sDato *datosCom){
 80005e0:	b480      	push	{r7}
 80005e2:	b089      	sub	sp, #36	@ 0x24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,cks=0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	77fb      	strb	r3, [r7, #31]
 80005ec:	2300      	movs	r3, #0
 80005ee:	77bb      	strb	r3, [r7, #30]

    bufAux[indiceAux++]='U';
 80005f0:	7ffb      	ldrb	r3, [r7, #31]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	77fa      	strb	r2, [r7, #31]
 80005f6:	3320      	adds	r3, #32
 80005f8:	443b      	add	r3, r7
 80005fa:	2255      	movs	r2, #85	@ 0x55
 80005fc:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000600:	7ffb      	ldrb	r3, [r7, #31]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	77fa      	strb	r2, [r7, #31]
 8000606:	3320      	adds	r3, #32
 8000608:	443b      	add	r3, r7
 800060a:	224e      	movs	r2, #78	@ 0x4e
 800060c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	77fa      	strb	r2, [r7, #31]
 8000616:	3320      	adds	r3, #32
 8000618:	443b      	add	r3, r7
 800061a:	2245      	movs	r2, #69	@ 0x45
 800061c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	77fa      	strb	r2, [r7, #31]
 8000626:	3320      	adds	r3, #32
 8000628:	443b      	add	r3, r7
 800062a:	2252      	movs	r2, #82	@ 0x52
 800062c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	77fa      	strb	r2, [r7, #31]
 8000636:	3320      	adds	r3, #32
 8000638:	443b      	add	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000640:	7ffb      	ldrb	r3, [r7, #31]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	77fa      	strb	r2, [r7, #31]
 8000646:	3320      	adds	r3, #32
 8000648:	443b      	add	r3, r7
 800064a:	223a      	movs	r2, #58	@ 0x3a
 800064c:	f803 2c18 	strb.w	r2, [r3, #-24]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//ID EN LA POSICION 2
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	785b      	ldrb	r3, [r3, #1]
 8000654:	3302      	adds	r3, #2
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	79db      	ldrb	r3, [r3, #7]
 800065c:	2bf0      	cmp	r3, #240	@ 0xf0
 800065e:	d002      	beq.n	8000666 <decodeData+0x86>
 8000660:	2bf1      	cmp	r3, #241	@ 0xf1
 8000662:	d013      	beq.n	800068c <decodeData+0xac>
 8000664:	e025      	b.n	80006b2 <decodeData+0xd2>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	77fa      	strb	r2, [r7, #31]
 800066c:	3320      	adds	r3, #32
 800066e:	443b      	add	r3, r7
 8000670:	22f0      	movs	r2, #240	@ 0xf0
 8000672:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0x0D;
 8000676:	7ffb      	ldrb	r3, [r7, #31]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	77fa      	strb	r2, [r7, #31]
 800067c:	3320      	adds	r3, #32
 800067e:	443b      	add	r3, r7
 8000680:	220d      	movs	r2, #13
 8000682:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000686:	2303      	movs	r3, #3
 8000688:	733b      	strb	r3, [r7, #12]

    break;
 800068a:	e01d      	b.n	80006c8 <decodeData+0xe8>
    case FIRMWARE:

        bufAux[indiceAux++]=FIRMWARE;
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	77fa      	strb	r2, [r7, #31]
 8000692:	3320      	adds	r3, #32
 8000694:	443b      	add	r3, r7
 8000696:	22f1      	movs	r2, #241	@ 0xf1
 8000698:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0xF1;
 800069c:	7ffb      	ldrb	r3, [r7, #31]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	77fa      	strb	r2, [r7, #31]
 80006a2:	3320      	adds	r3, #32
 80006a4:	443b      	add	r3, r7
 80006a6:	22f1      	movs	r2, #241	@ 0xf1
 80006a8:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 80006ac:	2303      	movs	r3, #3
 80006ae:	733b      	strb	r3, [r7, #12]

    break;
 80006b0:	e00a      	b.n	80006c8 <decodeData+0xe8>

    default:

        bufAux[indiceAux++]=0xFF;
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	1c5a      	adds	r2, r3, #1
 80006b6:	77fa      	strb	r2, [r7, #31]
 80006b8:	3320      	adds	r3, #32
 80006ba:	443b      	add	r3, r7
 80006bc:	22ff      	movs	r2, #255	@ 0xff
 80006be:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x02;
 80006c2:	2302      	movs	r3, #2
 80006c4:	733b      	strb	r3, [r7, #12]

        break;
 80006c6:	bf00      	nop
    }
    cks=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 80006cc:	2300      	movs	r3, #0
 80006ce:	777b      	strb	r3, [r7, #29]
 80006d0:	e01b      	b.n	800070a <decodeData+0x12a>

        cks^= bufAux[i];
 80006d2:	7f7b      	ldrb	r3, [r7, #29]
 80006d4:	3320      	adds	r3, #32
 80006d6:	443b      	add	r3, r7
 80006d8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80006dc:	7fbb      	ldrb	r3, [r7, #30]
 80006de:	4053      	eors	r3, r2
 80006e0:	77bb      	strb	r3, [r7, #30]
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
 80006e2:	7f7a      	ldrb	r2, [r7, #29]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	b2c8      	uxtb	r0, r1
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	7148      	strb	r0, [r1, #5]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f102 0320 	add.w	r3, r2, #32
 80006f6:	443b      	add	r3, r7
 80006f8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000704:	7f7b      	ldrb	r3, [r7, #29]
 8000706:	3301      	adds	r3, #1
 8000708:	777b      	strb	r3, [r7, #29]
 800070a:	7f7a      	ldrb	r2, [r7, #29]
 800070c:	7ffb      	ldrb	r3, [r7, #31]
 800070e:	429a      	cmp	r2, r3
 8000710:	d3df      	bcc.n	80006d2 <decodeData+0xf2>

    }

     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	795b      	ldrb	r3, [r3, #5]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	b2d1      	uxtb	r1, r2
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7151      	strb	r1, [r2, #5]
 800071e:	461a      	mov	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	7fba      	ldrb	r2, [r7, #30]
 8000726:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
}
 800072a:	bf00      	nop
 800072c:	3724      	adds	r7, #36	@ 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
//    if(datosCom->indexReadRx!=datosCom->indexWriteRx ){ //para recibir data
            DecodeHeader(datosCom);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fdc5 	bl	80002cc <DecodeHeader>
//            HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
//    }
//      if(datosCom->indexReadTx!=datosCom->indexWriteTx){ //para transmitir
    	  SendInfo(pepe, 2);
 8000742:	2102      	movs	r1, #2
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <comunicationsTask+0x20>)
 8000746:	f7ff febb 	bl	80004c0 <SendInfo>
//      }
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200003a0 	.word	0x200003a0

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <HAL_MspInit+0x5c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a0e      	ldr	r2, [pc, #56]	@ (80007c0 <HAL_MspInit+0x5c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <HAL_MspInit+0x60>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_MspInit+0x60>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <NMI_Handler+0x4>

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <MemManage_Handler+0x4>

080007e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <UsageFault_Handler+0x4>

080007f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f87e 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000826:	f000 fc7d 	bl	8001124 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20001070 	.word	0x20001070

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000840:	f7ff fff8 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480b      	ldr	r0, [pc, #44]	@ (8000874 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000846:	490c      	ldr	r1, [pc, #48]	@ (8000878 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000848:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <LoopFillZerobss+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a09      	ldr	r2, [pc, #36]	@ (8000880 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800085c:	4c09      	ldr	r4, [pc, #36]	@ (8000884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f007 f8d9 	bl	8007a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086e:	f7ff fc6d 	bl	800014c <main>
  bx lr
 8000872:	4770      	bx	lr
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800087c:	08007af4 	.word	0x08007af4
  ldr r2, =_sbss
 8000880:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000884:	20001568 	.word	0x20001568

08000888 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC1_2_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <HAL_Init+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a07      	ldr	r2, [pc, #28]	@ (80008b4 <HAL_Init+0x28>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f947 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f808 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a8:	f7ff ff5c 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_InitTick+0x54>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x58>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f95f 	bl	8000b9a <HAL_SYSTICK_Config>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e00e      	b.n	8000904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b0f      	cmp	r3, #15
 80008ea:	d80a      	bhi.n	8000902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ec:	2200      	movs	r2, #0
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	f000 f927 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f8:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <HAL_InitTick+0x5c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	e000      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	20000008 	.word	0x20000008
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4413      	add	r3, r2
 8000928:	4a03      	ldr	r2, [pc, #12]	@ (8000938 <HAL_IncTick+0x20>)
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000008 	.word	0x20000008
 8000938:	200003a4 	.word	0x200003a4

0800093c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	@ (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	200003a4 	.word	0x200003a4

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4906      	ldr	r1, [pc, #24]	@ (8000a30 <__NVIC_EnableIRQ+0x34>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	@ (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	@ 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	@ 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff90 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff2d 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff42 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff35 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa2 	bl	8000aec <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b08b      	sub	sp, #44	@ 0x2c
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	e169      	b.n	8000e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 8158 	bne.w	8000e96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4a9a      	ldr	r2, [pc, #616]	@ (8000e54 <HAL_GPIO_Init+0x2a0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d05e      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000bf0:	4a98      	ldr	r2, [pc, #608]	@ (8000e54 <HAL_GPIO_Init+0x2a0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d875      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000bf6:	4a98      	ldr	r2, [pc, #608]	@ (8000e58 <HAL_GPIO_Init+0x2a4>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d058      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000bfc:	4a96      	ldr	r2, [pc, #600]	@ (8000e58 <HAL_GPIO_Init+0x2a4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d86f      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c02:	4a96      	ldr	r2, [pc, #600]	@ (8000e5c <HAL_GPIO_Init+0x2a8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d052      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000c08:	4a94      	ldr	r2, [pc, #592]	@ (8000e5c <HAL_GPIO_Init+0x2a8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d869      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c0e:	4a94      	ldr	r2, [pc, #592]	@ (8000e60 <HAL_GPIO_Init+0x2ac>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d04c      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000c14:	4a92      	ldr	r2, [pc, #584]	@ (8000e60 <HAL_GPIO_Init+0x2ac>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d863      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c1a:	4a92      	ldr	r2, [pc, #584]	@ (8000e64 <HAL_GPIO_Init+0x2b0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d046      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
 8000c20:	4a90      	ldr	r2, [pc, #576]	@ (8000e64 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d85d      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c26:	2b12      	cmp	r3, #18
 8000c28:	d82a      	bhi.n	8000c80 <HAL_GPIO_Init+0xcc>
 8000c2a:	2b12      	cmp	r3, #18
 8000c2c:	d859      	bhi.n	8000ce2 <HAL_GPIO_Init+0x12e>
 8000c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <HAL_GPIO_Init+0x80>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000caf 	.word	0x08000caf
 8000c38:	08000c89 	.word	0x08000c89
 8000c3c:	08000c9b 	.word	0x08000c9b
 8000c40:	08000cdd 	.word	0x08000cdd
 8000c44:	08000ce3 	.word	0x08000ce3
 8000c48:	08000ce3 	.word	0x08000ce3
 8000c4c:	08000ce3 	.word	0x08000ce3
 8000c50:	08000ce3 	.word	0x08000ce3
 8000c54:	08000ce3 	.word	0x08000ce3
 8000c58:	08000ce3 	.word	0x08000ce3
 8000c5c:	08000ce3 	.word	0x08000ce3
 8000c60:	08000ce3 	.word	0x08000ce3
 8000c64:	08000ce3 	.word	0x08000ce3
 8000c68:	08000ce3 	.word	0x08000ce3
 8000c6c:	08000ce3 	.word	0x08000ce3
 8000c70:	08000ce3 	.word	0x08000ce3
 8000c74:	08000ce3 	.word	0x08000ce3
 8000c78:	08000c91 	.word	0x08000c91
 8000c7c:	08000ca5 	.word	0x08000ca5
 8000c80:	4a79      	ldr	r2, [pc, #484]	@ (8000e68 <HAL_GPIO_Init+0x2b4>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d013      	beq.n	8000cae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c86:	e02c      	b.n	8000ce2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e029      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	3304      	adds	r3, #4
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	e024      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	3308      	adds	r3, #8
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e01f      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	330c      	adds	r3, #12
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e01a      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	623b      	str	r3, [r7, #32]
          break;
 8000cba:	e013      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d105      	bne.n	8000cd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	611a      	str	r2, [r3, #16]
          break;
 8000cce:	e009      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	615a      	str	r2, [r3, #20]
          break;
 8000cda:	e003      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
          break;
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_Init+0x130>
          break;
 8000ce2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2bff      	cmp	r3, #255	@ 0xff
 8000ce8:	d801      	bhi.n	8000cee <HAL_GPIO_Init+0x13a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	e001      	b.n	8000cf2 <HAL_GPIO_Init+0x13e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2bff      	cmp	r3, #255	@ 0xff
 8000cf8:	d802      	bhi.n	8000d00 <HAL_GPIO_Init+0x14c>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x152>
 8000d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d02:	3b08      	subs	r3, #8
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	401a      	ands	r2, r3
 8000d18:	6a39      	ldr	r1, [r7, #32]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	431a      	orrs	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80b1 	beq.w	8000e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d34:	4b4d      	ldr	r3, [pc, #308]	@ (8000e6c <HAL_GPIO_Init+0x2b8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a4c      	ldr	r2, [pc, #304]	@ (8000e6c <HAL_GPIO_Init+0x2b8>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b4a      	ldr	r3, [pc, #296]	@ (8000e6c <HAL_GPIO_Init+0x2b8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d4c:	4a48      	ldr	r2, [pc, #288]	@ (8000e70 <HAL_GPIO_Init+0x2bc>)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a40      	ldr	r2, [pc, #256]	@ (8000e74 <HAL_GPIO_Init+0x2c0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d013      	beq.n	8000da0 <HAL_GPIO_Init+0x1ec>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e78 <HAL_GPIO_Init+0x2c4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_GPIO_Init+0x1e8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3e      	ldr	r2, [pc, #248]	@ (8000e7c <HAL_GPIO_Init+0x2c8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x1e4>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e80 <HAL_GPIO_Init+0x2cc>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_GPIO_Init+0x1e0>
 8000d90:	2303      	movs	r3, #3
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d94:	2304      	movs	r3, #4
 8000d96:	e004      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e002      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000da0:	2300      	movs	r3, #0
 8000da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000da4:	f002 0203 	and.w	r2, r2, #3
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	4093      	lsls	r3, r2
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db2:	492f      	ldr	r1, [pc, #188]	@ (8000e70 <HAL_GPIO_Init+0x2bc>)
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	492c      	ldr	r1, [pc, #176]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dda:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4928      	ldr	r1, [pc, #160]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d006      	beq.n	8000e02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	4922      	ldr	r1, [pc, #136]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	491e      	ldr	r1, [pc, #120]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	4918      	ldr	r1, [pc, #96]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	604b      	str	r3, [r1, #4]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4914      	ldr	r1, [pc, #80]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d021      	beq.n	8000e88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	490e      	ldr	r1, [pc, #56]	@ (8000e84 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
 8000e50:	e021      	b.n	8000e96 <HAL_GPIO_Init+0x2e2>
 8000e52:	bf00      	nop
 8000e54:	10320000 	.word	0x10320000
 8000e58:	10310000 	.word	0x10310000
 8000e5c:	10220000 	.word	0x10220000
 8000e60:	10210000 	.word	0x10210000
 8000e64:	10120000 	.word	0x10120000
 8000e68:	10110000 	.word	0x10110000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40010c00 	.word	0x40010c00
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40011400 	.word	0x40011400
 8000e84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4909      	ldr	r1, [pc, #36]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	3301      	adds	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f47f ae8e 	bne.w	8000bc8 <HAL_GPIO_Init+0x14>
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	372c      	adds	r7, #44	@ 0x2c
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ecc:	787b      	ldrb	r3, [r7, #1]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ed8:	e003      	b.n	8000ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	041a      	lsls	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	611a      	str	r2, [r3, #16]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0e8      	b.n	80010d0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d106      	bne.n	8000f18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f006 fad2 	bl	80074bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 f9f5 	bl	800331a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3304      	adds	r3, #4
 8000f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3a:	f002 f9cb 	bl	80032d4 <USB_CoreInit>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2202      	movs	r2, #2
 8000f48:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e0bf      	b.n	80010d0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 f9f9 	bl	800334e <USB_SetCurrentMode>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2202      	movs	r2, #2
 8000f66:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e0b0      	b.n	80010d0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e03e      	b.n	8000ff2 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3311      	adds	r3, #17
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	3310      	adds	r3, #16
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3313      	adds	r3, #19
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	3320      	adds	r3, #32
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3324      	adds	r3, #36	@ 0x24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3bb      	bcc.n	8000f74 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e044      	b.n	800108c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	440b      	add	r3, r1
 800107e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	3301      	adds	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	429a      	cmp	r2, r3
 8001094:	d3b5      	bcc.n	8001002 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a0:	f002 f961 	bl	8003366 <USB_DevInit>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2202      	movs	r2, #2
 80010ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00c      	b.n	80010d0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 fbe0 	bl	800588e <USB_DevDisconnect>

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_PCD_Start+0x16>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e016      	b.n	800111c <HAL_PCD_Start+0x44>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 f8f7 	bl	80032ee <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001100:	2101      	movs	r1, #1
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f006 fc4d 	bl	80079a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f004 fbb4 	bl	800587a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f004 fbb6 	bl	80058a2 <USB_ReadInterrupts>
 8001136:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fb1a 	bl	800177c <PCD_EP_ISR_Handler>

    return;
 8001148:	e119      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d013      	beq.n	800117c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001166:	b292      	uxth	r2, r2
 8001168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 fa20 	bl	80075b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001172:	2100      	movs	r1, #0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f905 	bl	8001384 <HAL_PCD_SetAddress>

    return;
 800117a:	e100      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00c      	beq.n	80011a0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800118e:	b29a      	uxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001198:	b292      	uxth	r2, r2
 800119a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800119e:	e0ee      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00c      	beq.n	80011c4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80011bc:	b292      	uxth	r2, r2
 80011be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80011c2:	e0dc      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d027      	beq.n	800121e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0204 	bic.w	r2, r2, #4
 80011e0:	b292      	uxth	r2, r2
 80011e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	b292      	uxth	r2, r2
 80011fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f006 fa10 	bl	8007624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001216:	b292      	uxth	r2, r2
 8001218:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800121c:	e0af      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 8083 	beq.w	8001330 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	e010      	b.n	8001252 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	7ffb      	ldrb	r3, [r7, #31]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	441a      	add	r2, r3
 800123c:	7ffb      	ldrb	r3, [r7, #31]
 800123e:	8812      	ldrh	r2, [r2, #0]
 8001240:	b292      	uxth	r2, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	3320      	adds	r3, #32
 8001246:	443b      	add	r3, r7
 8001248:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	3301      	adds	r3, #1
 8001250:	77fb      	strb	r3, [r7, #31]
 8001252:	7ffb      	ldrb	r3, [r7, #31]
 8001254:	2b07      	cmp	r3, #7
 8001256:	d9eb      	bls.n	8001230 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001260:	b29a      	uxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	b292      	uxth	r2, r2
 800126c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001278:	b29a      	uxth	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	b292      	uxth	r2, r2
 8001284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001288:	bf00      	nop
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001292:	b29b      	uxth	r3, r3
 8001294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f6      	beq.n	800128a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012ae:	b292      	uxth	r2, r2
 80012b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	77fb      	strb	r3, [r7, #31]
 80012b8:	e00f      	b.n	80012da <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80012ba:	7ffb      	ldrb	r3, [r7, #31]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	4611      	mov	r1, r2
 80012c2:	7ffa      	ldrb	r2, [r7, #31]
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	440a      	add	r2, r1
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	3320      	adds	r3, #32
 80012cc:	443b      	add	r3, r7
 80012ce:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012d2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	3301      	adds	r3, #1
 80012d8:	77fb      	strb	r3, [r7, #31]
 80012da:	7ffb      	ldrb	r3, [r7, #31]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	d9ec      	bls.n	80012ba <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0208 	orr.w	r2, r2, #8
 80012f2:	b292      	uxth	r2, r2
 80012f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001300:	b29a      	uxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800130a:	b292      	uxth	r2, r2
 800130c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0204 	orr.w	r2, r2, #4
 8001322:	b292      	uxth	r2, r2
 8001324:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 f961 	bl	80075f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800132e:	e026      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00f      	beq.n	800135a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001342:	b29a      	uxth	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800134c:	b292      	uxth	r2, r2
 800134e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f006 f91f 	bl	8007596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001358:	e011      	b.n	800137e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00c      	beq.n	800137e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001376:	b292      	uxth	r2, r2
 8001378:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800137c:	bf00      	nop
  }
}
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_PCD_SetAddress+0x1a>
 800139a:	2302      	movs	r3, #2
 800139c:	e012      	b.n	80013c4 <HAL_PCD_SetAddress+0x40>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	78fa      	ldrb	r2, [r7, #3]
 80013aa:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	78fa      	ldrb	r2, [r7, #3]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 fa4d 	bl	8005854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	4608      	mov	r0, r1
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	70fb      	strb	r3, [r7, #3]
 80013de:	460b      	mov	r3, r1
 80013e0:	803b      	strh	r3, [r7, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da0e      	bge.n	8001410 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	f003 0207 	and.w	r2, r3, #7
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	3310      	adds	r3, #16
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	705a      	strb	r2, [r3, #1]
 800140e:	e00e      	b.n	800142e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	f003 0207 	and.w	r2, r3, #7
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	b2da      	uxtb	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800143a:	883a      	ldrh	r2, [r7, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	78ba      	ldrb	r2, [r7, #2]
 8001444:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001446:	78bb      	ldrb	r3, [r7, #2]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d102      	bne.n	8001452 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_PCD_EP_Open+0x94>
 800145c:	2302      	movs	r3, #2
 800145e:	e00e      	b.n	800147e <HAL_PCD_EP_Open+0xb2>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	4618      	mov	r0, r3
 8001470:	f001 ff96 	bl	80033a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800147c:	7afb      	ldrb	r3, [r7, #11]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da0e      	bge.n	80014b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0207 	and.w	r2, r3, #7
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	3310      	adds	r3, #16
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2201      	movs	r2, #1
 80014b4:	705a      	strb	r2, [r3, #1]
 80014b6:	e00e      	b.n	80014d6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	f003 0207 	and.w	r2, r3, #7
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_PCD_EP_Close+0x6a>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e00e      	b.n	800150e <HAL_PCD_EP_Close+0x88>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fb0e 	bl	8003b20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	460b      	mov	r3, r1
 8001524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2200      	movs	r2, #0
 8001554:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	b2da      	uxtb	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fcc5 	bl	8003ef8 <USB_EPStartXfer>

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	f003 0207 	and.w	r2, r3, #7
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	460b      	mov	r3, r1
 80015b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	f003 0207 	and.w	r2, r3, #7
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	3310      	adds	r3, #16
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2201      	movs	r2, #1
 80015f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015f2:	7afb      	ldrb	r3, [r7, #11]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6979      	ldr	r1, [r7, #20]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fc77 	bl	8003ef8 <USB_EPStartXfer>

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	7912      	ldrb	r2, [r2, #4]
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e04c      	b.n	80016cc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001636:	2b00      	cmp	r3, #0
 8001638:	da0e      	bge.n	8001658 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	f003 0207 	and.w	r2, r3, #7
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	3310      	adds	r3, #16
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	705a      	strb	r2, [r3, #1]
 8001656:	e00c      	b.n	8001672 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_PCD_EP_SetStall+0x7e>
 800168e:	2302      	movs	r3, #2
 8001690:	e01c      	b.n	80016cc <HAL_PCD_EP_SetStall+0xb8>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 ffda 	bl	800565a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f004 f8ff 	bl	80058c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	7912      	ldrb	r2, [r2, #4]
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e040      	b.n	8001774 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da0e      	bge.n	8001718 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	f003 0207 	and.w	r2, r3, #7
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	3310      	adds	r3, #16
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	705a      	strb	r2, [r3, #1]
 8001716:	e00e      	b.n	8001736 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	f003 0207 	and.w	r2, r3, #7
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	b2da      	uxtb	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_PCD_EP_ClrStall+0x82>
 8001752:	2302      	movs	r3, #2
 8001754:	e00e      	b.n	8001774 <HAL_PCD_EP_ClrStall+0xa0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 ffc8 	bl	80056fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b096      	sub	sp, #88	@ 0x58
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001784:	e3bb      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800178e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001792:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80017a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f040 8175 	bne.w	8001a94 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d14e      	bne.n	8001854 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80017c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017c6:	81fb      	strh	r3, [r7, #14]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3310      	adds	r3, #16
 80017de:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4413      	add	r3, r2
 80017f4:	3302      	adds	r3, #2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800180c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	441a      	add	r2, r3
 8001816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001818:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f005 fea0 	bl	8007562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7b5b      	ldrb	r3, [r3, #13]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8368 	beq.w	8001efe <PCD_EP_ISR_Handler+0x782>
 800182e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8363 	bne.w	8001efe <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7b5b      	ldrb	r3, [r3, #13]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	735a      	strb	r2, [r3, #13]
 8001852:	e354      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800185a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001866:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800186a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186e:	2b00      	cmp	r3, #0
 8001870:	d034      	beq.n	80018dc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800187a:	b29b      	uxth	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	3306      	adds	r3, #6
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800189a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80018a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	f004 f856 	bl	8005962 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018c2:	4013      	ands	r3, r2
 80018c4:	823b      	strh	r3, [r7, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	8a3a      	ldrh	r2, [r7, #16]
 80018cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018d0:	b292      	uxth	r2, r2
 80018d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f005 fe17 	bl	8007508 <HAL_PCD_SetupStageCallback>
 80018da:	e310      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f280 830c 	bge.w	8001efe <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018f2:	4013      	ands	r3, r2
 80018f4:	83fb      	strh	r3, [r7, #30]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	8bfa      	ldrh	r2, [r7, #30]
 80018fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001900:	b292      	uxth	r2, r2
 8001902:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	3306      	adds	r3, #6
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800192c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d019      	beq.n	800196c <PCD_EP_ISR_Handler+0x1f0>
 8001938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001946:	6959      	ldr	r1, [r3, #20]
 8001948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800194c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001950:	b29b      	uxth	r3, r3
 8001952:	f004 f806 	bl	8005962 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	441a      	add	r2, r3
 8001960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001962:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f005 fde0 	bl	800752c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001976:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800197a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 82bd 	bne.w	8001efe <PCD_EP_ISR_Handler+0x782>
 8001984:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001988:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800198c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001990:	f000 82b5 	beq.w	8001efe <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4413      	add	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019be:	b29a      	uxth	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80019ca:	d91d      	bls.n	8001a08 <PCD_EP_ISR_Handler+0x28c>
 80019cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <PCD_EP_ISR_Handler+0x26a>
 80019e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e2:	3b01      	subs	r3, #1
 80019e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e026      	b.n	8001a56 <PCD_EP_ISR_Handler+0x2da>
 8001a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <PCD_EP_ISR_Handler+0x2aa>
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	801a      	strh	r2, [r3, #0]
 8001a24:	e017      	b.n	8001a56 <PCD_EP_ISR_Handler+0x2da>
 8001a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	085b      	lsrs	r3, r3, #1
 8001a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <PCD_EP_ISR_Handler+0x2c4>
 8001a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a66:	827b      	strh	r3, [r7, #18]
 8001a68:	8a7b      	ldrh	r3, [r7, #18]
 8001a6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a6e:	827b      	strh	r3, [r7, #18]
 8001a70:	8a7b      	ldrh	r3, [r7, #18]
 8001a72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a76:	827b      	strh	r3, [r7, #18]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	8013      	strh	r3, [r2, #0]
 8001a92:	e234      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aa8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f280 80fc 	bge.w	8001caa <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ac8:	4013      	ands	r3, r2
 8001aca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001ae0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ae8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b00:	7b1b      	ldrb	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d125      	bne.n	8001b52 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001b32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8092 	beq.w	8001c60 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b42:	6959      	ldr	r1, [r3, #20]
 8001b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b46:	88da      	ldrh	r2, [r3, #6]
 8001b48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b4c:	f003 ff09 	bl	8005962 <USB_ReadPMA>
 8001b50:	e086      	b.n	8001c60 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d10a      	bne.n	8001b70 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f9d9 	bl	8001f1a <HAL_PCD_EP_DB_Receive>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b6e:	e077      	b.n	8001c60 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b8a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	441a      	add	r2, r3
 8001b9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001ba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d024      	beq.n	8001c18 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	3302      	adds	r3, #2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001bfa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d02e      	beq.n	8001c60 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0c:	891a      	ldrh	r2, [r3, #8]
 8001c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c12:	f003 fea6 	bl	8005962 <USB_ReadPMA>
 8001c16:	e023      	b.n	8001c60 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c40:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	6959      	ldr	r1, [r3, #20]
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	895a      	ldrh	r2, [r3, #10]
 8001c58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c5c:	f003 fe81 	bl	8005962 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c68:	441a      	add	r2, r3
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c76:	441a      	add	r2, r3
 8001c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <PCD_EP_ISR_Handler+0x514>
 8001c84:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d206      	bcs.n	8001c9e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f005 fc48 	bl	800752c <HAL_PCD_DataOutStageCallback>
 8001c9c:	e005      	b.n	8001caa <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 f927 	bl	8003ef8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001caa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8123 	beq.w	8001efe <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cb8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	3310      	adds	r3, #16
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ce6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	441a      	add	r2, r3
 8001cf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0a:	78db      	ldrb	r3, [r3, #3]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f040 80a2 	bne.w	8001e56 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1a:	7b1b      	ldrb	r3, [r3, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8093 	beq.w	8001e48 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d046      	beq.n	8001dbc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d126      	bne.n	8001d84 <PCD_EP_ISR_Handler+0x608>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	4413      	add	r3, r2
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	011a      	lsls	r2, r3, #4
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	4413      	add	r3, r2
 8001d58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e061      	b.n	8001e48 <PCD_EP_ISR_Handler+0x6cc>
 8001d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d15d      	bne.n	8001e48 <PCD_EP_ISR_Handler+0x6cc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da0:	4413      	add	r3, r2
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	011a      	lsls	r2, r3, #4
 8001daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dac:	4413      	add	r3, r2
 8001dae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db6:	2200      	movs	r2, #0
 8001db8:	801a      	strh	r2, [r3, #0]
 8001dba:	e045      	b.n	8001e48 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d126      	bne.n	8001e18 <PCD_EP_ISR_Handler+0x69c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dde:	4413      	add	r3, r2
 8001de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	011a      	lsls	r2, r3, #4
 8001de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dea:	4413      	add	r3, r2
 8001dec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e00:	801a      	strh	r2, [r3, #0]
 8001e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	e017      	b.n	8001e48 <PCD_EP_ISR_Handler+0x6cc>
 8001e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1a:	785b      	ldrb	r3, [r3, #1]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d113      	bne.n	8001e48 <PCD_EP_ISR_Handler+0x6cc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2e:	4413      	add	r3, r2
 8001e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	011a      	lsls	r2, r3, #4
 8001e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e44:	2200      	movs	r2, #0
 8001e46:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f005 fb87 	bl	8007562 <HAL_PCD_DataInStageCallback>
 8001e54:	e053      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d146      	bne.n	8001ef0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	3302      	adds	r3, #2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d907      	bls.n	8001eaa <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea6:	619a      	str	r2, [r3, #24]
 8001ea8:	e002      	b.n	8001eb0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d106      	bne.n	8001ec6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f005 fb4f 	bl	8007562 <HAL_PCD_DataInStageCallback>
 8001ec4:	e01b      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ece:	441a      	add	r2, r3
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001edc:	441a      	add	r2, r3
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 f805 	bl	8003ef8 <USB_EPStartXfer>
 8001eee:	e006      	b.n	8001efe <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ef0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f91b 	bl	8002134 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	b21b      	sxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f6ff ac3b 	blt.w	8001786 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3758      	adds	r7, #88	@ 0x58
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d07e      	beq.n	8002030 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	3302      	adds	r3, #2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	8b7b      	ldrh	r3, [r7, #26]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d306      	bcc.n	8001f74 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	1ad2      	subs	r2, r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	619a      	str	r2, [r3, #24]
 8001f72:	e002      	b.n	8001f7a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d123      	bne.n	8001fca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f9c:	833b      	strh	r3, [r7, #24]
 8001f9e:	8b3b      	ldrh	r3, [r7, #24]
 8001fa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fa4:	833b      	strh	r3, [r7, #24]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	441a      	add	r2, r3
 8001fb4:	8b3b      	ldrh	r3, [r7, #24]
 8001fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01f      	beq.n	8002014 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fee:	82fb      	strh	r3, [r7, #22]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	441a      	add	r2, r3
 8001ffe:	8afb      	ldrh	r3, [r7, #22]
 8002000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800200c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002010:	b29b      	uxth	r3, r3
 8002012:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 8087 	beq.w	800212a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	891a      	ldrh	r2, [r3, #8]
 8002028:	8b7b      	ldrh	r3, [r7, #26]
 800202a:	f003 fc9a 	bl	8005962 <USB_ReadPMA>
 800202e:	e07c      	b.n	800212a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002058:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	8b7b      	ldrh	r3, [r7, #26]
 8002060:	429a      	cmp	r2, r3
 8002062:	d306      	bcc.n	8002072 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	8b7b      	ldrh	r3, [r7, #26]
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	619a      	str	r2, [r3, #24]
 8002070:	e002      	b.n	8002078 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d123      	bne.n	80020c8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800209a:	83fb      	strh	r3, [r7, #30]
 800209c:	8bfb      	ldrh	r3, [r7, #30]
 800209e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020a2:	83fb      	strh	r3, [r7, #30]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	441a      	add	r2, r3
 80020b2:	8bfb      	ldrh	r3, [r7, #30]
 80020b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11f      	bne.n	8002112 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ec:	83bb      	strh	r3, [r7, #28]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	441a      	add	r2, r3
 80020fc:	8bbb      	ldrh	r3, [r7, #28]
 80020fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800210a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800210e:	b29b      	uxth	r3, r3
 8002110:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002112:	8b7b      	ldrh	r3, [r7, #26]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	895a      	ldrh	r2, [r3, #10]
 8002124:	8b7b      	ldrh	r3, [r7, #26]
 8002126:	f003 fc1c 	bl	8005962 <USB_ReadPMA>
    }
  }

  return count;
 800212a:	8b7b      	ldrh	r3, [r7, #26]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0a4      	sub	sp, #144	@ 0x90
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 81dd 	beq.w	8002508 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	3302      	adds	r3, #2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002182:	429a      	cmp	r2, r3
 8002184:	d907      	bls.n	8002196 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	e002      	b.n	800219c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 80b9 	bne.w	8002318 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d126      	bne.n	80021fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c2:	4413      	add	r3, r2
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	011a      	lsls	r2, r3, #4
 80021cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ce:	4413      	add	r3, r2
 80021d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e01a      	b.n	8002232 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d116      	bne.n	8002232 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002218:	4413      	add	r3, r2
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	011a      	lsls	r2, r3, #4
 8002222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002224:	4413      	add	r3, r2
 8002226:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
 800222c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d126      	bne.n	800228e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	011a      	lsls	r2, r3, #4
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002272:	b29a      	uxth	r2, r3
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002286:	b29a      	uxth	r2, r3
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	801a      	strh	r2, [r3, #0]
 800228c:	e017      	b.n	80022be <HAL_PCD_EP_DB_Transmit+0x18a>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d113      	bne.n	80022be <HAL_PCD_EP_DB_Transmit+0x18a>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	4413      	add	r3, r2
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	011a      	lsls	r2, r3, #4
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	4413      	add	r3, r2
 80022b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	2200      	movs	r2, #0
 80022bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f005 f94c 	bl	8007562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 82fc 	beq.w	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022f0:	82fb      	strh	r3, [r7, #22]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	441a      	add	r2, r3
 8002300:	8afb      	ldrh	r3, [r7, #22]
 8002302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800230a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800230e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002312:	b29b      	uxth	r3, r3
 8002314:	8013      	strh	r3, [r2, #0]
 8002316:	e2da      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d021      	beq.n	8002366 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800233c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	441a      	add	r2, r3
 800234e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800235a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800235e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002362:	b29b      	uxth	r3, r3
 8002364:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800236c:	2b01      	cmp	r3, #1
 800236e:	f040 82ae 	bne.w	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800237a:	441a      	add	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002388:	441a      	add	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d30b      	bcc.n	80023b2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023aa:	1ad2      	subs	r2, r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	e017      	b.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023ca:	e00a      	b.n	80023e2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d165      	bne.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x382>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	4413      	add	r3, r2
 8002400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	011a      	lsls	r2, r3, #4
 8002408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240a:	4413      	add	r3, r2
 800240c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241c:	b29a      	uxth	r2, r3
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002426:	2b3e      	cmp	r3, #62	@ 0x3e
 8002428:	d91d      	bls.n	8002466 <HAL_PCD_EP_DB_Transmit+0x332>
 800242a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_PCD_EP_DB_Transmit+0x310>
 800243e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002440:	3b01      	subs	r3, #1
 8002442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29a      	uxth	r2, r3
 800244a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800244c:	b29b      	uxth	r3, r3
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	b29b      	uxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b29b      	uxth	r3, r3
 8002456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800245e:	b29a      	uxth	r2, r3
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	801a      	strh	r2, [r3, #0]
 8002464:	e044      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0x350>
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247c:	b29a      	uxth	r2, r3
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	e035      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800248c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_PCD_EP_DB_Transmit+0x36a>
 8002498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800249a:	3301      	adds	r3, #1
 800249c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800249e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	e01c      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	785b      	ldrb	r3, [r3, #1]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d118      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d2:	4413      	add	r3, r2
 80024d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	011a      	lsls	r2, r3, #4
 80024dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024de:	4413      	add	r3, r2
 80024e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80024e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ee:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	891a      	ldrh	r2, [r3, #8]
 80024fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002500:	b29b      	uxth	r3, r3
 8002502:	f003 f9e8 	bl	80058d6 <USB_WritePMA>
 8002506:	e1e2      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	3306      	adds	r3, #6
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800253c:	429a      	cmp	r2, r3
 800253e:	d307      	bcc.n	8002550 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002548:	1ad2      	subs	r2, r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	e002      	b.n	8002556 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80c0 	bne.w	80026e0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d126      	bne.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800257c:	4413      	add	r3, r2
 800257e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	011a      	lsls	r2, r3, #4
 8002586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002588:	4413      	add	r3, r2
 800258a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800258e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	b29a      	uxth	r2, r3
 800259c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	e01a      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	785b      	ldrb	r3, [r3, #1]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d116      	bne.n	80025ec <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025d2:	4413      	add	r3, r2
 80025d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	011a      	lsls	r2, r3, #4
 80025dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025de:	4413      	add	r3, r2
 80025e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80025e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e8:	2200      	movs	r2, #0
 80025ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d12b      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x51e>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800260e:	4413      	add	r3, r2
 8002610:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	011a      	lsls	r2, r3, #4
 8002618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800261a:	4413      	add	r3, r2
 800261c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002624:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002630:	b29a      	uxth	r2, r3
 8002632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002636:	801a      	strh	r2, [r3, #0]
 8002638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002648:	b29a      	uxth	r2, r3
 800264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e017      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d113      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x54e>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002668:	4413      	add	r3, r2
 800266a:	677b      	str	r3, [r7, #116]	@ 0x74
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	011a      	lsls	r2, r3, #4
 8002672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002674:	4413      	add	r3, r2
 8002676:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800267a:	673b      	str	r3, [r7, #112]	@ 0x70
 800267c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800267e:	2200      	movs	r2, #0
 8002680:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f004 ff6a 	bl	8007562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 811a 	bne.w	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026da:	b29b      	uxth	r3, r3
 80026dc:	8013      	strh	r3, [r2, #0]
 80026de:	e0f6      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d121      	bne.n	800272e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002704:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800271a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800271e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002722:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272a:	b29b      	uxth	r3, r3
 800272c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 80ca 	bne.w	80028ce <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002742:	441a      	add	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002750:	441a      	add	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d30b      	bcc.n	800277a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	621a      	str	r2, [r3, #32]
 8002778:	e017      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002782:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002792:	e00a      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d165      	bne.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027cc:	4413      	add	r3, r2
 80027ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	011a      	lsls	r2, r3, #4
 80027d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d8:	4413      	add	r3, r2
 80027da:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80027f6:	d91d      	bls.n	8002834 <HAL_PCD_EP_DB_Transmit+0x700>
 80027f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_PCD_EP_DB_Transmit+0x6de>
 800280c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800280e:	3b01      	subs	r3, #1
 8002810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29a      	uxth	r2, r3
 8002818:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800281a:	b29b      	uxth	r3, r3
 800281c:	029b      	lsls	r3, r3, #10
 800281e:	b29b      	uxth	r3, r3
 8002820:	4313      	orrs	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282c:	b29a      	uxth	r2, r3
 800282e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	e041      	b.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <HAL_PCD_EP_DB_Transmit+0x71e>
 800283c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284a:	b29a      	uxth	r2, r3
 800284c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800284e:	801a      	strh	r2, [r3, #0]
 8002850:	e032      	b.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800285a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_PCD_EP_DB_Transmit+0x738>
 8002866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002868:	3301      	adds	r3, #1
 800286a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800286c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	b29a      	uxth	r2, r3
 8002872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002874:	b29b      	uxth	r3, r3
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	b29b      	uxth	r3, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	b29a      	uxth	r2, r3
 800287e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002880:	801a      	strh	r2, [r3, #0]
 8002882:	e019      	b.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d115      	bne.n	80028b8 <HAL_PCD_EP_DB_Transmit+0x784>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289a:	4413      	add	r3, r2
 800289c:	657b      	str	r3, [r7, #84]	@ 0x54
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	011a      	lsls	r2, r3, #4
 80028a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a6:	4413      	add	r3, r2
 80028a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6959      	ldr	r1, [r3, #20]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	895a      	ldrh	r2, [r3, #10]
 80028c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	f003 f804 	bl	80058d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028e8:	82bb      	strh	r3, [r7, #20]
 80028ea:	8abb      	ldrh	r3, [r7, #20]
 80028ec:	f083 0310 	eor.w	r3, r3, #16
 80028f0:	82bb      	strh	r3, [r7, #20]
 80028f2:	8abb      	ldrh	r3, [r7, #20]
 80028f4:	f083 0320 	eor.w	r3, r3, #32
 80028f8:	82bb      	strh	r3, [r7, #20]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	441a      	add	r2, r3
 8002908:	8abb      	ldrh	r3, [r7, #20]
 800290a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800290e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800291a:	b29b      	uxth	r3, r3
 800291c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3790      	adds	r7, #144	@ 0x90
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	4613      	mov	r3, r2
 8002938:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	f003 0207 	and.w	r2, r3, #7
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	3310      	adds	r3, #16
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e009      	b.n	8002972 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800295e:	897a      	ldrh	r2, [r7, #10]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	80da      	strh	r2, [r3, #6]
 8002986:	e00b      	b.n	80029a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2201      	movs	r2, #1
 800298c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	b29a      	uxth	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b29a      	uxth	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e272      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8087 	beq.w	8002ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029cc:	4b92      	ldr	r3, [pc, #584]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d112      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5e>
 80029e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	4b89      	ldr	r3, [pc, #548]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d168      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e24c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x76>
 8002a14:	4b80      	ldr	r3, [pc, #512]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a7f      	ldr	r2, [pc, #508]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x98>
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b78      	ldr	r3, [pc, #480]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a77      	ldr	r2, [pc, #476]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0xbc>
 8002a4e:	4b72      	ldr	r3, [pc, #456]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a71      	ldr	r2, [pc, #452]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a68:	4b6b      	ldr	r3, [pc, #428]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b68      	ldr	r3, [pc, #416]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a67      	ldr	r2, [pc, #412]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7fd ff58 	bl	800093c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fd ff54 	bl	800093c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e200      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe4>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7fd ff44 	bl	800093c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fd ff40 	bl	800093c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1ec      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b53      	ldr	r3, [pc, #332]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x10c>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af2:	4b49      	ldr	r3, [pc, #292]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x18c>
 8002afe:	4b46      	ldr	r3, [pc, #280]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1c0      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4939      	ldr	r1, [pc, #228]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fd fef9 	bl	800093c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fd fef5 	bl	800093c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2d      	ldr	r3, [pc, #180]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4927      	ldr	r1, [pc, #156]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b26      	ldr	r3, [pc, #152]	@ (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fd fed8 	bl	800093c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fd fed4 	bl	800093c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e180      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d03a      	beq.n	8002c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7fd feb8 	bl	800093c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fd feb4 	bl	800093c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e160      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f000 fa9c 	bl	800312c <RCC_Delay>
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7fd fe9e 	bl	800093c <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c02:	e00f      	b.n	8002c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c04:	f7fd fe9a 	bl	800093c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d908      	bls.n	8002c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e146      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	42420000 	.word	0x42420000
 8002c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	4b92      	ldr	r3, [pc, #584]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e9      	bne.n	8002c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a6 	beq.w	8002d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b8b      	ldr	r3, [pc, #556]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b88      	ldr	r3, [pc, #544]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4a87      	ldr	r2, [pc, #540]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	61d3      	str	r3, [r2, #28]
 8002c5a:	4b85      	ldr	r3, [pc, #532]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b82      	ldr	r3, [pc, #520]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b7f      	ldr	r3, [pc, #508]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7fd fe5b 	bl	800093c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fd fe57 	bl	800093c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	@ 0x64
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e103      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b75      	ldr	r3, [pc, #468]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x312>
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e02d      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x334>
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a69      	ldr	r2, [pc, #420]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a66      	ldr	r2, [pc, #408]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x356>
 8002ce8:	4b61      	ldr	r3, [pc, #388]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4a60      	ldr	r2, [pc, #384]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6213      	str	r3, [r2, #32]
 8002cf4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002d02:	4b5b      	ldr	r3, [pc, #364]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a5a      	ldr	r2, [pc, #360]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	4b58      	ldr	r3, [pc, #352]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a57      	ldr	r2, [pc, #348]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7fd fe0b 	bl	800093c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd fe07 	bl	800093c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0b1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b4b      	ldr	r3, [pc, #300]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x37e>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fd fdf5 	bl	800093c <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fd fdf1 	bl	800093c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e09b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b40      	ldr	r3, [pc, #256]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8087 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d061      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d146      	bne.n	8002e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b33      	ldr	r3, [pc, #204]	@ (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fd fdc5 	bl	800093c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fd fdc1 	bl	800093c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e06d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dde:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4921      	ldr	r1, [pc, #132]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a19      	ldr	r1, [r3, #32]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	430b      	orrs	r3, r1
 8002e02:	491b      	ldr	r1, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fd fd95 	bl	800093c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fd fd91 	bl	800093c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e03d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46a>
 8002e34:	e035      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fd7e 	bl	800093c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fd fd7a 	bl	800093c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e026      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x498>
 8002e62:	e01e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e019      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_OscConfig+0x500>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0d0      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d910      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b67      	ldr	r3, [pc, #412]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4965      	ldr	r1, [pc, #404]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a52      	ldr	r2, [pc, #328]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d040      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e073      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4936      	ldr	r1, [pc, #216]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fd fccc 	bl	800093c <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fd fcc8 	bl	800093c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e053      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d210      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4922      	ldr	r1, [pc, #136]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302a:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1cc>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fc2a 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	08007ac8 	.word	0x08007ac8
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800309e:	4b1e      	ldr	r3, [pc, #120]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x30>
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x36>
 80030b2:	e027      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 80030b6:	613b      	str	r3, [r7, #16]
      break;
 80030b8:	e027      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030d2:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	0c5b      	lsrs	r3, r3, #17
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	4a11      	ldr	r2, [pc, #68]	@ (8003124 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	@ (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 80030e6:	fb03 f202 	mul.w	r2, r3, r2
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e004      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	613b      	str	r3, [r7, #16]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 8003106:	613b      	str	r3, [r7, #16]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	693b      	ldr	r3, [r7, #16]
}
 800310c:	4618      	mov	r0, r3
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	007a1200 	.word	0x007a1200
 8003120:	08007ad8 	.word	0x08007ad8
 8003124:	08007ae8 	.word	0x08007ae8
 8003128:	003d0900 	.word	0x003d0900

0800312c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003134:	4b0a      	ldr	r3, [pc, #40]	@ (8003160 <RCC_Delay+0x34>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <RCC_Delay+0x38>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a5b      	lsrs	r3, r3, #9
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003148:	bf00      	nop
  }
  while (Delay --);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	60fa      	str	r2, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <RCC_Delay+0x1c>
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	20000000 	.word	0x20000000
 8003164:	10624dd3 	.word	0x10624dd3

08003168 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d07d      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003184:	2300      	movs	r3, #0
 8003186:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003188:	4b4f      	ldr	r3, [pc, #316]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b4c      	ldr	r3, [pc, #304]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4a4b      	ldr	r2, [pc, #300]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319e:	61d3      	str	r3, [r2, #28]
 80031a0:	4b49      	ldr	r3, [pc, #292]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	4b46      	ldr	r3, [pc, #280]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d118      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031bc:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a42      	ldr	r2, [pc, #264]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c8:	f7fd fbb8 	bl	800093c <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	e008      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d0:	f7fd fbb4 	bl	800093c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e06d      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b3a      	ldr	r3, [pc, #232]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ee:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02e      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d027      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800320c:	4b2e      	ldr	r3, [pc, #184]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003214:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003216:	4b2e      	ldr	r3, [pc, #184]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800321c:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003222:	4a29      	ldr	r2, [pc, #164]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d014      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fd fb83 	bl	800093c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fb7f 	bl	800093c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e036      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ee      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325c:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4917      	ldr	r1, [pc, #92]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	4313      	orrs	r3, r2
 800326c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	4a13      	ldr	r2, [pc, #76]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800327e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800328c:	4b0e      	ldr	r3, [pc, #56]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	490b      	ldr	r1, [pc, #44]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032aa:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4904      	ldr	r1, [pc, #16]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	42420440 	.word	0x42420440

080032d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4638      	mov	r0, r7
 80032de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032fe:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003302:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003322:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003326:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	b29b      	uxth	r3, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	b29b      	uxth	r3, r3
 8003338:	4013      	ands	r3, r2
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	4638      	mov	r0, r7
 8003370:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b09d      	sub	sp, #116	@ 0x74
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80033c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	78db      	ldrb	r3, [r3, #3]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d81f      	bhi.n	8003412 <USB_ActivateEndpoint+0x72>
 80033d2:	a201      	add	r2, pc, #4	@ (adr r2, 80033d8 <USB_ActivateEndpoint+0x38>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	08003405 	.word	0x08003405
 80033e0:	0800341b 	.word	0x0800341b
 80033e4:	080033f7 	.word	0x080033f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80033e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80033ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80033f4:	e012      	b.n	800341c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80033f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80033fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80033fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003402:	e00b      	b.n	800341c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003404:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800340c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003410:	e004      	b.n	800341c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003418:	e000      	b.n	800341c <USB_ActivateEndpoint+0x7c>
      break;
 800341a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800342a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800342e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003454:	b29b      	uxth	r3, r3
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800346e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800347e:	b29b      	uxth	r3, r3
 8003480:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	7b1b      	ldrb	r3, [r3, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8178 	bne.w	800377c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8084 	beq.w	800359e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	011a      	lsls	r2, r3, #4
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	88db      	ldrh	r3, [r3, #6]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	827b      	strh	r3, [r7, #18]
 80034d8:	8a7b      	ldrh	r3, [r7, #18]
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01b      	beq.n	800351a <USB_ActivateEndpoint+0x17a>
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f8:	823b      	strh	r3, [r7, #16]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	441a      	add	r2, r3
 8003504:	8a3b      	ldrh	r3, [r7, #16]
 8003506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800350a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003512:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d020      	beq.n	8003564 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003538:	81bb      	strh	r3, [r7, #12]
 800353a:	89bb      	ldrh	r3, [r7, #12]
 800353c:	f083 0320 	eor.w	r3, r3, #32
 8003540:	81bb      	strh	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	89bb      	ldrh	r3, [r7, #12]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800355a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
 8003562:	e2d5      	b.n	8003b10 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800357a:	81fb      	strh	r3, [r7, #14]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	441a      	add	r2, r3
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800358c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003598:	b29b      	uxth	r3, r3
 800359a:	8013      	strh	r3, [r2, #0]
 800359c:	e2b8      	b.n	8003b10 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ae:	4413      	add	r3, r2
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	011a      	lsls	r2, r3, #4
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	88db      	ldrh	r3, [r3, #6]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e2:	4413      	add	r3, r2
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	011a      	lsls	r2, r3, #4
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	4413      	add	r3, r2
 80035f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003600:	b29a      	uxth	r2, r3
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b3e      	cmp	r3, #62	@ 0x3e
 800360c:	d91d      	bls.n	800364a <USB_ActivateEndpoint+0x2aa>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <USB_ActivateEndpoint+0x288>
 8003622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003624:	3b01      	subs	r3, #1
 8003626:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29a      	uxth	r2, r3
 800362e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003630:	b29b      	uxth	r3, r3
 8003632:	029b      	lsls	r3, r3, #10
 8003634:	b29b      	uxth	r3, r3
 8003636:	4313      	orrs	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003642:	b29a      	uxth	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	801a      	strh	r2, [r3, #0]
 8003648:	e026      	b.n	8003698 <USB_ActivateEndpoint+0x2f8>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <USB_ActivateEndpoint+0x2c8>
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003660:	b29a      	uxth	r2, r3
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e017      	b.n	8003698 <USB_ActivateEndpoint+0x2f8>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <USB_ActivateEndpoint+0x2e2>
 800367c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800367e:	3301      	adds	r3, #1
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800368a:	b29b      	uxth	r3, r3
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	b29b      	uxth	r3, r3
 8003690:	4313      	orrs	r3, r2
 8003692:	b29a      	uxth	r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80036a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80036a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01b      	beq.n	80036e8 <USB_ActivateEndpoint+0x348>
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c6:	843b      	strh	r3, [r7, #32]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	441a      	add	r2, r3
 80036d2:	8c3b      	ldrh	r3, [r7, #32]
 80036d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d124      	bne.n	800373a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003706:	83bb      	strh	r3, [r7, #28]
 8003708:	8bbb      	ldrh	r3, [r7, #28]
 800370a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800370e:	83bb      	strh	r3, [r7, #28]
 8003710:	8bbb      	ldrh	r3, [r7, #28]
 8003712:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003716:	83bb      	strh	r3, [r7, #28]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	441a      	add	r2, r3
 8003722:	8bbb      	ldrh	r3, [r7, #28]
 8003724:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003728:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003734:	b29b      	uxth	r3, r3
 8003736:	8013      	strh	r3, [r2, #0]
 8003738:	e1ea      	b.n	8003b10 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800374c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003750:	83fb      	strh	r3, [r7, #30]
 8003752:	8bfb      	ldrh	r3, [r7, #30]
 8003754:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003758:	83fb      	strh	r3, [r7, #30]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	8bfb      	ldrh	r3, [r7, #30]
 8003766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800376a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800376e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003776:	b29b      	uxth	r3, r3
 8003778:	8013      	strh	r3, [r2, #0]
 800377a:	e1c9      	b.n	8003b10 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	78db      	ldrb	r3, [r3, #3]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d11e      	bne.n	80037c2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	441a      	add	r2, r3
 80037a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80037ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037b4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80037b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037bc:	b29b      	uxth	r3, r3
 80037be:	8013      	strh	r3, [r2, #0]
 80037c0:	e01d      	b.n	80037fe <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80037d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80037ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003808:	b29b      	uxth	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800380e:	4413      	add	r3, r2
 8003810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	011a      	lsls	r2, r3, #4
 8003818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800381a:	4413      	add	r3, r2
 800381c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	891b      	ldrh	r3, [r3, #8]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	b29b      	uxth	r3, r3
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	657b      	str	r3, [r7, #84]	@ 0x54
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800383c:	b29b      	uxth	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003842:	4413      	add	r3, r2
 8003844:	657b      	str	r3, [r7, #84]	@ 0x54
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	011a      	lsls	r2, r3, #4
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	4413      	add	r3, r2
 8003850:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8003854:	653b      	str	r3, [r7, #80]	@ 0x50
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	895b      	ldrh	r3, [r3, #10]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003864:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 8093 	bne.w	8003996 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <USB_ActivateEndpoint+0x524>
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	441a      	add	r2, r3
 80038ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80038b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80038d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80038d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <USB_ActivateEndpoint+0x574>
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	441a      	add	r2, r3
 80038fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800390c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003910:	b29b      	uxth	r3, r3
 8003912:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	b29b      	uxth	r3, r3
 8003922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800392c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800392e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003932:	873b      	strh	r3, [r7, #56]	@ 0x38
 8003934:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003936:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800393a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003948:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800394c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800396e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003972:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800398c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003990:	b29b      	uxth	r3, r3
 8003992:	8013      	strh	r3, [r2, #0]
 8003994:	e0bc      	b.n	8003b10 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80039a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01d      	beq.n	80039ee <USB_ActivateEndpoint+0x64e>
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80039da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80039fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01d      	beq.n	8003a46 <USB_ActivateEndpoint+0x6a6>
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a20:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	78db      	ldrb	r3, [r3, #3]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d024      	beq.n	8003a98 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a64:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003a68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003a6c:	f083 0320 	eor.w	r3, r3, #32
 8003a70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	8013      	strh	r3, [r2, #0]
 8003a96:	e01d      	b.n	8003ad4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003b10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3774      	adds	r7, #116	@ 0x74
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b08d      	sub	sp, #52	@ 0x34
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	7b1b      	ldrb	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 808e 	bne.w	8003c50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d044      	beq.n	8003bc6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	81bb      	strh	r3, [r7, #12]
 8003b4a:	89bb      	ldrh	r3, [r7, #12]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <USB_DeactivateEndpoint+0x6c>
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6a:	817b      	strh	r3, [r7, #10]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	441a      	add	r2, r3
 8003b76:	897b      	ldrh	r3, [r7, #10]
 8003b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ba2:	813b      	strh	r3, [r7, #8]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	441a      	add	r2, r3
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	8013      	strh	r3, [r2, #0]
 8003bc4:	e192      	b.n	8003eec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	827b      	strh	r3, [r7, #18]
 8003bd4:	8a7b      	ldrh	r3, [r7, #18]
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01b      	beq.n	8003c16 <USB_DeactivateEndpoint+0xf6>
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf4:	823b      	strh	r3, [r7, #16]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	8a3b      	ldrh	r3, [r7, #16]
 8003c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2c:	81fb      	strh	r3, [r7, #14]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
 8003c4e:	e14d      	b.n	8003eec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 80a5 	bne.w	8003da4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	843b      	strh	r3, [r7, #32]
 8003c68:	8c3b      	ldrh	r3, [r7, #32]
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01b      	beq.n	8003caa <USB_DeactivateEndpoint+0x18a>
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c88:	83fb      	strh	r3, [r7, #30]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	441a      	add	r2, r3
 8003c94:	8bfb      	ldrh	r3, [r7, #30]
 8003c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	83bb      	strh	r3, [r7, #28]
 8003cb8:	8bbb      	ldrh	r3, [r7, #28]
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01b      	beq.n	8003cfa <USB_DeactivateEndpoint+0x1da>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd8:	837b      	strh	r3, [r7, #26]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	8b7b      	ldrh	r3, [r7, #26]
 8003ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cf2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	833b      	strh	r3, [r7, #24]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	441a      	add	r2, r3
 8003d1c:	8b3b      	ldrh	r3, [r7, #24]
 8003d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d48:	82fb      	strh	r3, [r7, #22]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	441a      	add	r2, r3
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d80:	82bb      	strh	r3, [r7, #20]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	441a      	add	r2, r3
 8003d8c:	8abb      	ldrh	r3, [r7, #20]
 8003d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
 8003da2:	e0a3      	b.n	8003eec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003db2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <USB_DeactivateEndpoint+0x2d4>
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003e02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <USB_DeactivateEndpoint+0x324>
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e22:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e92:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003edc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3734      	adds	r7, #52	@ 0x34
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b0c2      	sub	sp, #264	@ 0x108
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f06:	6018      	str	r0, [r3, #0]
 8003f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f10:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	f040 86b7 	bne.w	8004c92 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d908      	bls.n	8003f52 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f50:	e007      	b.n	8003f62 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	7b1b      	ldrb	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d13a      	bne.n	8003fe8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6959      	ldr	r1, [r3, #20]
 8003f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	88da      	ldrh	r2, [r3, #6]
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003f94:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003f98:	6800      	ldr	r0, [r0, #0]
 8003f9a:	f001 fc9c 	bl	80058d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	011a      	lsls	r2, r3, #4
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	f000 be1f 	b.w	8004c26 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78db      	ldrb	r3, [r3, #3]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	f040 8462 	bne.w	80048be <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800400a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	f240 83df 	bls.w	80047d6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800401c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800403a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	441a      	add	r2, r3
 800405c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004068:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800406c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004070:	b29b      	uxth	r3, r3
 8004072:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004074:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004078:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004084:	1ad2      	subs	r2, r2, r3
 8004086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800408a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 81c7 	beq.w	8004448 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	785b      	ldrb	r3, [r3, #1]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d177      	bne.n	80041c6 <USB_EPStartXfer+0x2ce>
 80040d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	4413      	add	r3, r2
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	011a      	lsls	r2, r3, #4
 8004108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410a:	4413      	add	r3, r2
 800410c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411c:	b29a      	uxth	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004126:	2b3e      	cmp	r3, #62	@ 0x3e
 8004128:	d921      	bls.n	800416e <USB_EPStartXfer+0x276>
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <USB_EPStartXfer+0x252>
 8004140:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004144:	3b01      	subs	r3, #1
 8004146:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004154:	b29b      	uxth	r3, r3
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	b29b      	uxth	r3, r3
 800415a:	4313      	orrs	r3, r2
 800415c:	b29b      	uxth	r3, r3
 800415e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004166:	b29a      	uxth	r2, r3
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	e050      	b.n	8004210 <USB_EPStartXfer+0x318>
 800416e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <USB_EPStartXfer+0x294>
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004184:	b29a      	uxth	r2, r3
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	e041      	b.n	8004210 <USB_EPStartXfer+0x318>
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <USB_EPStartXfer+0x2b4>
 80041a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80041a6:	3301      	adds	r3, #1
 80041a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	801a      	strh	r2, [r3, #0]
 80041c4:	e024      	b.n	8004210 <USB_EPStartXfer+0x318>
 80041c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d11c      	bne.n	8004210 <USB_EPStartXfer+0x318>
 80041d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	4413      	add	r3, r2
 80041ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80041ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	011a      	lsls	r2, r3, #4
 80041fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fe:	4413      	add	r3, r2
 8004200:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420a:	b29a      	uxth	r2, r3
 800420c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	895b      	ldrh	r3, [r3, #10]
 800421c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6959      	ldr	r1, [r3, #20]
 800422c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004230:	b29b      	uxth	r3, r3
 8004232:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004236:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800423a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800423e:	6800      	ldr	r0, [r0, #0]
 8004240:	f001 fb49 	bl	80058d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004254:	441a      	add	r2, r3
 8004256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800425a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	429a      	cmp	r2, r3
 800427c:	d90f      	bls.n	800429e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800427e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	621a      	str	r2, [r3, #32]
 800429c:	e00e      	b.n	80042bc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800429e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80042ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2200      	movs	r2, #0
 80042ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d177      	bne.n	80043bc <USB_EPStartXfer+0x4c4>
 80042cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4413      	add	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	011a      	lsls	r2, r3, #4
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4413      	add	r3, r2
 8004302:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004312:	b29a      	uxth	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431c:	2b3e      	cmp	r3, #62	@ 0x3e
 800431e:	d921      	bls.n	8004364 <USB_EPStartXfer+0x46c>
 8004320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432e:	f003 031f 	and.w	r3, r3, #31
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <USB_EPStartXfer+0x448>
 8004336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433a:	3b01      	subs	r3, #1
 800433c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29a      	uxth	r2, r3
 8004346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434a:	b29b      	uxth	r3, r3
 800434c:	029b      	lsls	r3, r3, #10
 800434e:	b29b      	uxth	r3, r3
 8004350:	4313      	orrs	r3, r2
 8004352:	b29b      	uxth	r3, r3
 8004354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435c:	b29a      	uxth	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	e056      	b.n	8004412 <USB_EPStartXfer+0x51a>
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <USB_EPStartXfer+0x48a>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437a:	b29a      	uxth	r2, r3
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	e047      	b.n	8004412 <USB_EPStartXfer+0x51a>
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800438c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <USB_EPStartXfer+0x4aa>
 8004398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439c:	3301      	adds	r3, #1
 800439e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	029b      	lsls	r3, r3, #10
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	e02a      	b.n	8004412 <USB_EPStartXfer+0x51a>
 80043bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d122      	bne.n	8004412 <USB_EPStartXfer+0x51a>
 80043cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	623b      	str	r3, [r7, #32]
 80043d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	4413      	add	r3, r2
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	4413      	add	r3, r2
 8004402:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440c:	b29a      	uxth	r2, r3
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	891b      	ldrh	r3, [r3, #8]
 800441e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6959      	ldr	r1, [r3, #20]
 800442e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004432:	b29b      	uxth	r3, r3
 8004434:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004438:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800443c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004440:	6800      	ldr	r0, [r0, #0]
 8004442:	f001 fa48 	bl	80058d6 <USB_WritePMA>
 8004446:	e3ee      	b.n	8004c26 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800444c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	785b      	ldrb	r3, [r3, #1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d177      	bne.n	8004548 <USB_EPStartXfer+0x650>
 8004458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800445c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004468:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004478:	4413      	add	r3, r2
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800447c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	011a      	lsls	r2, r3, #4
 800448a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800448c:	4413      	add	r3, r2
 800448e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004492:	647b      	str	r3, [r7, #68]	@ 0x44
 8004494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a2:	801a      	strh	r2, [r3, #0]
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80044aa:	d921      	bls.n	80044f0 <USB_EPStartXfer+0x5f8>
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d104      	bne.n	80044cc <USB_EPStartXfer+0x5d4>
 80044c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80044cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	029b      	lsls	r3, r3, #10
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4313      	orrs	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e056      	b.n	800459e <USB_EPStartXfer+0x6a6>
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <USB_EPStartXfer+0x616>
 80044f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004506:	b29a      	uxth	r2, r3
 8004508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e047      	b.n	800459e <USB_EPStartXfer+0x6a6>
 800450e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <USB_EPStartXfer+0x636>
 8004524:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004528:	3301      	adds	r3, #1
 800452a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800452e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29a      	uxth	r2, r3
 8004534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004538:	b29b      	uxth	r3, r3
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	b29b      	uxth	r3, r3
 800453e:	4313      	orrs	r3, r2
 8004540:	b29a      	uxth	r2, r3
 8004542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	e02a      	b.n	800459e <USB_EPStartXfer+0x6a6>
 8004548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800454c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d122      	bne.n	800459e <USB_EPStartXfer+0x6a6>
 8004558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800455c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	653b      	str	r3, [r7, #80]	@ 0x50
 8004564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004578:	4413      	add	r3, r2
 800457a:	653b      	str	r3, [r7, #80]	@ 0x50
 800457c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	011a      	lsls	r2, r3, #4
 800458a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800458c:	4413      	add	r3, r2
 800458e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	b29a      	uxth	r2, r3
 800459a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800459e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	891b      	ldrh	r3, [r3, #8]
 80045aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6959      	ldr	r1, [r3, #20]
 80045ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80045c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80045c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80045cc:	6800      	ldr	r0, [r0, #0]
 80045ce:	f001 f982 	bl	80058d6 <USB_WritePMA>
            ep->xfer_buff += len;
 80045d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e2:	441a      	add	r2, r3
 80045e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80045f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	429a      	cmp	r2, r3
 800460a:	d90f      	bls.n	800462c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800460c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1a      	ldr	r2, [r3, #32]
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461c:	1ad2      	subs	r2, r2, r3
 800461e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	621a      	str	r2, [r3, #32]
 800462a:	e00e      	b.n	800464a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800462c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800463c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800464a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800464e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	643b      	str	r3, [r7, #64]	@ 0x40
 8004656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800465a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d177      	bne.n	8004756 <USB_EPStartXfer+0x85e>
 8004666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800466a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004680:	b29b      	uxth	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	4413      	add	r3, r2
 8004688:	63bb      	str	r3, [r7, #56]	@ 0x38
 800468a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800468e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	011a      	lsls	r2, r3, #4
 8004698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469a:	4413      	add	r3, r2
 800469c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80046b8:	d921      	bls.n	80046fe <USB_EPStartXfer+0x806>
 80046ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <USB_EPStartXfer+0x7e2>
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	3b01      	subs	r3, #1
 80046d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29a      	uxth	r2, r3
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	e050      	b.n	80047a0 <USB_EPStartXfer+0x8a8>
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <USB_EPStartXfer+0x824>
 8004706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004714:	b29a      	uxth	r2, r3
 8004716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	e041      	b.n	80047a0 <USB_EPStartXfer+0x8a8>
 800471c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d004      	beq.n	800473c <USB_EPStartXfer+0x844>
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	3301      	adds	r3, #1
 8004738:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29a      	uxth	r2, r3
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004746:	b29b      	uxth	r3, r3
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	b29b      	uxth	r3, r3
 800474c:	4313      	orrs	r3, r2
 800474e:	b29a      	uxth	r2, r3
 8004750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e024      	b.n	80047a0 <USB_EPStartXfer+0x8a8>
 8004756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800475a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d11c      	bne.n	80047a0 <USB_EPStartXfer+0x8a8>
 8004766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800476a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800477a:	4413      	add	r3, r2
 800477c:	643b      	str	r3, [r7, #64]	@ 0x40
 800477e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	011a      	lsls	r2, r3, #4
 800478c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800478e:	4413      	add	r3, r2
 8004790:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800479a:	b29a      	uxth	r2, r3
 800479c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	895b      	ldrh	r3, [r3, #10]
 80047ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6959      	ldr	r1, [r3, #20]
 80047bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80047c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80047ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80047ce:	6800      	ldr	r0, [r0, #0]
 80047d0:	f001 f881 	bl	80058d6 <USB_WritePMA>
 80047d4:	e227      	b.n	8004c26 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80047d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80047e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800481e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800484e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004852:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004862:	4413      	add	r3, r2
 8004864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800486a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	011a      	lsls	r2, r3, #4
 8004874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004876:	4413      	add	r3, r2
 8004878:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800487c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800487e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004882:	b29a      	uxth	r2, r3
 8004884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004886:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800488c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	891b      	ldrh	r3, [r3, #8]
 8004894:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800489c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6959      	ldr	r1, [r3, #20]
 80048a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80048ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80048b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80048b6:	6800      	ldr	r0, [r0, #0]
 80048b8:	f001 f80d 	bl	80058d6 <USB_WritePMA>
 80048bc:	e1b3      	b.n	8004c26 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80048be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80c6 	beq.w	8004a90 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	785b      	ldrb	r3, [r3, #1]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d177      	bne.n	8004a10 <USB_EPStartXfer+0xb18>
 8004920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800492c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800493a:	b29b      	uxth	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004940:	4413      	add	r3, r2
 8004942:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	011a      	lsls	r2, r3, #4
 8004952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004954:	4413      	add	r3, r2
 8004956:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800495a:	667b      	str	r3, [r7, #100]	@ 0x64
 800495c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	b29a      	uxth	r2, r3
 8004968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004970:	2b3e      	cmp	r3, #62	@ 0x3e
 8004972:	d921      	bls.n	80049b8 <USB_EPStartXfer+0xac0>
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800497e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <USB_EPStartXfer+0xa9c>
 800498a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800498e:	3b01      	subs	r3, #1
 8004990:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29a      	uxth	r2, r3
 800499a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e050      	b.n	8004a5a <USB_EPStartXfer+0xb62>
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <USB_EPStartXfer+0xade>
 80049c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	e041      	b.n	8004a5a <USB_EPStartXfer+0xb62>
 80049d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <USB_EPStartXfer+0xafe>
 80049ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80049f0:	3301      	adds	r3, #1
 80049f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	029b      	lsls	r3, r3, #10
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	e024      	b.n	8004a5a <USB_EPStartXfer+0xb62>
 8004a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d11c      	bne.n	8004a5a <USB_EPStartXfer+0xb62>
 8004a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a34:	4413      	add	r3, r2
 8004a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	011a      	lsls	r2, r3, #4
 8004a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	895b      	ldrh	r3, [r3, #10]
 8004a66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6959      	ldr	r1, [r3, #20]
 8004a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004a80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a88:	6800      	ldr	r0, [r0, #0]
 8004a8a:	f000 ff24 	bl	80058d6 <USB_WritePMA>
 8004a8e:	e0ca      	b.n	8004c26 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d177      	bne.n	8004b90 <USB_EPStartXfer+0xc98>
 8004aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	4413      	add	r3, r2
 8004ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	011a      	lsls	r2, r3, #4
 8004ad2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ada:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aea:	801a      	strh	r2, [r3, #0]
 8004aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004af2:	d921      	bls.n	8004b38 <USB_EPStartXfer+0xc40>
 8004af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <USB_EPStartXfer+0xc1c>
 8004b0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	029b      	lsls	r3, r3, #10
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	4313      	orrs	r3, r2
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b34:	801a      	strh	r2, [r3, #0]
 8004b36:	e05c      	b.n	8004bf2 <USB_EPStartXfer+0xcfa>
 8004b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <USB_EPStartXfer+0xc5e>
 8004b40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	e04d      	b.n	8004bf2 <USB_EPStartXfer+0xcfa>
 8004b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <USB_EPStartXfer+0xc7e>
 8004b6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b70:	3301      	adds	r3, #1
 8004b72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	029b      	lsls	r3, r3, #10
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	4313      	orrs	r3, r2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8c:	801a      	strh	r2, [r3, #0]
 8004b8e:	e030      	b.n	8004bf2 <USB_EPStartXfer+0xcfa>
 8004b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	785b      	ldrb	r3, [r3, #1]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d128      	bne.n	8004bf2 <USB_EPStartXfer+0xcfa>
 8004ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	011a      	lsls	r2, r3, #4
 8004bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bdc:	4413      	add	r3, r2
 8004bde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004be2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bf0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	891b      	ldrh	r3, [r3, #8]
 8004bfe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6959      	ldr	r1, [r3, #20]
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c20:	6800      	ldr	r0, [r0, #0]
 8004c22:	f000 fe58 	bl	80058d6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c4c:	817b      	strh	r3, [r7, #10]
 8004c4e:	897b      	ldrh	r3, [r7, #10]
 8004c50:	f083 0310 	eor.w	r3, r3, #16
 8004c54:	817b      	strh	r3, [r7, #10]
 8004c56:	897b      	ldrh	r3, [r7, #10]
 8004c58:	f083 0320 	eor.w	r3, r3, #32
 8004c5c:	817b      	strh	r3, [r7, #10]
 8004c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	897b      	ldrh	r3, [r7, #10]
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
 8004c8e:	f000 bcde 	b.w	800564e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	7b1b      	ldrb	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 80bb 	bne.w	8004e1a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d917      	bls.n	8004cf0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	619a      	str	r2, [r3, #24]
 8004cee:	e00e      	b.n	8004d0e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8004d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d32:	4413      	add	r3, r2
 8004d34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	011a      	lsls	r2, r3, #4
 8004d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d6e:	d924      	bls.n	8004dba <USB_EPStartXfer+0xec2>
 8004d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <USB_EPStartXfer+0xe98>
 8004d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	f000 bc10 	b.w	80055da <USB_EPStartXfer+0x16e2>
 8004dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <USB_EPStartXfer+0xee4>
 8004dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e3fe      	b.n	80055da <USB_EPStartXfer+0x16e2>
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <USB_EPStartXfer+0xf04>
 8004df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004df6:	3301      	adds	r3, #1
 8004df8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	e3df      	b.n	80055da <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	f040 8218 	bne.w	800525c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 809d 	bne.w	8004f78 <USB_EPStartXfer+0x1080>
 8004e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e62:	4413      	add	r3, r2
 8004e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ea6:	d92b      	bls.n	8004f00 <USB_EPStartXfer+0x1008>
 8004ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d104      	bne.n	8004ed8 <USB_EPStartXfer+0xfe0>
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	e070      	b.n	8004fe2 <USB_EPStartXfer+0x10ea>
 8004f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <USB_EPStartXfer+0x1032>
 8004f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e05b      	b.n	8004fe2 <USB_EPStartXfer+0x10ea>
 8004f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <USB_EPStartXfer+0x1062>
 8004f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f54:	3301      	adds	r3, #1
 8004f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	029b      	lsls	r3, r3, #10
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e034      	b.n	8004fe2 <USB_EPStartXfer+0x10ea>
 8004f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d12c      	bne.n	8004fe2 <USB_EPStartXfer+0x10ea>
 8004f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fac:	4413      	add	r3, r2
 8004fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	011a      	lsls	r2, r3, #4
 8004fc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 809d 	bne.w	800513c <USB_EPStartXfer+0x1244>
 8005002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005026:	4413      	add	r3, r2
 8005028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800502c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	011a      	lsls	r2, r3, #4
 800503a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800503e:	4413      	add	r3, r2
 8005040:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005048:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005054:	b29a      	uxth	r2, r3
 8005056:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b3e      	cmp	r3, #62	@ 0x3e
 800506a:	d92b      	bls.n	80050c4 <USB_EPStartXfer+0x11cc>
 800506c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800507e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2b00      	cmp	r3, #0
 8005090:	d104      	bne.n	800509c <USB_EPStartXfer+0x11a4>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005096:	3b01      	subs	r3, #1
 8005098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800509c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e069      	b.n	8005198 <USB_EPStartXfer+0x12a0>
 80050c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <USB_EPStartXfer+0x11f6>
 80050d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050ea:	801a      	strh	r2, [r3, #0]
 80050ec:	e054      	b.n	8005198 <USB_EPStartXfer+0x12a0>
 80050ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <USB_EPStartXfer+0x1226>
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005118:	3301      	adds	r3, #1
 800511a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800511e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29a      	uxth	r2, r3
 8005126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512a:	b29b      	uxth	r3, r3
 800512c:	029b      	lsls	r3, r3, #10
 800512e:	b29b      	uxth	r3, r3
 8005130:	4313      	orrs	r3, r2
 8005132:	b29a      	uxth	r2, r3
 8005134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	e02d      	b.n	8005198 <USB_EPStartXfer+0x12a0>
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d125      	bne.n	8005198 <USB_EPStartXfer+0x12a0>
 800514c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005162:	4413      	add	r3, r2
 8005164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800516c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011a      	lsls	r2, r3, #4
 8005176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800517a:	4413      	add	r3, r2
 800517c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005180:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	b29a      	uxth	r2, r3
 8005192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005196:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8218 	beq.w	80055da <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <USB_EPStartXfer+0x12ea>
 80051d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 81f5 	bne.w	80055da <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80051f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 81ee 	bne.w	80055da <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80051fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005224:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800524a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005252:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005256:	b29b      	uxth	r3, r3
 8005258:	8013      	strh	r3, [r2, #0]
 800525a:	e1be      	b.n	80055da <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800525c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	2b01      	cmp	r3, #1
 800526a:	f040 81b4 	bne.w	80055d6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800526e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	429a      	cmp	r2, r3
 8005288:	d917      	bls.n	80052ba <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800528a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800529a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	619a      	str	r2, [r3, #24]
 80052b8:	e00e      	b.n	80052d8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80052ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 8085 	bne.w	80053f4 <USB_EPStartXfer+0x14fc>
 80052ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800530e:	4413      	add	r3, r2
 8005310:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	011a      	lsls	r2, r3, #4
 8005322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005326:	4413      	add	r3, r2
 8005328:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800532c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533c:	b29a      	uxth	r2, r3
 800533e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005348:	2b3e      	cmp	r3, #62	@ 0x3e
 800534a:	d923      	bls.n	8005394 <USB_EPStartXfer+0x149c>
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <USB_EPStartXfer+0x1474>
 8005362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005366:	3b01      	subs	r3, #1
 8005368:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800536c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29a      	uxth	r2, r3
 8005374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005378:	b29b      	uxth	r3, r3
 800537a:	029b      	lsls	r3, r3, #10
 800537c:	b29b      	uxth	r3, r3
 800537e:	4313      	orrs	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e060      	b.n	8005456 <USB_EPStartXfer+0x155e>
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10c      	bne.n	80053b6 <USB_EPStartXfer+0x14be>
 800539c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e04f      	b.n	8005456 <USB_EPStartXfer+0x155e>
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <USB_EPStartXfer+0x14de>
 80053cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d0:	3301      	adds	r3, #1
 80053d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29a      	uxth	r2, r3
 80053de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	029b      	lsls	r3, r3, #10
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e030      	b.n	8005456 <USB_EPStartXfer+0x155e>
 80053f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d128      	bne.n	8005456 <USB_EPStartXfer+0x155e>
 8005404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005428:	4413      	add	r3, r2
 800542a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800542e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	011a      	lsls	r2, r3, #4
 800543c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005440:	4413      	add	r3, r2
 8005442:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005446:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800544a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544e:	b29a      	uxth	r2, r3
 8005450:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 8085 	bne.w	8005580 <USB_EPStartXfer+0x1688>
 8005476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800549a:	4413      	add	r3, r2
 800549c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	011a      	lsls	r2, r3, #4
 80054ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80054b2:	4413      	add	r3, r2
 80054b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80054d6:	d923      	bls.n	8005520 <USB_EPStartXfer+0x1628>
 80054d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <USB_EPStartXfer+0x1600>
 80054ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054f2:	3b01      	subs	r3, #1
 80054f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005504:	b29b      	uxth	r3, r3
 8005506:	029b      	lsls	r3, r3, #10
 8005508:	b29b      	uxth	r3, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005516:	b29a      	uxth	r2, r3
 8005518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e05c      	b.n	80055da <USB_EPStartXfer+0x16e2>
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10c      	bne.n	8005542 <USB_EPStartXfer+0x164a>
 8005528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	e04b      	b.n	80055da <USB_EPStartXfer+0x16e2>
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <USB_EPStartXfer+0x166a>
 8005558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800555c:	3301      	adds	r3, #1
 800555e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29a      	uxth	r2, r3
 800556a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800556e:	b29b      	uxth	r3, r3
 8005570:	029b      	lsls	r3, r3, #10
 8005572:	b29b      	uxth	r3, r3
 8005574:	4313      	orrs	r3, r2
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e02c      	b.n	80055da <USB_EPStartXfer+0x16e2>
 8005580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d124      	bne.n	80055da <USB_EPStartXfer+0x16e2>
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055a6:	4413      	add	r3, r2
 80055a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	011a      	lsls	r2, r3, #4
 80055ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055be:	4413      	add	r3, r2
 80055c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	e001      	b.n	80055da <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e03a      	b.n	8005650 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005600:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005604:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005608:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800560c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005610:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005614:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005618:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800561c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005682:	81bb      	strh	r3, [r7, #12]
 8005684:	89bb      	ldrh	r3, [r7, #12]
 8005686:	f083 0310 	eor.w	r3, r3, #16
 800568a:	81bb      	strh	r3, [r7, #12]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	89bb      	ldrh	r3, [r7, #12]
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]
 80056ac:	e01f      	b.n	80056ee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c4:	81fb      	strh	r3, [r7, #14]
 80056c6:	89fb      	ldrh	r3, [r7, #14]
 80056c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80056cc:	81fb      	strh	r3, [r7, #14]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	7b1b      	ldrb	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 809d 	bne.w	8005848 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d04c      	beq.n	80057b0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	823b      	strh	r3, [r7, #16]
 8005724:	8a3b      	ldrh	r3, [r7, #16]
 8005726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01b      	beq.n	8005766 <USB_EPClearStall+0x6c>
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005744:	81fb      	strh	r3, [r7, #14]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800575e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	78db      	ldrb	r3, [r3, #3]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d06c      	beq.n	8005848 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005784:	81bb      	strh	r3, [r7, #12]
 8005786:	89bb      	ldrh	r3, [r7, #12]
 8005788:	f083 0320 	eor.w	r3, r3, #32
 800578c:	81bb      	strh	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	441a      	add	r2, r3
 8005798:	89bb      	ldrh	r3, [r7, #12]
 800579a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800579e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	8013      	strh	r3, [r2, #0]
 80057ae:	e04b      	b.n	8005848 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	82fb      	strh	r3, [r7, #22]
 80057be:	8afb      	ldrh	r3, [r7, #22]
 80057c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <USB_EPClearStall+0x106>
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057de:	82bb      	strh	r3, [r7, #20]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	8abb      	ldrh	r3, [r7, #20]
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	827b      	strh	r3, [r7, #18]
 8005818:	8a7b      	ldrh	r3, [r7, #18]
 800581a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800581e:	827b      	strh	r3, [r7, #18]
 8005820:	8a7b      	ldrh	r3, [r7, #18]
 8005822:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005826:	827b      	strh	r3, [r7, #18]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8a7b      	ldrh	r3, [r7, #18]
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d103      	bne.n	800586e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	bc80      	pop	{r7}
 80058a0:	4770      	bx	lr

080058a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b08b      	sub	sp, #44	@ 0x2c
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	4611      	mov	r1, r2
 80058e2:	461a      	mov	r2, r3
 80058e4:	460b      	mov	r3, r1
 80058e6:	80fb      	strh	r3, [r7, #6]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058ec:	88bb      	ldrh	r3, [r7, #4]
 80058ee:	3301      	adds	r3, #1
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	005a      	lsls	r2, r3, #1
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005908:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
 800590e:	e01f      	b.n	8005950 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	3301      	adds	r3, #1
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	b21b      	sxth	r3, r3
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	b21a      	sxth	r2, r3
 8005922:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005926:	4313      	orrs	r3, r2
 8005928:	b21b      	sxth	r3, r3
 800592a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	8a7a      	ldrh	r2, [r7, #18]
 8005930:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	3302      	adds	r3, #2
 8005936:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	3302      	adds	r3, #2
 800593c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3301      	adds	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	3b01      	subs	r3, #1
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1dc      	bne.n	8005910 <USB_WritePMA+0x3a>
  }
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	372c      	adds	r7, #44	@ 0x2c
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005962:	b480      	push	{r7}
 8005964:	b08b      	sub	sp, #44	@ 0x2c
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	4611      	mov	r1, r2
 800596e:	461a      	mov	r2, r3
 8005970:	460b      	mov	r3, r1
 8005972:	80fb      	strh	r3, [r7, #6]
 8005974:	4613      	mov	r3, r2
 8005976:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005978:	88bb      	ldrh	r3, [r7, #4]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	b29b      	uxth	r3, r3
 800597e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	005a      	lsls	r2, r3, #1
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005994:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
 800599a:	e01b      	b.n	80059d4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	3302      	adds	r3, #2
 80059a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	3301      	adds	r3, #1
 80059b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	3302      	adds	r3, #2
 80059cc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	3b01      	subs	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e0      	bne.n	800599c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80059da:	88bb      	ldrh	r3, [r7, #4]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	701a      	strb	r2, [r3, #0]
  }
}
 80059f6:	bf00      	nop
 80059f8:	372c      	adds	r7, #44	@ 0x2c
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7c1b      	ldrb	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d115      	bne.n	8005a44 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	2181      	movs	r1, #129	@ 0x81
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 fe82 	bl	800772a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a30:	2202      	movs	r2, #2
 8005a32:	2101      	movs	r1, #1
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 fe78 	bl	800772a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8005a42:	e012      	b.n	8005a6a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a44:	2340      	movs	r3, #64	@ 0x40
 8005a46:	2202      	movs	r2, #2
 8005a48:	2181      	movs	r1, #129	@ 0x81
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 fe6d 	bl	800772a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a56:	2340      	movs	r3, #64	@ 0x40
 8005a58:	2202      	movs	r2, #2
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 fe64 	bl	800772a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a6a:	2308      	movs	r3, #8
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	2182      	movs	r1, #130	@ 0x82
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 fe5a 	bl	800772a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005a80:	f001 ff7a 	bl	8007978 <USBD_static_malloc>
 8005a84:	4602      	mov	r2, r0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e026      	b.n	8005aea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aa2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7c1b      	ldrb	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 ff19 	bl	800790a <USBD_LL_PrepareReceive>
 8005ad8:	e007      	b.n	8005aea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ae0:	2340      	movs	r3, #64	@ 0x40
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 ff10 	bl	800790a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b04:	2181      	movs	r1, #129	@ 0x81
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fe35 	bl	8007776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b12:	2101      	movs	r1, #1
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f001 fe2e 	bl	8007776 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b22:	2182      	movs	r1, #130	@ 0x82
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fe26 	bl	8007776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 ff20 	bl	8007990 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b72:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d039      	beq.n	8005c00 <USBD_CDC_Setup+0x9e>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d17f      	bne.n	8005c90 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	88db      	ldrh	r3, [r3, #6]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d029      	beq.n	8005bec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da11      	bge.n	8005bc6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005bae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	88d2      	ldrh	r2, [r2, #6]
 8005bb4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bb6:	6939      	ldr	r1, [r7, #16]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	88db      	ldrh	r3, [r3, #6]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 fa06 	bl	8006fd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005bc4:	e06b      	b.n	8005c9e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	785a      	ldrb	r2, [r3, #1]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	88db      	ldrh	r3, [r3, #6]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005bdc:	6939      	ldr	r1, [r7, #16]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88db      	ldrh	r3, [r3, #6]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fa21 	bl	800702c <USBD_CtlPrepareRx>
      break;
 8005bea:	e058      	b.n	8005c9e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	7850      	ldrb	r0, [r2, #1]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	4798      	blx	r3
      break;
 8005bfe:	e04e      	b.n	8005c9e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b0b      	cmp	r3, #11
 8005c06:	d02e      	beq.n	8005c66 <USBD_CDC_Setup+0x104>
 8005c08:	2b0b      	cmp	r3, #11
 8005c0a:	dc38      	bgt.n	8005c7e <USBD_CDC_Setup+0x11c>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <USBD_CDC_Setup+0xb4>
 8005c10:	2b0a      	cmp	r3, #10
 8005c12:	d014      	beq.n	8005c3e <USBD_CDC_Setup+0xdc>
 8005c14:	e033      	b.n	8005c7e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d107      	bne.n	8005c30 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	2202      	movs	r2, #2
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f9d1 	bl	8006fd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c2e:	e02e      	b.n	8005c8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f962 	bl	8006efc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c3c:	e027      	b.n	8005c8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d107      	bne.n	8005c58 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c48:	f107 030f 	add.w	r3, r7, #15
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 f9bd 	bl	8006fd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c56:	e01a      	b.n	8005c8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 f94e 	bl	8006efc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c60:	2302      	movs	r3, #2
 8005c62:	75fb      	strb	r3, [r7, #23]
          break;
 8005c64:	e013      	b.n	8005c8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d00d      	beq.n	8005c8c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f942 	bl	8006efc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c7c:	e006      	b.n	8005c8c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f93b 	bl	8006efc <USBD_CtlError>
          ret = USBD_FAIL;
 8005c86:	2302      	movs	r3, #2
 8005c88:	75fb      	strb	r3, [r7, #23]
          break;
 8005c8a:	e000      	b.n	8005c8e <USBD_CDC_Setup+0x12c>
          break;
 8005c8c:	bf00      	nop
      }
      break;
 8005c8e:	e006      	b.n	8005c9e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f932 	bl	8006efc <USBD_CtlError>
      ret = USBD_FAIL;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9c:	bf00      	nop
  }

  return ret;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005cc2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d03a      	beq.n	8005d44 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	331c      	adds	r3, #28
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d029      	beq.n	8005d38 <USBD_CDC_DataIn+0x90>
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	331c      	adds	r3, #28
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	78f9      	ldrb	r1, [r7, #3]
 8005cf8:	68b8      	ldr	r0, [r7, #8]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4403      	add	r3, r0
 8005d04:	3320      	adds	r3, #32
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d0c:	fb01 f303 	mul.w	r3, r1, r3
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d110      	bne.n	8005d38 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	331c      	adds	r3, #28
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d2a:	78f9      	ldrb	r1, [r7, #3]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2200      	movs	r2, #0
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 fdc7 	bl	80078c4 <USBD_LL_Transmit>
 8005d36:	e003      	b.n	8005d40 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	e000      	b.n	8005d46 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005d44:	2302      	movs	r3, #2
  }
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fdf2 	bl	8007950 <USBD_LL_GetRxDataSize>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00d      	beq.n	8005d9a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005d92:	4611      	mov	r1, r2
 8005d94:	4798      	blx	r3

    return USBD_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e000      	b.n	8005d9c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d9a:	2302      	movs	r3, #2
  }
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d014      	beq.n	8005de8 <USBD_CDC_EP0_RxReady+0x44>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005dc4:	2bff      	cmp	r3, #255	@ 0xff
 8005dc6:	d00f      	beq.n	8005de8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005dd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	22ff      	movs	r2, #255	@ 0xff
 8005de4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2243      	movs	r2, #67	@ 0x43
 8005e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e02:	4b03      	ldr	r3, [pc, #12]	@ (8005e10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000094 	.word	0x20000094

08005e14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2243      	movs	r2, #67	@ 0x43
 8005e20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e22:	4b03      	ldr	r3, [pc, #12]	@ (8005e30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000050 	.word	0x20000050

08005e34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2243      	movs	r2, #67	@ 0x43
 8005e40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e42:	4b03      	ldr	r3, [pc, #12]	@ (8005e50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	200000d8 	.word	0x200000d8

08005e54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	220a      	movs	r2, #10
 8005e60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e62:	4b03      	ldr	r3, [pc, #12]	@ (8005e70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01c      	beq.n	8005f4c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d115      	bne.n	8005f48 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2181      	movs	r1, #129	@ 0x81
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 fcc0 	bl	80078c4 <USBD_LL_Transmit>

      return USBD_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e002      	b.n	8005f4e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005f4c:	2302      	movs	r3, #2
  }
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d017      	beq.n	8005fa0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7c1b      	ldrb	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f82:	2101      	movs	r1, #1
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 fcc0 	bl	800790a <USBD_LL_PrepareReceive>
 8005f8a:	e007      	b.n	8005f9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f92:	2340      	movs	r3, #64	@ 0x40
 8005f94:	2101      	movs	r1, #1
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 fcb7 	bl	800790a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e000      	b.n	8005fa2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005fa0:	2302      	movs	r3, #2
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e01a      	b.n	8005ff8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	79fa      	ldrb	r2, [r7, #7]
 8005fee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f001 fb25 	bl	8007640 <USBD_LL_Init>

  return USBD_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e001      	b.n	8006026 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006022:	2302      	movs	r3, #2
 8006024:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006026:	7bfb      	ldrb	r3, [r7, #15]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fb5a 	bl	80076f4 <USBD_LL_Start>

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800606a:	2302      	movs	r3, #2
 800606c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00c      	beq.n	8006092 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	4611      	mov	r1, r2
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	4611      	mov	r1, r2
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3

  return USBD_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fed8 	bl	8006e8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d016      	beq.n	800612c <USBD_LL_SetupStage+0x6a>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d81c      	bhi.n	800613c <USBD_LL_SetupStage+0x7a>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <USBD_LL_SetupStage+0x4a>
 8006106:	2b01      	cmp	r3, #1
 8006108:	d008      	beq.n	800611c <USBD_LL_SetupStage+0x5a>
 800610a:	e017      	b.n	800613c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9cb 	bl	80064b0 <USBD_StdDevReq>
      break;
 800611a:	e01a      	b.n	8006152 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fa2d 	bl	8006584 <USBD_StdItfReq>
      break;
 800612a:	e012      	b.n	8006152 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fa6d 	bl	8006614 <USBD_StdEPReq>
      break;
 800613a:	e00a      	b.n	8006152 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006142:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006146:	b2db      	uxtb	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 fb32 	bl	80077b4 <USBD_LL_StallEP>
      break;
 8006150:	bf00      	nop
  }

  return USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	460b      	mov	r3, r1
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800616a:	7afb      	ldrb	r3, [r7, #11]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d14b      	bne.n	8006208 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006176:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800617e:	2b03      	cmp	r3, #3
 8006180:	d134      	bne.n	80061ec <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	d919      	bls.n	80061c2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d203      	bcs.n	80061b0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	e002      	b.n	80061b6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 ff54 	bl	8007068 <USBD_CtlContinueRx>
 80061c0:	e038      	b.n	8006234 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d105      	bne.n	80061e4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 ff51 	bl	800708c <USBD_CtlSendStatus>
 80061ea:	e023      	b.n	8006234 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d11e      	bne.n	8006234 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061fe:	2100      	movs	r1, #0
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f001 fad7 	bl	80077b4 <USBD_LL_StallEP>
 8006206:	e015      	b.n	8006234 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800621a:	2b03      	cmp	r3, #3
 800621c:	d108      	bne.n	8006230 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	7afa      	ldrb	r2, [r7, #11]
 8006228:	4611      	mov	r1, r2
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	4798      	blx	r3
 800622e:	e001      	b.n	8006234 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006230:	2302      	movs	r3, #2
 8006232:	e000      	b.n	8006236 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b086      	sub	sp, #24
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	460b      	mov	r3, r1
 8006248:	607a      	str	r2, [r7, #4]
 800624a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d17f      	bne.n	8006352 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3314      	adds	r3, #20
 8006256:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800625e:	2b02      	cmp	r3, #2
 8006260:	d15c      	bne.n	800631c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	d915      	bls.n	800629a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 febe 	bl	8007008 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800628c:	2300      	movs	r3, #0
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f001 fb39 	bl	800790a <USBD_LL_PrepareReceive>
 8006298:	e04e      	b.n	8006338 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	6912      	ldr	r2, [r2, #16]
 80062a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80062a6:	fb01 f202 	mul.w	r2, r1, r2
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d11c      	bne.n	80062ea <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d316      	bcc.n	80062ea <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d20f      	bcs.n	80062ea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062ca:	2200      	movs	r2, #0
 80062cc:	2100      	movs	r1, #0
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fe9a 	bl	8007008 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062dc:	2300      	movs	r3, #0
 80062de:	2200      	movs	r2, #0
 80062e0:	2100      	movs	r1, #0
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f001 fb11 	bl	800790a <USBD_LL_PrepareReceive>
 80062e8:	e026      	b.n	8006338 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d105      	bne.n	800630c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800630c:	2180      	movs	r1, #128	@ 0x80
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f001 fa50 	bl	80077b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fecc 	bl	80070b2 <USBD_CtlReceiveStatus>
 800631a:	e00d      	b.n	8006338 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006322:	2b04      	cmp	r3, #4
 8006324:	d004      	beq.n	8006330 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006330:	2180      	movs	r1, #128	@ 0x80
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f001 fa3e 	bl	80077b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d11d      	bne.n	800637e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fe81 	bl	800604a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006350:	e015      	b.n	800637e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006364:	2b03      	cmp	r3, #3
 8006366:	d108      	bne.n	800637a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	7afa      	ldrb	r2, [r7, #11]
 8006372:	4611      	mov	r1, r2
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	4798      	blx	r3
 8006378:	e001      	b.n	800637e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800637a:	2302      	movs	r3, #2
 800637c:	e000      	b.n	8006380 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006390:	2340      	movs	r3, #64	@ 0x40
 8006392:	2200      	movs	r2, #0
 8006394:	2100      	movs	r1, #0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 f9c7 	bl	800772a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2240      	movs	r2, #64	@ 0x40
 80063a8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063ac:	2340      	movs	r3, #64	@ 0x40
 80063ae:	2200      	movs	r2, #0
 80063b0:	2180      	movs	r1, #128	@ 0x80
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f9b9 	bl	800772a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2240      	movs	r2, #64	@ 0x40
 80063c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6852      	ldr	r2, [r2, #4]
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	4611      	mov	r1, r2
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
  }

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr

08006450 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800645e:	2b04      	cmp	r3, #4
 8006460:	d105      	bne.n	800646e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006488:	2b03      	cmp	r3, #3
 800648a:	d10b      	bne.n	80064a4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064c6:	2b40      	cmp	r3, #64	@ 0x40
 80064c8:	d005      	beq.n	80064d6 <USBD_StdDevReq+0x26>
 80064ca:	2b40      	cmp	r3, #64	@ 0x40
 80064cc:	d84f      	bhi.n	800656e <USBD_StdDevReq+0xbe>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <USBD_StdDevReq+0x36>
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d14b      	bne.n	800656e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	4798      	blx	r3
      break;
 80064e4:	e048      	b.n	8006578 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	d839      	bhi.n	8006562 <USBD_StdDevReq+0xb2>
 80064ee:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <USBD_StdDevReq+0x44>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006545 	.word	0x08006545
 80064f8:	08006559 	.word	0x08006559
 80064fc:	08006563 	.word	0x08006563
 8006500:	0800654f 	.word	0x0800654f
 8006504:	08006563 	.word	0x08006563
 8006508:	08006527 	.word	0x08006527
 800650c:	0800651d 	.word	0x0800651d
 8006510:	08006563 	.word	0x08006563
 8006514:	0800653b 	.word	0x0800653b
 8006518:	08006531 	.word	0x08006531
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f9dc 	bl	80068dc <USBD_GetDescriptor>
          break;
 8006524:	e022      	b.n	800656c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fb3f 	bl	8006bac <USBD_SetAddress>
          break;
 800652e:	e01d      	b.n	800656c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb7e 	bl	8006c34 <USBD_SetConfig>
          break;
 8006538:	e018      	b.n	800656c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fc07 	bl	8006d50 <USBD_GetConfig>
          break;
 8006542:	e013      	b.n	800656c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fc37 	bl	8006dba <USBD_GetStatus>
          break;
 800654c:	e00e      	b.n	800656c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fc65 	bl	8006e20 <USBD_SetFeature>
          break;
 8006556:	e009      	b.n	800656c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fc74 	bl	8006e48 <USBD_ClrFeature>
          break;
 8006560:	e004      	b.n	800656c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fcc9 	bl	8006efc <USBD_CtlError>
          break;
 800656a:	bf00      	nop
      }
      break;
 800656c:	e004      	b.n	8006578 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fcc3 	bl	8006efc <USBD_CtlError>
      break;
 8006576:	bf00      	nop
  }

  return ret;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop

08006584 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d005      	beq.n	80065aa <USBD_StdItfReq+0x26>
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d82e      	bhi.n	8006600 <USBD_StdItfReq+0x7c>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <USBD_StdItfReq+0x26>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d12a      	bne.n	8006600 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065b0:	3b01      	subs	r3, #1
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d81d      	bhi.n	80065f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	889b      	ldrh	r3, [r3, #4]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d813      	bhi.n	80065e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d110      	bne.n	80065fc <USBD_StdItfReq+0x78>
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10d      	bne.n	80065fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fd53 	bl	800708c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065e6:	e009      	b.n	80065fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fc86 	bl	8006efc <USBD_CtlError>
          break;
 80065f0:	e004      	b.n	80065fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fc81 	bl	8006efc <USBD_CtlError>
          break;
 80065fa:	e000      	b.n	80065fe <USBD_StdItfReq+0x7a>
          break;
 80065fc:	bf00      	nop
      }
      break;
 80065fe:	e004      	b.n	800660a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fc7a 	bl	8006efc <USBD_CtlError>
      break;
 8006608:	bf00      	nop
  }

  return USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	889b      	ldrh	r3, [r3, #4]
 8006626:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006630:	2b40      	cmp	r3, #64	@ 0x40
 8006632:	d007      	beq.n	8006644 <USBD_StdEPReq+0x30>
 8006634:	2b40      	cmp	r3, #64	@ 0x40
 8006636:	f200 8146 	bhi.w	80068c6 <USBD_StdEPReq+0x2b2>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <USBD_StdEPReq+0x40>
 800663e:	2b20      	cmp	r3, #32
 8006640:	f040 8141 	bne.w	80068c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
      break;
 8006652:	e13d      	b.n	80068d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800665c:	2b20      	cmp	r3, #32
 800665e:	d10a      	bne.n	8006676 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
 800666e:	4603      	mov	r3, r0
 8006670:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	e12d      	b.n	80068d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d007      	beq.n	800668e <USBD_StdEPReq+0x7a>
 800667e:	2b03      	cmp	r3, #3
 8006680:	f300 811b 	bgt.w	80068ba <USBD_StdEPReq+0x2a6>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d072      	beq.n	800676e <USBD_StdEPReq+0x15a>
 8006688:	2b01      	cmp	r3, #1
 800668a:	d03a      	beq.n	8006702 <USBD_StdEPReq+0xee>
 800668c:	e115      	b.n	80068ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006694:	2b02      	cmp	r3, #2
 8006696:	d002      	beq.n	800669e <USBD_StdEPReq+0x8a>
 8006698:	2b03      	cmp	r3, #3
 800669a:	d015      	beq.n	80066c8 <USBD_StdEPReq+0xb4>
 800669c:	e02b      	b.n	80066f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <USBD_StdEPReq+0xaa>
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2b80      	cmp	r3, #128	@ 0x80
 80066a8:	d009      	beq.n	80066be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 f880 	bl	80077b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066b4:	2180      	movs	r1, #128	@ 0x80
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 f87c 	bl	80077b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066bc:	e020      	b.n	8006700 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc1b 	bl	8006efc <USBD_CtlError>
              break;
 80066c6:	e01b      	b.n	8006700 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	885b      	ldrh	r3, [r3, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10e      	bne.n	80066ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <USBD_StdEPReq+0xda>
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b80      	cmp	r3, #128	@ 0x80
 80066da:	d008      	beq.n	80066ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	88db      	ldrh	r3, [r3, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 f863 	bl	80077b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fccc 	bl	800708c <USBD_CtlSendStatus>

              break;
 80066f4:	e004      	b.n	8006700 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fbff 	bl	8006efc <USBD_CtlError>
              break;
 80066fe:	bf00      	nop
          }
          break;
 8006700:	e0e0      	b.n	80068c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006708:	2b02      	cmp	r3, #2
 800670a:	d002      	beq.n	8006712 <USBD_StdEPReq+0xfe>
 800670c:	2b03      	cmp	r3, #3
 800670e:	d015      	beq.n	800673c <USBD_StdEPReq+0x128>
 8006710:	e026      	b.n	8006760 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00c      	beq.n	8006732 <USBD_StdEPReq+0x11e>
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b80      	cmp	r3, #128	@ 0x80
 800671c:	d009      	beq.n	8006732 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800671e:	7bbb      	ldrb	r3, [r7, #14]
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 f846 	bl	80077b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006728:	2180      	movs	r1, #128	@ 0x80
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 f842 	bl	80077b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006730:	e01c      	b.n	800676c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fbe1 	bl	8006efc <USBD_CtlError>
              break;
 800673a:	e017      	b.n	800676c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	885b      	ldrh	r3, [r3, #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d112      	bne.n	800676a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f84d 	bl	80077f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc97 	bl	800708c <USBD_CtlSendStatus>
              }
              break;
 800675e:	e004      	b.n	800676a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fbca 	bl	8006efc <USBD_CtlError>
              break;
 8006768:	e000      	b.n	800676c <USBD_StdEPReq+0x158>
              break;
 800676a:	bf00      	nop
          }
          break;
 800676c:	e0aa      	b.n	80068c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006774:	2b02      	cmp	r3, #2
 8006776:	d002      	beq.n	800677e <USBD_StdEPReq+0x16a>
 8006778:	2b03      	cmp	r3, #3
 800677a:	d032      	beq.n	80067e2 <USBD_StdEPReq+0x1ce>
 800677c:	e097      	b.n	80068ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <USBD_StdEPReq+0x180>
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2b80      	cmp	r3, #128	@ 0x80
 8006788:	d004      	beq.n	8006794 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fbb5 	bl	8006efc <USBD_CtlError>
                break;
 8006792:	e091      	b.n	80068b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	da0b      	bge.n	80067b4 <USBD_StdEPReq+0x1a0>
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	3310      	adds	r3, #16
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	e00b      	b.n	80067cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
 80067b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	3304      	adds	r3, #4
 80067cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2202      	movs	r2, #2
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fbf8 	bl	8006fd0 <USBD_CtlSendData>
              break;
 80067e0:	e06a      	b.n	80068b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da11      	bge.n	800680e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3318      	adds	r3, #24
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d117      	bne.n	8006834 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb78 	bl	8006efc <USBD_CtlError>
                  break;
 800680c:	e054      	b.n	80068b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	f003 020f 	and.w	r2, r3, #15
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d104      	bne.n	8006834 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fb65 	bl	8006efc <USBD_CtlError>
                  break;
 8006832:	e041      	b.n	80068b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da0b      	bge.n	8006854 <USBD_StdEPReq+0x240>
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	3310      	adds	r3, #16
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	3304      	adds	r3, #4
 8006852:	e00b      	b.n	800686c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	3304      	adds	r3, #4
 800686c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <USBD_StdEPReq+0x266>
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b80      	cmp	r3, #128	@ 0x80
 8006878:	d103      	bne.n	8006882 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	e00e      	b.n	80068a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 ffd2 	bl	8007830 <USBD_LL_IsStallEP>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2201      	movs	r2, #1
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e002      	b.n	80068a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2202      	movs	r2, #2
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fb92 	bl	8006fd0 <USBD_CtlSendData>
              break;
 80068ac:	e004      	b.n	80068b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb23 	bl	8006efc <USBD_CtlError>
              break;
 80068b6:	bf00      	nop
          }
          break;
 80068b8:	e004      	b.n	80068c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fb1d 	bl	8006efc <USBD_CtlError>
          break;
 80068c2:	bf00      	nop
      }
      break;
 80068c4:	e004      	b.n	80068d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fb17 	bl	8006efc <USBD_CtlError>
      break;
 80068ce:	bf00      	nop
  }

  return ret;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	885b      	ldrh	r3, [r3, #2]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	f200 8128 	bhi.w	8006b52 <USBD_GetDescriptor+0x276>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <USBD_GetDescriptor+0x2c>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006925 	.word	0x08006925
 800690c:	0800693d 	.word	0x0800693d
 8006910:	0800697d 	.word	0x0800697d
 8006914:	08006b53 	.word	0x08006b53
 8006918:	08006b53 	.word	0x08006b53
 800691c:	08006af3 	.word	0x08006af3
 8006920:	08006b1f 	.word	0x08006b1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7c12      	ldrb	r2, [r2, #16]
 8006930:	f107 0108 	add.w	r1, r7, #8
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
 8006938:	60f8      	str	r0, [r7, #12]
      break;
 800693a:	e112      	b.n	8006b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7c1b      	ldrb	r3, [r3, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10d      	bne.n	8006960 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	f107 0208 	add.w	r2, r7, #8
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3301      	adds	r3, #1
 800695a:	2202      	movs	r2, #2
 800695c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800695e:	e100      	b.n	8006b62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	f107 0208 	add.w	r2, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3301      	adds	r3, #1
 8006976:	2202      	movs	r2, #2
 8006978:	701a      	strb	r2, [r3, #0]
      break;
 800697a:	e0f2      	b.n	8006b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	885b      	ldrh	r3, [r3, #2]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b05      	cmp	r3, #5
 8006984:	f200 80ac 	bhi.w	8006ae0 <USBD_GetDescriptor+0x204>
 8006988:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <USBD_GetDescriptor+0xb4>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069a9 	.word	0x080069a9
 8006994:	080069dd 	.word	0x080069dd
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a45 	.word	0x08006a45
 80069a0:	08006a79 	.word	0x08006a79
 80069a4:	08006aad 	.word	0x08006aad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7c12      	ldrb	r2, [r2, #16]
 80069c0:	f107 0108 	add.w	r1, r7, #8
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ca:	e091      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa94 	bl	8006efc <USBD_CtlError>
            err++;
 80069d4:	7afb      	ldrb	r3, [r7, #11]
 80069d6:	3301      	adds	r3, #1
 80069d8:	72fb      	strb	r3, [r7, #11]
          break;
 80069da:	e089      	b.n	8006af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	7c12      	ldrb	r2, [r2, #16]
 80069f4:	f107 0108 	add.w	r1, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fe:	e077      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa7a 	bl	8006efc <USBD_CtlError>
            err++;
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0e:	e06f      	b.n	8006af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a32:	e05d      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa60 	bl	8006efc <USBD_CtlError>
            err++;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
          break;
 8006a42:	e055      	b.n	8006af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7c12      	ldrb	r2, [r2, #16]
 8006a5c:	f107 0108 	add.w	r1, r7, #8
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a66:	e043      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa46 	bl	8006efc <USBD_CtlError>
            err++;
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	3301      	adds	r3, #1
 8006a74:	72fb      	strb	r3, [r7, #11]
          break;
 8006a76:	e03b      	b.n	8006af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	7c12      	ldrb	r2, [r2, #16]
 8006a90:	f107 0108 	add.w	r1, r7, #8
 8006a94:	4610      	mov	r0, r2
 8006a96:	4798      	blx	r3
 8006a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a9a:	e029      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa2c 	bl	8006efc <USBD_CtlError>
            err++;
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aaa:	e021      	b.n	8006af0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7c12      	ldrb	r2, [r2, #16]
 8006ac4:	f107 0108 	add.w	r1, r7, #8
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ace:	e00f      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa12 	bl	8006efc <USBD_CtlError>
            err++;
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	3301      	adds	r3, #1
 8006adc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ade:	e007      	b.n	8006af0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa0a 	bl	8006efc <USBD_CtlError>
          err++;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	3301      	adds	r3, #1
 8006aec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006aee:	e038      	b.n	8006b62 <USBD_GetDescriptor+0x286>
 8006af0:	e037      	b.n	8006b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7c1b      	ldrb	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b02:	f107 0208 	add.w	r2, r7, #8
 8006b06:	4610      	mov	r0, r2
 8006b08:	4798      	blx	r3
 8006b0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b0c:	e029      	b.n	8006b62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f9f3 	bl	8006efc <USBD_CtlError>
        err++;
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b1c:	e021      	b.n	8006b62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7c1b      	ldrb	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10d      	bne.n	8006b42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2e:	f107 0208 	add.w	r2, r7, #8
 8006b32:	4610      	mov	r0, r2
 8006b34:	4798      	blx	r3
 8006b36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	2207      	movs	r2, #7
 8006b3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b40:	e00f      	b.n	8006b62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f9d9 	bl	8006efc <USBD_CtlError>
        err++;
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b50:	e007      	b.n	8006b62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f9d1 	bl	8006efc <USBD_CtlError>
      err++;
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b60:	bf00      	nop
  }

  if (err != 0U)
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d11c      	bne.n	8006ba2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d011      	beq.n	8006b92 <USBD_GetDescriptor+0x2b6>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	88db      	ldrh	r3, [r3, #6]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	88da      	ldrh	r2, [r3, #6]
 8006b7a:	893b      	ldrh	r3, [r7, #8]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bf28      	it	cs
 8006b80:	4613      	movcs	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b86:	893b      	ldrh	r3, [r7, #8]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa1f 	bl	8006fd0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	88db      	ldrh	r3, [r3, #6]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa76 	bl	800708c <USBD_CtlSendStatus>
 8006ba0:	e000      	b.n	8006ba4 <USBD_GetDescriptor+0x2c8>
    return;
 8006ba2:	bf00      	nop
    }
  }
}
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop

08006bac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	889b      	ldrh	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d130      	bne.n	8006c20 <USBD_SetAddress+0x74>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d12c      	bne.n	8006c20 <USBD_SetAddress+0x74>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bcc:	d828      	bhi.n	8006c20 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d104      	bne.n	8006bee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f988 	bl	8006efc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bec:	e01d      	b.n	8006c2a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7bfa      	ldrb	r2, [r7, #15]
 8006bf2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fe43 	bl	8007886 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fa43 	bl	800708c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c14:	e009      	b.n	8006c2a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1e:	e004      	b.n	8006c2a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f96a 	bl	8006efc <USBD_CtlError>
  }
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	885b      	ldrh	r3, [r3, #2]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	4b41      	ldr	r3, [pc, #260]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006c46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c48:	4b40      	ldr	r3, [pc, #256]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d904      	bls.n	8006c5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f952 	bl	8006efc <USBD_CtlError>
 8006c58:	e075      	b.n	8006d46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d002      	beq.n	8006c6a <USBD_SetConfig+0x36>
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d023      	beq.n	8006cb0 <USBD_SetConfig+0x7c>
 8006c68:	e062      	b.n	8006d30 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c6a:	4b38      	ldr	r3, [pc, #224]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01a      	beq.n	8006ca8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006c72:	4b36      	ldr	r3, [pc, #216]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2203      	movs	r2, #3
 8006c80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c84:	4b31      	ldr	r3, [pc, #196]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff f9e7 	bl	800605e <USBD_SetClassConfig>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d104      	bne.n	8006ca0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f92f 	bl	8006efc <USBD_CtlError>
            return;
 8006c9e:	e052      	b.n	8006d46 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f9f3 	bl	800708c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ca6:	e04e      	b.n	8006d46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f9ef 	bl	800708c <USBD_CtlSendStatus>
        break;
 8006cae:	e04a      	b.n	8006d46 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006cb0:	4b26      	ldr	r3, [pc, #152]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d112      	bne.n	8006cde <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006cc0:	4b22      	ldr	r3, [pc, #136]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006cca:	4b20      	ldr	r3, [pc, #128]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff f9e3 	bl	800609c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9d8 	bl	800708c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006cdc:	e033      	b.n	8006d46 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006cde:	4b1b      	ldr	r3, [pc, #108]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d01d      	beq.n	8006d28 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff f9d1 	bl	800609c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006cfa:	4b14      	ldr	r3, [pc, #80]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d04:	4b11      	ldr	r3, [pc, #68]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff f9a7 	bl	800605e <USBD_SetClassConfig>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d104      	bne.n	8006d20 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f8ef 	bl	8006efc <USBD_CtlError>
            return;
 8006d1e:	e012      	b.n	8006d46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9b3 	bl	800708c <USBD_CtlSendStatus>
        break;
 8006d26:	e00e      	b.n	8006d46 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f9af 	bl	800708c <USBD_CtlSendStatus>
        break;
 8006d2e:	e00a      	b.n	8006d46 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8e2 	bl	8006efc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d38:	4b04      	ldr	r3, [pc, #16]	@ (8006d4c <USBD_SetConfig+0x118>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff f9ac 	bl	800609c <USBD_ClrClassConfig>
        break;
 8006d44:	bf00      	nop
    }
  }
}
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	200003a8 	.word	0x200003a8

08006d50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d004      	beq.n	8006d6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f8c9 	bl	8006efc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d6a:	e022      	b.n	8006db2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	dc02      	bgt.n	8006d7c <USBD_GetConfig+0x2c>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc03      	bgt.n	8006d82 <USBD_GetConfig+0x32>
 8006d7a:	e015      	b.n	8006da8 <USBD_GetConfig+0x58>
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d00b      	beq.n	8006d98 <USBD_GetConfig+0x48>
 8006d80:	e012      	b.n	8006da8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f91d 	bl	8006fd0 <USBD_CtlSendData>
        break;
 8006d96:	e00c      	b.n	8006db2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f915 	bl	8006fd0 <USBD_CtlSendData>
        break;
 8006da6:	e004      	b.n	8006db2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f8a6 	bl	8006efc <USBD_CtlError>
        break;
 8006db0:	bf00      	nop
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d81e      	bhi.n	8006e0e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d004      	beq.n	8006de2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f88e 	bl	8006efc <USBD_CtlError>
        break;
 8006de0:	e01a      	b.n	8006e18 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f043 0202 	orr.w	r2, r3, #2
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	330c      	adds	r3, #12
 8006e02:	2202      	movs	r2, #2
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f8e2 	bl	8006fd0 <USBD_CtlSendData>
      break;
 8006e0c:	e004      	b.n	8006e18 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f873 	bl	8006efc <USBD_CtlError>
      break;
 8006e16:	bf00      	nop
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	885b      	ldrh	r3, [r3, #2]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d106      	bne.n	8006e40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f926 	bl	800708c <USBD_CtlSendStatus>
  }
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d80b      	bhi.n	8006e76 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	885b      	ldrh	r3, [r3, #2]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d10c      	bne.n	8006e80 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f90c 	bl	800708c <USBD_CtlSendStatus>
      }
      break;
 8006e74:	e004      	b.n	8006e80 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f83f 	bl	8006efc <USBD_CtlError>
      break;
 8006e7e:	e000      	b.n	8006e82 <USBD_ClrFeature+0x3a>
      break;
 8006e80:	bf00      	nop
  }
}
 8006e82:	bf00      	nop
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785a      	ldrb	r2, [r3, #1]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	3303      	adds	r3, #3
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4413      	add	r3, r2
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	3305      	adds	r3, #5
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	021b      	lsls	r3, r3, #8
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	3306      	adds	r3, #6
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	3307      	adds	r3, #7
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	021b      	lsls	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4413      	add	r3, r2
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	80da      	strh	r2, [r3, #6]

}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f06:	2180      	movs	r1, #128	@ 0x80
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fc53 	bl	80077b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc4f 	bl	80077b4 <USBD_LL_StallEP>
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d032      	beq.n	8006f9a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f834 	bl	8006fa2 <USBD_GetLen>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	75fa      	strb	r2, [r7, #23]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4413      	add	r3, r2
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	75fa      	strb	r2, [r7, #23]
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4413      	add	r3, r2
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f6a:	e012      	b.n	8006f92 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	60fa      	str	r2, [r7, #12]
 8006f72:	7dfa      	ldrb	r2, [r7, #23]
 8006f74:	1c51      	adds	r1, r2, #1
 8006f76:	75f9      	strb	r1, [r7, #23]
 8006f78:	4611      	mov	r1, r2
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	75fa      	strb	r2, [r7, #23]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e8      	bne.n	8006f6c <USBD_GetString+0x4e>
    }
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006fae:	e005      	b.n	8006fbc <USBD_GetLen+0x1a>
  {
    len++;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f5      	bne.n	8006fb0 <USBD_GetLen+0xe>
  }

  return len;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fc63 	bl	80078c4 <USBD_LL_Transmit>

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	2100      	movs	r1, #0
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fc51 	bl	80078c4 <USBD_LL_Transmit>

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2203      	movs	r2, #3
 800703e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	2100      	movs	r1, #0
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 fc56 	bl	800790a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	2100      	movs	r1, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fc44 	bl	800790a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2204      	movs	r2, #4
 8007098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800709c:	2300      	movs	r3, #0
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fc0e 	bl	80078c4 <USBD_LL_Transmit>

  return USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2205      	movs	r2, #5
 80070be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070c2:	2300      	movs	r3, #0
 80070c4:	2200      	movs	r2, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fc1e 	bl	800790a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80070dc:	2200      	movs	r2, #0
 80070de:	4912      	ldr	r1, [pc, #72]	@ (8007128 <MX_USB_DEVICE_Init+0x50>)
 80070e0:	4812      	ldr	r0, [pc, #72]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 80070e2:	f7fe ff62 	bl	8005faa <USBD_Init>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80070ec:	f7f9 fb34 	bl	8000758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80070f0:	490f      	ldr	r1, [pc, #60]	@ (8007130 <MX_USB_DEVICE_Init+0x58>)
 80070f2:	480e      	ldr	r0, [pc, #56]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 80070f4:	f7fe ff84 	bl	8006000 <USBD_RegisterClass>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80070fe:	f7f9 fb2b 	bl	8000758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007102:	490c      	ldr	r1, [pc, #48]	@ (8007134 <MX_USB_DEVICE_Init+0x5c>)
 8007104:	4809      	ldr	r0, [pc, #36]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 8007106:	f7fe feb5 	bl	8005e74 <USBD_CDC_RegisterInterface>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007110:	f7f9 fb22 	bl	8000758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007114:	4805      	ldr	r0, [pc, #20]	@ (800712c <MX_USB_DEVICE_Init+0x54>)
 8007116:	f7fe ff8c 	bl	8006032 <USBD_Start>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007120:	f7f9 fb1a 	bl	8000758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007124:	bf00      	nop
 8007126:	bd80      	pop	{r7, pc}
 8007128:	2000012c 	.word	0x2000012c
 800712c:	200003ac 	.word	0x200003ac
 8007130:	20000018 	.word	0x20000018
 8007134:	2000011c 	.word	0x2000011c

08007138 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800713c:	2200      	movs	r2, #0
 800713e:	4905      	ldr	r1, [pc, #20]	@ (8007154 <CDC_Init_FS+0x1c>)
 8007140:	4805      	ldr	r0, [pc, #20]	@ (8007158 <CDC_Init_FS+0x20>)
 8007142:	f7fe fead 	bl	8005ea0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007146:	4905      	ldr	r1, [pc, #20]	@ (800715c <CDC_Init_FS+0x24>)
 8007148:	4803      	ldr	r0, [pc, #12]	@ (8007158 <CDC_Init_FS+0x20>)
 800714a:	f7fe fec2 	bl	8005ed2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800714e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000a70 	.word	0x20000a70
 8007158:	200003ac 	.word	0x200003ac
 800715c:	20000670 	.word	0x20000670

08007160 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007164:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007166:	4618      	mov	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr
	...

08007170 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	6039      	str	r1, [r7, #0]
 800717a:	71fb      	strb	r3, [r7, #7]
 800717c:	4613      	mov	r3, r2
 800717e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b23      	cmp	r3, #35	@ 0x23
 8007184:	d84a      	bhi.n	800721c <CDC_Control_FS+0xac>
 8007186:	a201      	add	r2, pc, #4	@ (adr r2, 800718c <CDC_Control_FS+0x1c>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	0800721d 	.word	0x0800721d
 8007190:	0800721d 	.word	0x0800721d
 8007194:	0800721d 	.word	0x0800721d
 8007198:	0800721d 	.word	0x0800721d
 800719c:	0800721d 	.word	0x0800721d
 80071a0:	0800721d 	.word	0x0800721d
 80071a4:	0800721d 	.word	0x0800721d
 80071a8:	0800721d 	.word	0x0800721d
 80071ac:	0800721d 	.word	0x0800721d
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	0800721d 	.word	0x0800721d
 80071b8:	0800721d 	.word	0x0800721d
 80071bc:	0800721d 	.word	0x0800721d
 80071c0:	0800721d 	.word	0x0800721d
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	0800721d 	.word	0x0800721d
 80071d0:	0800721d 	.word	0x0800721d
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	0800721d 	.word	0x0800721d
 80071dc:	0800721d 	.word	0x0800721d
 80071e0:	0800721d 	.word	0x0800721d
 80071e4:	0800721d 	.word	0x0800721d
 80071e8:	0800721d 	.word	0x0800721d
 80071ec:	0800721d 	.word	0x0800721d
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	0800721d 	.word	0x0800721d
 8007204:	0800721d 	.word	0x0800721d
 8007208:	0800721d 	.word	0x0800721d
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800721d 	.word	0x0800721d
 8007214:	0800721d 	.word	0x0800721d
 8007218:	0800721d 	.word	0x0800721d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800721c:	bf00      	nop
  }

  return (USBD_OK);
 800721e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop

0800722c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4805      	ldr	r0, [pc, #20]	@ (8007250 <CDC_Receive_FS+0x24>)
 800723a:	f7fe fe4a 	bl	8005ed2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800723e:	4804      	ldr	r0, [pc, #16]	@ (8007250 <CDC_Receive_FS+0x24>)
 8007240:	f7fe fe89 	bl	8005f56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007244:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200003ac 	.word	0x200003ac

08007254 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007264:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <CDC_Transmit_FS+0x48>)
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007276:	2301      	movs	r3, #1
 8007278:	e00b      	b.n	8007292 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800727a:	887b      	ldrh	r3, [r7, #2]
 800727c:	461a      	mov	r2, r3
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4806      	ldr	r0, [pc, #24]	@ (800729c <CDC_Transmit_FS+0x48>)
 8007282:	f7fe fe0d 	bl	8005ea0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007286:	4805      	ldr	r0, [pc, #20]	@ (800729c <CDC_Transmit_FS+0x48>)
 8007288:	f7fe fe36 	bl	8005ef8 <USBD_CDC_TransmitPacket>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200003ac 	.word	0x200003ac

080072a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	6039      	str	r1, [r7, #0]
 80072aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2212      	movs	r2, #18
 80072b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072b2:	4b03      	ldr	r3, [pc, #12]	@ (80072c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000148 	.word	0x20000148

080072c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	6039      	str	r1, [r7, #0]
 80072ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2204      	movs	r2, #4
 80072d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072d6:	4b03      	ldr	r3, [pc, #12]	@ (80072e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	2000015c 	.word	0x2000015c

080072e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	6039      	str	r1, [r7, #0]
 80072f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d105      	bne.n	8007306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	4907      	ldr	r1, [pc, #28]	@ (800731c <USBD_FS_ProductStrDescriptor+0x34>)
 80072fe:	4808      	ldr	r0, [pc, #32]	@ (8007320 <USBD_FS_ProductStrDescriptor+0x38>)
 8007300:	f7ff fe0d 	bl	8006f1e <USBD_GetString>
 8007304:	e004      	b.n	8007310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	4904      	ldr	r1, [pc, #16]	@ (800731c <USBD_FS_ProductStrDescriptor+0x34>)
 800730a:	4805      	ldr	r0, [pc, #20]	@ (8007320 <USBD_FS_ProductStrDescriptor+0x38>)
 800730c:	f7ff fe07 	bl	8006f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007310:	4b02      	ldr	r3, [pc, #8]	@ (800731c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000e70 	.word	0x20000e70
 8007320:	08007a80 	.word	0x08007a80

08007324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	4904      	ldr	r1, [pc, #16]	@ (8007344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007334:	4804      	ldr	r0, [pc, #16]	@ (8007348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007336:	f7ff fdf2 	bl	8006f1e <USBD_GetString>
  return USBD_StrDesc;
 800733a:	4b02      	ldr	r3, [pc, #8]	@ (8007344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000e70 	.word	0x20000e70
 8007348:	08007a98 	.word	0x08007a98

0800734c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	221a      	movs	r2, #26
 800735c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800735e:	f000 f843 	bl	80073e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007362:	4b02      	ldr	r3, [pc, #8]	@ (800736c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000160 	.word	0x20000160

08007370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d105      	bne.n	800738e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	4907      	ldr	r1, [pc, #28]	@ (80073a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007386:	4808      	ldr	r0, [pc, #32]	@ (80073a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007388:	f7ff fdc9 	bl	8006f1e <USBD_GetString>
 800738c:	e004      	b.n	8007398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	4904      	ldr	r1, [pc, #16]	@ (80073a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007392:	4805      	ldr	r0, [pc, #20]	@ (80073a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007394:	f7ff fdc3 	bl	8006f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007398:	4b02      	ldr	r3, [pc, #8]	@ (80073a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000e70 	.word	0x20000e70
 80073a8:	08007aac 	.word	0x08007aac

080073ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d105      	bne.n	80073ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	4907      	ldr	r1, [pc, #28]	@ (80073e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073c2:	4808      	ldr	r0, [pc, #32]	@ (80073e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073c4:	f7ff fdab 	bl	8006f1e <USBD_GetString>
 80073c8:	e004      	b.n	80073d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	4904      	ldr	r1, [pc, #16]	@ (80073e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ce:	4805      	ldr	r0, [pc, #20]	@ (80073e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073d0:	f7ff fda5 	bl	8006f1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80073d4:	4b02      	ldr	r3, [pc, #8]	@ (80073e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000e70 	.word	0x20000e70
 80073e4:	08007ab8 	.word	0x08007ab8

080073e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073ee:	4b0f      	ldr	r3, [pc, #60]	@ (800742c <Get_SerialNum+0x44>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007430 <Get_SerialNum+0x48>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007434 <Get_SerialNum+0x4c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800740e:	2208      	movs	r2, #8
 8007410:	4909      	ldr	r1, [pc, #36]	@ (8007438 <Get_SerialNum+0x50>)
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 f814 	bl	8007440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007418:	2204      	movs	r2, #4
 800741a:	4908      	ldr	r1, [pc, #32]	@ (800743c <Get_SerialNum+0x54>)
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f000 f80f 	bl	8007440 <IntToUnicode>
  }
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	1ffff7e8 	.word	0x1ffff7e8
 8007430:	1ffff7ec 	.word	0x1ffff7ec
 8007434:	1ffff7f0 	.word	0x1ffff7f0
 8007438:	20000162 	.word	0x20000162
 800743c:	20000172 	.word	0x20000172

08007440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]
 8007456:	e027      	b.n	80074a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	0f1b      	lsrs	r3, r3, #28
 800745c:	2b09      	cmp	r3, #9
 800745e:	d80b      	bhi.n	8007478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	0f1b      	lsrs	r3, r3, #28
 8007464:	b2da      	uxtb	r2, r3
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4619      	mov	r1, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	440b      	add	r3, r1
 8007470:	3230      	adds	r2, #48	@ 0x30
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	e00a      	b.n	800748e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0f1b      	lsrs	r3, r3, #28
 800747c:	b2da      	uxtb	r2, r3
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4619      	mov	r1, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	440b      	add	r3, r1
 8007488:	3237      	adds	r2, #55	@ 0x37
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	3301      	adds	r3, #1
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	4413      	add	r3, r2
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
 80074a8:	7dfa      	ldrb	r2, [r7, #23]
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3d3      	bcc.n	8007458 <IntToUnicode+0x18>
  }
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a0d      	ldr	r2, [pc, #52]	@ (8007500 <HAL_PCD_MspInit+0x44>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d113      	bne.n	80074f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80074ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <HAL_PCD_MspInit+0x48>)
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <HAL_PCD_MspInit+0x48>)
 80074d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074d8:	61d3      	str	r3, [r2, #28]
 80074da:	4b0a      	ldr	r3, [pc, #40]	@ (8007504 <HAL_PCD_MspInit+0x48>)
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80074e6:	2200      	movs	r2, #0
 80074e8:	2100      	movs	r1, #0
 80074ea:	2014      	movs	r0, #20
 80074ec:	f7f9 fb2b 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80074f0:	2014      	movs	r0, #20
 80074f2:	f7f9 fb44 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40005c00 	.word	0x40005c00
 8007504:	40021000 	.word	0x40021000

08007508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f7fe fdcf 	bl	80060c2 <USBD_LL_SetupStage>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	440b      	add	r3, r1
 800754c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	4619      	mov	r1, r3
 8007556:	f7fe fe01 	bl	800615c <USBD_LL_DataOutStage>
}
 800755a:	bf00      	nop
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007574:	78fa      	ldrb	r2, [r7, #3]
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	440b      	add	r3, r1
 8007582:	3324      	adds	r3, #36	@ 0x24
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	4619      	mov	r1, r3
 800758a:	f7fe fe58 	bl	800623e <USBD_LL_DataInStage>
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe ff68 	bl	800647a <USBD_LL_SOF>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075ba:	2301      	movs	r3, #1
 80075bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	799b      	ldrb	r3, [r3, #6]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d001      	beq.n	80075ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075c6:	f7f9 f8c7 	bl	8000758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075d0:	7bfa      	ldrb	r2, [r7, #15]
 80075d2:	4611      	mov	r1, r2
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe ff18 	bl	800640a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe fed1 	bl	8006388 <USBD_LL_Reset>
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe ff12 	bl	8006428 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7a9b      	ldrb	r3, [r3, #10]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800760c:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <HAL_PCD_SuspendCallback+0x30>)
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	4a03      	ldr	r2, [pc, #12]	@ (8007620 <HAL_PCD_SuspendCallback+0x30>)
 8007612:	f043 0306 	orr.w	r3, r3, #6
 8007616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe ff0c 	bl	8006450 <USBD_LL_Resume>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007648:	4a28      	ldr	r2, [pc, #160]	@ (80076ec <USBD_LL_Init+0xac>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a26      	ldr	r2, [pc, #152]	@ (80076ec <USBD_LL_Init+0xac>)
 8007654:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007658:	4b24      	ldr	r3, [pc, #144]	@ (80076ec <USBD_LL_Init+0xac>)
 800765a:	4a25      	ldr	r2, [pc, #148]	@ (80076f0 <USBD_LL_Init+0xb0>)
 800765c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800765e:	4b23      	ldr	r3, [pc, #140]	@ (80076ec <USBD_LL_Init+0xac>)
 8007660:	2208      	movs	r2, #8
 8007662:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007664:	4b21      	ldr	r3, [pc, #132]	@ (80076ec <USBD_LL_Init+0xac>)
 8007666:	2202      	movs	r2, #2
 8007668:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800766a:	4b20      	ldr	r3, [pc, #128]	@ (80076ec <USBD_LL_Init+0xac>)
 800766c:	2200      	movs	r2, #0
 800766e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007670:	4b1e      	ldr	r3, [pc, #120]	@ (80076ec <USBD_LL_Init+0xac>)
 8007672:	2200      	movs	r2, #0
 8007674:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007676:	4b1d      	ldr	r3, [pc, #116]	@ (80076ec <USBD_LL_Init+0xac>)
 8007678:	2200      	movs	r2, #0
 800767a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800767c:	481b      	ldr	r0, [pc, #108]	@ (80076ec <USBD_LL_Init+0xac>)
 800767e:	f7f9 fc35 	bl	8000eec <HAL_PCD_Init>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007688:	f7f9 f866 	bl	8000758 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007692:	2318      	movs	r3, #24
 8007694:	2200      	movs	r2, #0
 8007696:	2100      	movs	r1, #0
 8007698:	f7fb f946 	bl	8002928 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80076a2:	2358      	movs	r3, #88	@ 0x58
 80076a4:	2200      	movs	r2, #0
 80076a6:	2180      	movs	r1, #128	@ 0x80
 80076a8:	f7fb f93e 	bl	8002928 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80076b2:	23c0      	movs	r3, #192	@ 0xc0
 80076b4:	2200      	movs	r2, #0
 80076b6:	2181      	movs	r1, #129	@ 0x81
 80076b8:	f7fb f936 	bl	8002928 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80076c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80076c6:	2200      	movs	r2, #0
 80076c8:	2101      	movs	r1, #1
 80076ca:	f7fb f92d 	bl	8002928 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80076d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80076d8:	2200      	movs	r2, #0
 80076da:	2182      	movs	r1, #130	@ 0x82
 80076dc:	f7fb f924 	bl	8002928 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20001070 	.word	0x20001070
 80076f0:	40005c00 	.word	0x40005c00

080076f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800770a:	4618      	mov	r0, r3
 800770c:	f7f9 fce4 	bl	80010d8 <HAL_PCD_Start>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f94e 	bl	80079b8 <USBD_Get_USB_Status>
 800771c:	4603      	mov	r3, r0
 800771e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007720:	7bbb      	ldrb	r3, [r7, #14]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	4608      	mov	r0, r1
 8007734:	4611      	mov	r1, r2
 8007736:	461a      	mov	r2, r3
 8007738:	4603      	mov	r3, r0
 800773a:	70fb      	strb	r3, [r7, #3]
 800773c:	460b      	mov	r3, r1
 800773e:	70bb      	strb	r3, [r7, #2]
 8007740:	4613      	mov	r3, r2
 8007742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8007752:	78bb      	ldrb	r3, [r7, #2]
 8007754:	883a      	ldrh	r2, [r7, #0]
 8007756:	78f9      	ldrb	r1, [r7, #3]
 8007758:	f7f9 fe38 	bl	80013cc <HAL_PCD_EP_Open>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f928 	bl	80079b8 <USBD_Get_USB_Status>
 8007768:	4603      	mov	r3, r0
 800776a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800776c:	7bbb      	ldrb	r3, [r7, #14]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7f9 fe76 	bl	8001486 <HAL_PCD_EP_Close>
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 f909 	bl	80079b8 <USBD_Get_USB_Status>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80077ce:	78fa      	ldrb	r2, [r7, #3]
 80077d0:	4611      	mov	r1, r2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7f9 ff1e 	bl	8001614 <HAL_PCD_EP_SetStall>
 80077d8:	4603      	mov	r3, r0
 80077da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f8ea 	bl	80079b8 <USBD_Get_USB_Status>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800780c:	78fa      	ldrb	r2, [r7, #3]
 800780e:	4611      	mov	r1, r2
 8007810:	4618      	mov	r0, r3
 8007812:	f7f9 ff5f 	bl	80016d4 <HAL_PCD_EP_ClrStall>
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f8cb 	bl	80079b8 <USBD_Get_USB_Status>
 8007822:	4603      	mov	r3, r0
 8007824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007826:	7bbb      	ldrb	r3, [r7, #14]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007848:	2b00      	cmp	r3, #0
 800784a:	da0b      	bge.n	8007864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	440b      	add	r3, r1
 800785e:	3312      	adds	r3, #18
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	e00b      	b.n	800787c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	440b      	add	r3, r1
 8007876:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800787a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr

08007886 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	460b      	mov	r3, r1
 8007890:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7f9 fd6d 	bl	8001384 <HAL_PCD_SetAddress>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f881 	bl	80079b8 <USBD_Get_USB_Status>
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	72fb      	strb	r3, [r7, #11]
 80078d4:	4613      	mov	r3, r2
 80078d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80078e6:	893b      	ldrh	r3, [r7, #8]
 80078e8:	7af9      	ldrb	r1, [r7, #11]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	f7f9 fe5b 	bl	80015a6 <HAL_PCD_EP_Transmit>
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 f85e 	bl	80079b8 <USBD_Get_USB_Status>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007900:	7dbb      	ldrb	r3, [r7, #22]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	461a      	mov	r2, r3
 8007916:	460b      	mov	r3, r1
 8007918:	72fb      	strb	r3, [r7, #11]
 800791a:	4613      	mov	r3, r2
 800791c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800792c:	893b      	ldrh	r3, [r7, #8]
 800792e:	7af9      	ldrb	r1, [r7, #11]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	f7f9 fdf0 	bl	8001516 <HAL_PCD_EP_Receive>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 f83b 	bl	80079b8 <USBD_Get_USB_Status>
 8007942:	4603      	mov	r3, r0
 8007944:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007946:	7dbb      	ldrb	r3, [r7, #22]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f7f9 fe06 	bl	8001578 <HAL_PCD_EP_GetRxCount>
 800796c:	4603      	mov	r3, r0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007980:	4b02      	ldr	r3, [pc, #8]	@ (800798c <USBD_static_malloc+0x14>)
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr
 800798c:	20001348 	.word	0x20001348

08007990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr

080079b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d817      	bhi.n	80079fc <USBD_Get_USB_Status+0x44>
 80079cc:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <USBD_Get_USB_Status+0x1c>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	080079eb 	.word	0x080079eb
 80079dc:	080079f1 	.word	0x080079f1
 80079e0:	080079f7 	.word	0x080079f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73fb      	strb	r3, [r7, #15]
    break;
 80079e8:	e00b      	b.n	8007a02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ea:	2302      	movs	r3, #2
 80079ec:	73fb      	strb	r3, [r7, #15]
    break;
 80079ee:	e008      	b.n	8007a02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
    break;
 80079f4:	e005      	b.n	8007a02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079f6:	2302      	movs	r3, #2
 80079f8:	73fb      	strb	r3, [r7, #15]
    break;
 80079fa:	e002      	b.n	8007a02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80079fc:	2302      	movs	r3, #2
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	bf00      	nop
  }
  return usb_status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop

08007a10 <memset>:
 8007a10:	4603      	mov	r3, r0
 8007a12:	4402      	add	r2, r0
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d100      	bne.n	8007a1a <memset+0xa>
 8007a18:	4770      	bx	lr
 8007a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1e:	e7f9      	b.n	8007a14 <memset+0x4>

08007a20 <__libc_init_array>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	2600      	movs	r6, #0
 8007a24:	4d0c      	ldr	r5, [pc, #48]	@ (8007a58 <__libc_init_array+0x38>)
 8007a26:	4c0d      	ldr	r4, [pc, #52]	@ (8007a5c <__libc_init_array+0x3c>)
 8007a28:	1b64      	subs	r4, r4, r5
 8007a2a:	10a4      	asrs	r4, r4, #2
 8007a2c:	42a6      	cmp	r6, r4
 8007a2e:	d109      	bne.n	8007a44 <__libc_init_array+0x24>
 8007a30:	f000 f81a 	bl	8007a68 <_init>
 8007a34:	2600      	movs	r6, #0
 8007a36:	4d0a      	ldr	r5, [pc, #40]	@ (8007a60 <__libc_init_array+0x40>)
 8007a38:	4c0a      	ldr	r4, [pc, #40]	@ (8007a64 <__libc_init_array+0x44>)
 8007a3a:	1b64      	subs	r4, r4, r5
 8007a3c:	10a4      	asrs	r4, r4, #2
 8007a3e:	42a6      	cmp	r6, r4
 8007a40:	d105      	bne.n	8007a4e <__libc_init_array+0x2e>
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a48:	4798      	blx	r3
 8007a4a:	3601      	adds	r6, #1
 8007a4c:	e7ee      	b.n	8007a2c <__libc_init_array+0xc>
 8007a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a52:	4798      	blx	r3
 8007a54:	3601      	adds	r6, #1
 8007a56:	e7f2      	b.n	8007a3e <__libc_init_array+0x1e>
 8007a58:	08007aec 	.word	0x08007aec
 8007a5c:	08007aec 	.word	0x08007aec
 8007a60:	08007aec 	.word	0x08007aec
 8007a64:	08007af0 	.word	0x08007af0

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
