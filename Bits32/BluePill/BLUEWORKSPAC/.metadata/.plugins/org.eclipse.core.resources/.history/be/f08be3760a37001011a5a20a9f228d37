/*
 * UnerProtocol.c
 *
 *  Created on: May 18, 2025
 *      Author: santi
 */

#include "UnerProtocol.h"
#include "stdlib.h"

_work casts;

int16_t value=9999;
_eProtocolo estadoProtocolo;

void UP_initprotocol(_sDato *datosCom,uint8_t ringbuff){

		datosCom->bufferRx = malloc(ringbuff);
	    datosCom->bufferTx = malloc(ringbuff);

}

void UP_sendInfo(_sDato *datosCom, uint8_t bufferAux[],uint8_t bytes){

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;

    bufAux[indiceAux++]='U';
    bufAux[indiceAux++]='N';
    bufAux[indiceAux++]='E';
    bufAux[indiceAux++]='R';

    bufAux[indiceAux++]=bytes;
    bufAux[indiceAux++]=':';

    for(i=0; i<bytes-1; i++)
        bufAux[indiceAux++] = bufferAux[i];

    cks=0;
    for(i=0 ;i<indiceAux;i++){
        cks^= bufAux[i];
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
    }
     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;

     datosCom->bytesTosend=indiceAux;

}

void UP_decodeHeader(_sDato *datosCom){

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;

    while (datosCom->indexReadRx!=indexWriteRxCopy)
    {
        switch (estadoProtocolo) {
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
                    estadoProtocolo=HEADER_1;
                    datosCom->cheksumRx=0;
                }
                break;
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
                   estadoProtocolo=HEADER_2;
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
                    estadoProtocolo=HEADER_3;
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
					estadoProtocolo=NBYTES;
				else{
					datosCom->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
                estadoProtocolo=TOKEN;
                break;
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
                   estadoProtocolo=PAYLOAD;
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
            case PAYLOAD:
                if (nBytes>1){
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
                }
                nBytes--;
                if(nBytes<=0){
                    estadoProtocolo=START;
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
                    	UP_decodeData(datosCom);
                    }
                }

                break;
            default:
                estadoProtocolo=START;
                break;
        }
    }
}



void UP_decodeData(_sDato *datosCom){

    uint8_t bufAux[20], indiceAux=0,bytes=0;

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD

    break;
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
		bytes=0x02;

    break;

    case TEXT:

		bufAux[indiceAux++]=TEXT;
//		bytes=;

    break;

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;

    	casts.u8[0]=datosCom->bufferRx[datosCom->indexStart+3];
    	casts.u8[1]=datosCom->bufferRx[datosCom->indexStart+4];

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad

    break;
    default:

        bufAux[indiceAux++]=0xFF;
        bytes=0x02;

    break;
    }

    UP_sendInfo(datosCom,bufAux,bytes);
}

void UP_datafromUSB(_sDato *datosCom,uint8_t *buf, uint16_t length) {

  uint16_t i;

  for (i = 0; i < length; i++) {
	datosCom->bufferRx[datosCom->indexWriteRx] = buf[i];
	datosCom->indexWriteRx++;
  }

}

void UP_comunicationsTask(_sDato *datosCom){

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
		UP_decodeHeader(datosCom);
		datosCom->indexReadRx=datosCom->indexWriteRx;
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
				datosCom->bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
		    }else{
		    	datosCom->bytesTosend =  ringbuff - datosCom->indexReadTx;
		    }
		    if(CDC_Transmit_FS(&datosCom->bufferTx[datosCom->indexReadTx], datosCom->bytesTosend) == USBD_OK){
		    	datosCom->indexReadTx += datosCom->bytesTosend;
		    }
	}
}

int16_t ret_eng_Values(){
	return value;
}

