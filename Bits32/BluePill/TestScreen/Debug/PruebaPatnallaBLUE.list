
PruebaPatnallaBLUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005260  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005798  08005798  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005798  08005798  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005798  08005798  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080057a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000010  080057b0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  080057b0  0000756c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be46  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddf  00000000  00000000  00012e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00014c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a73  00000000  00000000  000159b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178f4  00000000  00000000  00016423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f161  00000000  00000000  0002dd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5e8  00000000  00000000  0003ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000382c  00000000  00000000  000c74a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000cacd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005354 	.word	0x08005354

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005354 	.word	0x08005354

0800014c <Display_Set_I2C_Master_Transmit>:

uint8_t OLED_DMA_BUFFER[OLED_DMA_BUFFER_SIZE];

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000156:	4a05      	ldr	r2, [pc, #20]	@ (800016c <Display_Set_I2C_Master_Transmit+0x20>)
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 800015c:	4a04      	ldr	r2, [pc, #16]	@ (8000170 <Display_Set_I2C_Master_Transmit+0x24>)
 800015e:	683b      	ldr	r3, [r7, #0]
 8000160:	6013      	str	r3, [r2, #0]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000034 	.word	0x20000034
 8000170:	20000038 	.word	0x20000038

08000174 <Display_Init>:

e_system Display_Init(){
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	71fb      	strb	r3, [r7, #7]
	//SSD1306_Buffer = Buffer;
	//Buf_size = width * height / 8;

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 800017e:	22ae      	movs	r2, #174	@ 0xae
 8000180:	2100      	movs	r1, #0
 8000182:	2078      	movs	r0, #120	@ 0x78
 8000184:	f000 f944 	bl	8000410 <ssd1306_I2C_Write>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	4413      	add	r3, r2
 8000190:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000192:	2220      	movs	r2, #32
 8000194:	2100      	movs	r1, #0
 8000196:	2078      	movs	r0, #120	@ 0x78
 8000198:	f000 f93a 	bl	8000410 <ssd1306_I2C_Write>
 800019c:	4603      	mov	r3, r0
 800019e:	461a      	mov	r2, r3
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	4413      	add	r3, r2
 80001a4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80001a6:	2210      	movs	r2, #16
 80001a8:	2100      	movs	r1, #0
 80001aa:	2078      	movs	r0, #120	@ 0x78
 80001ac:	f000 f930 	bl	8000410 <ssd1306_I2C_Write>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	4413      	add	r3, r2
 80001b8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80001ba:	22b0      	movs	r2, #176	@ 0xb0
 80001bc:	2100      	movs	r1, #0
 80001be:	2078      	movs	r0, #120	@ 0x78
 80001c0:	f000 f926 	bl	8000410 <ssd1306_I2C_Write>
 80001c4:	4603      	mov	r3, r0
 80001c6:	461a      	mov	r2, r3
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	4413      	add	r3, r2
 80001cc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 80001ce:	22c8      	movs	r2, #200	@ 0xc8
 80001d0:	2100      	movs	r1, #0
 80001d2:	2078      	movs	r0, #120	@ 0x78
 80001d4:	f000 f91c 	bl	8000410 <ssd1306_I2C_Write>
 80001d8:	4603      	mov	r3, r0
 80001da:	461a      	mov	r2, r3
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	4413      	add	r3, r2
 80001e0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 80001e2:	2200      	movs	r2, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	2078      	movs	r0, #120	@ 0x78
 80001e8:	f000 f912 	bl	8000410 <ssd1306_I2C_Write>
 80001ec:	4603      	mov	r3, r0
 80001ee:	461a      	mov	r2, r3
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	4413      	add	r3, r2
 80001f4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 80001f6:	2210      	movs	r2, #16
 80001f8:	2100      	movs	r1, #0
 80001fa:	2078      	movs	r0, #120	@ 0x78
 80001fc:	f000 f908 	bl	8000410 <ssd1306_I2C_Write>
 8000200:	4603      	mov	r3, r0
 8000202:	461a      	mov	r2, r3
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	4413      	add	r3, r2
 8000208:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 800020a:	2240      	movs	r2, #64	@ 0x40
 800020c:	2100      	movs	r1, #0
 800020e:	2078      	movs	r0, #120	@ 0x78
 8000210:	f000 f8fe 	bl	8000410 <ssd1306_I2C_Write>
 8000214:	4603      	mov	r3, r0
 8000216:	461a      	mov	r2, r3
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	4413      	add	r3, r2
 800021c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 800021e:	2281      	movs	r2, #129	@ 0x81
 8000220:	2100      	movs	r1, #0
 8000222:	2078      	movs	r0, #120	@ 0x78
 8000224:	f000 f8f4 	bl	8000410 <ssd1306_I2C_Write>
 8000228:	4603      	mov	r3, r0
 800022a:	461a      	mov	r2, r3
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	4413      	add	r3, r2
 8000230:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000232:	22ff      	movs	r2, #255	@ 0xff
 8000234:	2100      	movs	r1, #0
 8000236:	2078      	movs	r0, #120	@ 0x78
 8000238:	f000 f8ea 	bl	8000410 <ssd1306_I2C_Write>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4413      	add	r3, r2
 8000244:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000246:	22a1      	movs	r2, #161	@ 0xa1
 8000248:	2100      	movs	r1, #0
 800024a:	2078      	movs	r0, #120	@ 0x78
 800024c:	f000 f8e0 	bl	8000410 <ssd1306_I2C_Write>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	4413      	add	r3, r2
 8000258:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 800025a:	22a6      	movs	r2, #166	@ 0xa6
 800025c:	2100      	movs	r1, #0
 800025e:	2078      	movs	r0, #120	@ 0x78
 8000260:	f000 f8d6 	bl	8000410 <ssd1306_I2C_Write>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4413      	add	r3, r2
 800026c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 800026e:	22a8      	movs	r2, #168	@ 0xa8
 8000270:	2100      	movs	r1, #0
 8000272:	2078      	movs	r0, #120	@ 0x78
 8000274:	f000 f8cc 	bl	8000410 <ssd1306_I2C_Write>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4413      	add	r3, r2
 8000280:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000282:	223f      	movs	r2, #63	@ 0x3f
 8000284:	2100      	movs	r1, #0
 8000286:	2078      	movs	r0, #120	@ 0x78
 8000288:	f000 f8c2 	bl	8000410 <ssd1306_I2C_Write>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	4413      	add	r3, r2
 8000294:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000296:	22a4      	movs	r2, #164	@ 0xa4
 8000298:	2100      	movs	r1, #0
 800029a:	2078      	movs	r0, #120	@ 0x78
 800029c:	f000 f8b8 	bl	8000410 <ssd1306_I2C_Write>
 80002a0:	4603      	mov	r3, r0
 80002a2:	461a      	mov	r2, r3
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	4413      	add	r3, r2
 80002a8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 80002aa:	22d3      	movs	r2, #211	@ 0xd3
 80002ac:	2100      	movs	r1, #0
 80002ae:	2078      	movs	r0, #120	@ 0x78
 80002b0:	f000 f8ae 	bl	8000410 <ssd1306_I2C_Write>
 80002b4:	4603      	mov	r3, r0
 80002b6:	461a      	mov	r2, r3
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4413      	add	r3, r2
 80002bc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 80002be:	2200      	movs	r2, #0
 80002c0:	2100      	movs	r1, #0
 80002c2:	2078      	movs	r0, #120	@ 0x78
 80002c4:	f000 f8a4 	bl	8000410 <ssd1306_I2C_Write>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	4413      	add	r3, r2
 80002d0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 80002d2:	22d5      	movs	r2, #213	@ 0xd5
 80002d4:	2100      	movs	r1, #0
 80002d6:	2078      	movs	r0, #120	@ 0x78
 80002d8:	f000 f89a 	bl	8000410 <ssd1306_I2C_Write>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4413      	add	r3, r2
 80002e4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 80002e6:	22f0      	movs	r2, #240	@ 0xf0
 80002e8:	2100      	movs	r1, #0
 80002ea:	2078      	movs	r0, #120	@ 0x78
 80002ec:	f000 f890 	bl	8000410 <ssd1306_I2C_Write>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4413      	add	r3, r2
 80002f8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 80002fa:	22d9      	movs	r2, #217	@ 0xd9
 80002fc:	2100      	movs	r1, #0
 80002fe:	2078      	movs	r0, #120	@ 0x78
 8000300:	f000 f886 	bl	8000410 <ssd1306_I2C_Write>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4413      	add	r3, r2
 800030c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 800030e:	2222      	movs	r2, #34	@ 0x22
 8000310:	2100      	movs	r1, #0
 8000312:	2078      	movs	r0, #120	@ 0x78
 8000314:	f000 f87c 	bl	8000410 <ssd1306_I2C_Write>
 8000318:	4603      	mov	r3, r0
 800031a:	461a      	mov	r2, r3
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4413      	add	r3, r2
 8000320:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000322:	22da      	movs	r2, #218	@ 0xda
 8000324:	2100      	movs	r1, #0
 8000326:	2078      	movs	r0, #120	@ 0x78
 8000328:	f000 f872 	bl	8000410 <ssd1306_I2C_Write>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	4413      	add	r3, r2
 8000334:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000336:	2212      	movs	r2, #18
 8000338:	2100      	movs	r1, #0
 800033a:	2078      	movs	r0, #120	@ 0x78
 800033c:	f000 f868 	bl	8000410 <ssd1306_I2C_Write>
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4413      	add	r3, r2
 8000348:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 800034a:	22db      	movs	r2, #219	@ 0xdb
 800034c:	2100      	movs	r1, #0
 800034e:	2078      	movs	r0, #120	@ 0x78
 8000350:	f000 f85e 	bl	8000410 <ssd1306_I2C_Write>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	4413      	add	r3, r2
 800035c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 800035e:	2220      	movs	r2, #32
 8000360:	2100      	movs	r1, #0
 8000362:	2078      	movs	r0, #120	@ 0x78
 8000364:	f000 f854 	bl	8000410 <ssd1306_I2C_Write>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4413      	add	r3, r2
 8000370:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000372:	228d      	movs	r2, #141	@ 0x8d
 8000374:	2100      	movs	r1, #0
 8000376:	2078      	movs	r0, #120	@ 0x78
 8000378:	f000 f84a 	bl	8000410 <ssd1306_I2C_Write>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4413      	add	r3, r2
 8000384:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000386:	2214      	movs	r2, #20
 8000388:	2100      	movs	r1, #0
 800038a:	2078      	movs	r0, #120	@ 0x78
 800038c:	f000 f840 	bl	8000410 <ssd1306_I2C_Write>
 8000390:	4603      	mov	r3, r0
 8000392:	461a      	mov	r2, r3
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4413      	add	r3, r2
 8000398:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 800039a:	22af      	movs	r2, #175	@ 0xaf
 800039c:	2100      	movs	r1, #0
 800039e:	2078      	movs	r0, #120	@ 0x78
 80003a0:	f000 f836 	bl	8000410 <ssd1306_I2C_Write>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4413      	add	r3, r2
 80003ac:	71fb      	strb	r3, [r7, #7]


	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80003ae:	222e      	movs	r2, #46	@ 0x2e
 80003b0:	2100      	movs	r1, #0
 80003b2:	2078      	movs	r0, #120	@ 0x78
 80003b4:	f000 f82c 	bl	8000410 <ssd1306_I2C_Write>
 80003b8:	4603      	mov	r3, r0
 80003ba:	461a      	mov	r2, r3
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4413      	add	r3, r2
 80003c0:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 f8d8 	bl	8000578 <Display_Fill>


	Update.page = 0;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <Display_Init+0x294>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
	Update.state = PAGE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <Display_Init+0x294>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	705a      	strb	r2, [r3, #1]
	Update.DMA_Ready_To_Transmit = TRUE;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <Display_Init+0x294>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	709a      	strb	r2, [r3, #2]
	Update.Ready_To_Refresh = TRUE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <Display_Init+0x294>)
 80003dc:	2201      	movs	r2, #1
 80003de:	70da      	strb	r2, [r3, #3]

	/* Set default values */
	SSD1306.CurrentX = 0;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <Display_Init+0x298>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80003e6:	4b09      	ldr	r3, [pc, #36]	@ (800040c <Display_Init+0x298>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <Display_Init+0x298>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	715a      	strb	r2, [r3, #5]
	//Send_Data_Block();
	if(status == SYS_OK)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d101      	bne.n	80003fc <Display_Init+0x288>
		return SYS_OK;
 80003f8:	2300      	movs	r3, #0
 80003fa:	e000      	b.n	80003fe <Display_Init+0x28a>
	/* Return OK */
	return SYS_ERROR;
 80003fc:	2301      	movs	r3, #1
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000003c 	.word	0x2000003c
 800040c:	2000002c 	.word	0x2000002c

08000410 <ssd1306_I2C_Write>:
	for(i = 0; i < count; i++)
		dt[i+1] = data[i];
	return I2C_Master_Transmit(address, dt, count+1);
}

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	460b      	mov	r3, r1
 800041c:	71bb      	strb	r3, [r7, #6]
 800041e:	4613      	mov	r3, r2
 8000420:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 800042a:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <ssd1306_I2C_Write+0x38>)
 800042c:	681c      	ldr	r4, [r3, #0]
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	b298      	uxth	r0, r3
 8000432:	f107 010c 	add.w	r1, r7, #12
 8000436:	230a      	movs	r3, #10
 8000438:	2202      	movs	r2, #2
 800043a:	47a0      	blx	r4
 800043c:	4603      	mov	r3, r0
}
 800043e:	4618      	mov	r0, r3
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bd90      	pop	{r4, r7, pc}
 8000446:	bf00      	nop
 8000448:	20000038 	.word	0x20000038

0800044c <Display_UpdateScreen>:

void Display_UpdateScreen(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

	if(Update.Ready_To_Refresh && Update.DMA_Ready_To_Transmit){
 8000450:	4b36      	ldr	r3, [pc, #216]	@ (800052c <Display_UpdateScreen+0xe0>)
 8000452:	78db      	ldrb	r3, [r3, #3]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d066      	beq.n	8000526 <Display_UpdateScreen+0xda>
 8000458:	4b34      	ldr	r3, [pc, #208]	@ (800052c <Display_UpdateScreen+0xe0>)
 800045a:	789b      	ldrb	r3, [r3, #2]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d062      	beq.n	8000526 <Display_UpdateScreen+0xda>
		switch(Update.state){
 8000460:	4b32      	ldr	r3, [pc, #200]	@ (800052c <Display_UpdateScreen+0xe0>)
 8000462:	785b      	ldrb	r3, [r3, #1]
 8000464:	2b03      	cmp	r3, #3
 8000466:	d854      	bhi.n	8000512 <Display_UpdateScreen+0xc6>
 8000468:	a201      	add	r2, pc, #4	@ (adr r2, 8000470 <Display_UpdateScreen+0x24>)
 800046a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046e:	bf00      	nop
 8000470:	08000481 	.word	0x08000481
 8000474:	080004a1 	.word	0x080004a1
 8000478:	080004b9 	.word	0x080004b9
 800047c:	080004d1 	.word	0x080004d1
		case PAGE:
			if(SSD1306_WRITECOMMAND(0xB0 + Update.page) == SYS_OK){
 8000480:	4b2a      	ldr	r3, [pc, #168]	@ (800052c <Display_UpdateScreen+0xe0>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	3b50      	subs	r3, #80	@ 0x50
 8000486:	b2db      	uxtb	r3, r3
 8000488:	461a      	mov	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	2078      	movs	r0, #120	@ 0x78
 800048e:	f7ff ffbf 	bl	8000410 <ssd1306_I2C_Write>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d135      	bne.n	8000504 <Display_UpdateScreen+0xb8>
				Update.state = LOWER_START;
 8000498:	4b24      	ldr	r3, [pc, #144]	@ (800052c <Display_UpdateScreen+0xe0>)
 800049a:	2201      	movs	r2, #1
 800049c:	705a      	strb	r2, [r3, #1]
			}
			break;
 800049e:	e031      	b.n	8000504 <Display_UpdateScreen+0xb8>
		case LOWER_START:
			if(SSD1306_WRITECOMMAND(0x00) == SYS_OK){
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2078      	movs	r0, #120	@ 0x78
 80004a6:	f7ff ffb3 	bl	8000410 <ssd1306_I2C_Write>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d12b      	bne.n	8000508 <Display_UpdateScreen+0xbc>
				Update.state = UPPER_START;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004b2:	2202      	movs	r2, #2
 80004b4:	705a      	strb	r2, [r3, #1]
			}
			break;
 80004b6:	e027      	b.n	8000508 <Display_UpdateScreen+0xbc>
		case UPPER_START:
			if(SSD1306_WRITECOMMAND(0x10) == SYS_OK){
 80004b8:	2210      	movs	r2, #16
 80004ba:	2100      	movs	r1, #0
 80004bc:	2078      	movs	r0, #120	@ 0x78
 80004be:	f7ff ffa7 	bl	8000410 <ssd1306_I2C_Write>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d121      	bne.n	800050c <Display_UpdateScreen+0xc0>
				Update.state = DATA;
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004ca:	2203      	movs	r2, #3
 80004cc:	705a      	strb	r2, [r3, #1]
			}
			break;
 80004ce:	e01d      	b.n	800050c <Display_UpdateScreen+0xc0>
		case DATA:
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, &OLED_DMA_BUFFER[SSD1306_WIDTH * Update.page], SSD1306_WIDTH) == SYS_OK){
 80004d0:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <Display_UpdateScreen+0xe4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a15      	ldr	r2, [pc, #84]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	01d2      	lsls	r2, r2, #7
 80004da:	4916      	ldr	r1, [pc, #88]	@ (8000534 <Display_UpdateScreen+0xe8>)
 80004dc:	4411      	add	r1, r2
 80004de:	2280      	movs	r2, #128	@ 0x80
 80004e0:	2078      	movs	r0, #120	@ 0x78
 80004e2:	4798      	blx	r3
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d112      	bne.n	8000510 <Display_UpdateScreen+0xc4>
				Update.page++;
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004f4:	701a      	strb	r2, [r3, #0]
				Update.state = PAGE;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	705a      	strb	r2, [r3, #1]
				Update.DMA_Ready_To_Transmit = 0;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <Display_UpdateScreen+0xe0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000502:	e005      	b.n	8000510 <Display_UpdateScreen+0xc4>
			break;
 8000504:	bf00      	nop
 8000506:	e004      	b.n	8000512 <Display_UpdateScreen+0xc6>
			break;
 8000508:	bf00      	nop
 800050a:	e002      	b.n	8000512 <Display_UpdateScreen+0xc6>
			break;
 800050c:	bf00      	nop
 800050e:	e000      	b.n	8000512 <Display_UpdateScreen+0xc6>
			break;
 8000510:	bf00      	nop
		}
		if(Update.page > 7){
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <Display_UpdateScreen+0xe0>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b07      	cmp	r3, #7
 8000518:	d905      	bls.n	8000526 <Display_UpdateScreen+0xda>
			Update.page = 0;
 800051a:	4b04      	ldr	r3, [pc, #16]	@ (800052c <Display_UpdateScreen+0xe0>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
			Update.Ready_To_Refresh = 0;
 8000520:	4b02      	ldr	r3, [pc, #8]	@ (800052c <Display_UpdateScreen+0xe0>)
 8000522:	2200      	movs	r2, #0
 8000524:	70da      	strb	r2, [r3, #3]
		}
	}

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000003c 	.word	0x2000003c
 8000530:	20000034 	.word	0x20000034
 8000534:	20000040 	.word	0x20000040

08000538 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	Update.DMA_Ready_To_Transmit = val;
 8000542:	4a04      	ldr	r2, [pc, #16]	@ (8000554 <Display_I2C_DMA_Ready+0x1c>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	7093      	strb	r3, [r2, #2]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000003c 	.word	0x2000003c

08000558 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 8000562:	4a04      	ldr	r2, [pc, #16]	@ (8000574 <Display_I2C_Refresh_Ready+0x1c>)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	70d3      	strb	r3, [r2, #3]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000003c 	.word	0x2000003c

08000578 <Display_Fill>:
	SSD1306_WRITECOMMAND(0x8D);
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void Display_Fill(SSD1306_COLOR_t color) {
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e00d      	b.n	80005a4 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <Display_Fill+0x1a>
 800058e:	2100      	movs	r1, #0
 8000590:	e000      	b.n	8000594 <Display_Fill+0x1c>
 8000592:	21ff      	movs	r1, #255	@ 0xff
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <Display_Fill+0x40>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	460a      	mov	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005aa:	d3ed      	bcc.n	8000588 <Display_Fill+0x10>
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	20000040 	.word	0x20000040

080005bc <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	460b      	mov	r3, r1
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	4613      	mov	r3, r2
 80005cc:	70fb      	strb	r3, [r7, #3]
	if (
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80005d2:	d848      	bhi.n	8000666 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80005d4:	88bb      	ldrh	r3, [r7, #4]
 80005d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80005d8:	d845      	bhi.n	8000666 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <Display_DrawPixel+0xb4>)
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80005e2:	78fb      	ldrb	r3, [r7, #3]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	bf0c      	ite	eq
 80005e8:	2301      	moveq	r3, #1
 80005ea:	2300      	movne	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d11a      	bne.n	800062c <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	08db      	lsrs	r3, r3, #3
 80005fc:	b298      	uxth	r0, r3
 80005fe:	4603      	mov	r3, r0
 8000600:	01db      	lsls	r3, r3, #7
 8000602:	4413      	add	r3, r2
 8000604:	4a1b      	ldr	r2, [pc, #108]	@ (8000674 <Display_DrawPixel+0xb8>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	b25a      	sxtb	r2, r3
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	b25b      	sxtb	r3, r3
 8000618:	4313      	orrs	r3, r2
 800061a:	b259      	sxtb	r1, r3
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	4603      	mov	r3, r0
 8000620:	01db      	lsls	r3, r3, #7
 8000622:	4413      	add	r3, r2
 8000624:	b2c9      	uxtb	r1, r1
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <Display_DrawPixel+0xb8>)
 8000628:	54d1      	strb	r1, [r2, r3]
 800062a:	e01d      	b.n	8000668 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	b298      	uxth	r0, r3
 8000634:	4603      	mov	r3, r0
 8000636:	01db      	lsls	r3, r3, #7
 8000638:	4413      	add	r3, r2
 800063a:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <Display_DrawPixel+0xb8>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	b25a      	sxtb	r2, r3
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	2101      	movs	r1, #1
 8000648:	fa01 f303 	lsl.w	r3, r1, r3
 800064c:	b25b      	sxtb	r3, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	b25b      	sxtb	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	b259      	sxtb	r1, r3
 8000656:	88fa      	ldrh	r2, [r7, #6]
 8000658:	4603      	mov	r3, r0
 800065a:	01db      	lsls	r3, r3, #7
 800065c:	4413      	add	r3, r2
 800065e:	b2c9      	uxtb	r1, r1
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <Display_DrawPixel+0xb8>)
 8000662:	54d1      	strb	r1, [r2, r3]
 8000664:	e000      	b.n	8000668 <Display_DrawPixel+0xac>
		return;
 8000666:	bf00      	nop
	}
}
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20000040 	.word	0x20000040

08000678 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60ba      	str	r2, [r7, #8]
 8000680:	461a      	mov	r2, r3
 8000682:	4603      	mov	r3, r0
 8000684:	81fb      	strh	r3, [r7, #14]
 8000686:	460b      	mov	r3, r1
 8000688:	81bb      	strh	r3, [r7, #12]
 800068a:	4613      	mov	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800068e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000692:	3307      	adds	r3, #7
 8000694:	2b00      	cmp	r3, #0
 8000696:	da00      	bge.n	800069a <Display_DrawBitmap+0x22>
 8000698:	3307      	adds	r3, #7
 800069a:	10db      	asrs	r3, r3, #3
 800069c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	82bb      	strh	r3, [r7, #20]
 80006a6:	e044      	b.n	8000732 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	827b      	strh	r3, [r7, #18]
 80006ac:	e02f      	b.n	800070e <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 80006ae:	8a7b      	ldrh	r3, [r7, #18]
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	75fb      	strb	r3, [r7, #23]
 80006be:	e012      	b.n	80006e6 <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80006c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80006c8:	fb03 f202 	mul.w	r2, r3, r2
 80006cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da00      	bge.n	80006d6 <Display_DrawBitmap+0x5e>
 80006d4:	3307      	adds	r3, #7
 80006d6:	10db      	asrs	r3, r3, #3
 80006d8:	b21b      	sxth	r3, r3
 80006da:	4413      	add	r3, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 80006e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da09      	bge.n	8000702 <Display_DrawBitmap+0x8a>
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	8a7b      	ldrh	r3, [r7, #18]
 80006f2:	4413      	add	r3, r2
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	89b9      	ldrh	r1, [r7, #12]
 80006f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80006fa:	b2d2      	uxtb	r2, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff5d 	bl	80005bc <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000702:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000706:	b29b      	uxth	r3, r3
 8000708:	3301      	adds	r3, #1
 800070a:	b29b      	uxth	r3, r3
 800070c:	827b      	strh	r3, [r7, #18]
 800070e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbc9      	blt.n	80006ae <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800071a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	82bb      	strh	r3, [r7, #20]
 8000726:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800072a:	b29b      	uxth	r3, r3
 800072c:	3301      	adds	r3, #1
 800072e:	b29b      	uxth	r3, r3
 8000730:	81bb      	strh	r3, [r7, #12]
 8000732:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000736:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800073a:	429a      	cmp	r2, r3
 800073c:	dbb4      	blt.n	80006a8 <Display_DrawBitmap+0x30>
        }
    }
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_I2C_MemTxCpltCallback>:
e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000754:	2b78      	cmp	r3, #120	@ 0x78
 8000756:	d102      	bne.n	800075e <HAL_I2C_MemTxCpltCallback+0x16>
		Display_I2C_DMA_Ready(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff feed 	bl	8000538 <Display_I2C_DMA_Ready>
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a06      	ldr	r2, [pc, #24]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d104      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x1c>
		IS10MS = TRUE;
 800077a:	4a06      	ldr	r2, [pc, #24]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800077c:	7813      	ldrb	r3, [r2, #0]
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	7013      	strb	r3, [r2, #0]
	}
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40000800 	.word	0x40000800
 8000794:	20000564 	.word	0x20000564

08000798 <TASK_10ms>:
void TASK_10ms(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	is100ms--;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <TASK_10ms+0x3c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <TASK_10ms+0x3c>)
 80007a6:	701a      	strb	r2, [r3, #0]
	if(!is100ms){
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <TASK_10ms+0x3c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10a      	bne.n	80007c6 <TASK_10ms+0x2e>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80007b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b4:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <TASK_10ms+0x40>)
 80007b6:	f001 f8f5 	bl	80019a4 <HAL_GPIO_TogglePin>
		is100ms = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <TASK_10ms+0x3c>)
 80007bc:	220a      	movs	r2, #10
 80007be:	701a      	strb	r2, [r3, #0]

		Display_I2C_Refresh_Ready(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fec9 	bl	8000558 <Display_I2C_Refresh_Ready>
		/*if(HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14) != HAL_OK){
			comm_sendCMD(&USB.data, USERTEXT, (uint8_t*)"putopepe", 8);
		}*/
	}
	IS10MS = 0;
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <TASK_10ms+0x44>)
 80007c8:	7813      	ldrb	r3, [r2, #0]
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	7013      	strb	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	40011000 	.word	0x40011000
 80007dc:	20000564 	.word	0x20000564

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fb3b 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f83b 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f000 f921 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f2:	f000 f8f9 	bl	80009e8 <MX_DMA_Init>
  MX_I2C1_Init();
 80007f6:	f000 f87b 	bl	80008f0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80007fa:	f000 f8a7 	bl	800094c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <main+0x70>)
 8000800:	f004 f9da 	bl	8004bb8 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	@ 0x64
 8000806:	f000 fb8d 	bl	8000f24 <HAL_Delay>
  Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Master_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 800080a:	4912      	ldr	r1, [pc, #72]	@ (8000854 <main+0x74>)
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <main+0x78>)
 800080e:	f7ff fc9d 	bl	800014c <Display_Set_I2C_Master_Transmit>
  if(Display_Init() == SYS_OK){
 8000812:	f7ff fcaf 	bl	8000174 <Display_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10c      	bne.n	8000836 <main+0x56>
	  HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	@ 0x64
 800081e:	f000 fb81 	bl	8000f24 <HAL_Delay>
  //Display_Fill(SSD1306_COLOR_WHITE);

	  Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8000822:	2301      	movs	r3, #1
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	2340      	movs	r3, #64	@ 0x40
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2380      	movs	r3, #128	@ 0x80
 800082c:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <main+0x7c>)
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff21 	bl	8000678 <Display_DrawBitmap>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Display_UpdateScreen();
 8000836:	f7ff fe09 	bl	800044c <Display_UpdateScreen>
	  if(IS10MS){
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <main+0x80>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0f6      	beq.n	8000836 <main+0x56>
			TASK_10ms();
 8000848:	f7ff ffa6 	bl	8000798 <TASK_10ms>
	  Display_UpdateScreen();
 800084c:	e7f3      	b.n	8000836 <main+0x56>
 800084e:	bf00      	nop
 8000850:	2000051c 	.word	0x2000051c
 8000854:	08000b19 	.word	0x08000b19
 8000858:	08000ae5 	.word	0x08000ae5
 800085c:	0800536c 	.word	0x0800536c
 8000860:	20000564 	.word	0x20000564

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b090      	sub	sp, #64	@ 0x40
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2228      	movs	r2, #40	@ 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 fd42 	bl	80052fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fd37 	bl	8004320 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008b8:	f000 f948 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2102      	movs	r1, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 ffa4 	bl	8004824 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008e2:	f000 f933 	bl	8000b4c <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3740      	adds	r7, #64	@ 0x40
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_I2C1_Init+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <MX_I2C1_Init+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_I2C1_Init+0x50>)
 80008fc:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_I2C1_Init+0x58>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_I2C1_Init+0x50>)
 800090e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_I2C1_Init+0x50>)
 800092e:	f001 f853 	bl	80019d8 <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 f908 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000440 	.word	0x20000440
 8000944:	40005400 	.word	0x40005400
 8000948:	00061a80 	.word	0x00061a80

0800094c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM4_Init+0x94>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <MX_TIM4_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000970:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000974:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM4_Init+0x94>)
 800097e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000982:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_TIM4_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000990:	4813      	ldr	r0, [pc, #76]	@ (80009e0 <MX_TIM4_Init+0x94>)
 8000992:	f004 f8c1 	bl	8004b18 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800099c:	f000 f8d6 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_TIM4_Init+0x94>)
 80009ae:	f004 fa45 	bl	8004e3c <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 f8c8 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_TIM4_Init+0x94>)
 80009ca:	f004 fc27 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 f8ba 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000051c 	.word	0x2000051c
 80009e4:	40000800 	.word	0x40000800

080009e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_DMA_Init+0x48>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <MX_DMA_Init+0x48>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <MX_DMA_Init+0x48>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2010      	movs	r0, #16
 8000a0c:	f000 fb85 	bl	800111a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a10:	2010      	movs	r0, #16
 8000a12:	f000 fb9e 	bl	8001152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2011      	movs	r0, #17
 8000a1c:	f000 fb7d 	bl	800111a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a20:	2011      	movs	r0, #17
 8000a22:	f000 fb96 	bl	8001152 <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a4e:	f043 0310 	orr.w	r3, r3, #16
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_GPIO_Init+0xa8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0308 	and.w	r3, r3, #8
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000ab0:	f000 ff60 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000ace:	f000 fdcd 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3720      	adds	r7, #32
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40011000 	.word	0x40011000

08000ae4 <I2C_1_Abstract_Master_Transmit>:

/* USER CODE BEGIN 4 */
e_system I2C_1_Abstract_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	80fb      	strh	r3, [r7, #6]
 8000af0:	4613      	mov	r3, r2
 8000af2:	80bb      	strh	r3, [r7, #4]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, 0x40, 1, p_Data, _Size);
 8000af4:	88f9      	ldrh	r1, [r7, #6]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	2240      	movs	r2, #64	@ 0x40
 8000b02:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <I2C_1_Abstract_Master_Transmit+0x30>)
 8000b04:	f001 f9be 	bl	8001e84 <HAL_I2C_Mem_Write_DMA>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000440 	.word	0x20000440

08000b18 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4603      	mov	r3, r0
 8000b24:	81fb      	strh	r3, [r7, #14]
 8000b26:	4613      	mov	r3, r2
 8000b28:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 8000b2a:	89ba      	ldrh	r2, [r7, #12]
 8000b2c:	89f9      	ldrh	r1, [r7, #14]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	4613      	mov	r3, r2
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8000b38:	f001 f8a6 	bl	8001c88 <HAL_I2C_Master_Transmit>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000440 	.word	0x20000440

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a43      	ldr	r2, [pc, #268]	@ (8000ce4 <HAL_I2C_MspInit+0x128>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d17f      	bne.n	8000cdc <HAL_I2C_MspInit+0x120>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b42      	ldr	r3, [pc, #264]	@ (8000ce8 <HAL_I2C_MspInit+0x12c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a41      	ldr	r2, [pc, #260]	@ (8000ce8 <HAL_I2C_MspInit+0x12c>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce8 <HAL_I2C_MspInit+0x12c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bf4:	23c0      	movs	r3, #192	@ 0xc0
 8000bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf8:	2312      	movs	r3, #18
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4839      	ldr	r0, [pc, #228]	@ (8000cec <HAL_I2C_MspInit+0x130>)
 8000c08:	f000 fd30 	bl	800166c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ce8 <HAL_I2C_MspInit+0x12c>)
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	4a35      	ldr	r2, [pc, #212]	@ (8000ce8 <HAL_I2C_MspInit+0x12c>)
 8000c12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c16:	61d3      	str	r3, [r2, #28]
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <HAL_I2C_MspInit+0x12c>)
 8000c1a:	69db      	ldr	r3, [r3, #28]
 8000c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000c24:	4b32      	ldr	r3, [pc, #200]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c26:	4a33      	ldr	r2, [pc, #204]	@ (8000cf4 <HAL_I2C_MspInit+0x138>)
 8000c28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c2a:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c30:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c42:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000c48:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000c54:	4826      	ldr	r0, [pc, #152]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c56:	f000 fa97 	bl	8001188 <HAL_DMA_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000c60:	f7ff ff74 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a22      	ldr	r2, [pc, #136]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c68:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c6a:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <HAL_I2C_MspInit+0x134>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000c70:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c72:	4a22      	ldr	r2, [pc, #136]	@ (8000cfc <HAL_I2C_MspInit+0x140>)
 8000c74:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c84:	2280      	movs	r2, #128	@ 0x80
 8000c86:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ca0:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000ca2:	f000 fa71 	bl	8001188 <HAL_DMA_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000cac:	f7ff ff4e 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a11      	ldr	r2, [pc, #68]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_I2C_MspInit+0x13c>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	201f      	movs	r0, #31
 8000cc2:	f000 fa2a 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cc6:	201f      	movs	r0, #31
 8000cc8:	f000 fa43 	bl	8001152 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2020      	movs	r0, #32
 8000cd2:	f000 fa22 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cd6:	2020      	movs	r0, #32
 8000cd8:	f000 fa3b 	bl	8001152 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	20000494 	.word	0x20000494
 8000cf4:	40020080 	.word	0x40020080
 8000cf8:	200004d8 	.word	0x200004d8
 8000cfc:	4002006c 	.word	0x4002006c

08000d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <HAL_TIM_Base_MspInit+0x44>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d113      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_TIM_Base_MspInit+0x48>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0c      	ldr	r2, [pc, #48]	@ (8000d48 <HAL_TIM_Base_MspInit+0x48>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_TIM_Base_MspInit+0x48>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201e      	movs	r0, #30
 8000d30:	f000 f9f3 	bl	800111a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d34:	201e      	movs	r0, #30
 8000d36:	f000 fa0c 	bl	8001152 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40000800 	.word	0x40000800
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f8a6 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <DMA1_Channel6_IRQHandler+0x10>)
 8000daa:	f000 fb1f 	bl	80013ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200004d8 	.word	0x200004d8

08000db8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <DMA1_Channel7_IRQHandler+0x10>)
 8000dbe:	f000 fb15 	bl	80013ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000494 	.word	0x20000494

08000dcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <TIM4_IRQHandler+0x10>)
 8000dd2:	f003 ff43 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000051c 	.word	0x2000051c

08000de0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <I2C1_EV_IRQHandler+0x10>)
 8000de6:	f001 f9a3 	bl	8002130 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000440 	.word	0x20000440

08000df4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <I2C1_ER_IRQHandler+0x10>)
 8000dfa:	f001 fb0a 	bl	8002412 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000440 	.word	0x20000440

08000e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e14:	f7ff fff8 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e1a:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e30:	4c09      	ldr	r4, [pc, #36]	@ (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f004 fa65 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e42:	f7ff fccd 	bl	80007e0 <main>
  bx lr
 8000e46:	4770      	bx	lr
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e50:	080057a0 	.word	0x080057a0
  ldr r2, =_sbss
 8000e54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e58:	2000056c 	.word	0x2000056c

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_Init+0x28>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_Init+0x28>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f947 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe6c 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40022000 	.word	0x40022000

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f95f 	bl	800116e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f927 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	@ (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20000008 	.word	0x20000008

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <HAL_IncTick+0x20>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000568 	.word	0x20000568

08000f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b02      	ldr	r3, [pc, #8]	@ (8000f20 <HAL_GetTick+0x10>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000568 	.word	0x20000568

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff0 	bl	8000f10 <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d005      	beq.n	8000f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_Delay+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4a:	bf00      	nop
 8000f4c:	f7ff ffe0 	bl	8000f10 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8f7      	bhi.n	8000f4c <HAL_Delay+0x28>
  {
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000000c 	.word	0x2000000c

08000f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9e:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <__NVIC_GetPriorityGrouping+0x18>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	f003 0307 	and.w	r3, r3, #7
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	db0b      	blt.n	8000ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 021f 	and.w	r2, r3, #31
 8000fe8:	4906      	ldr	r1, [pc, #24]	@ (8001004 <__NVIC_EnableIRQ+0x34>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff90 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff2d 	bl	8000f6c <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff42 	bl	8000fb4 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff35 	bl	8000fd0 <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa2 	bl	80010c0 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e043      	b.n	8001226 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <HAL_DMA_Init+0xa8>)
 80011a6:	4413      	add	r3, r2
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <HAL_DMA_Init+0xac>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	009a      	lsls	r2, r3, #2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001238 <HAL_DMA_Init+0xb0>)
 80011ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2202      	movs	r2, #2
 80011c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80011d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	bffdfff8 	.word	0xbffdfff8
 8001234:	cccccccd 	.word	0xcccccccd
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_DMA_Start_IT+0x20>
 8001258:	2302      	movs	r3, #2
 800125a:	e04b      	b.n	80012f4 <HAL_DMA_Start_IT+0xb8>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d13a      	bne.n	80012e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 f9bc 	bl	8001612 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d008      	beq.n	80012b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 020e 	orr.w	r2, r2, #14
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e00f      	b.n	80012d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0204 	bic.w	r2, r2, #4
 80012c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 020a 	orr.w	r2, r2, #10
 80012d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e005      	b.n	80012f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012ee:	2302      	movs	r3, #2
 80012f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d005      	beq.n	8001320 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e051      	b.n	80013c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 020e 	bic.w	r2, r2, #14
 800132e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <HAL_DMA_Abort_IT+0xd4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d029      	beq.n	800139e <HAL_DMA_Abort_IT+0xa2>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a21      	ldr	r2, [pc, #132]	@ (80013d4 <HAL_DMA_Abort_IT+0xd8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d022      	beq.n	800139a <HAL_DMA_Abort_IT+0x9e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1f      	ldr	r2, [pc, #124]	@ (80013d8 <HAL_DMA_Abort_IT+0xdc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d01a      	beq.n	8001394 <HAL_DMA_Abort_IT+0x98>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_DMA_Abort_IT+0xe0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d012      	beq.n	800138e <HAL_DMA_Abort_IT+0x92>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <HAL_DMA_Abort_IT+0xe4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00a      	beq.n	8001388 <HAL_DMA_Abort_IT+0x8c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <HAL_DMA_Abort_IT+0xe8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d102      	bne.n	8001382 <HAL_DMA_Abort_IT+0x86>
 800137c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001380:	e00e      	b.n	80013a0 <HAL_DMA_Abort_IT+0xa4>
 8001382:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001386:	e00b      	b.n	80013a0 <HAL_DMA_Abort_IT+0xa4>
 8001388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800138c:	e008      	b.n	80013a0 <HAL_DMA_Abort_IT+0xa4>
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	e005      	b.n	80013a0 <HAL_DMA_Abort_IT+0xa4>
 8001394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001398:	e002      	b.n	80013a0 <HAL_DMA_Abort_IT+0xa4>
 800139a:	2310      	movs	r3, #16
 800139c:	e000      	b.n	80013a0 <HAL_DMA_Abort_IT+0xa4>
 800139e:	2301      	movs	r3, #1
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_DMA_Abort_IT+0xec>)
 80013a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
    } 
  }
  return status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40020008 	.word	0x40020008
 80013d4:	4002001c 	.word	0x4002001c
 80013d8:	40020030 	.word	0x40020030
 80013dc:	40020044 	.word	0x40020044
 80013e0:	40020058 	.word	0x40020058
 80013e4:	4002006c 	.word	0x4002006c
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	2204      	movs	r2, #4
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d04f      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xc8>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04a      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a66      	ldr	r2, [pc, #408]	@ (80015dc <HAL_DMA_IRQHandler+0x1f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d029      	beq.n	800149a <HAL_DMA_IRQHandler+0xae>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a65      	ldr	r2, [pc, #404]	@ (80015e0 <HAL_DMA_IRQHandler+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d022      	beq.n	8001496 <HAL_DMA_IRQHandler+0xaa>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a63      	ldr	r2, [pc, #396]	@ (80015e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01a      	beq.n	8001490 <HAL_DMA_IRQHandler+0xa4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a62      	ldr	r2, [pc, #392]	@ (80015e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d012      	beq.n	800148a <HAL_DMA_IRQHandler+0x9e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a60      	ldr	r2, [pc, #384]	@ (80015ec <HAL_DMA_IRQHandler+0x200>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00a      	beq.n	8001484 <HAL_DMA_IRQHandler+0x98>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5f      	ldr	r2, [pc, #380]	@ (80015f0 <HAL_DMA_IRQHandler+0x204>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d102      	bne.n	800147e <HAL_DMA_IRQHandler+0x92>
 8001478:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800147c:	e00e      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 800147e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001482:	e00b      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 8001484:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001488:	e008      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 800148a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800148e:	e005      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 8001490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001494:	e002      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 8001496:	2340      	movs	r3, #64	@ 0x40
 8001498:	e000      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 800149a:	2304      	movs	r3, #4
 800149c:	4a55      	ldr	r2, [pc, #340]	@ (80015f4 <HAL_DMA_IRQHandler+0x208>)
 800149e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8094 	beq.w	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	e08e      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	2202      	movs	r2, #2
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d056      	beq.n	8001572 <HAL_DMA_IRQHandler+0x186>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d051      	beq.n	8001572 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020a 	bic.w	r2, r2, #10
 80014ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a38      	ldr	r2, [pc, #224]	@ (80015dc <HAL_DMA_IRQHandler+0x1f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d029      	beq.n	8001552 <HAL_DMA_IRQHandler+0x166>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a37      	ldr	r2, [pc, #220]	@ (80015e0 <HAL_DMA_IRQHandler+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <HAL_DMA_IRQHandler+0x162>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a35      	ldr	r2, [pc, #212]	@ (80015e4 <HAL_DMA_IRQHandler+0x1f8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01a      	beq.n	8001548 <HAL_DMA_IRQHandler+0x15c>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a34      	ldr	r2, [pc, #208]	@ (80015e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d012      	beq.n	8001542 <HAL_DMA_IRQHandler+0x156>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <HAL_DMA_IRQHandler+0x200>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00a      	beq.n	800153c <HAL_DMA_IRQHandler+0x150>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <HAL_DMA_IRQHandler+0x204>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d102      	bne.n	8001536 <HAL_DMA_IRQHandler+0x14a>
 8001530:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001534:	e00e      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800153a:	e00b      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 800153c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001540:	e008      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001546:	e005      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800154c:	e002      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 800154e:	2320      	movs	r3, #32
 8001550:	e000      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001552:	2302      	movs	r3, #2
 8001554:	4a27      	ldr	r2, [pc, #156]	@ (80015f4 <HAL_DMA_IRQHandler+0x208>)
 8001556:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d034      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001570:	e02f      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	2208      	movs	r2, #8
 8001578:	409a      	lsls	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d028      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x1e8>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020e 	bic.w	r2, r2, #14
 800159a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
    }
  }
  return;
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
}
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020008 	.word	0x40020008
 80015e0:	4002001c 	.word	0x4002001c
 80015e4:	40020030 	.word	0x40020030
 80015e8:	40020044 	.word	0x40020044
 80015ec:	40020058 	.word	0x40020058
 80015f0:	4002006c 	.word	0x4002006c
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b10      	cmp	r3, #16
 800163e:	d108      	bne.n	8001652 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001650:	e007      	b.n	8001662 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	60da      	str	r2, [r3, #12]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b08b      	sub	sp, #44	@ 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e169      	b.n	8001954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001680:	2201      	movs	r2, #1
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8158 	bne.w	800194e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a9a      	ldr	r2, [pc, #616]	@ (800190c <HAL_GPIO_Init+0x2a0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016a8:	4a98      	ldr	r2, [pc, #608]	@ (800190c <HAL_GPIO_Init+0x2a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d875      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ae:	4a98      	ldr	r2, [pc, #608]	@ (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d058      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016b4:	4a96      	ldr	r2, [pc, #600]	@ (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d86f      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ba:	4a96      	ldr	r2, [pc, #600]	@ (8001914 <HAL_GPIO_Init+0x2a8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d052      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016c0:	4a94      	ldr	r2, [pc, #592]	@ (8001914 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d869      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016c6:	4a94      	ldr	r2, [pc, #592]	@ (8001918 <HAL_GPIO_Init+0x2ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04c      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016cc:	4a92      	ldr	r2, [pc, #584]	@ (8001918 <HAL_GPIO_Init+0x2ac>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d863      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016d2:	4a92      	ldr	r2, [pc, #584]	@ (800191c <HAL_GPIO_Init+0x2b0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d046      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016d8:	4a90      	ldr	r2, [pc, #576]	@ (800191c <HAL_GPIO_Init+0x2b0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d85d      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d82a      	bhi.n	8001738 <HAL_GPIO_Init+0xcc>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d859      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016e6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <HAL_GPIO_Init+0x80>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001741 	.word	0x08001741
 80016f4:	08001753 	.word	0x08001753
 80016f8:	08001795 	.word	0x08001795
 80016fc:	0800179b 	.word	0x0800179b
 8001700:	0800179b 	.word	0x0800179b
 8001704:	0800179b 	.word	0x0800179b
 8001708:	0800179b 	.word	0x0800179b
 800170c:	0800179b 	.word	0x0800179b
 8001710:	0800179b 	.word	0x0800179b
 8001714:	0800179b 	.word	0x0800179b
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	0800179b 	.word	0x0800179b
 8001728:	0800179b 	.word	0x0800179b
 800172c:	0800179b 	.word	0x0800179b
 8001730:	08001749 	.word	0x08001749
 8001734:	0800175d 	.word	0x0800175d
 8001738:	4a79      	ldr	r2, [pc, #484]	@ (8001920 <HAL_GPIO_Init+0x2b4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173e:	e02c      	b.n	800179a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e029      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	3304      	adds	r3, #4
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e024      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	3308      	adds	r3, #8
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e01f      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	330c      	adds	r3, #12
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e01a      	b.n	800179c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176e:	2304      	movs	r3, #4
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e013      	b.n	800179c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	611a      	str	r2, [r3, #16]
          break;
 8001786:	e009      	b.n	800179c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	615a      	str	r2, [r3, #20]
          break;
 8001792:	e003      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x130>
          break;
 800179a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	@ 0xff
 80017a0:	d801      	bhi.n	80017a6 <HAL_GPIO_Init+0x13a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_Init+0x13e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	@ 0xff
 80017b0:	d802      	bhi.n	80017b8 <HAL_GPIO_Init+0x14c>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x152>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	3b08      	subs	r3, #8
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	210f      	movs	r1, #15
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80b1 	beq.w	800194e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_GPIO_Init+0x2b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001924 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001804:	4a48      	ldr	r2, [pc, #288]	@ (8001928 <HAL_GPIO_Init+0x2bc>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a40      	ldr	r2, [pc, #256]	@ (800192c <HAL_GPIO_Init+0x2c0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3f      	ldr	r2, [pc, #252]	@ (8001930 <HAL_GPIO_Init+0x2c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3e      	ldr	r2, [pc, #248]	@ (8001934 <HAL_GPIO_Init+0x2c8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3d      	ldr	r2, [pc, #244]	@ (8001938 <HAL_GPIO_Init+0x2cc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e0>
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 800184c:	2304      	movs	r3, #4
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	492f      	ldr	r1, [pc, #188]	@ (8001928 <HAL_GPIO_Init+0x2bc>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	492c      	ldr	r1, [pc, #176]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4928      	ldr	r1, [pc, #160]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ac:	4b23      	ldr	r3, [pc, #140]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4922      	ldr	r1, [pc, #136]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	491e      	ldr	r1, [pc, #120]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4918      	ldr	r1, [pc, #96]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4914      	ldr	r1, [pc, #80]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d021      	beq.n	8001940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	490e      	ldr	r1, [pc, #56]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e021      	b.n	800194e <HAL_GPIO_Init+0x2e2>
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40011400 	.word	0x40011400
 800193c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_GPIO_Init+0x304>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4909      	ldr	r1, [pc, #36]	@ (8001970 <HAL_GPIO_Init+0x304>)
 800194a:	4013      	ands	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae8e 	bne.w	8001680 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	@ 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43d9      	mvns	r1, r3
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	400b      	ands	r3, r1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e12b      	b.n	8001c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff f8dc 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2224      	movs	r2, #36	@ 0x24
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a3c:	f003 f83a 	bl	8004ab4 <HAL_RCC_GetPCLK1Freq>
 8001a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a81      	ldr	r2, [pc, #516]	@ (8001c4c <HAL_I2C_Init+0x274>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d807      	bhi.n	8001a5c <HAL_I2C_Init+0x84>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a80      	ldr	r2, [pc, #512]	@ (8001c50 <HAL_I2C_Init+0x278>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	bf94      	ite	ls
 8001a54:	2301      	movls	r3, #1
 8001a56:	2300      	movhi	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e006      	b.n	8001a6a <HAL_I2C_Init+0x92>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c54 <HAL_I2C_Init+0x27c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bf94      	ite	ls
 8001a64:	2301      	movls	r3, #1
 8001a66:	2300      	movhi	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0e7      	b.n	8001c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a78      	ldr	r2, [pc, #480]	@ (8001c58 <HAL_I2C_Init+0x280>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9b      	lsrs	r3, r3, #18
 8001a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c4c <HAL_I2C_Init+0x274>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d802      	bhi.n	8001aac <HAL_I2C_Init+0xd4>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	e009      	b.n	8001ac0 <HAL_I2C_Init+0xe8>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a69      	ldr	r2, [pc, #420]	@ (8001c5c <HAL_I2C_Init+0x284>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	099b      	lsrs	r3, r3, #6
 8001abe:	3301      	adds	r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ad2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	495c      	ldr	r1, [pc, #368]	@ (8001c4c <HAL_I2C_Init+0x274>)
 8001adc:	428b      	cmp	r3, r1
 8001ade:	d819      	bhi.n	8001b14 <HAL_I2C_Init+0x13c>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e59      	subs	r1, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aee:	1c59      	adds	r1, r3, #1
 8001af0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001af4:	400b      	ands	r3, r1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HAL_I2C_Init+0x138>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1e59      	subs	r1, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0e:	e051      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e04f      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d111      	bne.n	8001b40 <HAL_I2C_Init+0x168>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e012      	b.n	8001b66 <HAL_I2C_Init+0x18e>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Init+0x196>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e022      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10e      	bne.n	8001b94 <HAL_I2C_Init+0x1bc>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e58      	subs	r0, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	440b      	add	r3, r1
 8001b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b92:	e00f      	b.n	8001bb4 <HAL_I2C_Init+0x1dc>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	0099      	lsls	r1, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	6809      	ldr	r1, [r1, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69da      	ldr	r2, [r3, #28]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001be2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6911      	ldr	r1, [r2, #16]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68d2      	ldr	r2, [r2, #12]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	001e847f 	.word	0x001e847f
 8001c54:	003d08ff 	.word	0x003d08ff
 8001c58:	431bde83 	.word	0x431bde83
 8001c5c:	10624dd3 	.word	0x10624dd3

08001c60 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	2b80      	cmp	r3, #128	@ 0x80
 8001c74:	d103      	bne.n	8001c7e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	817b      	strh	r3, [r7, #10]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff f938 	bl	8000f10 <HAL_GetTick>
 8001ca0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	f040 80e0 	bne.w	8001e70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2319      	movs	r3, #25
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4970      	ldr	r1, [pc, #448]	@ (8001e7c <HAL_I2C_Master_Transmit+0x1f4>)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f002 f90c 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0d3      	b.n	8001e72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_I2C_Master_Transmit+0x50>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e0cc      	b.n	8001e72 <HAL_I2C_Master_Transmit+0x1ea>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d007      	beq.n	8001cfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	@ 0x21
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	6a3a      	ldr	r2, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f001 fdf0 	bl	800392c <I2C_MasterRequestWrite>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e08d      	b.n	8001e72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d6c:	e066      	b.n	8001e3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	6a39      	ldr	r1, [r7, #32]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f002 f9ca 	bl	800410c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d107      	bne.n	8001d96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06b      	b.n	8001e72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_I2C_Master_Transmit+0x188>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d017      	beq.n	8001e10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	6a39      	ldr	r1, [r7, #32]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f002 f9c1 	bl	800419c <I2C_WaitOnBTFFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d107      	bne.n	8001e38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e01a      	b.n	8001e72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d194      	bne.n	8001d6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e000      	b.n	8001e72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
  }
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	00100002 	.word	0x00100002
 8001e80:	ffff0000 	.word	0xffff0000

08001e84 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea2:	f7ff f835 	bl	8000f10 <HAL_GetTick>
 8001ea6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	f040 812e 	bne.w	8002112 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001eb6:	4b99      	ldr	r3, [pc, #612]	@ (800211c <HAL_I2C_Mem_Write_DMA+0x298>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	4a98      	ldr	r2, [pc, #608]	@ (8002120 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0a1a      	lsrs	r2, r3, #8
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	009a      	lsls	r2, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d112      	bne.n	8001f02 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	e108      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d0df      	beq.n	8001ed0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Mem_Write_DMA+0x9a>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e0fa      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d007      	beq.n	8001f44 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2221      	movs	r2, #33	@ 0x21
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2240      	movs	r2, #64	@ 0x40
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a68      	ldr	r2, [pc, #416]	@ (8002124 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001f86:	897a      	ldrh	r2, [r7, #10]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001f8c:	893a      	ldrh	r2, [r7, #8]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80a1 	beq.w	80020ea <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d022      	beq.n	8001ff6 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8002128 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbc:	4a5b      	ldr	r2, [pc, #364]	@ (800212c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8001fbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	2200      	movs	r2, #0
 8001fce:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3310      	adds	r3, #16
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	f7ff f929 	bl	800123c <HAL_DMA_Start_IT>
 8001fea:	4603      	mov	r3, r0
 8001fec:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001fee:	7efb      	ldrb	r3, [r7, #27]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d166      	bne.n	80020c2 <HAL_I2C_Mem_Write_DMA+0x23e>
 8001ff4:	e013      	b.n	800201e <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07a      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800201e:	88f8      	ldrh	r0, [r7, #6]
 8002020:	893a      	ldrh	r2, [r7, #8]
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2323      	movs	r3, #35	@ 0x23
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4603      	mov	r3, r0
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f001 fcfe 	bl	8003a30 <I2C_RequestMemoryWrite>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d022      	beq.n	8002080 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f95c 	bl	80012fc <HAL_DMA_Abort_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204c:	2200      	movs	r2, #0
 800204e:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800205e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e049      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020bc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e028      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f043 0210 	orr.w	r2, r3, #16
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e014      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 8002112:	2302      	movs	r3, #2
  }
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000004 	.word	0x20000004
 8002120:	14f8b589 	.word	0x14f8b589
 8002124:	ffff0000 	.word	0xffff0000
 8002128:	08003b5d 	.word	0x08003b5d
 800212c:	08003d1b 	.word	0x08003d1b

08002130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002150:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002158:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d003      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x38>
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b40      	cmp	r3, #64	@ 0x40
 8002164:	f040 80c1 	bne.w	80022ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_I2C_EV_IRQHandler+0x6e>
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002188:	d003      	beq.n	8002192 <HAL_I2C_EV_IRQHandler+0x62>
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002190:	d101      	bne.n	8002196 <HAL_I2C_EV_IRQHandler+0x66>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_I2C_EV_IRQHandler+0x68>
 8002196:	2300      	movs	r3, #0
 8002198:	2b01      	cmp	r3, #1
 800219a:	f000 8132 	beq.w	8002402 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00c      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x92>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f002 f899 	bl	80042ec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fd90 	bl	8002ce0 <I2C_Master_SB>
 80021c0:	e092      	b.n	80022e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fe05 	bl	8002dea <I2C_Master_ADD10>
 80021e0:	e082      	b.n	80022e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_I2C_EV_IRQHandler+0xd2>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	0a5b      	lsrs	r3, r3, #9
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fe1e 	bl	8002e3c <I2C_Master_ADDR>
 8002200:	e072      	b.n	80022e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d03b      	beq.n	8002286 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800221c:	f000 80f3 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	09db      	lsrs	r3, r3, #7
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00f      	beq.n	800224c <HAL_I2C_EV_IRQHandler+0x11c>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <HAL_I2C_EV_IRQHandler+0x11c>
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f9e8 	bl	800261a <I2C_MasterTransmit_TXE>
 800224a:	e04d      	b.n	80022e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80d6 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	0a5b      	lsrs	r3, r3, #9
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80cf 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	2b21      	cmp	r3, #33	@ 0x21
 800226c:	d103      	bne.n	8002276 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fa6f 	bl	8002752 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002274:	e0c7      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b40      	cmp	r3, #64	@ 0x40
 800227a:	f040 80c4 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fadd 	bl	800283e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002284:	e0bf      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002294:	f000 80b7 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00f      	beq.n	80022c4 <HAL_I2C_EV_IRQHandler+0x194>
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	0a9b      	lsrs	r3, r3, #10
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_I2C_EV_IRQHandler+0x194>
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fb56 	bl	800296e <I2C_MasterReceive_RXNE>
 80022c2:	e011      	b.n	80022e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 809a 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	0a5b      	lsrs	r3, r3, #9
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8093 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fc0c 	bl	8002afe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022e6:	e08e      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022e8:	e08d      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e007      	b.n	800230c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d012      	beq.n	800233e <HAL_I2C_EV_IRQHandler+0x20e>
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00c      	beq.n	800233e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 ffd7 	bl	80032ea <I2C_Slave_ADDR>
 800233c:	e066      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_I2C_EV_IRQHandler+0x22e>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	0a5b      	lsrs	r3, r3, #9
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f001 f812 	bl	8003380 <I2C_Slave_STOPF>
 800235c:	e056      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800235e:	7bbb      	ldrb	r3, [r7, #14]
 8002360:	2b21      	cmp	r3, #33	@ 0x21
 8002362:	d002      	beq.n	800236a <HAL_I2C_EV_IRQHandler+0x23a>
 8002364:	7bbb      	ldrb	r3, [r7, #14]
 8002366:	2b29      	cmp	r3, #41	@ 0x29
 8002368:	d125      	bne.n	80023b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	09db      	lsrs	r3, r3, #7
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00f      	beq.n	8002396 <HAL_I2C_EV_IRQHandler+0x266>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	0a9b      	lsrs	r3, r3, #10
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_I2C_EV_IRQHandler+0x266>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 feef 	bl	8003172 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002394:	e039      	b.n	800240a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d033      	beq.n	800240a <HAL_I2C_EV_IRQHandler+0x2da>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	0a5b      	lsrs	r3, r3, #9
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02d      	beq.n	800240a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 ff1c 	bl	80031ec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023b4:	e029      	b.n	800240a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00f      	beq.n	80023e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	0a9b      	lsrs	r3, r3, #10
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 ff26 	bl	800322c <I2C_SlaveReceive_RXNE>
 80023e0:	e014      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00e      	beq.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	0a5b      	lsrs	r3, r3, #9
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 ff54 	bl	80032a8 <I2C_SlaveReceive_BTF>
 8002400:	e004      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002402:	bf00      	nop
 8002404:	e002      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002406:	bf00      	nop
 8002408:	e000      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800240a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08a      	sub	sp, #40	@ 0x28
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002434:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_I2C_ER_IRQHandler+0x5e>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d010      	beq.n	8002470 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800245e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00e      	beq.n	800249a <HAL_I2C_ER_IRQHandler+0x88>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002498:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	0a9b      	lsrs	r3, r3, #10
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03f      	beq.n	8002526 <HAL_I2C_ER_IRQHandler+0x114>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d039      	beq.n	8002526 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80024b2:	7efb      	ldrb	r3, [r7, #27]
 80024b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80024cc:	7ebb      	ldrb	r3, [r7, #26]
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d112      	bne.n	80024f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b21      	cmp	r3, #33	@ 0x21
 80024dc:	d008      	beq.n	80024f0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b29      	cmp	r3, #41	@ 0x29
 80024e2:	d005      	beq.n	80024f0 <HAL_I2C_ER_IRQHandler+0xde>
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b28      	cmp	r3, #40	@ 0x28
 80024e8:	d106      	bne.n	80024f8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b21      	cmp	r3, #33	@ 0x21
 80024ee:	d103      	bne.n	80024f8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 f875 	bl	80035e0 <I2C_Slave_AF>
 80024f6:	e016      	b.n	8002526 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002500:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800250a:	7efb      	ldrb	r3, [r7, #27]
 800250c:	2b10      	cmp	r3, #16
 800250e:	d002      	beq.n	8002516 <HAL_I2C_ER_IRQHandler+0x104>
 8002510:	7efb      	ldrb	r3, [r7, #27]
 8002512:	2b40      	cmp	r3, #64	@ 0x40
 8002514:	d107      	bne.n	8002526 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002524:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	0adb      	lsrs	r3, r3, #11
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <HAL_I2C_ER_IRQHandler+0x13e>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800254e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f001 f8b0 	bl	80036c8 <I2C_ITError>
  }
}
 8002568:	bf00      	nop
 800256a:	3728      	adds	r7, #40	@ 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
 80025c4:	4613      	mov	r3, r2
 80025c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002628:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002630:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d150      	bne.n	80026e2 <I2C_MasterTransmit_TXE+0xc8>
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b21      	cmp	r3, #33	@ 0x21
 8002644:	d14d      	bne.n	80026e2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d01d      	beq.n	8002688 <I2C_MasterTransmit_TXE+0x6e>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b20      	cmp	r3, #32
 8002650:	d01a      	beq.n	8002688 <I2C_MasterTransmit_TXE+0x6e>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002658:	d016      	beq.n	8002688 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002668:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2211      	movs	r2, #17
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff75 	bl	8002570 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002686:	e060      	b.n	800274a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002696:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b40      	cmp	r3, #64	@ 0x40
 80026c0:	d107      	bne.n	80026d2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe f83c 	bl	8000748 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026d0:	e03b      	b.n	800274a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff48 	bl	8002570 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026e0:	e033      	b.n	800274a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b21      	cmp	r3, #33	@ 0x21
 80026e6:	d005      	beq.n	80026f4 <I2C_MasterTransmit_TXE+0xda>
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	2b40      	cmp	r3, #64	@ 0x40
 80026ec:	d12d      	bne.n	800274a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b22      	cmp	r3, #34	@ 0x22
 80026f2:	d12a      	bne.n	800274a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800270e:	e01c      	b.n	800274a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b40      	cmp	r3, #64	@ 0x40
 800271a:	d103      	bne.n	8002724 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f88e 	bl	800283e <I2C_MemoryTransmit_TXE_BTF>
}
 8002722:	e012      	b.n	800274a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002748:	e7ff      	b.n	800274a <I2C_MasterTransmit_TXE+0x130>
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b21      	cmp	r3, #33	@ 0x21
 800276a:	d164      	bne.n	8002836 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800279a:	e04c      	b.n	8002836 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d01d      	beq.n	80027de <I2C_MasterTransmit_BTF+0x8c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d01a      	beq.n	80027de <I2C_MasterTransmit_BTF+0x8c>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027ae:	d016      	beq.n	80027de <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027be:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2211      	movs	r2, #17
 80027c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff feca 	bl	8002570 <HAL_I2C_MasterTxCpltCallback>
}
 80027dc:	e02b      	b.n	8002836 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027ec:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b40      	cmp	r3, #64	@ 0x40
 8002816:	d107      	bne.n	8002828 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fd ff91 	bl	8000748 <HAL_I2C_MemTxCpltCallback>
}
 8002826:	e006      	b.n	8002836 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fe9d 	bl	8002570 <HAL_I2C_MasterTxCpltCallback>
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10b      	bne.n	8002876 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	1c9a      	adds	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002874:	e077      	b.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800287a:	b29b      	uxth	r3, r3
 800287c:	121b      	asrs	r3, r3, #8
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002890:	e069      	b.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10b      	bne.n	80028b2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028b0:	e059      	b.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d152      	bne.n	8002960 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b22      	cmp	r3, #34	@ 0x22
 80028be:	d10d      	bne.n	80028dc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ce:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028da:	e044      	b.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d015      	beq.n	8002912 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b21      	cmp	r3, #33	@ 0x21
 80028ea:	d112      	bne.n	8002912 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002910:	e029      	b.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d124      	bne.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b21      	cmp	r3, #33	@ 0x21
 8002920:	d121      	bne.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002930:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002940:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fd fef5 	bl	8000748 <HAL_I2C_MemTxCpltCallback>
}
 800295e:	e002      	b.n	8002966 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff f97d 	bl	8001c60 <I2C_Flush_DR>
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b22      	cmp	r3, #34	@ 0x22
 8002980:	f040 80b9 	bne.w	8002af6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002988:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d921      	bls.n	80029dc <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	f040 8096 	bne.w	8002af6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80029da:	e08c      	b.n	8002af6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d07f      	beq.n	8002ae4 <I2C_MasterReceive_RXNE+0x176>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d002      	beq.n	80029f0 <I2C_MasterReceive_RXNE+0x82>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d179      	bne.n	8002ae4 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f001 fc1b 	bl	800422c <I2C_WaitOnSTOPRequestThroughIT>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d14c      	bne.n	8002a96 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a0a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d10a      	bne.n	8002a6c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fdbd 	bl	80025e4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a6a:	e044      	b.n	8002af6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d002      	beq.n	8002a80 <I2C_MasterReceive_RXNE+0x112>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d103      	bne.n	8002a88 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a86:	e002      	b.n	8002a8e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2212      	movs	r2, #18
 8002a8c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fd77 	bl	8002582 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a94:	e02f      	b.n	8002af6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002aa4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fd8a 	bl	80025f6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ae2:	e008      	b.n	8002af6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af2:	605a      	str	r2, [r3, #4]
}
 8002af4:	e7ff      	b.n	8002af6 <I2C_MasterReceive_RXNE+0x188>
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d11b      	bne.n	8002b4e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b24:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002b4c:	e0c4      	b.n	8002cd8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d129      	bne.n	8002bac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b66:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d00a      	beq.n	8002b84 <I2C_MasterReceive_BTF+0x86>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d007      	beq.n	8002b84 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002baa:	e095      	b.n	8002cd8 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d17d      	bne.n	8002cb2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d002      	beq.n	8002bc2 <I2C_MasterReceive_BTF+0xc4>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d108      	bne.n	8002bd4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e016      	b.n	8002c02 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d002      	beq.n	8002be0 <I2C_MasterReceive_BTF+0xe2>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d108      	bne.n	8002bf2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e007      	b.n	8002c02 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c00:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c5c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b40      	cmp	r3, #64	@ 0x40
 8002c70:	d10a      	bne.n	8002c88 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fcaf 	bl	80025e4 <HAL_I2C_MemRxCpltCallback>
}
 8002c86:	e027      	b.n	8002cd8 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d002      	beq.n	8002c9c <I2C_MasterReceive_BTF+0x19e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d103      	bne.n	8002ca4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ca2:	e002      	b.n	8002caa <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2212      	movs	r2, #18
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fc69 	bl	8002582 <HAL_I2C_MasterRxCpltCallback>
}
 8002cb0:	e012      	b.n	8002cd8 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d117      	bne.n	8002d24 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d109      	bne.n	8002d10 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d0c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d0e:	e067      	b.n	8002de0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]
}
 8002d22:	e05d      	b.n	8002de0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d2c:	d133      	bne.n	8002d96 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b21      	cmp	r3, #33	@ 0x21
 8002d38:	d109      	bne.n	8002d4e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d4a:	611a      	str	r2, [r3, #16]
 8002d4c:	e008      	b.n	8002d60 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <I2C_Master_SB+0x92>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d032      	beq.n	8002de0 <I2C_Master_SB+0x100>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02d      	beq.n	8002de0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d92:	605a      	str	r2, [r3, #4]
}
 8002d94:	e024      	b.n	8002de0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10e      	bne.n	8002dbc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	11db      	asrs	r3, r3, #7
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0306 	and.w	r3, r3, #6
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f063 030f 	orn	r3, r3, #15
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	611a      	str	r2, [r3, #16]
}
 8002dba:	e011      	b.n	8002de0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10d      	bne.n	8002de0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	11db      	asrs	r3, r3, #7
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 0306 	and.w	r3, r3, #6
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f063 030e 	orn	r3, r3, #14
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <I2C_Master_ADD10+0x26>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00c      	beq.n	8002e32 <I2C_Master_ADD10+0x48>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e30:	605a      	str	r2, [r3, #4]
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b091      	sub	sp, #68	@ 0x44
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b22      	cmp	r3, #34	@ 0x22
 8002e64:	f040 8174 	bne.w	8003150 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10f      	bne.n	8002e90 <I2C_Master_ADDR+0x54>
 8002e70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d10b      	bne.n	8002e90 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	e16b      	b.n	8003168 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11d      	bne.n	8002ed4 <I2C_Master_ADDR+0x98>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002ea0:	d118      	bne.n	8002ed4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ed2:	e149      	b.n	8003168 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d113      	bne.n	8002f06 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e120      	b.n	8003148 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	f040 808a 	bne.w	8003026 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f18:	d137      	bne.n	8002f8a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f28:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f38:	d113      	bne.n	8002f62 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f48:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	e0f2      	b.n	8003148 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	623b      	str	r3, [r7, #32]
 8002f76:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e0de      	b.n	8003148 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d02e      	beq.n	8002fee <I2C_Master_ADDR+0x1b2>
 8002f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d02b      	beq.n	8002fee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f98:	2b12      	cmp	r3, #18
 8002f9a:	d102      	bne.n	8002fa2 <I2C_Master_ADDR+0x166>
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d125      	bne.n	8002fee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d00e      	beq.n	8002fc6 <I2C_Master_ADDR+0x18a>
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d00b      	beq.n	8002fc6 <I2C_Master_ADDR+0x18a>
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d008      	beq.n	8002fc6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e007      	b.n	8002fd6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	e0ac      	b.n	8003148 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e090      	b.n	8003148 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d158      	bne.n	80030e2 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	2b04      	cmp	r3, #4
 8003034:	d021      	beq.n	800307a <I2C_Master_ADDR+0x23e>
 8003036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003038:	2b02      	cmp	r3, #2
 800303a:	d01e      	beq.n	800307a <I2C_Master_ADDR+0x23e>
 800303c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303e:	2b10      	cmp	r3, #16
 8003040:	d01b      	beq.n	800307a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003050:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e012      	b.n	80030a0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003088:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ae:	d14b      	bne.n	8003148 <I2C_Master_ADDR+0x30c>
 80030b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030b6:	d00b      	beq.n	80030d0 <I2C_Master_ADDR+0x294>
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d008      	beq.n	80030d0 <I2C_Master_ADDR+0x294>
 80030be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d005      	beq.n	80030d0 <I2C_Master_ADDR+0x294>
 80030c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d002      	beq.n	80030d0 <I2C_Master_ADDR+0x294>
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d13b      	bne.n	8003148 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	e032      	b.n	8003148 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003100:	d117      	bne.n	8003132 <I2C_Master_ADDR+0x2f6>
 8003102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003104:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003108:	d00b      	beq.n	8003122 <I2C_Master_ADDR+0x2e6>
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d008      	beq.n	8003122 <I2C_Master_ADDR+0x2e6>
 8003110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003112:	2b08      	cmp	r3, #8
 8003114:	d005      	beq.n	8003122 <I2C_Master_ADDR+0x2e6>
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	2b10      	cmp	r3, #16
 800311a:	d002      	beq.n	8003122 <I2C_Master_ADDR+0x2e6>
 800311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311e:	2b20      	cmp	r3, #32
 8003120:	d107      	bne.n	8003132 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003130:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800314e:	e00b      	b.n	8003168 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
}
 8003166:	e7ff      	b.n	8003168 <I2C_Master_ADDR+0x32c>
 8003168:	bf00      	nop
 800316a:	3744      	adds	r7, #68	@ 0x44
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003180:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d02b      	beq.n	80031e4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d114      	bne.n	80031e4 <I2C_SlaveTransmit_TXE+0x72>
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b29      	cmp	r3, #41	@ 0x29
 80031be:	d111      	bne.n	80031e4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2221      	movs	r2, #33	@ 0x21
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2228      	movs	r2, #40	@ 0x28
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff f9d8 	bl	8002594 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d011      	beq.n	8003222 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	781a      	ldrb	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800323a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02c      	beq.n	80032a0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d114      	bne.n	80032a0 <I2C_SlaveReceive_RXNE+0x74>
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2b2a      	cmp	r3, #42	@ 0x2a
 800327a:	d111      	bne.n	80032a0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800328a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2222      	movs	r2, #34	@ 0x22
 8003290:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2228      	movs	r2, #40	@ 0x28
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff f983 	bl	80025a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003304:	2b28      	cmp	r3, #40	@ 0x28
 8003306:	d127      	bne.n	8003358 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003316:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	09db      	lsrs	r3, r3, #7
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	81bb      	strh	r3, [r7, #12]
 800333a:	e002      	b.n	8003342 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800334a:	89ba      	ldrh	r2, [r7, #12]
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff f931 	bl	80025b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003356:	e00e      	b.n	8003376 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800339e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033dc:	d172      	bne.n	80034c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b22      	cmp	r3, #34	@ 0x22
 80033e2:	d002      	beq.n	80033ea <I2C_Slave_STOPF+0x6a>
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80033e8:	d135      	bne.n	8003456 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe f8e8 	bl	80015f8 <HAL_DMA_GetState>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d049      	beq.n	80034c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	4a69      	ldr	r2, [pc, #420]	@ (80035d8 <I2C_Slave_STOPF+0x258>)
 8003434:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd ff5e 	bl	80012fc <HAL_DMA_Abort_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03d      	beq.n	80034c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003450:	4610      	mov	r0, r2
 8003452:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003454:	e035      	b.n	80034c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003488:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f8b2 	bl	80015f8 <HAL_DMA_GetState>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d014      	beq.n	80034c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349e:	4a4e      	ldr	r2, [pc, #312]	@ (80035d8 <I2C_Slave_STOPF+0x258>)
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd ff28 	bl	80012fc <HAL_DMA_Abort_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034bc:	4610      	mov	r0, r2
 80034be:	4798      	blx	r3
 80034c0:	e000      	b.n	80034c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03e      	beq.n	800354c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d112      	bne.n	8003502 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d112      	bne.n	8003536 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8b7 	bl	80036c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800355a:	e039      	b.n	80035d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003560:	d109      	bne.n	8003576 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2228      	movs	r2, #40	@ 0x28
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff f818 	bl	80025a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b28      	cmp	r3, #40	@ 0x28
 8003580:	d111      	bne.n	80035a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <I2C_Slave_STOPF+0x25c>)
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff f817 	bl	80025d2 <HAL_I2C_ListenCpltCallback>
}
 80035a4:	e014      	b.n	80035d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	2b22      	cmp	r3, #34	@ 0x22
 80035ac:	d002      	beq.n	80035b4 <I2C_Slave_STOPF+0x234>
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b22      	cmp	r3, #34	@ 0x22
 80035b2:	d10d      	bne.n	80035d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe ffeb 	bl	80025a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	08003d89 	.word	0x08003d89
 80035dc:	ffff0000 	.word	0xffff0000

080035e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d002      	beq.n	8003602 <I2C_Slave_AF+0x22>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d129      	bne.n	8003656 <I2C_Slave_AF+0x76>
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	2b28      	cmp	r3, #40	@ 0x28
 8003606:	d126      	bne.n	8003656 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a2e      	ldr	r2, [pc, #184]	@ (80036c4 <I2C_Slave_AF+0xe4>)
 800360c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800361c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003626:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe ffbf 	bl	80025d2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003654:	e031      	b.n	80036ba <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b21      	cmp	r3, #33	@ 0x21
 800365a:	d129      	bne.n	80036b0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a19      	ldr	r2, [pc, #100]	@ (80036c4 <I2C_Slave_AF+0xe4>)
 8003660:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2221      	movs	r2, #33	@ 0x21
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003686:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003690:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe fadc 	bl	8001c60 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fe ff73 	bl	8002594 <HAL_I2C_SlaveTxCpltCallback>
}
 80036ae:	e004      	b.n	80036ba <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036b8:	615a      	str	r2, [r3, #20]
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	ffff0000 	.word	0xffff0000

080036c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d002      	beq.n	80036ec <I2C_ITError+0x24>
 80036e6:	7bbb      	ldrb	r3, [r7, #14]
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d10a      	bne.n	8003702 <I2C_ITError+0x3a>
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b22      	cmp	r3, #34	@ 0x22
 80036f0:	d107      	bne.n	8003702 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003700:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003708:	2b28      	cmp	r3, #40	@ 0x28
 800370a:	d107      	bne.n	800371c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2228      	movs	r2, #40	@ 0x28
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800371a:	e015      	b.n	8003748 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800372a:	d00a      	beq.n	8003742 <I2C_ITError+0x7a>
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b60      	cmp	r3, #96	@ 0x60
 8003730:	d007      	beq.n	8003742 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003756:	d162      	bne.n	800381e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003766:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d020      	beq.n	80037b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <I2C_ITError+0x25c>)
 800377c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003782:	4618      	mov	r0, r3
 8003784:	f7fd fdba 	bl	80012fc <HAL_DMA_Abort_IT>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8089 	beq.w	80038a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037b2:	4610      	mov	r0, r2
 80037b4:	4798      	blx	r3
 80037b6:	e074      	b.n	80038a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	4a59      	ldr	r2, [pc, #356]	@ (8003924 <I2C_ITError+0x25c>)
 80037be:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fd fd99 	bl	80012fc <HAL_DMA_Abort_IT>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d068      	beq.n	80038a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d10b      	bne.n	80037f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003818:	4610      	mov	r0, r2
 800381a:	4798      	blx	r3
 800381c:	e041      	b.n	80038a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b60      	cmp	r3, #96	@ 0x60
 8003828:	d125      	bne.n	8003876 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d10b      	bne.n	800385e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe feca 	bl	8002608 <HAL_I2C_AbortCpltCallback>
 8003874:	e015      	b.n	80038a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d10b      	bne.n	800389c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fe feaa 	bl	80025f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10e      	bne.n	80038d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d113      	bne.n	800391c <I2C_ITError+0x254>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b28      	cmp	r3, #40	@ 0x28
 80038f8:	d110      	bne.n	800391c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <I2C_ITError+0x260>)
 80038fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe fe5b 	bl	80025d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	08003d89 	.word	0x08003d89
 8003928:	ffff0000 	.word	0xffff0000

0800392c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d006      	beq.n	8003956 <I2C_MasterRequestWrite+0x2a>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d003      	beq.n	8003956 <I2C_MasterRequestWrite+0x2a>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003954:	d108      	bne.n	8003968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00b      	b.n	8003980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	2b12      	cmp	r3, #18
 800396e:	d107      	bne.n	8003980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 faa3 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a6:	d103      	bne.n	80039b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e035      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	e01b      	b.n	8003a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	11db      	asrs	r3, r3, #7
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0306 	and.w	r3, r3, #6
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f063 030f 	orn	r3, r3, #15
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	490e      	ldr	r1, [pc, #56]	@ (8003a28 <I2C_MasterRequestWrite+0xfc>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 faec 	bl	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e010      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4907      	ldr	r1, [pc, #28]	@ (8003a2c <I2C_MasterRequestWrite+0x100>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fadc 	bl	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	00010008 	.word	0x00010008
 8003a2c:	00010002 	.word	0x00010002

08003a30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa36 	bl	8003ed8 <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a80:	d103      	bne.n	8003a8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e05f      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	492d      	ldr	r1, [pc, #180]	@ (8003b58 <I2C_RequestMemoryWrite+0x128>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fa91 	bl	8003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04c      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fb1c 	bl	800410c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e02b      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003afc:	893b      	ldrh	r3, [r7, #8]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e021      	b.n	8003b4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 faf6 	bl	800410c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d107      	bne.n	8003b3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e005      	b.n	8003b4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b42:	893b      	ldrh	r3, [r7, #8]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	00010002 	.word	0x00010002

08003b5c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b70:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b78:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b8e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bac:	2200      	movs	r2, #0
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003bb6:	2b21      	cmp	r3, #33	@ 0x21
 8003bb8:	d007      	beq.n	8003bca <I2C_DMAXferCplt+0x6e>
 8003bba:	7cfb      	ldrb	r3, [r7, #19]
 8003bbc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003bc0:	2b22      	cmp	r3, #34	@ 0x22
 8003bc2:	d131      	bne.n	8003c28 <I2C_DMAXferCplt+0xcc>
 8003bc4:	7cbb      	ldrb	r3, [r7, #18]
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d12e      	bne.n	8003c28 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bd8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b29      	cmp	r3, #41	@ 0x29
 8003be4:	d10a      	bne.n	8003bfc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2221      	movs	r2, #33	@ 0x21
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2228      	movs	r2, #40	@ 0x28
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f7fe fccd 	bl	8002594 <HAL_I2C_SlaveTxCpltCallback>
 8003bfa:	e00c      	b.n	8003c16 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c00:	d109      	bne.n	8003c16 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2222      	movs	r2, #34	@ 0x22
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2228      	movs	r2, #40	@ 0x28
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f7fe fcc8 	bl	80025a6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c26:	e074      	b.n	8003d12 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d06e      	beq.n	8003d12 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c5c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c64:	d009      	beq.n	8003c7a <I2C_DMAXferCplt+0x11e>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d006      	beq.n	8003c7a <I2C_DMAXferCplt+0x11e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c72:	d002      	beq.n	8003c7a <I2C_DMAXferCplt+0x11e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c88:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c98:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f7fe fc9c 	bl	80025f6 <HAL_I2C_ErrorCallback>
}
 8003cbe:	e028      	b.n	8003d12 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d10a      	bne.n	8003cea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f7fe fc7e 	bl	80025e4 <HAL_I2C_MemRxCpltCallback>
}
 8003ce8:	e013      	b.n	8003d12 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d002      	beq.n	8003cfe <I2C_DMAXferCplt+0x1a2>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d103      	bne.n	8003d06 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d04:	e002      	b.n	8003d0c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2212      	movs	r2, #18
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d0c:	6978      	ldr	r0, [r7, #20]
 8003d0e:	f7fe fc38 	bl	8002582 <HAL_I2C_MasterRxCpltCallback>
}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d34:	2200      	movs	r2, #0
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d44:	2200      	movs	r2, #0
 8003d46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d56:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f043 0210 	orr.w	r2, r3, #16
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7fe fc3b 	bl	80025f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003da2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed0 <I2C_DMAAbort+0x148>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed4 <I2C_DMAAbort+0x14c>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	0a1a      	lsrs	r2, r3, #8
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	00da      	lsls	r2, r3, #3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003dce:	e00a      	b.n	8003de6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de4:	d0ea      	beq.n	8003dbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e28:	2200      	movs	r2, #0
 8003e2a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	2200      	movs	r2, #0
 8003e3a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b60      	cmp	r3, #96	@ 0x60
 8003e56:	d10e      	bne.n	8003e76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7fe fbca 	bl	8002608 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e74:	e027      	b.n	8003ec6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e7c:	2b28      	cmp	r3, #40	@ 0x28
 8003e7e:	d117      	bne.n	8003eb0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2228      	movs	r2, #40	@ 0x28
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003eae:	e007      	b.n	8003ec0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ec0:	6978      	ldr	r0, [r7, #20]
 8003ec2:	f7fe fb98 	bl	80025f6 <HAL_I2C_ErrorCallback>
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000004 	.word	0x20000004
 8003ed4:	14f8b589 	.word	0x14f8b589

08003ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee8:	e048      	b.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d044      	beq.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7fd f80d 	bl	8000f10 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d139      	bne.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d10d      	bne.n	8003f2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	e00c      	b.n	8003f48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	43da      	mvns	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d116      	bne.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e023      	b.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10d      	bne.n	8003fa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	e00c      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d093      	beq.n	8003eea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fda:	e071      	b.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fea:	d123      	bne.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004004:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e067      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d041      	beq.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403c:	f7fc ff68 	bl	8000f10 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	d302      	bcc.n	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d136      	bne.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10c      	bne.n	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	43da      	mvns	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	e00b      	b.n	800408e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	43da      	mvns	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e021      	b.n	8004104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10c      	bne.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e00b      	b.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f af6d 	bne.w	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004118:	e034      	b.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f8b8 	bl	8004290 <I2C_IsAcknowledgeFailed>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e034      	b.n	8004194 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d028      	beq.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fc feed 	bl	8000f10 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004152:	2b80      	cmp	r3, #128	@ 0x80
 8004154:	d016      	beq.n	8004184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e007      	b.n	8004194 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418e:	2b80      	cmp	r3, #128	@ 0x80
 8004190:	d1c3      	bne.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041a8:	e034      	b.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f870 	bl	8004290 <I2C_IsAcknowledgeFailed>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e034      	b.n	8004224 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d028      	beq.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fc fea5 	bl	8000f10 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11d      	bne.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d016      	beq.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f043 0220 	orr.w	r2, r3, #32
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e007      	b.n	8004224 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b04      	cmp	r3, #4
 8004220:	d1c3      	bne.n	80041aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004238:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	4a13      	ldr	r2, [pc, #76]	@ (800428c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	0a1a      	lsrs	r2, r3, #8
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b01      	subs	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e008      	b.n	800427c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004278:	d0e9      	beq.n	800424e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000004 	.word	0x20000004
 800428c:	14f8b589 	.word	0x14f8b589

08004290 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a6:	d11b      	bne.n	80042e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	f043 0204 	orr.w	r2, r3, #4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr

080042ec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80042fc:	d103      	bne.n	8004306 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004304:	e007      	b.n	8004316 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800430e:	d102      	bne.n	8004316 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2208      	movs	r2, #8
 8004314:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e272      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8087 	beq.w	800444e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004340:	4b92      	ldr	r3, [pc, #584]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b04      	cmp	r3, #4
 800434a:	d00c      	beq.n	8004366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800434c:	4b8f      	ldr	r3, [pc, #572]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d112      	bne.n	800437e <HAL_RCC_OscConfig+0x5e>
 8004358:	4b8c      	ldr	r3, [pc, #560]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004364:	d10b      	bne.n	800437e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004366:	4b89      	ldr	r3, [pc, #548]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d06c      	beq.n	800444c <HAL_RCC_OscConfig+0x12c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d168      	bne.n	800444c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e24c      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x76>
 8004388:	4b80      	ldr	r3, [pc, #512]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a7f      	ldr	r2, [pc, #508]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e02e      	b.n	80043f4 <HAL_RCC_OscConfig+0xd4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x98>
 800439e:	4b7b      	ldr	r3, [pc, #492]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7a      	ldr	r2, [pc, #488]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b78      	ldr	r3, [pc, #480]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a77      	ldr	r2, [pc, #476]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e01d      	b.n	80043f4 <HAL_RCC_OscConfig+0xd4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0xbc>
 80043c2:	4b72      	ldr	r3, [pc, #456]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a71      	ldr	r2, [pc, #452]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b6f      	ldr	r3, [pc, #444]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6e      	ldr	r2, [pc, #440]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0xd4>
 80043dc:	4b6b      	ldr	r3, [pc, #428]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6a      	ldr	r2, [pc, #424]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b68      	ldr	r3, [pc, #416]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a67      	ldr	r2, [pc, #412]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fc fd88 	bl	8000f10 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fc fd84 	bl	8000f10 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e200      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b5d      	ldr	r3, [pc, #372]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0xe4>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fc fd74 	bl	8000f10 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442c:	f7fc fd70 	bl	8000f10 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	@ 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1ec      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	4b53      	ldr	r3, [pc, #332]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x10c>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d063      	beq.n	8004522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800445a:	4b4c      	ldr	r3, [pc, #304]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004466:	4b49      	ldr	r3, [pc, #292]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d11c      	bne.n	80044ac <HAL_RCC_OscConfig+0x18c>
 8004472:	4b46      	ldr	r3, [pc, #280]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	4b43      	ldr	r3, [pc, #268]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x176>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d001      	beq.n	8004496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1c0      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b3d      	ldr	r3, [pc, #244]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4939      	ldr	r1, [pc, #228]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	e03a      	b.n	8004522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b4:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <HAL_RCC_OscConfig+0x270>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fc fd29 	bl	8000f10 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fc fd25 	bl	8000f10 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1a1      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	4b2d      	ldr	r3, [pc, #180]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b2a      	ldr	r3, [pc, #168]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4927      	ldr	r1, [pc, #156]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <HAL_RCC_OscConfig+0x270>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fc fd08 	bl	8000f10 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004504:	f7fc fd04 	bl	8000f10 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e180      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	4b1d      	ldr	r3, [pc, #116]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03a      	beq.n	80045a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d019      	beq.n	800456a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b17      	ldr	r3, [pc, #92]	@ (8004594 <HAL_RCC_OscConfig+0x274>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453c:	f7fc fce8 	bl	8000f10 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004544:	f7fc fce4 	bl	8000f10 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e160      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <HAL_RCC_OscConfig+0x26c>)
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004562:	2001      	movs	r0, #1
 8004564:	f000 faba 	bl	8004adc <RCC_Delay>
 8004568:	e01c      	b.n	80045a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_RCC_OscConfig+0x274>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004570:	f7fc fcce 	bl	8000f10 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004576:	e00f      	b.n	8004598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004578:	f7fc fcca 	bl	8000f10 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d908      	bls.n	8004598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e146      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	42420000 	.word	0x42420000
 8004594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b92      	ldr	r3, [pc, #584]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e9      	bne.n	8004578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80a6 	beq.w	80046fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b8b      	ldr	r3, [pc, #556]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10d      	bne.n	80045de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b88      	ldr	r3, [pc, #544]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4a87      	ldr	r2, [pc, #540]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045cc:	61d3      	str	r3, [r2, #28]
 80045ce:	4b85      	ldr	r3, [pc, #532]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045de:	4b82      	ldr	r3, [pc, #520]	@ (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ea:	4b7f      	ldr	r3, [pc, #508]	@ (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7e      	ldr	r2, [pc, #504]	@ (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fc fc8b 	bl	8000f10 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fc fc87 	bl	8000f10 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b64      	cmp	r3, #100	@ 0x64
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e103      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004610:	4b75      	ldr	r3, [pc, #468]	@ (80047e8 <HAL_RCC_OscConfig+0x4c8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x312>
 8004624:	4b6f      	ldr	r3, [pc, #444]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4a6e      	ldr	r2, [pc, #440]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6213      	str	r3, [r2, #32]
 8004630:	e02d      	b.n	800468e <HAL_RCC_OscConfig+0x36e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0x334>
 800463a:	4b6a      	ldr	r3, [pc, #424]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	4a69      	ldr	r2, [pc, #420]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6213      	str	r3, [r2, #32]
 8004646:	4b67      	ldr	r3, [pc, #412]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	4a66      	ldr	r2, [pc, #408]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6213      	str	r3, [r2, #32]
 8004652:	e01c      	b.n	800468e <HAL_RCC_OscConfig+0x36e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d10c      	bne.n	8004676 <HAL_RCC_OscConfig+0x356>
 800465c:	4b61      	ldr	r3, [pc, #388]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4a60      	ldr	r2, [pc, #384]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6213      	str	r3, [r2, #32]
 8004668:	4b5e      	ldr	r3, [pc, #376]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4a5d      	ldr	r2, [pc, #372]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6213      	str	r3, [r2, #32]
 8004674:	e00b      	b.n	800468e <HAL_RCC_OscConfig+0x36e>
 8004676:	4b5b      	ldr	r3, [pc, #364]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4a5a      	ldr	r2, [pc, #360]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6213      	str	r3, [r2, #32]
 8004682:	4b58      	ldr	r3, [pc, #352]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4a57      	ldr	r2, [pc, #348]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d015      	beq.n	80046c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004696:	f7fc fc3b 	bl	8000f10 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fc fc37 	bl	8000f10 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0b1      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	4b4b      	ldr	r3, [pc, #300]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ee      	beq.n	800469e <HAL_RCC_OscConfig+0x37e>
 80046c0:	e014      	b.n	80046ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fc fc25 	bl	8000f10 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fc fc21 	bl	8000f10 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e09b      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e0:	4b40      	ldr	r3, [pc, #256]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ee      	bne.n	80046ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f2:	4b3c      	ldr	r3, [pc, #240]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4a3b      	ldr	r2, [pc, #236]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8087 	beq.w	8004816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004708:	4b36      	ldr	r3, [pc, #216]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d061      	beq.n	80047d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d146      	bne.n	80047aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b33      	ldr	r3, [pc, #204]	@ (80047ec <HAL_RCC_OscConfig+0x4cc>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fc fbf5 	bl	8000f10 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472a:	f7fc fbf1 	bl	8000f10 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e06d      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473c:	4b29      	ldr	r3, [pc, #164]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004750:	d108      	bne.n	8004764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004752:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	4921      	ldr	r1, [pc, #132]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004764:	4b1f      	ldr	r3, [pc, #124]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a19      	ldr	r1, [r3, #32]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	430b      	orrs	r3, r1
 8004776:	491b      	ldr	r1, [pc, #108]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b1b      	ldr	r3, [pc, #108]	@ (80047ec <HAL_RCC_OscConfig+0x4cc>)
 800477e:	2201      	movs	r2, #1
 8004780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004782:	f7fc fbc5 	bl	8000f10 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7fc fbc1 	bl	8000f10 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e03d      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800479c:	4b11      	ldr	r3, [pc, #68]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x46a>
 80047a8:	e035      	b.n	8004816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b10      	ldr	r3, [pc, #64]	@ (80047ec <HAL_RCC_OscConfig+0x4cc>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fc fbae 	bl	8000f10 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fc fbaa 	bl	8000f10 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e026      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x498>
 80047d6:	e01e      	b.n	8004816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e019      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCC_OscConfig+0x500>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	429a      	cmp	r2, r3
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000

08004824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0d0      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b6a      	ldr	r3, [pc, #424]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d910      	bls.n	8004868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b67      	ldr	r3, [pc, #412]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4965      	ldr	r1, [pc, #404]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0b8      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004880:	4b59      	ldr	r3, [pc, #356]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800488a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a52      	ldr	r2, [pc, #328]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80048a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a4:	4b50      	ldr	r3, [pc, #320]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	494d      	ldr	r1, [pc, #308]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d040      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07f      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e073      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3d      	ldr	r3, [pc, #244]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06b      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b39      	ldr	r3, [pc, #228]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4936      	ldr	r1, [pc, #216]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7fc fafc 	bl	8000f10 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fc faf8 	bl	8000f10 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e053      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2d      	ldr	r3, [pc, #180]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d210      	bcs.n	8004974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 0207 	bic.w	r2, r3, #7
 800495a:	4922      	ldr	r1, [pc, #136]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004980:	4b19      	ldr	r3, [pc, #100]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4916      	ldr	r1, [pc, #88]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	490e      	ldr	r1, [pc, #56]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b2:	f000 f821 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049b6:	4602      	mov	r2, r0
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	490a      	ldr	r1, [pc, #40]	@ (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	5ccb      	ldrb	r3, [r1, r3]
 80049c6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ca:	4a09      	ldr	r2, [pc, #36]	@ (80049f0 <HAL_RCC_ClockConfig+0x1cc>)
 80049cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <HAL_RCC_ClockConfig+0x1d0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fc fa5a 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40022000 	.word	0x40022000
 80049e8:	40021000 	.word	0x40021000
 80049ec:	0800576c 	.word	0x0800576c
 80049f0:	20000004 	.word	0x20000004
 80049f4:	20000008 	.word	0x20000008

080049f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a12:	4b1e      	ldr	r3, [pc, #120]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x30>
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x36>
 8004a26:	e027      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a28:	4b19      	ldr	r3, [pc, #100]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a2a:	613b      	str	r3, [r7, #16]
      break;
 8004a2c:	e027      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	0c9b      	lsrs	r3, r3, #18
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	4a17      	ldr	r2, [pc, #92]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a38:	5cd3      	ldrb	r3, [r2, r3]
 8004a3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a46:	4b11      	ldr	r3, [pc, #68]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	0c5b      	lsrs	r3, r3, #17
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	4a11      	ldr	r2, [pc, #68]	@ (8004a98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a52:	5cd3      	ldrb	r3, [r2, r3]
 8004a54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a0d      	ldr	r2, [pc, #52]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a5a:	fb03 f202 	mul.w	r2, r3, r2
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e004      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	613b      	str	r3, [r7, #16]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a7a:	613b      	str	r3, [r7, #16]
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	693b      	ldr	r3, [r7, #16]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	007a1200 	.word	0x007a1200
 8004a94:	08005784 	.word	0x08005784
 8004a98:	08005794 	.word	0x08005794
 8004a9c:	003d0900 	.word	0x003d0900

08004aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aa4:	4b02      	ldr	r3, [pc, #8]	@ (8004ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr
 8004ab0:	20000004 	.word	0x20000004

08004ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ab8:	f7ff fff2 	bl	8004aa0 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4903      	ldr	r1, [pc, #12]	@ (8004ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	0800577c 	.word	0x0800577c

08004adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <RCC_Delay+0x34>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <RCC_Delay+0x38>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004af8:	bf00      	nop
  }
  while (Delay --);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f9      	bne.n	8004af8 <RCC_Delay+0x1c>
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	20000004 	.word	0x20000004
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e041      	b.n	8004bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f8de 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 fa5c 	bl	8005014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d001      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e03a      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a18      	ldr	r2, [pc, #96]	@ (8004c50 <HAL_TIM_Base_Start_IT+0x98>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x58>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x58>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a14      	ldr	r2, [pc, #80]	@ (8004c54 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0x58>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	@ (8004c58 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d111      	bne.n	8004c34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d010      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	e007      	b.n	8004c44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	40012c00 	.word	0x40012c00
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0202 	mvn.w	r2, #2
 8004c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f998 	bl	8004fdc <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f98b 	bl	8004fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f99a 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f972 	bl	8004fdc <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f965 	bl	8004fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f974 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0208 	mvn.w	r2, #8
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2204      	movs	r2, #4
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f94c 	bl	8004fdc <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f93f 	bl	8004fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f94e 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d020      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f926 	bl	8004fdc <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f919 	bl	8004fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f928 	bl	8004fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0201 	mvn.w	r2, #1
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb fcd0 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa7f 	bl	80052ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f8f8 	bl	8005000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0220 	mvn.w	r2, #32
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa52 	bl	80052d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_ConfigClockSource+0x1c>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e0b4      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x186>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e90:	d03e      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0xd4>
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e96:	f200 8087 	bhi.w	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9e:	f000 8086 	beq.w	8004fae <HAL_TIM_ConfigClockSource+0x172>
 8004ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ea6:	d87f      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b70      	cmp	r3, #112	@ 0x70
 8004eaa:	d01a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8004eac:	2b70      	cmp	r3, #112	@ 0x70
 8004eae:	d87b      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b60      	cmp	r3, #96	@ 0x60
 8004eb2:	d050      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x11a>
 8004eb4:	2b60      	cmp	r3, #96	@ 0x60
 8004eb6:	d877      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b50      	cmp	r3, #80	@ 0x50
 8004eba:	d03c      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0xfa>
 8004ebc:	2b50      	cmp	r3, #80	@ 0x50
 8004ebe:	d873      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d058      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x13a>
 8004ec4:	2b40      	cmp	r3, #64	@ 0x40
 8004ec6:	d86f      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b30      	cmp	r3, #48	@ 0x30
 8004eca:	d064      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ecc:	2b30      	cmp	r3, #48	@ 0x30
 8004ece:	d86b      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d060      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d867      	bhi.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d05c      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15a>
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d05a      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee0:	e062      	b.n	8004fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef2:	f000 f974 	bl	80051de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	609a      	str	r2, [r3, #8]
      break;
 8004f0e:	e04f      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	f000 f95d 	bl	80051de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f32:	609a      	str	r2, [r3, #8]
      break;
 8004f34:	e03c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 f8d4 	bl	80050f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2150      	movs	r1, #80	@ 0x50
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f92b 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004f54:	e02c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 f8f2 	bl	800514c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2160      	movs	r1, #96	@ 0x60
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f91b 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004f74:	e01c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 f8b4 	bl	80050f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2140      	movs	r1, #64	@ 0x40
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f90b 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004f94:	e00c      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f000 f902 	bl	80051aa <TIM_ITRx_SetConfig>
      break;
 8004fa6:	e003      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e000      	b.n	8004fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
	...

08005014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <TIM_Base_SetConfig+0xd0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00b      	beq.n	8005044 <TIM_Base_SetConfig+0x30>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0x30>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a2c      	ldr	r2, [pc, #176]	@ (80050e8 <TIM_Base_SetConfig+0xd4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0x30>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a2b      	ldr	r2, [pc, #172]	@ (80050ec <TIM_Base_SetConfig+0xd8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d108      	bne.n	8005056 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a22      	ldr	r2, [pc, #136]	@ (80050e4 <TIM_Base_SetConfig+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00b      	beq.n	8005076 <TIM_Base_SetConfig+0x62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005064:	d007      	beq.n	8005076 <TIM_Base_SetConfig+0x62>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <TIM_Base_SetConfig+0xd4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_Base_SetConfig+0x62>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1e      	ldr	r2, [pc, #120]	@ (80050ec <TIM_Base_SetConfig+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d108      	bne.n	8005088 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800507c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0d      	ldr	r2, [pc, #52]	@ (80050e4 <TIM_Base_SetConfig+0xd0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	611a      	str	r2, [r3, #16]
  }
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800

080050f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0201 	bic.w	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 030a 	bic.w	r3, r3, #10
 800512c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0210 	bic.w	r2, r3, #16
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	031b      	lsls	r3, r3, #12
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f043 0307 	orr.w	r3, r3, #7
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	609a      	str	r2, [r3, #8]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051de:	b480      	push	{r7}
 80051e0:	b087      	sub	sp, #28
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	021a      	lsls	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	431a      	orrs	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	609a      	str	r2, [r3, #8]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e046      	b.n	80052c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a16      	ldr	r2, [pc, #88]	@ (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005280:	d009      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a10      	ldr	r2, [pc, #64]	@ (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10c      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800529c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800

080052d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <memset>:
 80052fc:	4603      	mov	r3, r0
 80052fe:	4402      	add	r2, r0
 8005300:	4293      	cmp	r3, r2
 8005302:	d100      	bne.n	8005306 <memset+0xa>
 8005304:	4770      	bx	lr
 8005306:	f803 1b01 	strb.w	r1, [r3], #1
 800530a:	e7f9      	b.n	8005300 <memset+0x4>

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	2600      	movs	r6, #0
 8005310:	4d0c      	ldr	r5, [pc, #48]	@ (8005344 <__libc_init_array+0x38>)
 8005312:	4c0d      	ldr	r4, [pc, #52]	@ (8005348 <__libc_init_array+0x3c>)
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	f000 f81a 	bl	8005354 <_init>
 8005320:	2600      	movs	r6, #0
 8005322:	4d0a      	ldr	r5, [pc, #40]	@ (800534c <__libc_init_array+0x40>)
 8005324:	4c0a      	ldr	r4, [pc, #40]	@ (8005350 <__libc_init_array+0x44>)
 8005326:	1b64      	subs	r4, r4, r5
 8005328:	10a4      	asrs	r4, r4, #2
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	08005798 	.word	0x08005798
 8005348:	08005798 	.word	0x08005798
 800534c:	08005798 	.word	0x08005798
 8005350:	0800579c 	.word	0x0800579c

08005354 <_init>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	bf00      	nop
 8005358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535a:	bc08      	pop	{r3}
 800535c:	469e      	mov	lr, r3
 800535e:	4770      	bx	lr

08005360 <_fini>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr
