
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a650  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a75c  0800a75c  0000b75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a80c  0800a80c  0000c1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a80c  0800a80c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a80c  0800a80c  0000b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a810  0800a810  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a814  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  200001d4  0800a9e8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000182c  0800a9e8  0000c82c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014258  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4e  00000000  00000000  00020455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00023ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00025120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1fc  00000000  00000000  00025f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a1c  00000000  00000000  00041121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092886  00000000  00000000  00058b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  000eb408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f0474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a744 	.word	0x0800a744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	0800a744 	.word	0x0800a744

0800014c <SendInfo>:
 */

#include "UnerProtocol.h"


void SendInfo(uint8_t bufferAux[],uint8_t bytes){
 800014c:	b480      	push	{r7}
 800014e:	b08d      	sub	sp, #52	@ 0x34
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8000158:	2300      	movs	r3, #0
 800015a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800015e:	2300      	movs	r3, #0
 8000160:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000164:	2300      	movs	r3, #0
 8000166:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800016a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800016e:	1c5a      	adds	r2, r3, #1
 8000170:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000174:	3330      	adds	r3, #48	@ 0x30
 8000176:	443b      	add	r3, r7
 8000178:	2255      	movs	r2, #85	@ 0x55
 800017a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800017e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000182:	1c5a      	adds	r2, r3, #1
 8000184:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000188:	3330      	adds	r3, #48	@ 0x30
 800018a:	443b      	add	r3, r7
 800018c:	224e      	movs	r2, #78	@ 0x4e
 800018e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800019c:	3330      	adds	r3, #48	@ 0x30
 800019e:	443b      	add	r3, r7
 80001a0:	2245      	movs	r2, #69	@ 0x45
 80001a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80001a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001b0:	3330      	adds	r3, #48	@ 0x30
 80001b2:	443b      	add	r3, r7
 80001b4:	2252      	movs	r2, #82	@ 0x52
 80001b6:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 80001ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001c4:	3330      	adds	r3, #48	@ 0x30
 80001c6:	443b      	add	r3, r7
 80001c8:	78fa      	ldrb	r2, [r7, #3]
 80001ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80001ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001d2:	1c5a      	adds	r2, r3, #1
 80001d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001d8:	3330      	adds	r3, #48	@ 0x30
 80001da:	443b      	add	r3, r7
 80001dc:	223a      	movs	r2, #58	@ 0x3a
 80001de:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80001e8:	e012      	b.n	8000210 <SendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 80001ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	441a      	add	r2, r3
 80001f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001f6:	1c59      	adds	r1, r3, #1
 80001f8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80001fc:	7812      	ldrb	r2, [r2, #0]
 80001fe:	3330      	adds	r3, #48	@ 0x30
 8000200:	443b      	add	r3, r7
 8000202:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 8000206:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800020a:	3301      	adds	r3, #1
 800020c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000210:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000214:	78fb      	ldrb	r3, [r7, #3]
 8000216:	3b01      	subs	r3, #1
 8000218:	429a      	cmp	r2, r3
 800021a:	dbe6      	blt.n	80001ea <SendInfo+0x9e>

    cks=0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8000222:	2300      	movs	r3, #0
 8000224:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000228:	e021      	b.n	800026e <SendInfo+0x122>
        cks^= bufAux[i];
 800022a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800022e:	3330      	adds	r3, #48	@ 0x30
 8000230:	443b      	add	r3, r7
 8000232:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800023a:	4053      	eors	r3, r2
 800023c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 8000240:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <SendInfo+0x15c>)
 8000246:	795b      	ldrb	r3, [r3, #5]
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	b2c8      	uxtb	r0, r1
 800024c:	4916      	ldr	r1, [pc, #88]	@ (80002a8 <SendInfo+0x15c>)
 800024e:	7148      	strb	r0, [r1, #5]
 8000250:	4619      	mov	r1, r3
 8000252:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000256:	443b      	add	r3, r7
 8000258:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <SendInfo+0x15c>)
 800025e:	440b      	add	r3, r1
 8000260:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(i=0 ;i<indiceAux;i++){
 8000264:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000268:	3301      	adds	r3, #1
 800026a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800026e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000276:	429a      	cmp	r2, r3
 8000278:	d3d7      	bcc.n	800022a <SendInfo+0xde>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <SendInfo+0x15c>)
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	b2d1      	uxtb	r1, r2
 8000282:	4a09      	ldr	r2, [pc, #36]	@ (80002a8 <SendInfo+0x15c>)
 8000284:	7151      	strb	r1, [r2, #5]
 8000286:	461a      	mov	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <SendInfo+0x15c>)
 800028a:	4413      	add	r3, r2
 800028c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000290:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

     datosComSerie.bytesTosend=indiceAux;
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <SendInfo+0x15c>)
 8000296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800029a:	f882 3207 	strb.w	r3, [r2, #519]	@ 0x207

}
 800029e:	bf00      	nop
 80002a0:	3734      	adds	r7, #52	@ 0x34
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200002f8 	.word	0x200002f8

080002ac <DecodeHeader>:

void DecodeHeader(_sDato *datosCom){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80002ba:	e0e2      	b.n	8000482 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80002bc:	4b76      	ldr	r3, [pc, #472]	@ (8000498 <DecodeHeader+0x1ec>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	f200 80d7 	bhi.w	8000474 <DecodeHeader+0x1c8>
 80002c6:	a201      	add	r2, pc, #4	@ (adr r2, 80002cc <DecodeHeader+0x20>)
 80002c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002cc:	080002e9 	.word	0x080002e9
 80002d0:	08000311 	.word	0x08000311
 80002d4:	08000345 	.word	0x08000345
 80002d8:	08000379 	.word	0x08000379
 80002dc:	080003ad 	.word	0x080003ad
 80002e0:	080003d5 	.word	0x080003d5
 80002e4:	08000417 	.word	0x08000417
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	b2d1      	uxtb	r1, r2
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	7111      	strb	r1, [r2, #4]
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	79db      	ldrb	r3, [r3, #7]
 80002fc:	2b55      	cmp	r3, #85	@ 0x55
 80002fe:	f040 80bd 	bne.w	800047c <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000302:	4b65      	ldr	r3, [pc, #404]	@ (8000498 <DecodeHeader+0x1ec>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800030e:	e0b5      	b.n	800047c <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	791b      	ldrb	r3, [r3, #4]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	b2d1      	uxtb	r1, r2
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7111      	strb	r1, [r2, #4]
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	79db      	ldrb	r3, [r3, #7]
 8000324:	2b4e      	cmp	r3, #78	@ 0x4e
 8000326:	d103      	bne.n	8000330 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000328:	4b5b      	ldr	r3, [pc, #364]	@ (8000498 <DecodeHeader+0x1ec>)
 800032a:	2202      	movs	r2, #2
 800032c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800032e:	e0a8      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	3b01      	subs	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800033c:	4b56      	ldr	r3, [pc, #344]	@ (8000498 <DecodeHeader+0x1ec>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
                break;
 8000342:	e09e      	b.n	8000482 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	b2d1      	uxtb	r1, r2
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7111      	strb	r1, [r2, #4]
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	79db      	ldrb	r3, [r3, #7]
 8000358:	2b45      	cmp	r3, #69	@ 0x45
 800035a:	d103      	bne.n	8000364 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800035c:	4b4e      	ldr	r3, [pc, #312]	@ (8000498 <DecodeHeader+0x1ec>)
 800035e:	2203      	movs	r2, #3
 8000360:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000362:	e08e      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000370:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <DecodeHeader+0x1ec>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
                break;
 8000376:	e084      	b.n	8000482 <DecodeHeader+0x1d6>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	b2d1      	uxtb	r1, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	7111      	strb	r1, [r2, #4]
 8000384:	461a      	mov	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	79db      	ldrb	r3, [r3, #7]
 800038c:	2b52      	cmp	r3, #82	@ 0x52
 800038e:	d103      	bne.n	8000398 <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000390:	4b41      	ldr	r3, [pc, #260]	@ (8000498 <DecodeHeader+0x1ec>)
 8000392:	2204      	movs	r2, #4
 8000394:	701a      	strb	r2, [r3, #0]
				else{
					datosCom->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 8000396:	e074      	b.n	8000482 <DecodeHeader+0x1d6>
					datosCom->indexReadRx--;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	3b01      	subs	r3, #1
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80003a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000498 <DecodeHeader+0x1ec>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
            break;
 80003aa:	e06a      	b.n	8000482 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791a      	ldrb	r2, [r3, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	b2d1      	uxtb	r1, r2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7111      	strb	r1, [r2, #4]
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	79da      	ldrb	r2, [r3, #7]
 80003c8:	4b34      	ldr	r3, [pc, #208]	@ (800049c <DecodeHeader+0x1f0>)
 80003ca:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80003cc:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ce:	2205      	movs	r2, #5
 80003d0:	701a      	strb	r2, [r3, #0]
                break;
 80003d2:	e056      	b.n	8000482 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	791b      	ldrb	r3, [r3, #4]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	b2d1      	uxtb	r1, r2
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7111      	strb	r1, [r2, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	79db      	ldrb	r3, [r3, #7]
 80003e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80003ea:	d10a      	bne.n	8000402 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ee:	2206      	movs	r2, #6
 80003f0:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003f2:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <DecodeHeader+0x1f0>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000400:	e03f      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800040e:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <DecodeHeader+0x1ec>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
                break;
 8000414:	e035      	b.n	8000482 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <DecodeHeader+0x1f0>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d90f      	bls.n	800043e <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	b2d1      	uxtb	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7111      	strb	r1, [r2, #4]
 800042a:	461a      	mov	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	79da      	ldrb	r2, [r3, #7]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	4053      	eors	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <DecodeHeader+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	3b01      	subs	r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <DecodeHeader+0x1f0>)
 8000448:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <DecodeHeader+0x1f0>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d116      	bne.n	8000480 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <DecodeHeader+0x1ec>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	440b      	add	r3, r1
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	429a      	cmp	r2, r3
 800046a:	d109      	bne.n	8000480 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f817 	bl	80004a0 <decodeData>
                    }
                }

                break;
 8000472:	e005      	b.n	8000480 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <DecodeHeader+0x1ec>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
                break;
 800047a:	e002      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 800047c:	bf00      	nop
 800047e:	e000      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 8000480:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	7bfa      	ldrb	r2, [r7, #15]
 8000488:	429a      	cmp	r2, r3
 800048a:	f47f af17 	bne.w	80002bc <DecodeHeader+0x10>
        }
    }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000500 	.word	0x20000500
 800049c:	200001f0 	.word	0x200001f0

080004a0 <decodeData>:



void decodeData(_sDato *datosCom){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	77bb      	strb	r3, [r7, #30]
 80004ac:	2300      	movs	r3, #0
 80004ae:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	785b      	ldrb	r3, [r3, #1]
 80004b4:	3302      	adds	r3, #2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	3bf0      	subs	r3, #240	@ 0xf0
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d829      	bhi.n	8000516 <decodeData+0x76>
 80004c2:	a201      	add	r2, pc, #4	@ (adr r2, 80004c8 <decodeData+0x28>)
 80004c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c8:	080004d9 	.word	0x080004d9
 80004cc:	080004ef 	.word	0x080004ef
 80004d0:	08000505 	.word	0x08000505
 80004d4:	0800052d 	.word	0x0800052d
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80004d8:	7fbb      	ldrb	r3, [r7, #30]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	77ba      	strb	r2, [r7, #30]
 80004de:	3320      	adds	r3, #32
 80004e0:	443b      	add	r3, r7
 80004e2:	22f0      	movs	r2, #240	@ 0xf0
 80004e4:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80004e8:	2302      	movs	r3, #2
 80004ea:	77fb      	strb	r3, [r7, #31]

    break;
 80004ec:	e01f      	b.n	800052e <decodeData+0x8e>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80004ee:	7fbb      	ldrb	r3, [r7, #30]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	77ba      	strb	r2, [r7, #30]
 80004f4:	3320      	adds	r3, #32
 80004f6:	443b      	add	r3, r7
 80004f8:	22f1      	movs	r2, #241	@ 0xf1
 80004fa:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80004fe:	2302      	movs	r3, #2
 8000500:	77fb      	strb	r3, [r7, #31]

    break;
 8000502:	e014      	b.n	800052e <decodeData+0x8e>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8000504:	7fbb      	ldrb	r3, [r7, #30]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	77ba      	strb	r2, [r7, #30]
 800050a:	3320      	adds	r3, #32
 800050c:	443b      	add	r3, r7
 800050e:	22f2      	movs	r2, #242	@ 0xf2
 8000510:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 8000514:	e00b      	b.n	800052e <decodeData+0x8e>
    case ENGINES:

    break;
    default:

        bufAux[indiceAux++]=0xFF;
 8000516:	7fbb      	ldrb	r3, [r7, #30]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	77ba      	strb	r2, [r7, #30]
 800051c:	3320      	adds	r3, #32
 800051e:	443b      	add	r3, r7
 8000520:	22ff      	movs	r2, #255	@ 0xff
 8000522:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000526:	2302      	movs	r3, #2
 8000528:	77fb      	strb	r3, [r7, #31]

    break;
 800052a:	e000      	b.n	800052e <decodeData+0x8e>
    break;
 800052c:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 800052e:	7ffa      	ldrb	r2, [r7, #31]
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe08 	bl	800014c <SendInfo>
}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000550:	2300      	movs	r3, #0
 8000552:	81fb      	strh	r3, [r7, #14]
 8000554:	e014      	b.n	8000580 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 8000556:	89fb      	ldrh	r3, [r7, #14]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <datafromUSB+0x50>)
 800055e:	78d2      	ldrb	r2, [r2, #3]
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	4611      	mov	r1, r2
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <datafromUSB+0x50>)
 8000568:	440b      	add	r3, r1
 800056a:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <datafromUSB+0x50>)
 800056e:	78db      	ldrb	r3, [r3, #3]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3301      	adds	r3, #1
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <datafromUSB+0x50>)
 8000578:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 800057a:	89fb      	ldrh	r3, [r7, #14]
 800057c:	3301      	adds	r3, #1
 800057e:	81fb      	strh	r3, [r7, #14]
 8000580:	89fa      	ldrh	r2, [r7, #14]
 8000582:	887b      	ldrh	r3, [r7, #2]
 8000584:	429a      	cmp	r2, r3
 8000586:	d3e6      	bcc.n	8000556 <datafromUSB+0x12>
  }

}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	200002f8 	.word	0x200002f8

08000598 <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 80005a4:	2300      	movs	r3, #0
 80005a6:	77fb      	strb	r3, [r7, #31]
 80005a8:	e00c      	b.n	80005c4 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 80005aa:	7ffa      	ldrb	r2, [r7, #31]
 80005ac:	7ffb      	ldrb	r3, [r7, #31]
 80005ae:	490b      	ldr	r1, [pc, #44]	@ (80005dc <HAL_ADC_ConvCpltCallback+0x44>)
 80005b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005b4:	f107 000c 	add.w	r0, r7, #12
 80005b8:	4909      	ldr	r1, [pc, #36]	@ (80005e0 <HAL_ADC_ConvCpltCallback+0x48>)
 80005ba:	f009 fc13 	bl	8009de4 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 80005be:	7ffb      	ldrb	r3, [r7, #31]
 80005c0:	3301      	adds	r3, #1
 80005c2:	77fb      	strb	r3, [r7, #31]
 80005c4:	7ffb      	ldrb	r3, [r7, #31]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d9ef      	bls.n	80005aa <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005d0:	f001 fe96 	bl	8002300 <HAL_GPIO_TogglePin>
}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000504 	.word	0x20000504
 80005e0:	0800a75c 	.word	0x0800a75c
 80005e4:	40011000 	.word	0x40011000

080005e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	IS10MS=TRUE;
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005f2:	7813      	ldrb	r3, [r2, #0]
 80005f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f8:	7013      	strb	r3, [r2, #0]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000514 	.word	0x20000514

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter=0;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
	uint8_t DMAcounter=0;
 8000612:	2300      	movs	r3, #0
 8000614:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fce7 	bl	8000fe8 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(&datafromUSB);
 800061a:	4834      	ldr	r0, [pc, #208]	@ (80006ec <main+0xe4>)
 800061c:	f009 f81c 	bl	8009658 <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <main+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <main+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags=0;
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <main+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f86b 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 fa55 	bl	8000ae4 <MX_GPIO_Init>
  MX_DMA_Init();
 800063a:	f000 fa35 	bl	8000aa8 <MX_DMA_Init>
  MX_ADC1_Init();
 800063e:	f000 f8c3 	bl	80007c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000642:	f000 f963 	bl	800090c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000646:	f008 fec5 	bl	80093d4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800064a:	f000 f9ab 	bl	80009a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800064e:	482a      	ldr	r0, [pc, #168]	@ (80006f8 <main+0xf0>)
 8000650:	f004 f8b4 	bl	80047bc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	4829      	ldr	r0, [pc, #164]	@ (80006fc <main+0xf4>)
 8000658:	f004 f95a 	bl	8004910 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	4827      	ldr	r0, [pc, #156]	@ (80006fc <main+0xf4>)
 8000660:	f004 f956 	bl	8004910 <HAL_TIM_PWM_Start>

  int speed=0;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(Engine1_GPIO_Port, Engine1_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2180      	movs	r1, #128	@ 0x80
 800066c:	4824      	ldr	r0, [pc, #144]	@ (8000700 <main+0xf8>)
 800066e:	f001 fe2f 	bl	80022d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Engine2_GPIO_Port, Engine2_Pin, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	@ 0x40
 8000676:	4822      	ldr	r0, [pc, #136]	@ (8000700 <main+0xf8>)
 8000678:	f001 fe2a 	bl	80022d0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	comunicationsTask(&datosComSerie);
 800067c:	481c      	ldr	r0, [pc, #112]	@ (80006f0 <main+0xe8>)
 800067e:	f000 fa89 	bl	8000b94 <comunicationsTask>

	if(IS10MS){
 8000682:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <main+0xec>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f5      	beq.n	800067c <main+0x74>
		if(counter>10){
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b0a      	cmp	r3, #10
 8000694:	d909      	bls.n	80006aa <main+0xa2>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, speed);
 8000696:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <main+0xf4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, speed);
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <main+0xf4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
			counter=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	71fb      	strb	r3, [r7, #7]
		}
		if(DMAcounter>100){
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	2b64      	cmp	r3, #100	@ 0x64
 80006ae:	d906      	bls.n	80006be <main+0xb6>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 80006b0:	2208      	movs	r2, #8
 80006b2:	4914      	ldr	r1, [pc, #80]	@ (8000704 <main+0xfc>)
 80006b4:	4814      	ldr	r0, [pc, #80]	@ (8000708 <main+0x100>)
 80006b6:	f000 fdd1 	bl	800125c <HAL_ADC_Start_DMA>
			DMAcounter=0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71bb      	strb	r3, [r7, #6]
		}
		IS10MS=!IS10MS;
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <main+0xec>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	b2d9      	uxtb	r1, r3
 80006d2:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <main+0xec>)
 80006d4:	7813      	ldrb	r3, [r2, #0]
 80006d6:	f361 1386 	bfi	r3, r1, #6, #1
 80006da:	7013      	strb	r3, [r2, #0]
		counter++;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3301      	adds	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
		DMAcounter++;
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	3301      	adds	r3, #1
 80006e6:	71bb      	strb	r3, [r7, #6]
	comunicationsTask(&datosComSerie);
 80006e8:	e7c8      	b.n	800067c <main+0x74>
 80006ea:	bf00      	nop
 80006ec:	08000545 	.word	0x08000545
 80006f0:	200002f8 	.word	0x200002f8
 80006f4:	20000514 	.word	0x20000514
 80006f8:	20000268 	.word	0x20000268
 80006fc:	200002b0 	.word	0x200002b0
 8000700:	40010c00 	.word	0x40010c00
 8000704:	20000504 	.word	0x20000504
 8000708:	200001f4 	.word	0x200001f4

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000716:	2228      	movs	r2, #40	@ 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f009 fb84 	bl	8009e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000758:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fb46 	bl	8003df4 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076e:	f000 fa61 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000782:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f003 fdb2 	bl	80042f8 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800079a:	f000 fa4b 	bl	8000c34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800079e:	2312      	movs	r3, #18
 80007a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fefe 	bl	80045b0 <HAL_RCCEx_PeriphCLKConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007ba:	f000 fa3b 	bl	8000c34 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	@ 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80007da:	4a4b      	ldr	r2, [pc, #300]	@ (8000908 <MX_ADC1_Init+0x140>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007de:	4b49      	ldr	r3, [pc, #292]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80007e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e6:	4b47      	ldr	r3, [pc, #284]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ec:	4b45      	ldr	r3, [pc, #276]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b44      	ldr	r3, [pc, #272]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80007f4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b42      	ldr	r3, [pc, #264]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000800:	4b40      	ldr	r3, [pc, #256]	@ (8000904 <MX_ADC1_Init+0x13c>)
 8000802:	2208      	movs	r2, #8
 8000804:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000806:	483f      	ldr	r0, [pc, #252]	@ (8000904 <MX_ADC1_Init+0x13c>)
 8000808:	f000 fc50 	bl	80010ac <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000812:	f000 fa0f 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2301      	movs	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800081e:	2307      	movs	r3, #7
 8000820:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4837      	ldr	r0, [pc, #220]	@ (8000904 <MX_ADC1_Init+0x13c>)
 8000828:	f000 fed0 	bl	80015cc <HAL_ADC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 f9ff 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800083a:	2302      	movs	r3, #2
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4830      	ldr	r0, [pc, #192]	@ (8000904 <MX_ADC1_Init+0x13c>)
 8000844:	f000 fec2 	bl	80015cc <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 f9f1 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000852:	2302      	movs	r3, #2
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000856:	2303      	movs	r3, #3
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4829      	ldr	r0, [pc, #164]	@ (8000904 <MX_ADC1_Init+0x13c>)
 8000860:	f000 feb4 	bl	80015cc <HAL_ADC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800086a:	f000 f9e3 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800086e:	2303      	movs	r3, #3
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000872:	2304      	movs	r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4822      	ldr	r0, [pc, #136]	@ (8000904 <MX_ADC1_Init+0x13c>)
 800087c:	f000 fea6 	bl	80015cc <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000886:	f000 f9d5 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800088a:	2304      	movs	r3, #4
 800088c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800088e:	2305      	movs	r3, #5
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	481b      	ldr	r0, [pc, #108]	@ (8000904 <MX_ADC1_Init+0x13c>)
 8000898:	f000 fe98 	bl	80015cc <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008a2:	f000 f9c7 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008a6:	2305      	movs	r3, #5
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008aa:	2306      	movs	r3, #6
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4814      	ldr	r0, [pc, #80]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80008b4:	f000 fe8a 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80008be:	f000 f9b9 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008c2:	2306      	movs	r3, #6
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80008c6:	2307      	movs	r3, #7
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80008d0:	f000 fe7c 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80008da:	f000 f9ab 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008de:	2307      	movs	r3, #7
 80008e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008e2:	2308      	movs	r3, #8
 80008e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	@ (8000904 <MX_ADC1_Init+0x13c>)
 80008ec:	f000 fe6e 	bl	80015cc <HAL_ADC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80008f6:	f000 f99d 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001f4 	.word	0x200001f4
 8000908:	40012400 	.word	0x40012400

0800090c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000928:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <MX_TIM2_Init+0x94>)
 800092a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800092e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_TIM2_Init+0x94>)
 8000932:	2247      	movs	r2, #71	@ 0x47
 8000934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_TIM2_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_TIM2_Init+0x94>)
 800093e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_TIM2_Init+0x94>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_TIM2_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000950:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <MX_TIM2_Init+0x94>)
 8000952:	f003 fee3 	bl	800471c <HAL_TIM_Base_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800095c:	f000 f96a 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_TIM2_Init+0x94>)
 800096e:	f004 fa23 	bl	8004db8 <HAL_TIM_ConfigClockSource>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000978:	f000 f95c 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_TIM2_Init+0x94>)
 800098a:	f004 fdb1 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000994:	f000 f94e 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000268 	.word	0x20000268

080009a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d4:	4b32      	ldr	r3, [pc, #200]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009d6:	4a33      	ldr	r2, [pc, #204]	@ (8000aa4 <MX_TIM4_Init+0x100>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80009da:	4b31      	ldr	r3, [pc, #196]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009dc:	2247      	movs	r2, #71	@ 0x47
 80009de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80009e6:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009e8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009fa:	4829      	ldr	r0, [pc, #164]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 80009fc:	f003 fe8e 	bl	800471c <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a06:	f000 f915 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 8000a18:	f004 f9ce 	bl	8004db8 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a22:	f000 f907 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a26:	481e      	ldr	r0, [pc, #120]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 8000a28:	f003 ff1a 	bl	8004860 <HAL_TIM_PWM_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a32:	f000 f8ff 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	4619      	mov	r1, r3
 8000a44:	4816      	ldr	r0, [pc, #88]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 8000a46:	f004 fd53 	bl	80054f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a50:	f000 f8f0 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	@ 0x60
 8000a56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 8000a6c:	f004 f8e2 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a76:	f000 f8dd 	bl	8000c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 8000a82:	f004 f8d7 	bl	8004c34 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000a8c:	f000 f8d2 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <MX_TIM4_Init+0xfc>)
 8000a92:	f000 f9b7 	bl	8000e04 <HAL_TIM_MspPostInit>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	@ 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200002b0 	.word	0x200002b0
 8000aa4:	40000800 	.word	0x40000800

08000aa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_DMA_Init+0x38>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae0 <MX_DMA_Init+0x38>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_DMA_Init+0x38>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200b      	movs	r0, #11
 8000acc:	f001 f857 	bl	8001b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad0:	200b      	movs	r0, #11
 8000ad2:	f001 f870 	bl	8001bb6 <HAL_NVIC_EnableIRQ>

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b10:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a17      	ldr	r2, [pc, #92]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_GPIO_Init+0xa8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5e:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <MX_GPIO_Init+0xac>)
 8000b60:	f001 fbb6 	bl	80022d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_GPIO_Init+0xac>)
 8000b7e:	f001 fa23 	bl	8001fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b82:	bf00      	nop
 8000b84:	3720      	adds	r7, #32
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40011000 	.word	0x40011000

08000b94 <comunicationsTask>:

/* USER CODE BEGIN 4 */

void comunicationsTask(_sDato *datosCom){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791a      	ldrb	r2, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	78db      	ldrb	r3, [r3, #3]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d007      	beq.n	8000bba <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fb7e 	bl	80002ac <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <comunicationsTask+0x9c>)
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <comunicationsTask+0x9c>)
 8000bb8:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	799a      	ldrb	r2, [r3, #6]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	795b      	ldrb	r3, [r3, #5]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d030      	beq.n	8000c28 <comunicationsTask+0x94>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	795a      	ldrb	r2, [r3, #5]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	799b      	ldrb	r3, [r3, #6]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d909      	bls.n	8000be6 <comunicationsTask+0x52>
				datosComSerie.bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	795a      	ldrb	r2, [r3, #5]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	799b      	ldrb	r3, [r3, #6]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <comunicationsTask+0x9c>)
 8000be0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8000be4:	e006      	b.n	8000bf4 <comunicationsTask+0x60>
		    }else{
		    	datosComSerie.bytesTosend =  RINGBUFFER - datosCom->indexReadTx;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	799b      	ldrb	r3, [r3, #6]
 8000bea:	425b      	negs	r3, r3
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <comunicationsTask+0x9c>)
 8000bf0:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		    }
		    if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosCom->indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <comunicationsTask+0x9c>)
 8000bfe:	4413      	add	r3, r2
 8000c00:	3307      	adds	r3, #7
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <comunicationsTask+0x9c>)
 8000c04:	f892 2207 	ldrb.w	r2, [r2, #519]	@ 0x207
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f008 fcfe 	bl	800960c <CDC_Transmit_FS>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d108      	bne.n	8000c28 <comunicationsTask+0x94>
		    	datosCom->indexReadTx += datosComSerie.bytesTosend;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	799a      	ldrb	r2, [r3, #6]
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <comunicationsTask+0x9c>)
 8000c1c:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8000c20:	4413      	add	r3, r2
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200002f8 	.word	0x200002f8

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <Error_Handler+0x8>

08000c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <HAL_MspInit+0x5c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_MspInit+0x5c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_MspInit+0x5c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_MspInit+0x5c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_MspInit+0x60>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <HAL_MspInit+0x60>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8000d70 <HAL_ADC_MspInit+0xcc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d151      	bne.n	8000d68 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d74 <HAL_ADC_MspInit+0xd0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d74 <HAL_ADC_MspInit+0xd0>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <HAL_ADC_MspInit+0xd0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <HAL_ADC_MspInit+0xd0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a24      	ldr	r2, [pc, #144]	@ (8000d74 <HAL_ADC_MspInit+0xd0>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <HAL_ADC_MspInit+0xd0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cf4:	23ff      	movs	r3, #255	@ 0xff
 8000cf6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	481d      	ldr	r0, [pc, #116]	@ (8000d78 <HAL_ADC_MspInit+0xd4>)
 8000d04:	f001 f960 	bl	8001fc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000d80 <HAL_ADC_MspInit+0xdc>)
 8000d0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d14:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d1c:	2280      	movs	r2, #128	@ 0x80
 8000d1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3c:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d3e:	f000 ff55 	bl	8001bec <HAL_DMA_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d48:	f7ff ff74 	bl	8000c34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d50:	621a      	str	r2, [r3, #32]
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_ADC_MspInit+0xd8>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2012      	movs	r0, #18
 8000d5e:	f000 ff0e 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d62:	2012      	movs	r0, #18
 8000d64:	f000 ff27 	bl	8001bb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40012400 	.word	0x40012400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	20000224 	.word	0x20000224
 8000d80:	40020008 	.word	0x40020008

08000d84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d94:	d114      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d96:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_TIM_Base_MspInit+0x78>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a18      	ldr	r2, [pc, #96]	@ (8000dfc <HAL_TIM_Base_MspInit+0x78>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <HAL_TIM_Base_MspInit+0x78>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	201c      	movs	r0, #28
 8000db4:	f000 fee3 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db8:	201c      	movs	r0, #28
 8000dba:	f000 fefc 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dbe:	e018      	b.n	8000df2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <HAL_TIM_Base_MspInit+0x7c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d113      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_TIM_Base_MspInit+0x78>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_TIM_Base_MspInit+0x78>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_TIM_Base_MspInit+0x78>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201e      	movs	r0, #30
 8000de8:	f000 fec9 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dec:	201e      	movs	r0, #30
 8000dee:	f000 fee2 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40000800 	.word	0x40000800

08000e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <HAL_TIM_MspPostInit+0x58>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d117      	bne.n	8000e54 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_TIM_MspPostInit+0x5c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_TIM_MspPostInit+0x5c>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <HAL_TIM_MspPostInit+0x5c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Engine2_Pin|Engine1_Pin;
 8000e3c:	23c0      	movs	r3, #192	@ 0xc0
 8000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_TIM_MspPostInit+0x60>)
 8000e50:	f001 f8ba 	bl	8001fc8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40000800 	.word	0x40000800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <NMI_Handler+0x4>

08000e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <MemManage_Handler+0x4>

08000e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8dc 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ec6:	f000 ff4b 	bl	8001d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000224 	.word	0x20000224

08000ed4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <ADC1_2_IRQHandler+0x10>)
 8000eda:	f000 fa9d 	bl	8001418 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001f4 	.word	0x200001f4

08000ee8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eee:	f001 fb3c 	bl	800256a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200011ec 	.word	0x200011ec

08000efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <TIM2_IRQHandler+0x10>)
 8000f02:	f003 fda7 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000268 	.word	0x20000268

08000f10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <TIM4_IRQHandler+0x10>)
 8000f16:	f003 fd9d 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200002b0 	.word	0x200002b0

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f008 ff70 	bl	8009e38 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20005000 	.word	0x20005000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000518 	.word	0x20000518
 8000f8c:	20001830 	.word	0x20001830

08000f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff fff8 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fa2:	490c      	ldr	r1, [pc, #48]	@ (8000fd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fb8:	4c09      	ldr	r4, [pc, #36]	@ (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f008 ff3d 	bl	8009e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff fb1d 	bl	8000608 <main>
  bx lr
 8000fce:	4770      	bx	lr
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000fd8:	0800a814 	.word	0x0800a814
  ldr r2, =_sbss
 8000fdc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000fe0:	2000182c 	.word	0x2000182c

08000fe4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <CAN1_RX1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_Init+0x28>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_Init+0x28>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f000 fdb5 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffe:	200f      	movs	r0, #15
 8001000:	f000 f808 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001004:	f7ff fe1c 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x54>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_InitTick+0x58>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fdcd 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 fd95 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <HAL_InitTick+0x5c>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_IncTick+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_IncTick+0x20>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a03      	ldr	r2, [pc, #12]	@ (8001094 <HAL_IncTick+0x20>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000008 	.word	0x20000008
 8001094:	2000051c 	.word	0x2000051c

08001098 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	2000051c 	.word	0x2000051c

080010ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e0be      	b.n	800124c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fdda 	bl	8000ca4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fbbd 	bl	8001870 <ADC_ConversionStop_Disable>
 80010f6:	4603      	mov	r3, r0
 80010f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 8099 	bne.w	800123a <HAL_ADC_Init+0x18e>
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 8095 	bne.w	800123a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001118:	f023 0302 	bic.w	r3, r3, #2
 800111c:	f043 0202 	orr.w	r2, r3, #2
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800112c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7b1b      	ldrb	r3, [r3, #12]
 8001132:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001134:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4313      	orrs	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001144:	d003      	beq.n	800114e <HAL_ADC_Init+0xa2>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d102      	bne.n	8001154 <HAL_ADC_Init+0xa8>
 800114e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001152:	e000      	b.n	8001156 <HAL_ADC_Init+0xaa>
 8001154:	2300      	movs	r3, #0
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7d1b      	ldrb	r3, [r3, #20]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d119      	bne.n	8001198 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7b1b      	ldrb	r3, [r3, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	3b01      	subs	r3, #1
 8001172:	035a      	lsls	r2, r3, #13
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	e00b      	b.n	8001198 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f043 0220 	orr.w	r2, r3, #32
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001190:	f043 0201 	orr.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	4b28      	ldr	r3, [pc, #160]	@ (8001254 <HAL_ADC_Init+0x1a8>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	430b      	orrs	r3, r1
 80011be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011c8:	d003      	beq.n	80011d2 <HAL_ADC_Init+0x126>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d104      	bne.n	80011dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	051b      	lsls	r3, r3, #20
 80011da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_ADC_Init+0x1ac>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d10b      	bne.n	8001218 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	f023 0303 	bic.w	r3, r3, #3
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001216:	e018      	b.n	800124a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121c:	f023 0312 	bic.w	r3, r3, #18
 8001220:	f043 0210 	orr.w	r2, r3, #16
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001238:	e007      	b.n	800124a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123e:	f043 0210 	orr.w	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800124a:	7dfb      	ldrb	r3, [r7, #23]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	ffe1f7fd 	.word	0xffe1f7fd
 8001258:	ff1f0efe 	.word	0xff1f0efe

0800125c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a64      	ldr	r2, [pc, #400]	@ (8001404 <HAL_ADC_Start_DMA+0x1a8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d004      	beq.n	8001280 <HAL_ADC_Start_DMA+0x24>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a63      	ldr	r2, [pc, #396]	@ (8001408 <HAL_ADC_Start_DMA+0x1ac>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d106      	bne.n	800128e <HAL_ADC_Start_DMA+0x32>
 8001280:	4b60      	ldr	r3, [pc, #384]	@ (8001404 <HAL_ADC_Start_DMA+0x1a8>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 80b3 	bne.w	80013f4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ADC_Start_DMA+0x40>
 8001298:	2302      	movs	r3, #2
 800129a:	e0ae      	b.n	80013fa <HAL_ADC_Start_DMA+0x19e>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 fa89 	bl	80017bc <ADC_Enable>
 80012aa:	4603      	mov	r3, r0
 80012ac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 809a 	bne.w	80013ea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001408 <HAL_ADC_Start_DMA+0x1ac>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_Start_DMA+0x84>
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <HAL_ADC_Start_DMA+0x1a8>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d115      	bne.n	800130c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d026      	beq.n	8001348 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001302:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800130a:	e01d      	b.n	8001348 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001310:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a39      	ldr	r2, [pc, #228]	@ (8001404 <HAL_ADC_Start_DMA+0x1a8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d004      	beq.n	800132c <HAL_ADC_Start_DMA+0xd0>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a38      	ldr	r2, [pc, #224]	@ (8001408 <HAL_ADC_Start_DMA+0x1ac>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d10d      	bne.n	8001348 <HAL_ADC_Start_DMA+0xec>
 800132c:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <HAL_ADC_Start_DMA+0x1a8>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001340:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001358:	f023 0206 	bic.w	r2, r3, #6
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001360:	e002      	b.n	8001368 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a25      	ldr	r2, [pc, #148]	@ (800140c <HAL_ADC_Start_DMA+0x1b0>)
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a24      	ldr	r2, [pc, #144]	@ (8001410 <HAL_ADC_Start_DMA+0x1b4>)
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <HAL_ADC_Start_DMA+0x1b8>)
 8001386:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0202 	mvn.w	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013a0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a18      	ldr	r0, [r3, #32]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	334c      	adds	r3, #76	@ 0x4c
 80013ac:	4619      	mov	r1, r3
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f000 fc75 	bl	8001ca0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013c0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013c4:	d108      	bne.n	80013d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80013d4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013d6:	e00f      	b.n	80013f8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80013e6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80013e8:	e006      	b.n	80013f8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80013f2:	e001      	b.n	80013f8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012400 	.word	0x40012400
 8001408:	40012800 	.word	0x40012800
 800140c:	080018f3 	.word	0x080018f3
 8001410:	0800196f 	.word	0x0800196f
 8001414:	0800198b 	.word	0x0800198b

08001418 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	2b00      	cmp	r3, #0
 8001438:	d03e      	beq.n	80014b8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d039      	beq.n	80014b8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001454:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001466:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800146a:	d11d      	bne.n	80014a8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001470:	2b00      	cmp	r3, #0
 8001472:	d119      	bne.n	80014a8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0220 	bic.w	r2, r2, #32
 8001482:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff f875 	bl	8000598 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f06f 0212 	mvn.w	r2, #18
 80014b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d04d      	beq.n	800155e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d048      	beq.n	800155e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80014ee:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80014f2:	d012      	beq.n	800151a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d125      	bne.n	800154e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800150c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001510:	d11d      	bne.n	800154e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001516:	2b00      	cmp	r3, #0
 8001518:	d119      	bne.n	800154e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001528:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa35 	bl	80019be <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 020c 	mvn.w	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d012      	beq.n	800158e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00d      	beq.n	800158e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f812 	bl	80015a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0201 	mvn.w	r2, #1
 800158c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x20>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e0dc      	b.n	80017a6 <HAL_ADC_ConfigChannel+0x1da>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d81c      	bhi.n	8001636 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	3b05      	subs	r3, #5
 800160e:	221f      	movs	r2, #31
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	4019      	ands	r1, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3b05      	subs	r3, #5
 8001628:	fa00 f203 	lsl.w	r2, r0, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
 8001634:	e03c      	b.n	80016b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b0c      	cmp	r3, #12
 800163c:	d81c      	bhi.n	8001678 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b23      	subs	r3, #35	@ 0x23
 8001650:	221f      	movs	r2, #31
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	4019      	ands	r1, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	3b23      	subs	r3, #35	@ 0x23
 800166a:	fa00 f203 	lsl.w	r2, r0, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	631a      	str	r2, [r3, #48]	@ 0x30
 8001676:	e01b      	b.n	80016b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b41      	subs	r3, #65	@ 0x41
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b41      	subs	r3, #65	@ 0x41
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d91c      	bls.n	80016f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68d9      	ldr	r1, [r3, #12]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	3b1e      	subs	r3, #30
 80016ca:	2207      	movs	r2, #7
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4019      	ands	r1, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	3b1e      	subs	r3, #30
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	e019      	b.n	8001726 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6919      	ldr	r1, [r3, #16]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	2207      	movs	r2, #7
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	4019      	ands	r1, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6898      	ldr	r0, [r3, #8]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	fa00 f203 	lsl.w	r2, r0, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b10      	cmp	r3, #16
 800172c:	d003      	beq.n	8001736 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001732:	2b11      	cmp	r3, #17
 8001734:	d132      	bne.n	800179c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1d      	ldr	r2, [pc, #116]	@ (80017b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d125      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d126      	bne.n	800179c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800175c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d11a      	bne.n	800179c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a13      	ldr	r2, [pc, #76]	@ (80017b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	0c9a      	lsrs	r2, r3, #18
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800177c:	e002      	b.n	8001784 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3b01      	subs	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_ConfigChannel+0x1b2>
 800178a:	e007      	b.n	800179c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	f043 0220 	orr.w	r2, r3, #32
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40012400 	.word	0x40012400
 80017b4:	20000000 	.word	0x20000000
 80017b8:	431bde83 	.word	0x431bde83

080017bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d040      	beq.n	800185c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <ADC_Enable+0xac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	@ (800186c <ADC_Enable+0xb0>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017f8:	e002      	b.n	8001800 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001806:	f7ff fc47 	bl	8001098 <HAL_GetTick>
 800180a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800180c:	e01f      	b.n	800184e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800180e:	f7ff fc43 	bl	8001098 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d918      	bls.n	800184e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d011      	beq.n	800184e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	f043 0210 	orr.w	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e007      	b.n	800185e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1d8      	bne.n	800180e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000000 	.word	0x20000000
 800186c:	431bde83 	.word	0x431bde83

08001870 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d12e      	bne.n	80018e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800189a:	f7ff fbfd 	bl	8001098 <HAL_GetTick>
 800189e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a0:	e01b      	b.n	80018da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018a2:	f7ff fbf9 	bl	8001098 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d914      	bls.n	80018da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10d      	bne.n	80018da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e007      	b.n	80018ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d0dc      	beq.n	80018a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001908:	2b00      	cmp	r3, #0
 800190a:	d127      	bne.n	800195c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001922:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001926:	d115      	bne.n	8001954 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800192c:	2b00      	cmp	r3, #0
 800192e:	d111      	bne.n	8001954 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7fe fe1f 	bl	8000598 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800195a:	e004      	b.n	8001966 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fe0a 	bl	8001596 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fe02 	bl	80015ba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <__NVIC_EnableIRQ+0x34>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff90 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff2d 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff42 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff90 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5f 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff35 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e043      	b.n	8001c8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_DMA_Init+0xa8>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a22      	ldr	r2, [pc, #136]	@ (8001c98 <HAL_DMA_Init+0xac>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c9c <HAL_DMA_Init+0xb0>)
 8001c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001c3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	bffdfff8 	.word	0xbffdfff8
 8001c98:	cccccccd 	.word	0xcccccccd
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_DMA_Start_IT+0x20>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e04b      	b.n	8001d58 <HAL_DMA_Start_IT+0xb8>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d13a      	bne.n	8001d4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f000 f937 	bl	8001f6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 020e 	orr.w	r2, r2, #14
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e00f      	b.n	8001d38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 020a 	orr.w	r2, r2, #10
 8001d36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e005      	b.n	8001d56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
 8001d54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d04f      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xc8>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d04a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0204 	bic.w	r2, r2, #4
 8001dae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a66      	ldr	r2, [pc, #408]	@ (8001f50 <HAL_DMA_IRQHandler+0x1f0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d029      	beq.n	8001e0e <HAL_DMA_IRQHandler+0xae>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a65      	ldr	r2, [pc, #404]	@ (8001f54 <HAL_DMA_IRQHandler+0x1f4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d022      	beq.n	8001e0a <HAL_DMA_IRQHandler+0xaa>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a63      	ldr	r2, [pc, #396]	@ (8001f58 <HAL_DMA_IRQHandler+0x1f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d01a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xa4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a62      	ldr	r2, [pc, #392]	@ (8001f5c <HAL_DMA_IRQHandler+0x1fc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d012      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x9e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a60      	ldr	r2, [pc, #384]	@ (8001f60 <HAL_DMA_IRQHandler+0x200>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00a      	beq.n	8001df8 <HAL_DMA_IRQHandler+0x98>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f64 <HAL_DMA_IRQHandler+0x204>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <HAL_DMA_IRQHandler+0x92>
 8001dec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001df0:	e00e      	b.n	8001e10 <HAL_DMA_IRQHandler+0xb0>
 8001df2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001df6:	e00b      	b.n	8001e10 <HAL_DMA_IRQHandler+0xb0>
 8001df8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001dfc:	e008      	b.n	8001e10 <HAL_DMA_IRQHandler+0xb0>
 8001dfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e02:	e005      	b.n	8001e10 <HAL_DMA_IRQHandler+0xb0>
 8001e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e08:	e002      	b.n	8001e10 <HAL_DMA_IRQHandler+0xb0>
 8001e0a:	2340      	movs	r3, #64	@ 0x40
 8001e0c:	e000      	b.n	8001e10 <HAL_DMA_IRQHandler+0xb0>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	4a55      	ldr	r2, [pc, #340]	@ (8001f68 <HAL_DMA_IRQHandler+0x208>)
 8001e12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8094 	beq.w	8001f46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e26:	e08e      	b.n	8001f46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d056      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x186>
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d051      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10b      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020a 	bic.w	r2, r2, #10
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_DMA_IRQHandler+0x1f0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d029      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x166>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a37      	ldr	r2, [pc, #220]	@ (8001f54 <HAL_DMA_IRQHandler+0x1f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d022      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x162>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a35      	ldr	r2, [pc, #212]	@ (8001f58 <HAL_DMA_IRQHandler+0x1f8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01a      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x15c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a34      	ldr	r2, [pc, #208]	@ (8001f5c <HAL_DMA_IRQHandler+0x1fc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d012      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x156>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a32      	ldr	r2, [pc, #200]	@ (8001f60 <HAL_DMA_IRQHandler+0x200>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00a      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x150>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a31      	ldr	r2, [pc, #196]	@ (8001f64 <HAL_DMA_IRQHandler+0x204>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d102      	bne.n	8001eaa <HAL_DMA_IRQHandler+0x14a>
 8001ea4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ea8:	e00e      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x168>
 8001eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eae:	e00b      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x168>
 8001eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb4:	e008      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x168>
 8001eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eba:	e005      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x168>
 8001ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec0:	e002      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x168>
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e000      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x168>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <HAL_DMA_IRQHandler+0x208>)
 8001eca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d034      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ee4:	e02f      	b.n	8001f46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	2208      	movs	r2, #8
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d028      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x1e8>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020e 	bic.w	r2, r2, #14
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
    }
  }
  return;
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
}
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020008 	.word	0x40020008
 8001f54:	4002001c 	.word	0x4002001c
 8001f58:	40020030 	.word	0x40020030
 8001f5c:	40020044 	.word	0x40020044
 8001f60:	40020058 	.word	0x40020058
 8001f64:	4002006c 	.word	0x4002006c
 8001f68:	40020000 	.word	0x40020000

08001f6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d108      	bne.n	8001fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001faa:	e007      	b.n	8001fbc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b08b      	sub	sp, #44	@ 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	e169      	b.n	80022b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8158 	bne.w	80022aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a9a      	ldr	r2, [pc, #616]	@ (8002268 <HAL_GPIO_Init+0x2a0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d05e      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002004:	4a98      	ldr	r2, [pc, #608]	@ (8002268 <HAL_GPIO_Init+0x2a0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d875      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 800200a:	4a98      	ldr	r2, [pc, #608]	@ (800226c <HAL_GPIO_Init+0x2a4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d058      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002010:	4a96      	ldr	r2, [pc, #600]	@ (800226c <HAL_GPIO_Init+0x2a4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d86f      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 8002016:	4a96      	ldr	r2, [pc, #600]	@ (8002270 <HAL_GPIO_Init+0x2a8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d052      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 800201c:	4a94      	ldr	r2, [pc, #592]	@ (8002270 <HAL_GPIO_Init+0x2a8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d869      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 8002022:	4a94      	ldr	r2, [pc, #592]	@ (8002274 <HAL_GPIO_Init+0x2ac>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d04c      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002028:	4a92      	ldr	r2, [pc, #584]	@ (8002274 <HAL_GPIO_Init+0x2ac>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d863      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 800202e:	4a92      	ldr	r2, [pc, #584]	@ (8002278 <HAL_GPIO_Init+0x2b0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d046      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002034:	4a90      	ldr	r2, [pc, #576]	@ (8002278 <HAL_GPIO_Init+0x2b0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d85d      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 800203a:	2b12      	cmp	r3, #18
 800203c:	d82a      	bhi.n	8002094 <HAL_GPIO_Init+0xcc>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d859      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 8002042:	a201      	add	r2, pc, #4	@ (adr r2, 8002048 <HAL_GPIO_Init+0x80>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	080020c3 	.word	0x080020c3
 800204c:	0800209d 	.word	0x0800209d
 8002050:	080020af 	.word	0x080020af
 8002054:	080020f1 	.word	0x080020f1
 8002058:	080020f7 	.word	0x080020f7
 800205c:	080020f7 	.word	0x080020f7
 8002060:	080020f7 	.word	0x080020f7
 8002064:	080020f7 	.word	0x080020f7
 8002068:	080020f7 	.word	0x080020f7
 800206c:	080020f7 	.word	0x080020f7
 8002070:	080020f7 	.word	0x080020f7
 8002074:	080020f7 	.word	0x080020f7
 8002078:	080020f7 	.word	0x080020f7
 800207c:	080020f7 	.word	0x080020f7
 8002080:	080020f7 	.word	0x080020f7
 8002084:	080020f7 	.word	0x080020f7
 8002088:	080020f7 	.word	0x080020f7
 800208c:	080020a5 	.word	0x080020a5
 8002090:	080020b9 	.word	0x080020b9
 8002094:	4a79      	ldr	r2, [pc, #484]	@ (800227c <HAL_GPIO_Init+0x2b4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209a:	e02c      	b.n	80020f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	623b      	str	r3, [r7, #32]
          break;
 80020a2:	e029      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	3304      	adds	r3, #4
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e024      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	3308      	adds	r3, #8
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e01f      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	330c      	adds	r3, #12
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e01a      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ca:	2304      	movs	r3, #4
 80020cc:	623b      	str	r3, [r7, #32]
          break;
 80020ce:	e013      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d8:	2308      	movs	r3, #8
 80020da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	611a      	str	r2, [r3, #16]
          break;
 80020e2:	e009      	b.n	80020f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e4:	2308      	movs	r3, #8
 80020e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	615a      	str	r2, [r3, #20]
          break;
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
          break;
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          break;
 80020f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2bff      	cmp	r3, #255	@ 0xff
 80020fc:	d801      	bhi.n	8002102 <HAL_GPIO_Init+0x13a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_Init+0x13e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2bff      	cmp	r3, #255	@ 0xff
 800210c:	d802      	bhi.n	8002114 <HAL_GPIO_Init+0x14c>
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x152>
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	3b08      	subs	r3, #8
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	210f      	movs	r1, #15
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80b1 	beq.w	80022aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002148:	4b4d      	ldr	r3, [pc, #308]	@ (8002280 <HAL_GPIO_Init+0x2b8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a4c      	ldr	r2, [pc, #304]	@ (8002280 <HAL_GPIO_Init+0x2b8>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_GPIO_Init+0x2b8>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002160:	4a48      	ldr	r2, [pc, #288]	@ (8002284 <HAL_GPIO_Init+0x2bc>)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <HAL_GPIO_Init+0x2c0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d013      	beq.n	80021b4 <HAL_GPIO_Init+0x1ec>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3f      	ldr	r2, [pc, #252]	@ (800228c <HAL_GPIO_Init+0x2c4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00d      	beq.n	80021b0 <HAL_GPIO_Init+0x1e8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a3e      	ldr	r2, [pc, #248]	@ (8002290 <HAL_GPIO_Init+0x2c8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <HAL_GPIO_Init+0x1e4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a3d      	ldr	r2, [pc, #244]	@ (8002294 <HAL_GPIO_Init+0x2cc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_GPIO_Init+0x1e0>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e006      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021a8:	2304      	movs	r3, #4
 80021aa:	e004      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_GPIO_Init+0x1ee>
 80021b4:	2300      	movs	r3, #0
 80021b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021c6:	492f      	ldr	r1, [pc, #188]	@ (8002284 <HAL_GPIO_Init+0x2bc>)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	492c      	ldr	r1, [pc, #176]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4928      	ldr	r1, [pc, #160]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4922      	ldr	r1, [pc, #136]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	43db      	mvns	r3, r3
 800221e:	491e      	ldr	r1, [pc, #120]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 8002220:	4013      	ands	r3, r2
 8002222:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4918      	ldr	r1, [pc, #96]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800223e:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	43db      	mvns	r3, r3
 8002246:	4914      	ldr	r1, [pc, #80]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 8002248:	4013      	ands	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d021      	beq.n	800229c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	490e      	ldr	r1, [pc, #56]	@ (8002298 <HAL_GPIO_Init+0x2d0>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]
 8002264:	e021      	b.n	80022aa <HAL_GPIO_Init+0x2e2>
 8002266:	bf00      	nop
 8002268:	10320000 	.word	0x10320000
 800226c:	10310000 	.word	0x10310000
 8002270:	10220000 	.word	0x10220000
 8002274:	10210000 	.word	0x10210000
 8002278:	10120000 	.word	0x10120000
 800227c:	10110000 	.word	0x10110000
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	40010800 	.word	0x40010800
 800228c:	40010c00 	.word	0x40010c00
 8002290:	40011000 	.word	0x40011000
 8002294:	40011400 	.word	0x40011400
 8002298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_GPIO_Init+0x304>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	4909      	ldr	r1, [pc, #36]	@ (80022cc <HAL_GPIO_Init+0x304>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	3301      	adds	r3, #1
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f47f ae8e 	bne.w	8001fdc <HAL_GPIO_Init+0x14>
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	372c      	adds	r7, #44	@ 0x2c
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e0:	787b      	ldrb	r3, [r7, #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ec:	e003      	b.n	80022f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4013      	ands	r3, r2
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	43d9      	mvns	r1, r3
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	400b      	ands	r3, r1
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0e8      	b.n	8002516 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f007 fa99 	bl	8009890 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2203      	movs	r2, #3
 8002362:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f003 f950 	bl	8005616 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002380:	f003 f926 	bl	80055d0 <USB_CoreInit>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0bf      	b.n	8002516 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f003 f954 	bl	800564a <USB_SetCurrentMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b0      	b.n	8002516 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e03e      	b.n	8002438 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3311      	adds	r3, #17
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3310      	adds	r3, #16
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	3313      	adds	r3, #19
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	3320      	adds	r3, #32
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3324      	adds	r3, #36	@ 0x24
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3301      	adds	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3bb      	bcc.n	80023ba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e044      	b.n	80024d2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3b5      	bcc.n	8002448 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	f003 f8bc 	bl	8005662 <USB_DevInit>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e00c      	b.n	8002516 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f005 fb3b 	bl	8007b8a <USB_DevDisconnect>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_PCD_Start+0x16>
 8002530:	2302      	movs	r3, #2
 8002532:	e016      	b.n	8002562 <HAL_PCD_Start+0x44>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 f852 	bl	80055ea <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002546:	2101      	movs	r1, #1
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f007 fc14 	bl	8009d76 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f005 fb0f 	bl	8007b76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f005 fb11 	bl	8007b9e <USB_ReadInterrupts>
 800257c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb1a 	bl	8002bc2 <PCD_EP_ISR_Handler>

    return;
 800258e:	e119      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002596:	2b00      	cmp	r3, #0
 8002598:	d013      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ac:	b292      	uxth	r2, r2
 80025ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f007 f9e7 	bl	8009986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025b8:	2100      	movs	r1, #0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f905 	bl	80027ca <HAL_PCD_SetAddress>

    return;
 80025c0:	e100      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80025de:	b292      	uxth	r2, r2
 80025e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025e4:	e0ee      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002602:	b292      	uxth	r2, r2
 8002604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002608:	e0dc      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d027      	beq.n	8002664 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	b292      	uxth	r2, r2
 8002640:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f007 f9d7 	bl	80099f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800265c:	b292      	uxth	r2, r2
 800265e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002662:	e0af      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8083 	beq.w	8002776 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e010      	b.n	8002698 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	b292      	uxth	r2, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	3320      	adds	r3, #32
 800268c:	443b      	add	r3, r7
 800268e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002692:	7ffb      	ldrb	r3, [r7, #31]
 8002694:	3301      	adds	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]
 8002698:	7ffb      	ldrb	r3, [r7, #31]
 800269a:	2b07      	cmp	r3, #7
 800269c:	d9eb      	bls.n	8002676 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	b292      	uxth	r2, r2
 80026b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	b292      	uxth	r2, r2
 80026ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80026ce:	bf00      	nop
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f6      	beq.n	80026d0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f4:	b292      	uxth	r2, r2
 80026f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	77fb      	strb	r3, [r7, #31]
 80026fe:	e00f      	b.n	8002720 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4611      	mov	r1, r2
 8002708:	7ffa      	ldrb	r2, [r7, #31]
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	440a      	add	r2, r1
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	3320      	adds	r3, #32
 8002712:	443b      	add	r3, r7
 8002714:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002718:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800271a:	7ffb      	ldrb	r3, [r7, #31]
 800271c:	3301      	adds	r3, #1
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	7ffb      	ldrb	r3, [r7, #31]
 8002722:	2b07      	cmp	r3, #7
 8002724:	d9ec      	bls.n	8002700 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0208 	orr.w	r2, r2, #8
 8002738:	b292      	uxth	r2, r2
 800273a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002750:	b292      	uxth	r2, r2
 8002752:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0204 	orr.w	r2, r2, #4
 8002768:	b292      	uxth	r2, r2
 800276a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f007 f928 	bl	80099c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002774:	e026      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00f      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002792:	b292      	uxth	r2, r2
 8002794:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f007 f8e6 	bl	800996a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800279e:	e011      	b.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	b292      	uxth	r2, r2
 80027be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80027c2:	bf00      	nop
  }
}
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_PCD_SetAddress+0x1a>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e012      	b.n	800280a <HAL_PCD_SetAddress+0x40>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 f9a8 	bl	8007b50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	4608      	mov	r0, r1
 800281c:	4611      	mov	r1, r2
 800281e:	461a      	mov	r2, r3
 8002820:	4603      	mov	r3, r0
 8002822:	70fb      	strb	r3, [r7, #3]
 8002824:	460b      	mov	r3, r1
 8002826:	803b      	strh	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002834:	2b00      	cmp	r3, #0
 8002836:	da0e      	bge.n	8002856 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 0207 	and.w	r2, r3, #7
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	3310      	adds	r3, #16
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	705a      	strb	r2, [r3, #1]
 8002854:	e00e      	b.n	8002874 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 0207 	and.w	r2, r3, #7
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002880:	883a      	ldrh	r2, [r7, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	78ba      	ldrb	r2, [r7, #2]
 800288a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800288c:	78bb      	ldrb	r3, [r7, #2]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d102      	bne.n	8002898 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_PCD_EP_Open+0x94>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e00e      	b.n	80028c4 <HAL_PCD_EP_Open+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 fef1 	bl	800569c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80028c2:	7afb      	ldrb	r3, [r7, #11]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da0e      	bge.n	80028fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0207 	and.w	r2, r3, #7
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	3310      	adds	r3, #16
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	705a      	strb	r2, [r3, #1]
 80028fc:	e00e      	b.n	800291c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 0207 	and.w	r2, r3, #7
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_PCD_EP_Close+0x6a>
 8002932:	2302      	movs	r3, #2
 8002934:	e00e      	b.n	8002954 <HAL_PCD_EP_Close+0x88>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68f9      	ldr	r1, [r7, #12]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 fa69 	bl	8005e1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296c:	7afb      	ldrb	r3, [r7, #11]
 800296e:	f003 0207 	and.w	r2, r3, #7
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299c:	7afb      	ldrb	r3, [r7, #11]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6979      	ldr	r1, [r7, #20]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fc20 	bl	80061f4 <USB_EPStartXfer>

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 0207 	and.w	r2, r3, #7
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80029e0:	681b      	ldr	r3, [r3, #0]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	460b      	mov	r3, r1
 80029fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	f003 0207 	and.w	r2, r3, #7
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2201      	movs	r2, #1
 8002a36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6979      	ldr	r1, [r7, #20]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fbd2 	bl	80061f4 <USB_EPStartXfer>

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	7912      	ldrb	r2, [r2, #4]
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e04c      	b.n	8002b12 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	da0e      	bge.n	8002a9e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 0207 	and.w	r2, r3, #7
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	3310      	adds	r3, #16
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
 8002a9c:	e00c      	b.n	8002ab8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_EP_SetStall+0x7e>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e01c      	b.n	8002b12 <HAL_PCD_EP_SetStall+0xb8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 ff35 	bl	8007956 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f005 f85a 	bl	8007bbc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	7912      	ldrb	r2, [r2, #4]
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e040      	b.n	8002bba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	da0e      	bge.n	8002b5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 0207 	and.w	r2, r3, #7
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	3310      	adds	r3, #16
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	705a      	strb	r2, [r3, #1]
 8002b5c:	e00e      	b.n	8002b7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 0207 	and.w	r2, r3, #7
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_PCD_EP_ClrStall+0x82>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e00e      	b.n	8002bba <HAL_PCD_EP_ClrStall+0xa0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 ff23 	bl	80079f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b096      	sub	sp, #88	@ 0x58
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bca:	e3bb      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002be6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8175 	bne.w	8002eda <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d14e      	bne.n	8002c9a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c0c:	81fb      	strh	r3, [r7, #14]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	89fb      	ldrh	r3, [r7, #14]
 8002c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3310      	adds	r3, #16
 8002c24:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c60:	2100      	movs	r1, #0
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f006 fe67 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7b5b      	ldrb	r3, [r3, #13]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8368 	beq.w	8003344 <PCD_EP_ISR_Handler+0x782>
 8002c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 8363 	bne.w	8003344 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7b5b      	ldrb	r3, [r3, #13]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	735a      	strb	r2, [r3, #13]
 8002c98:	e354      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ca0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d034      	beq.n	8002d22 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3306      	adds	r3, #6
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f004 ffb1 	bl	8007c5e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d08:	4013      	ands	r3, r2
 8002d0a:	823b      	strh	r3, [r7, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	8a3a      	ldrh	r2, [r7, #16]
 8002d12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d16:	b292      	uxth	r2, r2
 8002d18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f006 fdde 	bl	80098dc <HAL_PCD_SetupStageCallback>
 8002d20:	e310      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f280 830c 	bge.w	8003344 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d38:	4013      	ands	r3, r2
 8002d3a:	83fb      	strh	r3, [r7, #30]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	8bfa      	ldrh	r2, [r7, #30]
 8002d42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d46:	b292      	uxth	r2, r2
 8002d48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3306      	adds	r3, #6
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d019      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x1f0>
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8c:	6959      	ldr	r1, [r3, #20]
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f004 ff61 	bl	8007c5e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	441a      	add	r2, r3
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002daa:	2100      	movs	r1, #0
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f006 fda7 	bl	8009900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002dbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 82bd 	bne.w	8003344 <PCD_EP_ISR_Handler+0x782>
 8002dca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002dd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dd6:	f000 82b5 	beq.w	8003344 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e10:	d91d      	bls.n	8002e4e <PCD_EP_ISR_Handler+0x28c>
 8002e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <PCD_EP_ISR_Handler+0x26a>
 8002e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	029b      	lsls	r3, r3, #10
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	e026      	b.n	8002e9c <PCD_EP_ISR_Handler+0x2da>
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <PCD_EP_ISR_Handler+0x2aa>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e017      	b.n	8002e9c <PCD_EP_ISR_Handler+0x2da>
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <PCD_EP_ISR_Handler+0x2c4>
 8002e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e82:	3301      	adds	r3, #1
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	029b      	lsls	r3, r3, #10
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4313      	orrs	r3, r2
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eac:	827b      	strh	r3, [r7, #18]
 8002eae:	8a7b      	ldrh	r3, [r7, #18]
 8002eb0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002eb4:	827b      	strh	r3, [r7, #18]
 8002eb6:	8a7b      	ldrh	r3, [r7, #18]
 8002eb8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ebc:	827b      	strh	r3, [r7, #18]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	8a7b      	ldrh	r3, [r7, #18]
 8002ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8013      	strh	r3, [r2, #0]
 8002ed8:	e234      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002eee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f280 80fc 	bge.w	80030f0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f0e:	4013      	ands	r3, r2
 8002f10:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002f26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f2a:	b292      	uxth	r2, r2
 8002f2c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f2e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	7b1b      	ldrb	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d125      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3306      	adds	r3, #6
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f74:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002f78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8092 	beq.w	80030a6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	6959      	ldr	r1, [r3, #20]
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8c:	88da      	ldrh	r2, [r3, #6]
 8002f8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f92:	f004 fe64 	bl	8007c5e <USB_ReadPMA>
 8002f96:	e086      	b.n	80030a6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9a:	78db      	ldrb	r3, [r3, #3]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d10a      	bne.n	8002fb6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002fa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f9d9 	bl	8003360 <HAL_PCD_EP_DB_Receive>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002fb4:	e077      	b.n	80030a6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d024      	beq.n	800305e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	3302      	adds	r3, #2
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003040:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02e      	beq.n	80030a6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304e:	6959      	ldr	r1, [r3, #20]
 8003050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003052:	891a      	ldrh	r2, [r3, #8]
 8003054:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003058:	f004 fe01 	bl	8007c5e <USB_ReadPMA>
 800305c:	e023      	b.n	80030a6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	3306      	adds	r3, #6
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003086:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800308a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	6959      	ldr	r1, [r3, #20]
 800309a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309c:	895a      	ldrh	r2, [r3, #10]
 800309e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030a2:	f004 fddc 	bl	8007c5e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80030a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030ae:	441a      	add	r2, r3
 80030b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80030b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030bc:	441a      	add	r2, r3
 80030be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <PCD_EP_ISR_Handler+0x514>
 80030ca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80030ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d206      	bcs.n	80030e4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	4619      	mov	r1, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f006 fc0f 	bl	8009900 <HAL_PCD_DataOutStageCallback>
 80030e2:	e005      	b.n	80030f0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 f882 	bl	80061f4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8123 	beq.w	8003344 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80030fe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	3310      	adds	r3, #16
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314a:	b29b      	uxth	r3, r3
 800314c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003150:	78db      	ldrb	r3, [r3, #3]
 8003152:	2b01      	cmp	r3, #1
 8003154:	f040 80a2 	bne.w	800329c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800315e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003160:	7b1b      	ldrb	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8093 	beq.w	800328e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003168:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800316c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d046      	beq.n	8003202 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d126      	bne.n	80031ca <PCD_EP_ISR_Handler+0x608>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	4413      	add	r3, r2
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
 8003194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	011a      	lsls	r2, r3, #4
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	4413      	add	r3, r2
 800319e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	e061      	b.n	800328e <PCD_EP_ISR_Handler+0x6cc>
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d15d      	bne.n	800328e <PCD_EP_ISR_Handler+0x6cc>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e6:	4413      	add	r3, r2
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	011a      	lsls	r2, r3, #4
 80031f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fc:	2200      	movs	r2, #0
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	e045      	b.n	800328e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320a:	785b      	ldrb	r3, [r3, #1]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d126      	bne.n	800325e <PCD_EP_ISR_Handler+0x69c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	637b      	str	r3, [r7, #52]	@ 0x34
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	4413      	add	r3, r2
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	011a      	lsls	r2, r3, #4
 800322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003230:	4413      	add	r3, r2
 8003232:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003236:	633b      	str	r3, [r7, #48]	@ 0x30
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003242:	b29a      	uxth	r2, r3
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	801a      	strh	r2, [r3, #0]
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003256:	b29a      	uxth	r2, r3
 8003258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325a:	801a      	strh	r2, [r3, #0]
 800325c:	e017      	b.n	800328e <PCD_EP_ISR_Handler+0x6cc>
 800325e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d113      	bne.n	800328e <PCD_EP_ISR_Handler+0x6cc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003274:	4413      	add	r3, r2
 8003276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	011a      	lsls	r2, r3, #4
 800327e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003280:	4413      	add	r3, r2
 8003282:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003286:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	2200      	movs	r2, #0
 800328c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800328e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f006 fb4e 	bl	8009936 <HAL_PCD_DataInStageCallback>
 800329a:	e053      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800329c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d146      	bne.n	8003336 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	3302      	adds	r3, #2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80032d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032dc:	429a      	cmp	r2, r3
 80032de:	d907      	bls.n	80032f0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032e8:	1ad2      	subs	r2, r2, r3
 80032ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ec:	619a      	str	r2, [r3, #24]
 80032ee:	e002      	b.n	80032f6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80032f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f2:	2200      	movs	r2, #0
 80032f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f006 fb16 	bl	8009936 <HAL_PCD_DataInStageCallback>
 800330a:	e01b      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800330c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003314:	441a      	add	r2, r3
 8003316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003318:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800331a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003322:	441a      	add	r2, r3
 8003324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003326:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800332e:	4618      	mov	r0, r3
 8003330:	f002 ff60 	bl	80061f4 <USB_EPStartXfer>
 8003334:	e006      	b.n	8003344 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003336:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800333a:	461a      	mov	r2, r3
 800333c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f91b 	bl	800357a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800334c:	b29b      	uxth	r3, r3
 800334e:	b21b      	sxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	f6ff ac3b 	blt.w	8002bcc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3758      	adds	r7, #88	@ 0x58
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07e      	beq.n	8003476 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	3302      	adds	r3, #2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	8b7b      	ldrh	r3, [r7, #26]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d306      	bcc.n	80033ba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	8b7b      	ldrh	r3, [r7, #26]
 80033b2:	1ad2      	subs	r2, r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	619a      	str	r2, [r3, #24]
 80033b8:	e002      	b.n	80033c0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d123      	bne.n	8003410 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e2:	833b      	strh	r3, [r7, #24]
 80033e4:	8b3b      	ldrh	r3, [r7, #24]
 80033e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033ea:	833b      	strh	r3, [r7, #24]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	8b3b      	ldrh	r3, [r7, #24]
 80033fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340c:	b29b      	uxth	r3, r3
 800340e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01f      	beq.n	800345a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003434:	82fb      	strh	r3, [r7, #22]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	8afb      	ldrh	r3, [r7, #22]
 8003446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800344a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003452:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003456:	b29b      	uxth	r3, r3
 8003458:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800345a:	8b7b      	ldrh	r3, [r7, #26]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8087 	beq.w	8003570 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6959      	ldr	r1, [r3, #20]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	891a      	ldrh	r2, [r3, #8]
 800346e:	8b7b      	ldrh	r3, [r7, #26]
 8003470:	f004 fbf5 	bl	8007c5e <USB_ReadPMA>
 8003474:	e07c      	b.n	8003570 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	3306      	adds	r3, #6
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	699a      	ldr	r2, [r3, #24]
 80034a4:	8b7b      	ldrh	r3, [r7, #26]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d306      	bcc.n	80034b8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	8b7b      	ldrh	r3, [r7, #26]
 80034b0:	1ad2      	subs	r2, r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	619a      	str	r2, [r3, #24]
 80034b6:	e002      	b.n	80034be <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d123      	bne.n	800350e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e0:	83fb      	strh	r3, [r7, #30]
 80034e2:	8bfb      	ldrh	r3, [r7, #30]
 80034e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80034e8:	83fb      	strh	r3, [r7, #30]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8bfb      	ldrh	r3, [r7, #30]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11f      	bne.n	8003558 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003532:	83bb      	strh	r3, [r7, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	8bbb      	ldrh	r3, [r7, #28]
 8003544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800354c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003550:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003554:	b29b      	uxth	r3, r3
 8003556:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003558:	8b7b      	ldrh	r3, [r7, #26]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6959      	ldr	r1, [r3, #20]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	895a      	ldrh	r2, [r3, #10]
 800356a:	8b7b      	ldrh	r3, [r7, #26]
 800356c:	f004 fb77 	bl	8007c5e <USB_ReadPMA>
    }
  }

  return count;
 8003570:	8b7b      	ldrh	r3, [r7, #26]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b0a4      	sub	sp, #144	@ 0x90
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	4613      	mov	r3, r2
 8003586:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 81dd 	beq.w	800394e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800359c:	b29b      	uxth	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	3302      	adds	r3, #2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d907      	bls.n	80035dc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	619a      	str	r2, [r3, #24]
 80035da:	e002      	b.n	80035e2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 80b9 	bne.w	800375e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d126      	bne.n	8003642 <HAL_PCD_EP_DB_Transmit+0xc8>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003602:	b29b      	uxth	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003608:	4413      	add	r3, r2
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	011a      	lsls	r2, r3, #4
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	4413      	add	r3, r2
 8003616:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800361a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003626:	b29a      	uxth	r2, r3
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	801a      	strh	r2, [r3, #0]
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363a:	b29a      	uxth	r2, r3
 800363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e01a      	b.n	8003678 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d116      	bne.n	8003678 <HAL_PCD_EP_DB_Transmit+0xfe>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	4413      	add	r3, r2
 8003660:	637b      	str	r3, [r7, #52]	@ 0x34
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	011a      	lsls	r2, r3, #4
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	4413      	add	r3, r2
 800366c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d126      	bne.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	011a      	lsls	r2, r3, #4
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	801a      	strh	r2, [r3, #0]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	801a      	strh	r2, [r3, #0]
 80036d2:	e017      	b.n	8003704 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d113      	bne.n	8003704 <HAL_PCD_EP_DB_Transmit+0x18a>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	4413      	add	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	011a      	lsls	r2, r3, #4
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	4413      	add	r3, r2
 80036f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2200      	movs	r2, #0
 8003702:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f006 f913 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 82fc 	beq.w	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	82fb      	strh	r3, [r7, #22]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	8afb      	ldrh	r3, [r7, #22]
 8003748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800374c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003758:	b29b      	uxth	r3, r3
 800375a:	8013      	strh	r3, [r2, #0]
 800375c:	e2da      	b.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d021      	beq.n	80037ac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	b29b      	uxth	r3, r3
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800379c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 82ae 	bne.w	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037c0:	441a      	add	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037ce:	441a      	add	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d30b      	bcc.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	e017      	b.n	8003828 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003804:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003810:	e00a      	b.n	8003828 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d165      	bne.n	80038fc <HAL_PCD_EP_DB_Transmit+0x382>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003844:	4413      	add	r3, r2
 8003846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003850:	4413      	add	r3, r2
 8003852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003862:	b29a      	uxth	r2, r3
 8003864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386c:	2b3e      	cmp	r3, #62	@ 0x3e
 800386e:	d91d      	bls.n	80038ac <HAL_PCD_EP_DB_Transmit+0x332>
 8003870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_PCD_EP_DB_Transmit+0x310>
 8003884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003886:	3b01      	subs	r3, #1
 8003888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29a      	uxth	r2, r3
 8003890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003892:	b29b      	uxth	r3, r3
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	b29b      	uxth	r3, r3
 8003898:	4313      	orrs	r3, r2
 800389a:	b29b      	uxth	r3, r3
 800389c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	e044      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80038ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_PCD_EP_DB_Transmit+0x350>
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	e035      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80038ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80038de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e0:	3301      	adds	r3, #1
 80038e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	029b      	lsls	r3, r3, #10
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e01c      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d118      	bne.n	8003936 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	647b      	str	r3, [r7, #68]	@ 0x44
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003912:	b29b      	uxth	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003918:	4413      	add	r3, r2
 800391a:	647b      	str	r3, [r7, #68]	@ 0x44
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003924:	4413      	add	r3, r2
 8003926:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800392a:	643b      	str	r3, [r7, #64]	@ 0x40
 800392c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003930:	b29a      	uxth	r2, r3
 8003932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003934:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6959      	ldr	r1, [r3, #20]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	891a      	ldrh	r2, [r3, #8]
 8003942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003946:	b29b      	uxth	r3, r3
 8003948:	f004 f943 	bl	8007bd2 <USB_WritePMA>
 800394c:	e1e2      	b.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003956:	b29b      	uxth	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	3306      	adds	r3, #6
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003982:	429a      	cmp	r2, r3
 8003984:	d307      	bcc.n	8003996 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	619a      	str	r2, [r3, #24]
 8003994:	e002      	b.n	800399c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2200      	movs	r2, #0
 800399a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 80c0 	bne.w	8003b26 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	785b      	ldrb	r3, [r3, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d126      	bne.n	80039fc <HAL_PCD_EP_DB_Transmit+0x482>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039c2:	4413      	add	r3, r2
 80039c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	011a      	lsls	r2, r3, #4
 80039cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ce:	4413      	add	r3, r2
 80039d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	e01a      	b.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d116      	bne.n	8003a32 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a18:	4413      	add	r3, r2
 8003a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	011a      	lsls	r2, r3, #4
 8003a22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a24:	4413      	add	r3, r2
 8003a26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a2e:	2200      	movs	r2, #0
 8003a30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d12b      	bne.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a54:	4413      	add	r3, r2
 8003a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	e017      	b.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	785b      	ldrb	r3, [r3, #1]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d113      	bne.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aae:	4413      	add	r3, r2
 8003ab0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	011a      	lsls	r2, r3, #4
 8003ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aba:	4413      	add	r3, r2
 8003abc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f005 ff31 	bl	8009936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 811a 	bne.w	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	8013      	strh	r3, [r2, #0]
 8003b24:	e0f6      	b.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d121      	bne.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	f040 80ca 	bne.w	8003d14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	695a      	ldr	r2, [r3, #20]
 8003b84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b88:	441a      	add	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b96:	441a      	add	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d30b      	bcc.n	8003bc0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a1a      	ldr	r2, [r3, #32]
 8003bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	621a      	str	r2, [r3, #32]
 8003bbe:	e017      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d108      	bne.n	8003bda <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003bc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003bd8:	e00a      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d165      	bne.n	8003cca <HAL_PCD_EP_DB_Transmit+0x750>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c12:	4413      	add	r3, r2
 8003c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	011a      	lsls	r2, r3, #4
 8003c1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c3c:	d91d      	bls.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x700>
 8003c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c54:	3b01      	subs	r3, #1
 8003c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	029b      	lsls	r3, r3, #10
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	e041      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e032      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x738>
 8003cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cae:	3301      	adds	r3, #1
 8003cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	029b      	lsls	r3, r3, #10
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	e019      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d115      	bne.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	4413      	add	r3, r2
 8003ce2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	011a      	lsls	r2, r3, #4
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	4413      	add	r3, r2
 8003cee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6959      	ldr	r1, [r3, #20]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	895a      	ldrh	r2, [r3, #10]
 8003d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f003 ff5f 	bl	8007bd2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d2e:	82bb      	strh	r3, [r7, #20]
 8003d30:	8abb      	ldrh	r3, [r7, #20]
 8003d32:	f083 0310 	eor.w	r3, r3, #16
 8003d36:	82bb      	strh	r3, [r7, #20]
 8003d38:	8abb      	ldrh	r3, [r7, #20]
 8003d3a:	f083 0320 	eor.w	r3, r3, #32
 8003d3e:	82bb      	strh	r3, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	441a      	add	r2, r3
 8003d4e:	8abb      	ldrh	r3, [r7, #20]
 8003d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3790      	adds	r7, #144	@ 0x90
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	817b      	strh	r3, [r7, #10]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d80:	897b      	ldrh	r3, [r7, #10]
 8003d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	f003 0207 	and.w	r2, r3, #7
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	3310      	adds	r3, #16
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	e009      	b.n	8003db8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003da4:	897a      	ldrh	r2, [r7, #10]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	80da      	strh	r2, [r3, #6]
 8003dcc:	e00b      	b.n	8003de6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e272      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8087 	beq.w	8003f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e14:	4b92      	ldr	r3, [pc, #584]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d00c      	beq.n	8003e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e20:	4b8f      	ldr	r3, [pc, #572]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d112      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5e>
 8003e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3a:	4b89      	ldr	r3, [pc, #548]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d06c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x12c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d168      	bne.n	8003f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e24c      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x76>
 8003e5c:	4b80      	ldr	r3, [pc, #512]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7f      	ldr	r2, [pc, #508]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	e02e      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x98>
 8003e72:	4b7b      	ldr	r3, [pc, #492]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7a      	ldr	r2, [pc, #488]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b78      	ldr	r3, [pc, #480]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a77      	ldr	r2, [pc, #476]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e01d      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xbc>
 8003e96:	4b72      	ldr	r3, [pc, #456]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a71      	ldr	r2, [pc, #452]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6e      	ldr	r2, [pc, #440]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b68      	ldr	r3, [pc, #416]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a67      	ldr	r2, [pc, #412]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f8e2 	bl	8001098 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fd f8de 	bl	8001098 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	@ 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e200      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b5d      	ldr	r3, [pc, #372]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xe4>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f8ce 	bl	8001098 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd f8ca 	bl	8001098 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1ec      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x10c>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f3a:	4b49      	ldr	r3, [pc, #292]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x18c>
 8003f46:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	4b43      	ldr	r3, [pc, #268]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1c0      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4939      	ldr	r1, [pc, #228]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	e03a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f88:	4b36      	ldr	r3, [pc, #216]	@ (8004064 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fd f883 	bl	8001098 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f96:	f7fd f87f 	bl	8001098 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e1a1      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4927      	ldr	r1, [pc, #156]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b26      	ldr	r3, [pc, #152]	@ (8004064 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd f862 	bl	8001098 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fd f85e 	bl	8001098 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e180      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d03a      	beq.n	8004078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <HAL_RCC_OscConfig+0x274>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fd f842 	bl	8001098 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fd f83e 	bl	8001098 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e160      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <HAL_RCC_OscConfig+0x26c>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004036:	2001      	movs	r0, #1
 8004038:	f000 fa9c 	bl	8004574 <RCC_Delay>
 800403c:	e01c      	b.n	8004078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_RCC_OscConfig+0x274>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004044:	f7fd f828 	bl	8001098 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404a:	e00f      	b.n	800406c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404c:	f7fd f824 	bl	8001098 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d908      	bls.n	800406c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e146      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	42420000 	.word	0x42420000
 8004068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	4b92      	ldr	r3, [pc, #584]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e9      	bne.n	800404c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a6 	beq.w	80041d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b8b      	ldr	r3, [pc, #556]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	4b88      	ldr	r3, [pc, #544]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4a87      	ldr	r2, [pc, #540]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	61d3      	str	r3, [r2, #28]
 80040a2:	4b85      	ldr	r3, [pc, #532]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b82      	ldr	r3, [pc, #520]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d118      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040be:	4b7f      	ldr	r3, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7e      	ldr	r2, [pc, #504]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7fc ffe5 	bl	8001098 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7fc ffe1 	bl	8001098 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	@ 0x64
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e103      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b75      	ldr	r3, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x4c8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x312>
 80040f8:	4b6f      	ldr	r3, [pc, #444]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4a6e      	ldr	r2, [pc, #440]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6213      	str	r3, [r2, #32]
 8004104:	e02d      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x334>
 800410e:	4b6a      	ldr	r3, [pc, #424]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a69      	ldr	r2, [pc, #420]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a66      	ldr	r2, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
 8004126:	e01c      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b05      	cmp	r3, #5
 800412e:	d10c      	bne.n	800414a <HAL_RCC_OscConfig+0x356>
 8004130:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4a60      	ldr	r2, [pc, #384]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	6213      	str	r3, [r2, #32]
 800413c:	4b5e      	ldr	r3, [pc, #376]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a5d      	ldr	r2, [pc, #372]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6213      	str	r3, [r2, #32]
 8004148:	e00b      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6213      	str	r3, [r2, #32]
 8004156:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a57      	ldr	r2, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416a:	f7fc ff95 	bl	8001098 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fc ff91 	bl	8001098 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0b1      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ee      	beq.n	8004172 <HAL_RCC_OscConfig+0x37e>
 8004194:	e014      	b.n	80041c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004196:	f7fc ff7f 	bl	8001098 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fc ff7b 	bl	8001098 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e09b      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b4:	4b40      	ldr	r3, [pc, #256]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1ee      	bne.n	800419e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4b3c      	ldr	r3, [pc, #240]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4a3b      	ldr	r2, [pc, #236]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8087 	beq.w	80042ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041dc:	4b36      	ldr	r3, [pc, #216]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d061      	beq.n	80042ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d146      	bne.n	800427e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f0:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCC_OscConfig+0x4cc>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fc ff4f 	bl	8001098 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fc ff4b 	bl	8001098 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e06d      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004210:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004226:	4b24      	ldr	r3, [pc, #144]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	4921      	ldr	r1, [pc, #132]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004238:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a19      	ldr	r1, [r3, #32]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	430b      	orrs	r3, r1
 800424a:	491b      	ldr	r1, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x4cc>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fc ff1f 	bl	8001098 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7fc ff1b 	bl	8001098 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e03d      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x46a>
 800427c:	e035      	b.n	80042ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <HAL_RCC_OscConfig+0x4cc>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fc ff08 	bl	8001098 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fc ff04 	bl	8001098 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e026      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x498>
 80042aa:	e01e      	b.n	80042ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e019      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
 80042c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <HAL_RCC_OscConfig+0x500>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d001      	beq.n	80042ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d0      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b6a      	ldr	r3, [pc, #424]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d910      	bls.n	800433c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b67      	ldr	r3, [pc, #412]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	4965      	ldr	r1, [pc, #404]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b63      	ldr	r3, [pc, #396]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004354:	4b59      	ldr	r3, [pc, #356]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a58      	ldr	r2, [pc, #352]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800435e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	4b53      	ldr	r3, [pc, #332]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a52      	ldr	r2, [pc, #328]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	494d      	ldr	r1, [pc, #308]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d040      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d115      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e073      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3d      	ldr	r3, [pc, #244]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06b      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4936      	ldr	r1, [pc, #216]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7fc fe56 	bl	8001098 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fc fe52 	bl	8001098 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e053      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2d      	ldr	r3, [pc, #180]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b27      	ldr	r3, [pc, #156]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d210      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 0207 	bic.w	r2, r3, #7
 800442e:	4922      	ldr	r1, [pc, #136]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e032      	b.n	80044ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4916      	ldr	r1, [pc, #88]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004472:	4b12      	ldr	r3, [pc, #72]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	490e      	ldr	r1, [pc, #56]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004486:	f000 f821 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490a      	ldr	r1, [pc, #40]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a09      	ldr	r2, [pc, #36]	@ (80044c4 <HAL_RCC_ClockConfig+0x1cc>)
 80044a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044a2:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_ClockConfig+0x1d0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc fdb4 	bl	8001014 <HAL_InitTick>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40022000 	.word	0x40022000
 80044bc:	40021000 	.word	0x40021000
 80044c0:	0800a7b4 	.word	0x0800a7b4
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x30>
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x36>
 80044fa:	e027      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044fc:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 80044fe:	613b      	str	r3, [r7, #16]
      break;
 8004500:	e027      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	0c9b      	lsrs	r3, r3, #18
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <HAL_RCC_GetSysClockFreq+0x9c>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800451a:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x94>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	0c5b      	lsrs	r3, r3, #17
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	4a11      	ldr	r2, [pc, #68]	@ (800456c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 800452e:	fb03 f202 	mul.w	r2, r3, r2
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e004      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0c      	ldr	r2, [pc, #48]	@ (8004570 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004540:	fb02 f303 	mul.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	613b      	str	r3, [r7, #16]
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x98>)
 800454e:	613b      	str	r3, [r7, #16]
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	693b      	ldr	r3, [r7, #16]
}
 8004554:	4618      	mov	r0, r3
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	bc80      	pop	{r7}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	007a1200 	.word	0x007a1200
 8004568:	0800a7c4 	.word	0x0800a7c4
 800456c:	0800a7d4 	.word	0x0800a7d4
 8004570:	003d0900 	.word	0x003d0900

08004574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <RCC_Delay+0x34>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <RCC_Delay+0x38>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0a5b      	lsrs	r3, r3, #9
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004590:	bf00      	nop
  }
  while (Delay --);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	60fa      	str	r2, [r7, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f9      	bne.n	8004590 <RCC_Delay+0x1c>
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	20000000 	.word	0x20000000
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d07d      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045cc:	2300      	movs	r3, #0
 80045ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10d      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	61d3      	str	r3, [r2, #28]
 80045e8:	4b49      	ldr	r3, [pc, #292]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	4b46      	ldr	r3, [pc, #280]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d118      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004604:	4b43      	ldr	r3, [pc, #268]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a42      	ldr	r2, [pc, #264]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800460a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800460e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004610:	f7fc fd42 	bl	8001098 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	e008      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004618:	f7fc fd3e 	bl	8001098 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e06d      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b3a      	ldr	r3, [pc, #232]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004636:	4b36      	ldr	r3, [pc, #216]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02e      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	429a      	cmp	r2, r3
 8004652:	d027      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004654:	4b2e      	ldr	r3, [pc, #184]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800465c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465e:	4b2e      	ldr	r3, [pc, #184]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004664:	4b2c      	ldr	r3, [pc, #176]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800466a:	4a29      	ldr	r2, [pc, #164]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d014      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fc fd0d 	bl	8001098 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fc fd09 	bl	8001098 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e036      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4917      	ldr	r1, [pc, #92]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b14      	ldr	r3, [pc, #80]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4a13      	ldr	r2, [pc, #76]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	490b      	ldr	r1, [pc, #44]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f2:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4904      	ldr	r1, [pc, #16]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
 8004718:	42420440 	.word	0x42420440

0800471c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e041      	b.n	80047b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fc fb1e 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f000 fc18 	bl	8004f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d001      	beq.n	80047d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e03a      	b.n	800484a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a18      	ldr	r2, [pc, #96]	@ (8004854 <HAL_TIM_Base_Start_IT+0x98>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x58>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fe:	d009      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x58>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a14      	ldr	r2, [pc, #80]	@ (8004858 <HAL_TIM_Base_Start_IT+0x9c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x58>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a13      	ldr	r2, [pc, #76]	@ (800485c <HAL_TIM_Base_Start_IT+0xa0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d111      	bne.n	8004838 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b06      	cmp	r3, #6
 8004824:	d010      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 0201 	orr.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	e007      	b.n	8004848 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800

08004860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e041      	b.n	80048f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f839 	bl	80048fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 fb76 	bl	8004f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_TIM_PWM_Start+0x24>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e022      	b.n	800497a <HAL_TIM_PWM_Start+0x6a>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b04      	cmp	r3, #4
 8004938:	d109      	bne.n	800494e <HAL_TIM_PWM_Start+0x3e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e015      	b.n	800497a <HAL_TIM_PWM_Start+0x6a>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d109      	bne.n	8004968 <HAL_TIM_PWM_Start+0x58>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e008      	b.n	800497a <HAL_TIM_PWM_Start+0x6a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e05e      	b.n	8004a40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d104      	bne.n	8004992 <HAL_TIM_PWM_Start+0x82>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004990:	e013      	b.n	80049ba <HAL_TIM_PWM_Start+0xaa>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b04      	cmp	r3, #4
 8004996:	d104      	bne.n	80049a2 <HAL_TIM_PWM_Start+0x92>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a0:	e00b      	b.n	80049ba <HAL_TIM_PWM_Start+0xaa>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Start+0xa2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b0:	e003      	b.n	80049ba <HAL_TIM_PWM_Start+0xaa>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fd70 	bl	80054a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <HAL_TIM_PWM_Start+0x138>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	@ (8004a48 <HAL_TIM_PWM_Start+0x138>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_TIM_PWM_Start+0xfa>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f4:	d009      	beq.n	8004a0a <HAL_TIM_PWM_Start+0xfa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a14      	ldr	r2, [pc, #80]	@ (8004a4c <HAL_TIM_PWM_Start+0x13c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_TIM_PWM_Start+0xfa>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <HAL_TIM_PWM_Start+0x140>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d111      	bne.n	8004a2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b06      	cmp	r3, #6
 8004a1a:	d010      	beq.n	8004a3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	e007      	b.n	8004a3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800

08004a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0202 	mvn.w	r2, #2
 8004a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa5a 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa4d 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa5c 	bl	8004f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0204 	mvn.w	r2, #4
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa34 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa27 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fa36 	bl	8004f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa0e 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa01 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa10 	bl	8004f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d020      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9e8 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9db 	bl	8004f46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9ea 	bl	8004f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0201 	mvn.w	r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fb fd14 	bl	80005e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fced 	bl	80055be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9ba 	bl	8004f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fcc0 	bl	80055ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e0ae      	b.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	f200 809f 	bhi.w	8004da0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c62:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c9d 	.word	0x08004c9d
 8004c6c:	08004da1 	.word	0x08004da1
 8004c70:	08004da1 	.word	0x08004da1
 8004c74:	08004da1 	.word	0x08004da1
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004da1 	.word	0x08004da1
 8004c80:	08004da1 	.word	0x08004da1
 8004c84:	08004da1 	.word	0x08004da1
 8004c88:	08004d1f 	.word	0x08004d1f
 8004c8c:	08004da1 	.word	0x08004da1
 8004c90:	08004da1 	.word	0x08004da1
 8004c94:	08004da1 	.word	0x08004da1
 8004c98:	08004d5f 	.word	0x08004d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f9e2 	bl	800506c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	619a      	str	r2, [r3, #24]
      break;
 8004cda:	e064      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fa28 	bl	8005138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6999      	ldr	r1, [r3, #24]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	021a      	lsls	r2, r3, #8
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	619a      	str	r2, [r3, #24]
      break;
 8004d1c:	e043      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fa71 	bl	800520c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0208 	orr.w	r2, r2, #8
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0204 	bic.w	r2, r2, #4
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	61da      	str	r2, [r3, #28]
      break;
 8004d5c:	e023      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fabb 	bl	80052e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	021a      	lsls	r2, r3, #8
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	61da      	str	r2, [r3, #28]
      break;
 8004d9e:	e002      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0b4      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x186>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0c:	d03e      	beq.n	8004e8c <HAL_TIM_ConfigClockSource+0xd4>
 8004e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e12:	f200 8087 	bhi.w	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e1a:	f000 8086 	beq.w	8004f2a <HAL_TIM_ConfigClockSource+0x172>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	d87f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b70      	cmp	r3, #112	@ 0x70
 8004e26:	d01a      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0xa6>
 8004e28:	2b70      	cmp	r3, #112	@ 0x70
 8004e2a:	d87b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b60      	cmp	r3, #96	@ 0x60
 8004e2e:	d050      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e30:	2b60      	cmp	r3, #96	@ 0x60
 8004e32:	d877      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b50      	cmp	r3, #80	@ 0x50
 8004e36:	d03c      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8004e38:	2b50      	cmp	r3, #80	@ 0x50
 8004e3a:	d873      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d058      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e40:	2b40      	cmp	r3, #64	@ 0x40
 8004e42:	d86f      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b30      	cmp	r3, #48	@ 0x30
 8004e46:	d064      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	2b30      	cmp	r3, #48	@ 0x30
 8004e4a:	d86b      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d060      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d867      	bhi.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05c      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d05a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	e062      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e6e:	f000 fafc 	bl	800546a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	609a      	str	r2, [r3, #8]
      break;
 8004e8a:	e04f      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e9c:	f000 fae5 	bl	800546a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eae:	609a      	str	r2, [r3, #8]
      break;
 8004eb0:	e03c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa5c 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2150      	movs	r1, #80	@ 0x50
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fab3 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e02c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa7a 	bl	80053d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2160      	movs	r1, #96	@ 0x60
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 faa3 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e01c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 fa3c 	bl	800537c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2140      	movs	r1, #64	@ 0x40
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fa93 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004f10:	e00c      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f000 fa8a 	bl	8005436 <TIM_ITRx_SetConfig>
      break;
 8004f22:	e003      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      break;
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr
	...

08004f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8005060 <TIM_Base_SetConfig+0xd0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_Base_SetConfig+0x30>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fae:	d007      	beq.n	8004fc0 <TIM_Base_SetConfig+0x30>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <TIM_Base_SetConfig+0xd4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x30>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2b      	ldr	r2, [pc, #172]	@ (8005068 <TIM_Base_SetConfig+0xd8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <TIM_Base_SetConfig+0xd0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0x62>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x62>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8005064 <TIM_Base_SetConfig+0xd4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	@ (8005068 <TIM_Base_SetConfig+0xd8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a0d      	ldr	r2, [pc, #52]	@ (8005060 <TIM_Base_SetConfig+0xd0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d103      	bne.n	8005038 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f023 0201 	bic.w	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]
  }
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800

0800506c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f023 0201 	bic.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 0302 	bic.w	r3, r3, #2
 80050b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <TIM_OC1_SetConfig+0xc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d10c      	bne.n	80050e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 0308 	bic.w	r3, r3, #8
 80050ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a13      	ldr	r2, [pc, #76]	@ (8005134 <TIM_OC1_SetConfig+0xc8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d111      	bne.n	800510e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00

08005138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f023 0210 	bic.w	r2, r3, #16
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0320 	bic.w	r3, r3, #32
 8005182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1d      	ldr	r2, [pc, #116]	@ (8005208 <TIM_OC2_SetConfig+0xd0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10d      	bne.n	80051b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a14      	ldr	r2, [pc, #80]	@ (8005208 <TIM_OC2_SetConfig+0xd0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d113      	bne.n	80051e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00

0800520c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1d      	ldr	r2, [pc, #116]	@ (80052dc <TIM_OC3_SetConfig+0xd0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10d      	bne.n	8005286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a14      	ldr	r2, [pc, #80]	@ (80052dc <TIM_OC3_SetConfig+0xd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00

080052e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800532a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	031b      	lsls	r3, r3, #12
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0f      	ldr	r2, [pc, #60]	@ (8005378 <TIM_OC4_SetConfig+0x98>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d109      	bne.n	8005354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	40012c00 	.word	0x40012c00

0800537c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 030a 	bic.w	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	031b      	lsls	r3, r3, #12
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	f043 0307 	orr.w	r3, r3, #7
 8005458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	609a      	str	r2, [r3, #8]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800546a:	b480      	push	{r7}
 800546c:	b087      	sub	sp, #28
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005484:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	431a      	orrs	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	609a      	str	r2, [r3, #8]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr

080054a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2201      	movs	r2, #1
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	401a      	ands	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005504:	2302      	movs	r3, #2
 8005506:	e046      	b.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a16      	ldr	r2, [pc, #88]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005554:	d009      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a10      	ldr	r2, [pc, #64]	@ (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d10c      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr
 80055a0:	40012c00 	.word	0x40012c00
 80055a4:	40000400 	.word	0x40000400
 80055a8:	40000800 	.word	0x40000800

080055ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	4638      	mov	r0, r7
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr

080055ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055fa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80055fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800561e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005622:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	b29b      	uxth	r3, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	b29b      	uxth	r3, r3
 8005634:	4013      	ands	r3, r2
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	4638      	mov	r0, r7
 800566c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800569c:	b480      	push	{r7}
 800569e:	b09d      	sub	sp, #116	@ 0x74
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80056be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	78db      	ldrb	r3, [r3, #3]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d81f      	bhi.n	800570e <USB_ActivateEndpoint+0x72>
 80056ce:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <USB_ActivateEndpoint+0x38>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	080056e5 	.word	0x080056e5
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005717 	.word	0x08005717
 80056e0:	080056f3 	.word	0x080056f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80056f0:	e012      	b.n	8005718 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80056f6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80056fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80056fe:	e00b      	b.n	8005718 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005704:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005708:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800570c:	e004      	b.n	8005718 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005714:	e000      	b.n	8005718 <USB_ActivateEndpoint+0x7c>
      break;
 8005716:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800572e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800574c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005750:	b29b      	uxth	r3, r3
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	7812      	ldrb	r2, [r2, #0]
 8005756:	4313      	orrs	r3, r2
 8005758:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	7b1b      	ldrb	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 8178 	bne.w	8005a78 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8084 	beq.w	800589a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	4413      	add	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	011a      	lsls	r2, r3, #4
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	88db      	ldrh	r3, [r3, #6]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	827b      	strh	r3, [r7, #18]
 80057d4:	8a7b      	ldrh	r3, [r7, #18]
 80057d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01b      	beq.n	8005816 <USB_ActivateEndpoint+0x17a>
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f4:	823b      	strh	r3, [r7, #16]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	8a3b      	ldrh	r3, [r7, #16]
 8005802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800580a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005812:	b29b      	uxth	r3, r3
 8005814:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	78db      	ldrb	r3, [r3, #3]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d020      	beq.n	8005860 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005834:	81bb      	strh	r3, [r7, #12]
 8005836:	89bb      	ldrh	r3, [r7, #12]
 8005838:	f083 0320 	eor.w	r3, r3, #32
 800583c:	81bb      	strh	r3, [r7, #12]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	89bb      	ldrh	r3, [r7, #12]
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
 800585e:	e2d5      	b.n	8005e0c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005876:	81fb      	strh	r3, [r7, #14]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]
 8005898:	e2b8      	b.n	8005e0c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	633b      	str	r3, [r7, #48]	@ 0x30
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	4413      	add	r3, r2
 80058ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80058bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	88db      	ldrh	r3, [r3, #6]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	4413      	add	r3, r2
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	011a      	lsls	r2, r3, #4
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	4413      	add	r3, r2
 80058ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b3e      	cmp	r3, #62	@ 0x3e
 8005908:	d91d      	bls.n	8005946 <USB_ActivateEndpoint+0x2aa>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <USB_ActivateEndpoint+0x288>
 800591e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005920:	3b01      	subs	r3, #1
 8005922:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593e:	b29a      	uxth	r2, r3
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e026      	b.n	8005994 <USB_ActivateEndpoint+0x2f8>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <USB_ActivateEndpoint+0x2c8>
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595c:	b29a      	uxth	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e017      	b.n	8005994 <USB_ActivateEndpoint+0x2f8>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <USB_ActivateEndpoint+0x2e2>
 8005978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800597a:	3301      	adds	r3, #1
 800597c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29a      	uxth	r2, r3
 8005984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005986:	b29b      	uxth	r3, r3
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	b29b      	uxth	r3, r3
 800598c:	4313      	orrs	r3, r2
 800598e:	b29a      	uxth	r2, r3
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80059a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <USB_ActivateEndpoint+0x348>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	843b      	strh	r3, [r7, #32]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	8c3b      	ldrh	r3, [r7, #32]
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d124      	bne.n	8005a36 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a02:	83bb      	strh	r3, [r7, #28]
 8005a04:	8bbb      	ldrh	r3, [r7, #28]
 8005a06:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a0a:	83bb      	strh	r3, [r7, #28]
 8005a0c:	8bbb      	ldrh	r3, [r7, #28]
 8005a0e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a12:	83bb      	strh	r3, [r7, #28]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	8bbb      	ldrh	r3, [r7, #28]
 8005a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
 8005a34:	e1ea      	b.n	8005e0c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4c:	83fb      	strh	r3, [r7, #30]
 8005a4e:	8bfb      	ldrh	r3, [r7, #30]
 8005a50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a54:	83fb      	strh	r3, [r7, #30]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	441a      	add	r2, r3
 8005a60:	8bfb      	ldrh	r3, [r7, #30]
 8005a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	8013      	strh	r3, [r2, #0]
 8005a76:	e1c9      	b.n	8005e0c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	78db      	ldrb	r3, [r3, #3]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d11e      	bne.n	8005abe <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a96:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	441a      	add	r2, r3
 8005aa4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	8013      	strh	r3, [r2, #0]
 8005abc:	e01d      	b.n	8005afa <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b0a:	4413      	add	r3, r2
 8005b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011a      	lsls	r2, r3, #4
 8005b14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	891b      	ldrh	r3, [r3, #8]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3e:	4413      	add	r3, r2
 8005b40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	011a      	lsls	r2, r3, #4
 8005b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	895b      	ldrh	r3, [r3, #10]
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b60:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 8093 	bne.w	8005c92 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005b7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01b      	beq.n	8005bc0 <USB_ActivateEndpoint+0x524>
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005bce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <USB_ActivateEndpoint+0x574>
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bee:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c26:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c28:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c2a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c2e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c30:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c36:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]
 8005c90:	e0bc      	b.n	8005e0c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005ca2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01d      	beq.n	8005cea <USB_ActivateEndpoint+0x64e>
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	441a      	add	r2, r3
 8005cd2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005cfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01d      	beq.n	8005d42 <USB_ActivateEndpoint+0x6a6>
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	441a      	add	r2, r3
 8005d2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	78db      	ldrb	r3, [r3, #3]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d024      	beq.n	8005d94 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d60:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005d64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005d68:	f083 0320 	eor.w	r3, r3, #32
 8005d6c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005d7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]
 8005d92:	e01d      	b.n	8005dd0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005daa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005e0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3774      	adds	r7, #116	@ 0x74
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop

08005e1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b08d      	sub	sp, #52	@ 0x34
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	7b1b      	ldrb	r3, [r3, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 808e 	bne.w	8005f4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d044      	beq.n	8005ec2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	81bb      	strh	r3, [r7, #12]
 8005e46:	89bb      	ldrh	r3, [r7, #12]
 8005e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01b      	beq.n	8005e88 <USB_DeactivateEndpoint+0x6c>
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e66:	817b      	strh	r3, [r7, #10]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	441a      	add	r2, r3
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e9e:	813b      	strh	r3, [r7, #8]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	8013      	strh	r3, [r2, #0]
 8005ec0:	e192      	b.n	80061e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	827b      	strh	r3, [r7, #18]
 8005ed0:	8a7b      	ldrh	r3, [r7, #18]
 8005ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01b      	beq.n	8005f12 <USB_DeactivateEndpoint+0xf6>
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef0:	823b      	strh	r3, [r7, #16]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	441a      	add	r2, r3
 8005efc:	8a3b      	ldrh	r3, [r7, #16]
 8005efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f28:	81fb      	strh	r3, [r7, #14]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]
 8005f4a:	e14d      	b.n	80061e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f040 80a5 	bne.w	80060a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	843b      	strh	r3, [r7, #32]
 8005f64:	8c3b      	ldrh	r3, [r7, #32]
 8005f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01b      	beq.n	8005fa6 <USB_DeactivateEndpoint+0x18a>
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f84:	83fb      	strh	r3, [r7, #30]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	441a      	add	r2, r3
 8005f90:	8bfb      	ldrh	r3, [r7, #30]
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	83bb      	strh	r3, [r7, #28]
 8005fb4:	8bbb      	ldrh	r3, [r7, #28]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <USB_DeactivateEndpoint+0x1da>
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd4:	837b      	strh	r3, [r7, #26]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	441a      	add	r2, r3
 8005fe0:	8b7b      	ldrh	r3, [r7, #26]
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600c:	833b      	strh	r3, [r7, #24]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	8b3b      	ldrh	r3, [r7, #24]
 800601a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800601e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006026:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006044:	82fb      	strh	r3, [r7, #22]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	8afb      	ldrh	r3, [r7, #22]
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607c:	82bb      	strh	r3, [r7, #20]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8abb      	ldrh	r3, [r7, #20]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
 800609e:	e0a3      	b.n	80061e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80060ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80060b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01b      	beq.n	80060f0 <USB_DeactivateEndpoint+0x2d4>
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80060dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80060fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01b      	beq.n	8006140 <USB_DeactivateEndpoint+0x324>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800612c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006138:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800613c:	b29b      	uxth	r3, r3
 800613e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	441a      	add	r2, r3
 8006162:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006174:	b29b      	uxth	r3, r3
 8006176:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800619c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3734      	adds	r7, #52	@ 0x34
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b0c2      	sub	sp, #264	@ 0x108
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006202:	6018      	str	r0, [r3, #0]
 8006204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800620e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b01      	cmp	r3, #1
 800621c:	f040 86b7 	bne.w	8006f8e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d908      	bls.n	800624e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800624c:	e007      	b.n	800625e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800624e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800625e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	7b1b      	ldrb	r3, [r3, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d13a      	bne.n	80062e4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800626e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6959      	ldr	r1, [r3, #20]
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	88da      	ldrh	r2, [r3, #6]
 8006286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628a:	b29b      	uxth	r3, r3
 800628c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006290:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006294:	6800      	ldr	r0, [r0, #0]
 8006296:	f001 fc9c 	bl	8007bd2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	011a      	lsls	r2, r3, #4
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	f000 be1f 	b.w	8006f22 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	78db      	ldrb	r3, [r3, #3]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	f040 8462 	bne.w	8006bba <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80062f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	429a      	cmp	r2, r3
 8006310:	f240 83df 	bls.w	8006ad2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006364:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	1ad2      	subs	r2, r2, r3
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800638e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 81c7 	beq.w	8006744 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d177      	bne.n	80064c2 <USB_EPStartXfer+0x2ce>
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f2:	4413      	add	r3, r2
 80063f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	011a      	lsls	r2, r3, #4
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	4413      	add	r3, r2
 8006408:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006418:	b29a      	uxth	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006422:	2b3e      	cmp	r3, #62	@ 0x3e
 8006424:	d921      	bls.n	800646a <USB_EPStartXfer+0x276>
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <USB_EPStartXfer+0x252>
 800643c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006440:	3b01      	subs	r3, #1
 8006442:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006450:	b29b      	uxth	r3, r3
 8006452:	029b      	lsls	r3, r3, #10
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e050      	b.n	800650c <USB_EPStartXfer+0x318>
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <USB_EPStartXfer+0x294>
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006480:	b29a      	uxth	r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	801a      	strh	r2, [r3, #0]
 8006486:	e041      	b.n	800650c <USB_EPStartXfer+0x318>
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <USB_EPStartXfer+0x2b4>
 800649e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064a2:	3301      	adds	r3, #1
 80064a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e024      	b.n	800650c <USB_EPStartXfer+0x318>
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d11c      	bne.n	800650c <USB_EPStartXfer+0x318>
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	4413      	add	r3, r2
 80064e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	011a      	lsls	r2, r3, #4
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006506:	b29a      	uxth	r2, r3
 8006508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800650c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	895b      	ldrh	r3, [r3, #10]
 8006518:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6959      	ldr	r1, [r3, #20]
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652c:	b29b      	uxth	r3, r3
 800652e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006532:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006536:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	f001 fb49 	bl	8007bd2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006550:	441a      	add	r2, r3
 8006552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800655e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a1a      	ldr	r2, [r3, #32]
 800656a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	429a      	cmp	r2, r3
 8006578:	d90f      	bls.n	800659a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800657a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	621a      	str	r2, [r3, #32]
 8006598:	e00e      	b.n	80065b8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800659a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80065aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d177      	bne.n	80066b8 <USB_EPStartXfer+0x4c4>
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	4413      	add	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800660e:	b29a      	uxth	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	2b3e      	cmp	r3, #62	@ 0x3e
 800661a:	d921      	bls.n	8006660 <USB_EPStartXfer+0x46c>
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <USB_EPStartXfer+0x448>
 8006632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006636:	3b01      	subs	r3, #1
 8006638:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29a      	uxth	r2, r3
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29b      	uxth	r3, r3
 800664c:	4313      	orrs	r3, r2
 800664e:	b29b      	uxth	r3, r3
 8006650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006658:	b29a      	uxth	r2, r3
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e056      	b.n	800670e <USB_EPStartXfer+0x51a>
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <USB_EPStartXfer+0x48a>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006676:	b29a      	uxth	r2, r3
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	e047      	b.n	800670e <USB_EPStartXfer+0x51a>
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <USB_EPStartXfer+0x4aa>
 8006694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	029b      	lsls	r3, r3, #10
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	801a      	strh	r2, [r3, #0]
 80066b6:	e02a      	b.n	800670e <USB_EPStartXfer+0x51a>
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d122      	bne.n	800670e <USB_EPStartXfer+0x51a>
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	4413      	add	r3, r2
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	011a      	lsls	r2, r3, #4
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006708:	b29a      	uxth	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	891b      	ldrh	r3, [r3, #8]
 800671a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6959      	ldr	r1, [r3, #20]
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800672e:	b29b      	uxth	r3, r3
 8006730:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006734:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006738:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800673c:	6800      	ldr	r0, [r0, #0]
 800673e:	f001 fa48 	bl	8007bd2 <USB_WritePMA>
 8006742:	e3ee      	b.n	8006f22 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d177      	bne.n	8006844 <USB_EPStartXfer+0x650>
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006774:	4413      	add	r3, r2
 8006776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	011a      	lsls	r2, r3, #4
 8006786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006788:	4413      	add	r3, r2
 800678a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800678e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679a:	b29a      	uxth	r2, r3
 800679c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80067a6:	d921      	bls.n	80067ec <USB_EPStartXfer+0x5f8>
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <USB_EPStartXfer+0x5d4>
 80067be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067c2:	3b01      	subs	r3, #1
 80067c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	029b      	lsls	r3, r3, #10
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e056      	b.n	800689a <USB_EPStartXfer+0x6a6>
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USB_EPStartXfer+0x616>
 80067f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29a      	uxth	r2, r3
 8006804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e047      	b.n	800689a <USB_EPStartXfer+0x6a6>
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USB_EPStartXfer+0x636>
 8006820:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800682a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29a      	uxth	r2, r3
 8006830:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006834:	b29b      	uxth	r3, r3
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	b29b      	uxth	r3, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e02a      	b.n	800689a <USB_EPStartXfer+0x6a6>
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d122      	bne.n	800689a <USB_EPStartXfer+0x6a6>
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006874:	4413      	add	r3, r2
 8006876:	653b      	str	r3, [r7, #80]	@ 0x50
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006888:	4413      	add	r3, r2
 800688a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800688e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	b29a      	uxth	r2, r3
 8006896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006898:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	891b      	ldrh	r3, [r3, #8]
 80068a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6959      	ldr	r1, [r3, #20]
 80068b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068c8:	6800      	ldr	r0, [r0, #0]
 80068ca:	f001 f982 	bl	8007bd2 <USB_WritePMA>
            ep->xfer_buff += len;
 80068ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695a      	ldr	r2, [r3, #20]
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	441a      	add	r2, r3
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d90f      	bls.n	8006928 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	621a      	str	r2, [r3, #32]
 8006926:	e00e      	b.n	8006946 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	643b      	str	r3, [r7, #64]	@ 0x40
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	785b      	ldrb	r3, [r3, #1]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d177      	bne.n	8006a52 <USB_EPStartXfer+0x85e>
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800697c:	b29b      	uxth	r3, r3
 800697e:	461a      	mov	r2, r3
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	4413      	add	r3, r2
 8006984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	011a      	lsls	r2, r3, #4
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	4413      	add	r3, r2
 8006998:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
 800699e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b4:	d921      	bls.n	80069fa <USB_EPStartXfer+0x806>
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c4:	f003 031f 	and.w	r3, r3, #31
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <USB_EPStartXfer+0x7e2>
 80069cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d0:	3b01      	subs	r3, #1
 80069d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	e050      	b.n	8006a9c <USB_EPStartXfer+0x8a8>
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <USB_EPStartXfer+0x824>
 8006a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	e041      	b.n	8006a9c <USB_EPStartXfer+0x8a8>
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <USB_EPStartXfer+0x844>
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a32:	3301      	adds	r3, #1
 8006a34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	029b      	lsls	r3, r3, #10
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	e024      	b.n	8006a9c <USB_EPStartXfer+0x8a8>
 8006a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d11c      	bne.n	8006a9c <USB_EPStartXfer+0x8a8>
 8006a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a76:	4413      	add	r3, r2
 8006a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	011a      	lsls	r2, r3, #4
 8006a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	895b      	ldrh	r3, [r3, #10]
 8006aa8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6959      	ldr	r1, [r3, #20]
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ac2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ac6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006aca:	6800      	ldr	r0, [r0, #0]
 8006acc:	f001 f881 	bl	8007bd2 <USB_WritePMA>
 8006ad0:	e227      	b.n	8006f22 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b08:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	441a      	add	r2, r3
 8006b26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b5e:	4413      	add	r3, r2
 8006b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	011a      	lsls	r2, r3, #4
 8006b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b82:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	891b      	ldrh	r3, [r3, #8]
 8006b90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6959      	ldr	r1, [r3, #20]
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006baa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bb2:	6800      	ldr	r0, [r0, #0]
 8006bb4:	f001 f80d 	bl	8007bd2 <USB_WritePMA>
 8006bb8:	e1b3      	b.n	8006f22 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a1a      	ldr	r2, [r3, #32]
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80c6 	beq.w	8006d8c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d177      	bne.n	8006d0c <USB_EPStartXfer+0xb18>
 8006c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c3c:	4413      	add	r3, r2
 8006c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	011a      	lsls	r2, r3, #4
 8006c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c50:	4413      	add	r3, r2
 8006c52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c56:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c6e:	d921      	bls.n	8006cb4 <USB_EPStartXfer+0xac0>
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <USB_EPStartXfer+0xa9c>
 8006c86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	029b      	lsls	r3, r3, #10
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	e050      	b.n	8006d56 <USB_EPStartXfer+0xb62>
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <USB_EPStartXfer+0xade>
 8006cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	e041      	b.n	8006d56 <USB_EPStartXfer+0xb62>
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <USB_EPStartXfer+0xafe>
 8006ce8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006cec:	3301      	adds	r3, #1
 8006cee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	029b      	lsls	r3, r3, #10
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	e024      	b.n	8006d56 <USB_EPStartXfer+0xb62>
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d11c      	bne.n	8006d56 <USB_EPStartXfer+0xb62>
 8006d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d30:	4413      	add	r3, r2
 8006d32:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	011a      	lsls	r2, r3, #4
 8006d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d44:	4413      	add	r3, r2
 8006d46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	895b      	ldrh	r3, [r3, #10]
 8006d62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6959      	ldr	r1, [r3, #20]
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d84:	6800      	ldr	r0, [r0, #0]
 8006d86:	f000 ff24 	bl	8007bd2 <USB_WritePMA>
 8006d8a:	e0ca      	b.n	8006f22 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d177      	bne.n	8006e8c <USB_EPStartXfer+0xc98>
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dbc:	4413      	add	r3, r2
 8006dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	011a      	lsls	r2, r3, #4
 8006dce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006de6:	801a      	strh	r2, [r3, #0]
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dee:	d921      	bls.n	8006e34 <USB_EPStartXfer+0xc40>
 8006df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <USB_EPStartXfer+0xc1c>
 8006e06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	e05c      	b.n	8006eee <USB_EPStartXfer+0xcfa>
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <USB_EPStartXfer+0xc5e>
 8006e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e04d      	b.n	8006eee <USB_EPStartXfer+0xcfa>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <USB_EPStartXfer+0xc7e>
 8006e68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	029b      	lsls	r3, r3, #10
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e030      	b.n	8006eee <USB_EPStartXfer+0xcfa>
 8006e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d128      	bne.n	8006eee <USB_EPStartXfer+0xcfa>
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	011a      	lsls	r2, r3, #4
 8006ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ed8:	4413      	add	r3, r2
 8006eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ede:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006eec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	891b      	ldrh	r3, [r3, #8]
 8006efa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6959      	ldr	r1, [r3, #20]
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f18:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f000 fe58 	bl	8007bd2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f48:	817b      	strh	r3, [r7, #10]
 8006f4a:	897b      	ldrh	r3, [r7, #10]
 8006f4c:	f083 0310 	eor.w	r3, r3, #16
 8006f50:	817b      	strh	r3, [r7, #10]
 8006f52:	897b      	ldrh	r3, [r7, #10]
 8006f54:	f083 0320 	eor.w	r3, r3, #32
 8006f58:	817b      	strh	r3, [r7, #10]
 8006f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	897b      	ldrh	r3, [r7, #10]
 8006f76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	8013      	strh	r3, [r2, #0]
 8006f8a:	f000 bcde 	b.w	800794a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	7b1b      	ldrb	r3, [r3, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 80bb 	bne.w	8007116 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d917      	bls.n	8006fec <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699a      	ldr	r2, [r3, #24]
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fdc:	1ad2      	subs	r2, r2, r3
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	619a      	str	r2, [r3, #24]
 8006fea:	e00e      	b.n	800700a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2200      	movs	r2, #0
 8007008:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800700a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800702e:	4413      	add	r3, r2
 8007030:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	011a      	lsls	r2, r3, #4
 8007042:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007046:	4413      	add	r3, r2
 8007048:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800704c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007068:	2b3e      	cmp	r3, #62	@ 0x3e
 800706a:	d924      	bls.n	80070b6 <USB_EPStartXfer+0xec2>
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <USB_EPStartXfer+0xe98>
 8007082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007086:	3b01      	subs	r3, #1
 8007088:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800708c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29a      	uxth	r2, r3
 8007094:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007098:	b29b      	uxth	r3, r3
 800709a:	029b      	lsls	r3, r3, #10
 800709c:	b29b      	uxth	r3, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f000 bc10 	b.w	80078d6 <USB_EPStartXfer+0x16e2>
 80070b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10c      	bne.n	80070d8 <USB_EPStartXfer+0xee4>
 80070be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e3fe      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <USB_EPStartXfer+0xf04>
 80070ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80070f2:	3301      	adds	r3, #1
 80070f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007104:	b29b      	uxth	r3, r3
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	b29b      	uxth	r3, r3
 800710a:	4313      	orrs	r3, r2
 800710c:	b29a      	uxth	r2, r3
 800710e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	e3df      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	78db      	ldrb	r3, [r3, #3]
 8007122:	2b02      	cmp	r3, #2
 8007124:	f040 8218 	bne.w	8007558 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 809d 	bne.w	8007274 <USB_EPStartXfer+0x1080>
 800713a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800715e:	4413      	add	r3, r2
 8007160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	011a      	lsls	r2, r3, #4
 8007172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007176:	4413      	add	r3, r2
 8007178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800717c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800718c:	b29a      	uxth	r2, r3
 800718e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a2:	d92b      	bls.n	80071fc <USB_EPStartXfer+0x1008>
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <USB_EPStartXfer+0xfe0>
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ce:	3b01      	subs	r3, #1
 80071d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29a      	uxth	r2, r3
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	029b      	lsls	r3, r3, #10
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e070      	b.n	80072de <USB_EPStartXfer+0x10ea>
 80071fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10c      	bne.n	8007226 <USB_EPStartXfer+0x1032>
 800720c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	b29b      	uxth	r3, r3
 8007214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721c:	b29a      	uxth	r2, r3
 800721e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	e05b      	b.n	80072de <USB_EPStartXfer+0x10ea>
 8007226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d004      	beq.n	8007256 <USB_EPStartXfer+0x1062>
 800724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007250:	3301      	adds	r3, #1
 8007252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29a      	uxth	r2, r3
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007262:	b29b      	uxth	r3, r3
 8007264:	029b      	lsls	r3, r3, #10
 8007266:	b29b      	uxth	r3, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	b29a      	uxth	r2, r3
 800726c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	e034      	b.n	80072de <USB_EPStartXfer+0x10ea>
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d12c      	bne.n	80072de <USB_EPStartXfer+0x10ea>
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	461a      	mov	r2, r3
 80072a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072a8:	4413      	add	r3, r2
 80072aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	011a      	lsls	r2, r3, #4
 80072bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f040 809d 	bne.w	8007438 <USB_EPStartXfer+0x1244>
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800730c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007322:	4413      	add	r3, r2
 8007324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	011a      	lsls	r2, r3, #4
 8007336:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800733a:	4413      	add	r3, r2
 800733c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b3e      	cmp	r3, #62	@ 0x3e
 8007366:	d92b      	bls.n	80073c0 <USB_EPStartXfer+0x11cc>
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800737a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2b00      	cmp	r3, #0
 800738c:	d104      	bne.n	8007398 <USB_EPStartXfer+0x11a4>
 800738e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007392:	3b01      	subs	r3, #1
 8007394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	029b      	lsls	r3, r3, #10
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	4313      	orrs	r3, r2
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e069      	b.n	8007494 <USB_EPStartXfer+0x12a0>
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10c      	bne.n	80073ea <USB_EPStartXfer+0x11f6>
 80073d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073d4:	881b      	ldrh	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e054      	b.n	8007494 <USB_EPStartXfer+0x12a0>
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x1226>
 8007410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800741a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29a      	uxth	r2, r3
 8007422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29b      	uxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007434:	801a      	strh	r2, [r3, #0]
 8007436:	e02d      	b.n	8007494 <USB_EPStartXfer+0x12a0>
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d125      	bne.n	8007494 <USB_EPStartXfer+0x12a0>
 8007448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800745e:	4413      	add	r3, r2
 8007460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	011a      	lsls	r2, r3, #4
 8007472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007476:	4413      	add	r3, r2
 8007478:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800747c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007492:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8218 	beq.w	80078d6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <USB_EPStartXfer+0x12ea>
 80074d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10d      	bne.n	80074fa <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 81f5 	bne.w	80078d6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80074ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80074f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 81ee 	bne.w	80078d6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80074fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800751c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007520:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	441a      	add	r2, r3
 800753e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800754a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800754e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007552:	b29b      	uxth	r3, r3
 8007554:	8013      	strh	r3, [r2, #0]
 8007556:	e1be      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	78db      	ldrb	r3, [r3, #3]
 8007564:	2b01      	cmp	r3, #1
 8007566:	f040 81b4 	bne.w	80078d2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	429a      	cmp	r2, r3
 8007584:	d917      	bls.n	80075b6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	619a      	str	r2, [r3, #24]
 80075b4:	e00e      	b.n	80075d4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80075b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80075c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2200      	movs	r2, #0
 80075d2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 8085 	bne.w	80076f0 <USB_EPStartXfer+0x14fc>
 80075e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800760a:	4413      	add	r3, r2
 800760c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	011a      	lsls	r2, r3, #4
 800761e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007622:	4413      	add	r3, r2
 8007624:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800762c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	2b3e      	cmp	r3, #62	@ 0x3e
 8007646:	d923      	bls.n	8007690 <USB_EPStartXfer+0x149c>
 8007648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764c:	095b      	lsrs	r3, r3, #5
 800764e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <USB_EPStartXfer+0x1474>
 800765e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007662:	3b01      	subs	r3, #1
 8007664:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29a      	uxth	r2, r3
 8007670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007674:	b29b      	uxth	r3, r3
 8007676:	029b      	lsls	r3, r3, #10
 8007678:	b29b      	uxth	r3, r3
 800767a:	4313      	orrs	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007686:	b29a      	uxth	r2, r3
 8007688:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	e060      	b.n	8007752 <USB_EPStartXfer+0x155e>
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10c      	bne.n	80076b2 <USB_EPStartXfer+0x14be>
 8007698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	e04f      	b.n	8007752 <USB_EPStartXfer+0x155e>
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <USB_EPStartXfer+0x14de>
 80076c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076cc:	3301      	adds	r3, #1
 80076ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29a      	uxth	r2, r3
 80076da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076de:	b29b      	uxth	r3, r3
 80076e0:	029b      	lsls	r3, r3, #10
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e030      	b.n	8007752 <USB_EPStartXfer+0x155e>
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d128      	bne.n	8007752 <USB_EPStartXfer+0x155e>
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800770e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800771c:	b29b      	uxth	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007724:	4413      	add	r3, r2
 8007726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	011a      	lsls	r2, r3, #4
 8007738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800773c:	4413      	add	r3, r2
 800773e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007742:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774a:	b29a      	uxth	r2, r3
 800774c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f040 8085 	bne.w	800787c <USB_EPStartXfer+0x1688>
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007796:	4413      	add	r3, r2
 8007798:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	011a      	lsls	r2, r3, #4
 80077aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80077ae:	4413      	add	r3, r2
 80077b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80077d2:	d923      	bls.n	800781c <USB_EPStartXfer+0x1628>
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	095b      	lsrs	r3, r3, #5
 80077da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e2:	f003 031f 	and.w	r3, r3, #31
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d104      	bne.n	80077f4 <USB_EPStartXfer+0x1600>
 80077ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ee:	3b01      	subs	r3, #1
 80077f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007800:	b29b      	uxth	r3, r3
 8007802:	029b      	lsls	r3, r3, #10
 8007804:	b29b      	uxth	r3, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e05c      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10c      	bne.n	800783e <USB_EPStartXfer+0x164a>
 8007824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e04b      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
 800783e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <USB_EPStartXfer+0x166a>
 8007854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007858:	3301      	adds	r3, #1
 800785a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800785e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29a      	uxth	r2, r3
 8007866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	e02c      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
 800787c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d124      	bne.n	80078d6 <USB_EPStartXfer+0x16e2>
 800788c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789a:	b29b      	uxth	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078a2:	4413      	add	r3, r2
 80078a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	011a      	lsls	r2, r3, #4
 80078b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078ba:	4413      	add	r3, r2
 80078bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	e001      	b.n	80078d6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e03a      	b.n	800794c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007900:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007904:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007908:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800790c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007910:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007914:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	441a      	add	r2, r3
 8007932:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800793a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800793e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007946:	b29b      	uxth	r3, r3
 8007948:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800797a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800797e:	81bb      	strh	r3, [r7, #12]
 8007980:	89bb      	ldrh	r3, [r7, #12]
 8007982:	f083 0310 	eor.w	r3, r3, #16
 8007986:	81bb      	strh	r3, [r7, #12]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	441a      	add	r2, r3
 8007992:	89bb      	ldrh	r3, [r7, #12]
 8007994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800799c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	8013      	strh	r3, [r2, #0]
 80079a8:	e01f      	b.n	80079ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079c0:	81fb      	strh	r3, [r7, #14]
 80079c2:	89fb      	ldrh	r3, [r7, #14]
 80079c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079c8:	81fb      	strh	r3, [r7, #14]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	441a      	add	r2, r3
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr

080079f6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b087      	sub	sp, #28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 809d 	bne.w	8007b44 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d04c      	beq.n	8007aac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	823b      	strh	r3, [r7, #16]
 8007a20:	8a3b      	ldrh	r3, [r7, #16]
 8007a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d01b      	beq.n	8007a62 <USB_EPClearStall+0x6c>
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a40:	81fb      	strh	r3, [r7, #14]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	89fb      	ldrh	r3, [r7, #14]
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	78db      	ldrb	r3, [r3, #3]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d06c      	beq.n	8007b44 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a80:	81bb      	strh	r3, [r7, #12]
 8007a82:	89bb      	ldrh	r3, [r7, #12]
 8007a84:	f083 0320 	eor.w	r3, r3, #32
 8007a88:	81bb      	strh	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	89bb      	ldrh	r3, [r7, #12]
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]
 8007aaa:	e04b      	b.n	8007b44 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	82fb      	strh	r3, [r7, #22]
 8007aba:	8afb      	ldrh	r3, [r7, #22]
 8007abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01b      	beq.n	8007afc <USB_EPClearStall+0x106>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ada:	82bb      	strh	r3, [r7, #20]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	8abb      	ldrh	r3, [r7, #20]
 8007ae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007af0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b12:	827b      	strh	r3, [r7, #18]
 8007b14:	8a7b      	ldrh	r3, [r7, #18]
 8007b16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b1a:	827b      	strh	r3, [r7, #18]
 8007b1c:	8a7b      	ldrh	r3, [r7, #18]
 8007b1e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b22:	827b      	strh	r3, [r7, #18]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	8a7b      	ldrh	r3, [r7, #18]
 8007b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr

08007b50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2280      	movs	r2, #128	@ 0x80
 8007b66:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr

08007b76 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr

08007bbc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr

08007bd2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b08b      	sub	sp, #44	@ 0x2c
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	461a      	mov	r2, r3
 8007be0:	460b      	mov	r3, r1
 8007be2:	80fb      	strh	r3, [r7, #6]
 8007be4:	4613      	mov	r3, r2
 8007be6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007be8:	88bb      	ldrh	r3, [r7, #4]
 8007bea:	3301      	adds	r3, #1
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	005a      	lsls	r2, r3, #1
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c04:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c0a:	e01f      	b.n	8007c4c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	3301      	adds	r3, #1
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	b21b      	sxth	r3, r3
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	b21a      	sxth	r2, r3
 8007c1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	b21b      	sxth	r3, r3
 8007c26:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	8a7a      	ldrh	r2, [r7, #18]
 8007c2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	3302      	adds	r3, #2
 8007c32:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	3302      	adds	r3, #2
 8007c38:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	3301      	adds	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1dc      	bne.n	8007c0c <USB_WritePMA+0x3a>
  }
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	372c      	adds	r7, #44	@ 0x2c
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bc80      	pop	{r7}
 8007c5c:	4770      	bx	lr

08007c5e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b08b      	sub	sp, #44	@ 0x2c
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	4611      	mov	r1, r2
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	80fb      	strh	r3, [r7, #6]
 8007c70:	4613      	mov	r3, r2
 8007c72:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007c74:	88bb      	ldrh	r3, [r7, #4]
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	005a      	lsls	r2, r3, #1
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c96:	e01b      	b.n	8007cd0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	3302      	adds	r3, #2
 8007cc8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e0      	bne.n	8007c98 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007cd6:	88bb      	ldrh	r3, [r7, #4]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	701a      	strb	r2, [r3, #0]
  }
}
 8007cf2:	bf00      	nop
 8007cf4:	372c      	adds	r7, #44	@ 0x2c
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr

08007cfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7c1b      	ldrb	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d115      	bne.n	8007d40 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d18:	2202      	movs	r2, #2
 8007d1a:	2181      	movs	r1, #129	@ 0x81
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 feee 	bl	8009afe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	2101      	movs	r1, #1
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fee4 	bl	8009afe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007d3e:	e012      	b.n	8007d66 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d40:	2340      	movs	r3, #64	@ 0x40
 8007d42:	2202      	movs	r2, #2
 8007d44:	2181      	movs	r1, #129	@ 0x81
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fed9 	bl	8009afe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d52:	2340      	movs	r3, #64	@ 0x40
 8007d54:	2202      	movs	r2, #2
 8007d56:	2101      	movs	r1, #1
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fed0 	bl	8009afe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d66:	2308      	movs	r3, #8
 8007d68:	2203      	movs	r2, #3
 8007d6a:	2182      	movs	r1, #130	@ 0x82
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 fec6 	bl	8009afe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007d7c:	f001 ffe6 	bl	8009d4c <USBD_static_malloc>
 8007d80:	4602      	mov	r2, r0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007d92:	2301      	movs	r3, #1
 8007d94:	73fb      	strb	r3, [r7, #15]
 8007d96:	e026      	b.n	8007de6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d9e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7c1b      	ldrb	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dcc:	2101      	movs	r1, #1
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 ff85 	bl	8009cde <USBD_LL_PrepareReceive>
 8007dd4:	e007      	b.n	8007de6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ddc:	2340      	movs	r3, #64	@ 0x40
 8007dde:	2101      	movs	r1, #1
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 ff7c 	bl	8009cde <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e00:	2181      	movs	r1, #129	@ 0x81
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fea1 	bl	8009b4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e0e:	2101      	movs	r1, #1
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 fe9a 	bl	8009b4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e1e:	2182      	movs	r1, #130	@ 0x82
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fe92 	bl	8009b4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00e      	beq.n	8007e54 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e46:	4618      	mov	r0, r3
 8007e48:	f001 ff8c 	bl	8009d64 <USBD_static_free>
    pdev->pClassData = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b086      	sub	sp, #24
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d039      	beq.n	8007efc <USBD_CDC_Setup+0x9e>
 8007e88:	2b20      	cmp	r3, #32
 8007e8a:	d17f      	bne.n	8007f8c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d029      	beq.n	8007ee8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b25b      	sxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da11      	bge.n	8007ec2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007eaa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	88d2      	ldrh	r2, [r2, #6]
 8007eb0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007eb2:	6939      	ldr	r1, [r7, #16]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	88db      	ldrh	r3, [r3, #6]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fa06 	bl	80092cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007ec0:	e06b      	b.n	8007f9a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	785a      	ldrb	r2, [r3, #1]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	88db      	ldrh	r3, [r3, #6]
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007ed8:	6939      	ldr	r1, [r7, #16]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fa21 	bl	8009328 <USBD_CtlPrepareRx>
      break;
 8007ee6:	e058      	b.n	8007f9a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	7850      	ldrb	r0, [r2, #1]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	4798      	blx	r3
      break;
 8007efa:	e04e      	b.n	8007f9a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b0b      	cmp	r3, #11
 8007f02:	d02e      	beq.n	8007f62 <USBD_CDC_Setup+0x104>
 8007f04:	2b0b      	cmp	r3, #11
 8007f06:	dc38      	bgt.n	8007f7a <USBD_CDC_Setup+0x11c>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <USBD_CDC_Setup+0xb4>
 8007f0c:	2b0a      	cmp	r3, #10
 8007f0e:	d014      	beq.n	8007f3a <USBD_CDC_Setup+0xdc>
 8007f10:	e033      	b.n	8007f7a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d107      	bne.n	8007f2c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f1c:	f107 030c 	add.w	r3, r7, #12
 8007f20:	2202      	movs	r2, #2
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f9d1 	bl	80092cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f2a:	e02e      	b.n	8007f8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 f962 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	75fb      	strb	r3, [r7, #23]
          break;
 8007f38:	e027      	b.n	8007f8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d107      	bne.n	8007f54 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f44:	f107 030f 	add.w	r3, r7, #15
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f9bd 	bl	80092cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f52:	e01a      	b.n	8007f8a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 f94e 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f60:	e013      	b.n	8007f8a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d00d      	beq.n	8007f88 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 f942 	bl	80091f8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f78:	e006      	b.n	8007f88 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 f93b 	bl	80091f8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	75fb      	strb	r3, [r7, #23]
          break;
 8007f86:	e000      	b.n	8007f8a <USBD_CDC_Setup+0x12c>
          break;
 8007f88:	bf00      	nop
      }
      break;
 8007f8a:	e006      	b.n	8007f9a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 f932 	bl	80091f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f94:	2302      	movs	r3, #2
 8007f96:	75fb      	strb	r3, [r7, #23]
      break;
 8007f98:	bf00      	nop
  }

  return ret;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007fbe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d03a      	beq.n	8008040 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fca:	78fa      	ldrb	r2, [r7, #3]
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	331c      	adds	r3, #28
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d029      	beq.n	8008034 <USBD_CDC_DataIn+0x90>
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	331c      	adds	r3, #28
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	78f9      	ldrb	r1, [r7, #3]
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	4403      	add	r3, r0
 8008000:	3320      	adds	r3, #32
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	fbb2 f1f3 	udiv	r1, r2, r3
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d110      	bne.n	8008034 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	331c      	adds	r3, #28
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008026:	78f9      	ldrb	r1, [r7, #3]
 8008028:	2300      	movs	r3, #0
 800802a:	2200      	movs	r2, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fe33 	bl	8009c98 <USBD_LL_Transmit>
 8008032:	e003      	b.n	800803c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	e000      	b.n	8008042 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008040:	2302      	movs	r3, #2
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800805c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fe5e 	bl	8009d24 <USBD_LL_GetRxDataSize>
 8008068:	4602      	mov	r2, r0
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800808e:	4611      	mov	r1, r2
 8008090:	4798      	blx	r3

    return USBD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e000      	b.n	8008098 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d014      	beq.n	80080e4 <USBD_CDC_EP0_RxReady+0x44>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80080c0:	2bff      	cmp	r3, #255	@ 0xff
 80080c2:	d00f      	beq.n	80080e4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80080d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	22ff      	movs	r2, #255	@ 0xff
 80080e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2243      	movs	r2, #67	@ 0x43
 80080fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80080fe:	4b03      	ldr	r3, [pc, #12]	@ (800810c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000094 	.word	0x20000094

08008110 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2243      	movs	r2, #67	@ 0x43
 800811c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800811e:	4b03      	ldr	r3, [pc, #12]	@ (800812c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000050 	.word	0x20000050

08008130 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2243      	movs	r2, #67	@ 0x43
 800813c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800813e:	4b03      	ldr	r3, [pc, #12]	@ (800814c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	200000d8 	.word	0x200000d8

08008150 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	220a      	movs	r2, #10
 800815c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800815e:	4b03      	ldr	r3, [pc, #12]	@ (800816c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	2000000c 	.word	0x2000000c

08008170 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800817a:	2302      	movs	r3, #2
 800817c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081ba:	88fa      	ldrh	r2, [r7, #6]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081de:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008202:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d01c      	beq.n	8008248 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008214:	2b00      	cmp	r3, #0
 8008216:	d115      	bne.n	8008244 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008236:	b29b      	uxth	r3, r3
 8008238:	2181      	movs	r1, #129	@ 0x81
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fd2c 	bl	8009c98 <USBD_LL_Transmit>

      return USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	e002      	b.n	800824a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008248:	2302      	movs	r3, #2
  }
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008260:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008268:	2b00      	cmp	r3, #0
 800826a:	d017      	beq.n	800829c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7c1b      	ldrb	r3, [r3, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d109      	bne.n	8008288 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800827a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800827e:	2101      	movs	r1, #1
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 fd2c 	bl	8009cde <USBD_LL_PrepareReceive>
 8008286:	e007      	b.n	8008298 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800828e:	2340      	movs	r3, #64	@ 0x40
 8008290:	2101      	movs	r1, #1
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 fd23 	bl	8009cde <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	e000      	b.n	800829e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800829c:	2302      	movs	r3, #2
  }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	60f8      	str	r0, [r7, #12]
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082ba:	2302      	movs	r3, #2
 80082bc:	e01a      	b.n	80082f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	79fa      	ldrb	r2, [r7, #7]
 80082ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f001 fb91 	bl	8009a14 <USBD_LL_Init>

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d006      	beq.n	800831e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
 800831c:	e001      	b.n	8008322 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800831e:	2302      	movs	r3, #2
 8008320:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr

0800832e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fbc6 	bl	8009ac8 <USBD_LL_Start>

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr

0800835a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008366:	2302      	movs	r3, #2
 8008368:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00c      	beq.n	800838e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4611      	mov	r1, r2
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	4611      	mov	r1, r2
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	4798      	blx	r3

  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fed8 	bl	8009186 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d016      	beq.n	8008428 <USBD_LL_SetupStage+0x6a>
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d81c      	bhi.n	8008438 <USBD_LL_SetupStage+0x7a>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USBD_LL_SetupStage+0x4a>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d008      	beq.n	8008418 <USBD_LL_SetupStage+0x5a>
 8008406:	e017      	b.n	8008438 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f9cb 	bl	80087ac <USBD_StdDevReq>
      break;
 8008416:	e01a      	b.n	800844e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fa2d 	bl	8008880 <USBD_StdItfReq>
      break;
 8008426:	e012      	b.n	800844e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fa6d 	bl	8008910 <USBD_StdEPReq>
      break;
 8008436:	e00a      	b.n	800844e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800843e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008442:	b2db      	uxtb	r3, r3
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fb9e 	bl	8009b88 <USBD_LL_StallEP>
      break;
 800844c:	bf00      	nop
  }

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	460b      	mov	r3, r1
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d14b      	bne.n	8008504 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008472:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800847a:	2b03      	cmp	r3, #3
 800847c:	d134      	bne.n	80084e8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	429a      	cmp	r2, r3
 8008488:	d919      	bls.n	80084be <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d203      	bcs.n	80084ac <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	e002      	b.n	80084b2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 ff54 	bl	8009364 <USBD_CtlContinueRx>
 80084bc:	e038      	b.n	8008530 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d105      	bne.n	80084e0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 ff51 	bl	8009388 <USBD_CtlSendStatus>
 80084e6:	e023      	b.n	8008530 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d11e      	bne.n	8008530 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80084fa:	2100      	movs	r1, #0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 fb43 	bl	8009b88 <USBD_LL_StallEP>
 8008502:	e015      	b.n	8008530 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00d      	beq.n	800852c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008516:	2b03      	cmp	r3, #3
 8008518:	d108      	bne.n	800852c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	7afa      	ldrb	r2, [r7, #11]
 8008524:	4611      	mov	r1, r2
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	4798      	blx	r3
 800852a:	e001      	b.n	8008530 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800852c:	2302      	movs	r3, #2
 800852e:	e000      	b.n	8008532 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b086      	sub	sp, #24
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	460b      	mov	r3, r1
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d17f      	bne.n	800864e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3314      	adds	r3, #20
 8008552:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800855a:	2b02      	cmp	r3, #2
 800855c:	d15c      	bne.n	8008618 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	429a      	cmp	r2, r3
 8008568:	d915      	bls.n	8008596 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	b29b      	uxth	r3, r3
 800857e:	461a      	mov	r2, r3
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 febe 	bl	8009304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008588:	2300      	movs	r3, #0
 800858a:	2200      	movs	r2, #0
 800858c:	2100      	movs	r1, #0
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f001 fba5 	bl	8009cde <USBD_LL_PrepareReceive>
 8008594:	e04e      	b.n	8008634 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	6912      	ldr	r2, [r2, #16]
 800859e:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a2:	fb01 f202 	mul.w	r2, r1, r2
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11c      	bne.n	80085e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d316      	bcc.n	80085e6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d20f      	bcs.n	80085e6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fe9a 	bl	8009304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	2100      	movs	r1, #0
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f001 fb7d 	bl	8009cde <USBD_LL_PrepareReceive>
 80085e4:	e026      	b.n	8008634 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d105      	bne.n	8008608 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008608:	2180      	movs	r1, #128	@ 0x80
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f001 fabc 	bl	8009b88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 fecc 	bl	80093ae <USBD_CtlReceiveStatus>
 8008616:	e00d      	b.n	8008634 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800861e:	2b04      	cmp	r3, #4
 8008620:	d004      	beq.n	800862c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800862c:	2180      	movs	r1, #128	@ 0x80
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f001 faaa 	bl	8009b88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800863a:	2b01      	cmp	r3, #1
 800863c:	d11d      	bne.n	800867a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fe81 	bl	8008346 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800864c:	e015      	b.n	800867a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00d      	beq.n	8008676 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008660:	2b03      	cmp	r3, #3
 8008662:	d108      	bne.n	8008676 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	7afa      	ldrb	r2, [r7, #11]
 800866e:	4611      	mov	r1, r2
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	4798      	blx	r3
 8008674:	e001      	b.n	800867a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008676:	2302      	movs	r3, #2
 8008678:	e000      	b.n	800867c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800868c:	2340      	movs	r3, #64	@ 0x40
 800868e:	2200      	movs	r2, #0
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fa33 	bl	8009afe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2240      	movs	r2, #64	@ 0x40
 80086a4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086a8:	2340      	movs	r3, #64	@ 0x40
 80086aa:	2200      	movs	r2, #0
 80086ac:	2180      	movs	r1, #128	@ 0x80
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fa25 	bl	8009afe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2240      	movs	r2, #64	@ 0x40
 80086be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d009      	beq.n	80086fc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6852      	ldr	r2, [r2, #4]
 80086f4:	b2d2      	uxtb	r2, r2
 80086f6:	4611      	mov	r1, r2
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	4798      	blx	r3
  }

  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	78fa      	ldrb	r2, [r7, #3]
 8008716:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr

08008724 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2204      	movs	r2, #4
 800873c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr

0800874c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800875a:	2b04      	cmp	r3, #4
 800875c:	d105      	bne.n	800876a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr

08008776 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008784:	2b03      	cmp	r3, #3
 8008786:	d10b      	bne.n	80087a0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087c2:	2b40      	cmp	r3, #64	@ 0x40
 80087c4:	d005      	beq.n	80087d2 <USBD_StdDevReq+0x26>
 80087c6:	2b40      	cmp	r3, #64	@ 0x40
 80087c8:	d84f      	bhi.n	800886a <USBD_StdDevReq+0xbe>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d009      	beq.n	80087e2 <USBD_StdDevReq+0x36>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d14b      	bne.n	800886a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	4798      	blx	r3
      break;
 80087e0:	e048      	b.n	8008874 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b09      	cmp	r3, #9
 80087e8:	d839      	bhi.n	800885e <USBD_StdDevReq+0xb2>
 80087ea:	a201      	add	r2, pc, #4	@ (adr r2, 80087f0 <USBD_StdDevReq+0x44>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008841 	.word	0x08008841
 80087f4:	08008855 	.word	0x08008855
 80087f8:	0800885f 	.word	0x0800885f
 80087fc:	0800884b 	.word	0x0800884b
 8008800:	0800885f 	.word	0x0800885f
 8008804:	08008823 	.word	0x08008823
 8008808:	08008819 	.word	0x08008819
 800880c:	0800885f 	.word	0x0800885f
 8008810:	08008837 	.word	0x08008837
 8008814:	0800882d 	.word	0x0800882d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9dc 	bl	8008bd8 <USBD_GetDescriptor>
          break;
 8008820:	e022      	b.n	8008868 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fb3f 	bl	8008ea8 <USBD_SetAddress>
          break;
 800882a:	e01d      	b.n	8008868 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fb7e 	bl	8008f30 <USBD_SetConfig>
          break;
 8008834:	e018      	b.n	8008868 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fc07 	bl	800904c <USBD_GetConfig>
          break;
 800883e:	e013      	b.n	8008868 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fc37 	bl	80090b6 <USBD_GetStatus>
          break;
 8008848:	e00e      	b.n	8008868 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fc65 	bl	800911c <USBD_SetFeature>
          break;
 8008852:	e009      	b.n	8008868 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fc74 	bl	8009144 <USBD_ClrFeature>
          break;
 800885c:	e004      	b.n	8008868 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fcc9 	bl	80091f8 <USBD_CtlError>
          break;
 8008866:	bf00      	nop
      }
      break;
 8008868:	e004      	b.n	8008874 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fcc3 	bl	80091f8 <USBD_CtlError>
      break;
 8008872:	bf00      	nop
  }

  return ret;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop

08008880 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008896:	2b40      	cmp	r3, #64	@ 0x40
 8008898:	d005      	beq.n	80088a6 <USBD_StdItfReq+0x26>
 800889a:	2b40      	cmp	r3, #64	@ 0x40
 800889c:	d82e      	bhi.n	80088fc <USBD_StdItfReq+0x7c>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <USBD_StdItfReq+0x26>
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d12a      	bne.n	80088fc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d81d      	bhi.n	80088ee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	889b      	ldrh	r3, [r3, #4]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d813      	bhi.n	80088e4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	88db      	ldrh	r3, [r3, #6]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d110      	bne.n	80088f8 <USBD_StdItfReq+0x78>
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fd53 	bl	8009388 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088e2:	e009      	b.n	80088f8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fc86 	bl	80091f8 <USBD_CtlError>
          break;
 80088ec:	e004      	b.n	80088f8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fc81 	bl	80091f8 <USBD_CtlError>
          break;
 80088f6:	e000      	b.n	80088fa <USBD_StdItfReq+0x7a>
          break;
 80088f8:	bf00      	nop
      }
      break;
 80088fa:	e004      	b.n	8008906 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fc7a 	bl	80091f8 <USBD_CtlError>
      break;
 8008904:	bf00      	nop
  }

  return USBD_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	889b      	ldrh	r3, [r3, #4]
 8008922:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800892c:	2b40      	cmp	r3, #64	@ 0x40
 800892e:	d007      	beq.n	8008940 <USBD_StdEPReq+0x30>
 8008930:	2b40      	cmp	r3, #64	@ 0x40
 8008932:	f200 8146 	bhi.w	8008bc2 <USBD_StdEPReq+0x2b2>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <USBD_StdEPReq+0x40>
 800893a:	2b20      	cmp	r3, #32
 800893c:	f040 8141 	bne.w	8008bc2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
      break;
 800894e:	e13d      	b.n	8008bcc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008958:	2b20      	cmp	r3, #32
 800895a:	d10a      	bne.n	8008972 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	e12d      	b.n	8008bce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	2b03      	cmp	r3, #3
 8008978:	d007      	beq.n	800898a <USBD_StdEPReq+0x7a>
 800897a:	2b03      	cmp	r3, #3
 800897c:	f300 811b 	bgt.w	8008bb6 <USBD_StdEPReq+0x2a6>
 8008980:	2b00      	cmp	r3, #0
 8008982:	d072      	beq.n	8008a6a <USBD_StdEPReq+0x15a>
 8008984:	2b01      	cmp	r3, #1
 8008986:	d03a      	beq.n	80089fe <USBD_StdEPReq+0xee>
 8008988:	e115      	b.n	8008bb6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008990:	2b02      	cmp	r3, #2
 8008992:	d002      	beq.n	800899a <USBD_StdEPReq+0x8a>
 8008994:	2b03      	cmp	r3, #3
 8008996:	d015      	beq.n	80089c4 <USBD_StdEPReq+0xb4>
 8008998:	e02b      	b.n	80089f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00c      	beq.n	80089ba <USBD_StdEPReq+0xaa>
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b80      	cmp	r3, #128	@ 0x80
 80089a4:	d009      	beq.n	80089ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f8ec 	bl	8009b88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80089b0:	2180      	movs	r1, #128	@ 0x80
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 f8e8 	bl	8009b88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089b8:	e020      	b.n	80089fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc1b 	bl	80091f8 <USBD_CtlError>
              break;
 80089c2:	e01b      	b.n	80089fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	885b      	ldrh	r3, [r3, #2]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10e      	bne.n	80089ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <USBD_StdEPReq+0xda>
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b80      	cmp	r3, #128	@ 0x80
 80089d6:	d008      	beq.n	80089ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	88db      	ldrh	r3, [r3, #6]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d104      	bne.n	80089ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f8cf 	bl	8009b88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fccc 	bl	8009388 <USBD_CtlSendStatus>

              break;
 80089f0:	e004      	b.n	80089fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fbff 	bl	80091f8 <USBD_CtlError>
              break;
 80089fa:	bf00      	nop
          }
          break;
 80089fc:	e0e0      	b.n	8008bc0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d002      	beq.n	8008a0e <USBD_StdEPReq+0xfe>
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d015      	beq.n	8008a38 <USBD_StdEPReq+0x128>
 8008a0c:	e026      	b.n	8008a5c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <USBD_StdEPReq+0x11e>
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b80      	cmp	r3, #128	@ 0x80
 8008a18:	d009      	beq.n	8008a2e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 f8b2 	bl	8009b88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a24:	2180      	movs	r1, #128	@ 0x80
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 f8ae 	bl	8009b88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a2c:	e01c      	b.n	8008a68 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fbe1 	bl	80091f8 <USBD_CtlError>
              break;
 8008a36:	e017      	b.n	8008a68 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	885b      	ldrh	r3, [r3, #2]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d112      	bne.n	8008a66 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 f8b9 	bl	8009bc6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fc97 	bl	8009388 <USBD_CtlSendStatus>
              }
              break;
 8008a5a:	e004      	b.n	8008a66 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fbca 	bl	80091f8 <USBD_CtlError>
              break;
 8008a64:	e000      	b.n	8008a68 <USBD_StdEPReq+0x158>
              break;
 8008a66:	bf00      	nop
          }
          break;
 8008a68:	e0aa      	b.n	8008bc0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d002      	beq.n	8008a7a <USBD_StdEPReq+0x16a>
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d032      	beq.n	8008ade <USBD_StdEPReq+0x1ce>
 8008a78:	e097      	b.n	8008baa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <USBD_StdEPReq+0x180>
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b80      	cmp	r3, #128	@ 0x80
 8008a84:	d004      	beq.n	8008a90 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fbb5 	bl	80091f8 <USBD_CtlError>
                break;
 8008a8e:	e091      	b.n	8008bb4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da0b      	bge.n	8008ab0 <USBD_StdEPReq+0x1a0>
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	3310      	adds	r3, #16
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4413      	add	r3, r2
 8008aac:	3304      	adds	r3, #4
 8008aae:	e00b      	b.n	8008ac8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbf8 	bl	80092cc <USBD_CtlSendData>
              break;
 8008adc:	e06a      	b.n	8008bb4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	da11      	bge.n	8008b0a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	f003 020f 	and.w	r2, r3, #15
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	440b      	add	r3, r1
 8008af8:	3318      	adds	r3, #24
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d117      	bne.n	8008b30 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fb78 	bl	80091f8 <USBD_CtlError>
                  break;
 8008b08:	e054      	b.n	8008bb4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 020f 	and.w	r2, r3, #15
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fb65 	bl	80091f8 <USBD_CtlError>
                  break;
 8008b2e:	e041      	b.n	8008bb4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	da0b      	bge.n	8008b50 <USBD_StdEPReq+0x240>
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	3310      	adds	r3, #16
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	e00b      	b.n	8008b68 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b56:	4613      	mov	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	3304      	adds	r3, #4
 8008b68:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <USBD_StdEPReq+0x266>
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	2b80      	cmp	r3, #128	@ 0x80
 8008b74:	d103      	bne.n	8008b7e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	e00e      	b.n	8008b9c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 f83e 	bl	8009c04 <USBD_LL_IsStallEP>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2201      	movs	r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e002      	b.n	8008b9c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb92 	bl	80092cc <USBD_CtlSendData>
              break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fb23 	bl	80091f8 <USBD_CtlError>
              break;
 8008bb2:	bf00      	nop
          }
          break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fb1d 	bl	80091f8 <USBD_CtlError>
          break;
 8008bbe:	bf00      	nop
      }
      break;
 8008bc0:	e004      	b.n	8008bcc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fb17 	bl	80091f8 <USBD_CtlError>
      break;
 8008bca:	bf00      	nop
  }

  return ret;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	2b06      	cmp	r3, #6
 8008bfa:	f200 8128 	bhi.w	8008e4e <USBD_GetDescriptor+0x276>
 8008bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <USBD_GetDescriptor+0x2c>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c39 	.word	0x08008c39
 8008c0c:	08008c79 	.word	0x08008c79
 8008c10:	08008e4f 	.word	0x08008e4f
 8008c14:	08008e4f 	.word	0x08008e4f
 8008c18:	08008def 	.word	0x08008def
 8008c1c:	08008e1b 	.word	0x08008e1b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7c12      	ldrb	r2, [r2, #16]
 8008c2c:	f107 0108 	add.w	r1, r7, #8
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	60f8      	str	r0, [r7, #12]
      break;
 8008c36:	e112      	b.n	8008e5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	7c1b      	ldrb	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10d      	bne.n	8008c5c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c48:	f107 0208 	add.w	r2, r7, #8
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	2202      	movs	r2, #2
 8008c58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c5a:	e100      	b.n	8008e5e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	f107 0208 	add.w	r2, r7, #8
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4798      	blx	r3
 8008c6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3301      	adds	r3, #1
 8008c72:	2202      	movs	r2, #2
 8008c74:	701a      	strb	r2, [r3, #0]
      break;
 8008c76:	e0f2      	b.n	8008e5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b05      	cmp	r3, #5
 8008c80:	f200 80ac 	bhi.w	8008ddc <USBD_GetDescriptor+0x204>
 8008c84:	a201      	add	r2, pc, #4	@ (adr r2, 8008c8c <USBD_GetDescriptor+0xb4>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008ca5 	.word	0x08008ca5
 8008c90:	08008cd9 	.word	0x08008cd9
 8008c94:	08008d0d 	.word	0x08008d0d
 8008c98:	08008d41 	.word	0x08008d41
 8008c9c:	08008d75 	.word	0x08008d75
 8008ca0:	08008da9 	.word	0x08008da9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	7c12      	ldrb	r2, [r2, #16]
 8008cbc:	f107 0108 	add.w	r1, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc6:	e091      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa94 	bl	80091f8 <USBD_CtlError>
            err++;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd6:	e089      	b.n	8008dec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7c12      	ldrb	r2, [r2, #16]
 8008cf0:	f107 0108 	add.w	r1, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfa:	e077      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa7a 	bl	80091f8 <USBD_CtlError>
            err++;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	3301      	adds	r3, #1
 8008d08:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0a:	e06f      	b.n	8008dec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	7c12      	ldrb	r2, [r2, #16]
 8008d24:	f107 0108 	add.w	r1, r7, #8
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
 8008d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2e:	e05d      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa60 	bl	80091f8 <USBD_CtlError>
            err++;
 8008d38:	7afb      	ldrb	r3, [r7, #11]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3e:	e055      	b.n	8008dec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7c12      	ldrb	r2, [r2, #16]
 8008d58:	f107 0108 	add.w	r1, r7, #8
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	4798      	blx	r3
 8008d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d62:	e043      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa46 	bl	80091f8 <USBD_CtlError>
            err++;
 8008d6c:	7afb      	ldrb	r3, [r7, #11]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	72fb      	strb	r3, [r7, #11]
          break;
 8008d72:	e03b      	b.n	8008dec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	7c12      	ldrb	r2, [r2, #16]
 8008d8c:	f107 0108 	add.w	r1, r7, #8
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
 8008d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d96:	e029      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fa2c 	bl	80091f8 <USBD_CtlError>
            err++;
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	3301      	adds	r3, #1
 8008da4:	72fb      	strb	r3, [r7, #11]
          break;
 8008da6:	e021      	b.n	8008dec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	7c12      	ldrb	r2, [r2, #16]
 8008dc0:	f107 0108 	add.w	r1, r7, #8
 8008dc4:	4610      	mov	r0, r2
 8008dc6:	4798      	blx	r3
 8008dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dca:	e00f      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa12 	bl	80091f8 <USBD_CtlError>
            err++;
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dda:	e007      	b.n	8008dec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa0a 	bl	80091f8 <USBD_CtlError>
          err++;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	3301      	adds	r3, #1
 8008de8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008dea:	e038      	b.n	8008e5e <USBD_GetDescriptor+0x286>
 8008dec:	e037      	b.n	8008e5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7c1b      	ldrb	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dfe:	f107 0208 	add.w	r2, r7, #8
 8008e02:	4610      	mov	r0, r2
 8008e04:	4798      	blx	r3
 8008e06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e08:	e029      	b.n	8008e5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e0a:	6839      	ldr	r1, [r7, #0]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9f3 	bl	80091f8 <USBD_CtlError>
        err++;
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	3301      	adds	r3, #1
 8008e16:	72fb      	strb	r3, [r7, #11]
      break;
 8008e18:	e021      	b.n	8008e5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7c1b      	ldrb	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10d      	bne.n	8008e3e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2a:	f107 0208 	add.w	r2, r7, #8
 8008e2e:	4610      	mov	r0, r2
 8008e30:	4798      	blx	r3
 8008e32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	2207      	movs	r2, #7
 8008e3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e3c:	e00f      	b.n	8008e5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f9d9 	bl	80091f8 <USBD_CtlError>
        err++;
 8008e46:	7afb      	ldrb	r3, [r7, #11]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e4c:	e007      	b.n	8008e5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f9d1 	bl	80091f8 <USBD_CtlError>
      err++;
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	72fb      	strb	r3, [r7, #11]
      break;
 8008e5c:	bf00      	nop
  }

  if (err != 0U)
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d11c      	bne.n	8008e9e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008e64:	893b      	ldrh	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d011      	beq.n	8008e8e <USBD_GetDescriptor+0x2b6>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00d      	beq.n	8008e8e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88da      	ldrh	r2, [r3, #6]
 8008e76:	893b      	ldrh	r3, [r7, #8]
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	bf28      	it	cs
 8008e7c:	4613      	movcs	r3, r2
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e82:	893b      	ldrh	r3, [r7, #8]
 8008e84:	461a      	mov	r2, r3
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa1f 	bl	80092cc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	88db      	ldrh	r3, [r3, #6]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa76 	bl	8009388 <USBD_CtlSendStatus>
 8008e9c:	e000      	b.n	8008ea0 <USBD_GetDescriptor+0x2c8>
    return;
 8008e9e:	bf00      	nop
    }
  }
}
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop

08008ea8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	889b      	ldrh	r3, [r3, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d130      	bne.n	8008f1c <USBD_SetAddress+0x74>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	88db      	ldrh	r3, [r3, #6]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d12c      	bne.n	8008f1c <USBD_SetAddress+0x74>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	885b      	ldrh	r3, [r3, #2]
 8008ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ec8:	d828      	bhi.n	8008f1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	885b      	ldrh	r3, [r3, #2]
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d104      	bne.n	8008eea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f988 	bl	80091f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee8:	e01d      	b.n	8008f26 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7bfa      	ldrb	r2, [r7, #15]
 8008eee:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 feaf 	bl	8009c5a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa43 	bl	8009388 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	e009      	b.n	8008f26 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f1a:	e004      	b.n	8008f26 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f96a 	bl	80091f8 <USBD_CtlError>
  }
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	4b41      	ldr	r3, [pc, #260]	@ (8009048 <USBD_SetConfig+0x118>)
 8008f42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f44:	4b40      	ldr	r3, [pc, #256]	@ (8009048 <USBD_SetConfig+0x118>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d904      	bls.n	8008f56 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f952 	bl	80091f8 <USBD_CtlError>
 8008f54:	e075      	b.n	8009042 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d002      	beq.n	8008f66 <USBD_SetConfig+0x36>
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d023      	beq.n	8008fac <USBD_SetConfig+0x7c>
 8008f64:	e062      	b.n	800902c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008f66:	4b38      	ldr	r3, [pc, #224]	@ (8009048 <USBD_SetConfig+0x118>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d01a      	beq.n	8008fa4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008f6e:	4b36      	ldr	r3, [pc, #216]	@ (8009048 <USBD_SetConfig+0x118>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f80:	4b31      	ldr	r3, [pc, #196]	@ (8009048 <USBD_SetConfig+0x118>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff f9e7 	bl	800835a <USBD_SetClassConfig>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d104      	bne.n	8008f9c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f92f 	bl	80091f8 <USBD_CtlError>
            return;
 8008f9a:	e052      	b.n	8009042 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f9f3 	bl	8009388 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fa2:	e04e      	b.n	8009042 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f9ef 	bl	8009388 <USBD_CtlSendStatus>
        break;
 8008faa:	e04a      	b.n	8009042 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008fac:	4b26      	ldr	r3, [pc, #152]	@ (8009048 <USBD_SetConfig+0x118>)
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d112      	bne.n	8008fda <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008fbc:	4b22      	ldr	r3, [pc, #136]	@ (8009048 <USBD_SetConfig+0x118>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008fc6:	4b20      	ldr	r3, [pc, #128]	@ (8009048 <USBD_SetConfig+0x118>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff f9e3 	bl	8008398 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f9d8 	bl	8009388 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008fd8:	e033      	b.n	8009042 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008fda:	4b1b      	ldr	r3, [pc, #108]	@ (8009048 <USBD_SetConfig+0x118>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d01d      	beq.n	8009024 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff f9d1 	bl	8008398 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <USBD_SetConfig+0x118>)
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009000:	4b11      	ldr	r3, [pc, #68]	@ (8009048 <USBD_SetConfig+0x118>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff f9a7 	bl	800835a <USBD_SetClassConfig>
 800900c:	4603      	mov	r3, r0
 800900e:	2b02      	cmp	r3, #2
 8009010:	d104      	bne.n	800901c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f8ef 	bl	80091f8 <USBD_CtlError>
            return;
 800901a:	e012      	b.n	8009042 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f9b3 	bl	8009388 <USBD_CtlSendStatus>
        break;
 8009022:	e00e      	b.n	8009042 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9af 	bl	8009388 <USBD_CtlSendStatus>
        break;
 800902a:	e00a      	b.n	8009042 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f8e2 	bl	80091f8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009034:	4b04      	ldr	r3, [pc, #16]	@ (8009048 <USBD_SetConfig+0x118>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff f9ac 	bl	8008398 <USBD_ClrClassConfig>
        break;
 8009040:	bf00      	nop
    }
  }
}
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20000520 	.word	0x20000520

0800904c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	88db      	ldrh	r3, [r3, #6]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d004      	beq.n	8009068 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8c9 	bl	80091f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009066:	e022      	b.n	80090ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800906e:	2b02      	cmp	r3, #2
 8009070:	dc02      	bgt.n	8009078 <USBD_GetConfig+0x2c>
 8009072:	2b00      	cmp	r3, #0
 8009074:	dc03      	bgt.n	800907e <USBD_GetConfig+0x32>
 8009076:	e015      	b.n	80090a4 <USBD_GetConfig+0x58>
 8009078:	2b03      	cmp	r3, #3
 800907a:	d00b      	beq.n	8009094 <USBD_GetConfig+0x48>
 800907c:	e012      	b.n	80090a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3308      	adds	r3, #8
 8009088:	2201      	movs	r2, #1
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f91d 	bl	80092cc <USBD_CtlSendData>
        break;
 8009092:	e00c      	b.n	80090ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3304      	adds	r3, #4
 8009098:	2201      	movs	r2, #1
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f915 	bl	80092cc <USBD_CtlSendData>
        break;
 80090a2:	e004      	b.n	80090ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f8a6 	bl	80091f8 <USBD_CtlError>
        break;
 80090ac:	bf00      	nop
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090c6:	3b01      	subs	r3, #1
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d81e      	bhi.n	800910a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	88db      	ldrh	r3, [r3, #6]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d004      	beq.n	80090de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f88e 	bl	80091f8 <USBD_CtlError>
        break;
 80090dc:	e01a      	b.n	8009114 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d005      	beq.n	80090fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f043 0202 	orr.w	r2, r3, #2
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	330c      	adds	r3, #12
 80090fe:	2202      	movs	r2, #2
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f8e2 	bl	80092cc <USBD_CtlSendData>
      break;
 8009108:	e004      	b.n	8009114 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f873 	bl	80091f8 <USBD_CtlError>
      break;
 8009112:	bf00      	nop
  }
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	885b      	ldrh	r3, [r3, #2]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d106      	bne.n	800913c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f926 	bl	8009388 <USBD_CtlSendStatus>
  }
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009154:	3b01      	subs	r3, #1
 8009156:	2b02      	cmp	r3, #2
 8009158:	d80b      	bhi.n	8009172 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	885b      	ldrh	r3, [r3, #2]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d10c      	bne.n	800917c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f90c 	bl	8009388 <USBD_CtlSendStatus>
      }
      break;
 8009170:	e004      	b.n	800917c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f83f 	bl	80091f8 <USBD_CtlError>
      break;
 800917a:	e000      	b.n	800917e <USBD_ClrFeature+0x3a>
      break;
 800917c:	bf00      	nop
  }
}
 800917e:	bf00      	nop
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	785a      	ldrb	r2, [r3, #1]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	3302      	adds	r3, #2
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	3303      	adds	r3, #3
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	021b      	lsls	r3, r3, #8
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	3304      	adds	r3, #4
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	3305      	adds	r3, #5
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3306      	adds	r3, #6
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	3307      	adds	r3, #7
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	80da      	strh	r2, [r3, #6]

}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009202:	2180      	movs	r1, #128	@ 0x80
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fcbf 	bl	8009b88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fcbb 	bl	8009b88 <USBD_LL_StallEP>
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	60b9      	str	r1, [r7, #8]
 8009224:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d032      	beq.n	8009296 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f834 	bl	800929e <USBD_GetLen>
 8009236:	4603      	mov	r3, r0
 8009238:	3301      	adds	r3, #1
 800923a:	b29b      	uxth	r3, r3
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	75fa      	strb	r2, [r7, #23]
 800924a:	461a      	mov	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4413      	add	r3, r2
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7812      	ldrb	r2, [r2, #0]
 8009254:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	75fa      	strb	r2, [r7, #23]
 800925c:	461a      	mov	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4413      	add	r3, r2
 8009262:	2203      	movs	r2, #3
 8009264:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009266:	e012      	b.n	800928e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	1c5a      	adds	r2, r3, #1
 800926c:	60fa      	str	r2, [r7, #12]
 800926e:	7dfa      	ldrb	r2, [r7, #23]
 8009270:	1c51      	adds	r1, r2, #1
 8009272:	75f9      	strb	r1, [r7, #23]
 8009274:	4611      	mov	r1, r2
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	440a      	add	r2, r1
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	75fa      	strb	r2, [r7, #23]
 8009284:	461a      	mov	r2, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4413      	add	r3, r2
 800928a:	2200      	movs	r2, #0
 800928c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e8      	bne.n	8009268 <USBD_GetString+0x4e>
    }
  }
}
 8009296:	bf00      	nop
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800929e:	b480      	push	{r7}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80092aa:	e005      	b.n	80092b8 <USBD_GetLen+0x1a>
  {
    len++;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	3301      	adds	r3, #1
 80092b0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3301      	adds	r3, #1
 80092b6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1f5      	bne.n	80092ac <USBD_GetLen+0xe>
  }

  return len;
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bc80      	pop	{r7}
 80092ca:	4770      	bx	lr

080092cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2202      	movs	r2, #2
 80092de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80092e2:	88fa      	ldrh	r2, [r7, #6]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80092e8:	88fa      	ldrh	r2, [r7, #6]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	2100      	movs	r1, #0
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fccf 	bl	8009c98 <USBD_LL_Transmit>

  return USBD_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	2100      	movs	r1, #0
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 fcbd 	bl	8009c98 <USBD_LL_Transmit>

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2203      	movs	r2, #3
 800933a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009346:	88fa      	ldrh	r2, [r7, #6]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800934e:	88fb      	ldrh	r3, [r7, #6]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	2100      	movs	r1, #0
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 fcc2 	bl	8009cde <USBD_LL_PrepareReceive>

  return USBD_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	2100      	movs	r1, #0
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fcb0 	bl	8009cde <USBD_LL_PrepareReceive>

  return USBD_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2204      	movs	r2, #4
 8009394:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009398:	2300      	movs	r3, #0
 800939a:	2200      	movs	r2, #0
 800939c:	2100      	movs	r1, #0
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc7a 	bl	8009c98 <USBD_LL_Transmit>

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2205      	movs	r2, #5
 80093ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093be:	2300      	movs	r3, #0
 80093c0:	2200      	movs	r2, #0
 80093c2:	2100      	movs	r1, #0
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc8a 	bl	8009cde <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093d8:	2200      	movs	r2, #0
 80093da:	4912      	ldr	r1, [pc, #72]	@ (8009424 <MX_USB_DEVICE_Init+0x50>)
 80093dc:	4812      	ldr	r0, [pc, #72]	@ (8009428 <MX_USB_DEVICE_Init+0x54>)
 80093de:	f7fe ff62 	bl	80082a6 <USBD_Init>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093e8:	f7f7 fc24 	bl	8000c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093ec:	490f      	ldr	r1, [pc, #60]	@ (800942c <MX_USB_DEVICE_Init+0x58>)
 80093ee:	480e      	ldr	r0, [pc, #56]	@ (8009428 <MX_USB_DEVICE_Init+0x54>)
 80093f0:	f7fe ff84 	bl	80082fc <USBD_RegisterClass>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093fa:	f7f7 fc1b 	bl	8000c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093fe:	490c      	ldr	r1, [pc, #48]	@ (8009430 <MX_USB_DEVICE_Init+0x5c>)
 8009400:	4809      	ldr	r0, [pc, #36]	@ (8009428 <MX_USB_DEVICE_Init+0x54>)
 8009402:	f7fe feb5 	bl	8008170 <USBD_CDC_RegisterInterface>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800940c:	f7f7 fc12 	bl	8000c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009410:	4805      	ldr	r0, [pc, #20]	@ (8009428 <MX_USB_DEVICE_Init+0x54>)
 8009412:	f7fe ff8c 	bl	800832e <USBD_Start>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800941c:	f7f7 fc0a 	bl	8000c34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009420:	bf00      	nop
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20000134 	.word	0x20000134
 8009428:	20000524 	.word	0x20000524
 800942c:	20000018 	.word	0x20000018
 8009430:	20000124 	.word	0x20000124

08009434 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009438:	2200      	movs	r2, #0
 800943a:	4905      	ldr	r1, [pc, #20]	@ (8009450 <CDC_Init_FS+0x1c>)
 800943c:	4805      	ldr	r0, [pc, #20]	@ (8009454 <CDC_Init_FS+0x20>)
 800943e:	f7fe fead 	bl	800819c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009442:	4905      	ldr	r1, [pc, #20]	@ (8009458 <CDC_Init_FS+0x24>)
 8009444:	4803      	ldr	r0, [pc, #12]	@ (8009454 <CDC_Init_FS+0x20>)
 8009446:	f7fe fec2 	bl	80081ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800944a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800944c:	4618      	mov	r0, r3
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20000be8 	.word	0x20000be8
 8009454:	20000524 	.word	0x20000524
 8009458:	200007e8 	.word	0x200007e8

0800945c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009462:	4618      	mov	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr
	...

0800946c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	71fb      	strb	r3, [r7, #7]
 8009478:	4613      	mov	r3, r2
 800947a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	2b23      	cmp	r3, #35	@ 0x23
 8009480:	f200 8098 	bhi.w	80095b4 <CDC_Control_FS+0x148>
 8009484:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <CDC_Control_FS+0x20>)
 8009486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948a:	bf00      	nop
 800948c:	080095b5 	.word	0x080095b5
 8009490:	080095b5 	.word	0x080095b5
 8009494:	080095b5 	.word	0x080095b5
 8009498:	080095b5 	.word	0x080095b5
 800949c:	080095b5 	.word	0x080095b5
 80094a0:	080095b5 	.word	0x080095b5
 80094a4:	080095b5 	.word	0x080095b5
 80094a8:	080095b5 	.word	0x080095b5
 80094ac:	080095b5 	.word	0x080095b5
 80094b0:	080095b5 	.word	0x080095b5
 80094b4:	080095b5 	.word	0x080095b5
 80094b8:	080095b5 	.word	0x080095b5
 80094bc:	080095b5 	.word	0x080095b5
 80094c0:	080095b5 	.word	0x080095b5
 80094c4:	080095b5 	.word	0x080095b5
 80094c8:	080095b5 	.word	0x080095b5
 80094cc:	080095b5 	.word	0x080095b5
 80094d0:	080095b5 	.word	0x080095b5
 80094d4:	080095b5 	.word	0x080095b5
 80094d8:	080095b5 	.word	0x080095b5
 80094dc:	080095b5 	.word	0x080095b5
 80094e0:	080095b5 	.word	0x080095b5
 80094e4:	080095b5 	.word	0x080095b5
 80094e8:	080095b5 	.word	0x080095b5
 80094ec:	080095b5 	.word	0x080095b5
 80094f0:	080095b5 	.word	0x080095b5
 80094f4:	080095b5 	.word	0x080095b5
 80094f8:	080095b5 	.word	0x080095b5
 80094fc:	080095b5 	.word	0x080095b5
 8009500:	080095b5 	.word	0x080095b5
 8009504:	080095b5 	.word	0x080095b5
 8009508:	080095b5 	.word	0x080095b5
 800950c:	0800951d 	.word	0x0800951d
 8009510:	08009561 	.word	0x08009561
 8009514:	080095b5 	.word	0x080095b5
 8009518:	080095b5 	.word	0x080095b5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	3301      	adds	r3, #1
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	021b      	lsls	r3, r3, #8
 800952a:	431a      	orrs	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	3302      	adds	r3, #2
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	431a      	orrs	r2, r3
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	3303      	adds	r3, #3
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	4313      	orrs	r3, r2
 8009540:	461a      	mov	r2, r3
 8009542:	4b20      	ldr	r3, [pc, #128]	@ (80095c4 <CDC_Control_FS+0x158>)
 8009544:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	791a      	ldrb	r2, [r3, #4]
 800954a:	4b1e      	ldr	r3, [pc, #120]	@ (80095c4 <CDC_Control_FS+0x158>)
 800954c:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	795a      	ldrb	r2, [r3, #5]
 8009552:	4b1c      	ldr	r3, [pc, #112]	@ (80095c4 <CDC_Control_FS+0x158>)
 8009554:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	799a      	ldrb	r2, [r3, #6]
 800955a:	4b1a      	ldr	r3, [pc, #104]	@ (80095c4 <CDC_Control_FS+0x158>)
 800955c:	719a      	strb	r2, [r3, #6]
    break;
 800955e:	e02a      	b.n	80095b6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8009560:	4b18      	ldr	r3, [pc, #96]	@ (80095c4 <CDC_Control_FS+0x158>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	b2da      	uxtb	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800956a:	4b16      	ldr	r3, [pc, #88]	@ (80095c4 <CDC_Control_FS+0x158>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	0a1a      	lsrs	r2, r3, #8
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8009578:	4b12      	ldr	r3, [pc, #72]	@ (80095c4 <CDC_Control_FS+0x158>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	0c1a      	lsrs	r2, r3, #16
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	3302      	adds	r3, #2
 8009582:	b2d2      	uxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8009586:	4b0f      	ldr	r3, [pc, #60]	@ (80095c4 <CDC_Control_FS+0x158>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	0e1a      	lsrs	r2, r3, #24
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	3303      	adds	r3, #3
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	3304      	adds	r3, #4
 8009598:	4a0a      	ldr	r2, [pc, #40]	@ (80095c4 <CDC_Control_FS+0x158>)
 800959a:	7912      	ldrb	r2, [r2, #4]
 800959c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	3305      	adds	r3, #5
 80095a2:	4a08      	ldr	r2, [pc, #32]	@ (80095c4 <CDC_Control_FS+0x158>)
 80095a4:	7952      	ldrb	r2, [r2, #5]
 80095a6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	3306      	adds	r3, #6
 80095ac:	4a05      	ldr	r2, [pc, #20]	@ (80095c4 <CDC_Control_FS+0x158>)
 80095ae:	7992      	ldrb	r2, [r2, #6]
 80095b0:	701a      	strb	r2, [r3, #0]
    break;
 80095b2:	e000      	b.n	80095b6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095b4:	bf00      	nop
  }

  return (USBD_OK);
 80095b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	2000011c 	.word	0x2000011c

080095c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 80095d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009604 <CDC_Receive_FS+0x3c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 80095da:	4b0a      	ldr	r3, [pc, #40]	@ (8009604 <CDC_Receive_FS+0x3c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	6812      	ldr	r2, [r2, #0]
 80095e2:	b292      	uxth	r2, r2
 80095e4:	4611      	mov	r1, r2
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	4806      	ldr	r0, [pc, #24]	@ (8009608 <CDC_Receive_FS+0x40>)
 80095ee:	f7fe fdee 	bl	80081ce <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095f2:	4805      	ldr	r0, [pc, #20]	@ (8009608 <CDC_Receive_FS+0x40>)
 80095f4:	f7fe fe2d 	bl	8008252 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80095f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20000fe8 	.word	0x20000fe8
 8009608:	20000524 	.word	0x20000524

0800960c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800961c:	4b0d      	ldr	r3, [pc, #52]	@ (8009654 <CDC_Transmit_FS+0x48>)
 800961e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009622:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800962e:	2301      	movs	r3, #1
 8009630:	e00b      	b.n	800964a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009632:	887b      	ldrh	r3, [r7, #2]
 8009634:	461a      	mov	r2, r3
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4806      	ldr	r0, [pc, #24]	@ (8009654 <CDC_Transmit_FS+0x48>)
 800963a:	f7fe fdaf 	bl	800819c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800963e:	4805      	ldr	r0, [pc, #20]	@ (8009654 <CDC_Transmit_FS+0x48>)
 8009640:	f7fe fdd8 	bl	80081f4 <USBD_CDC_TransmitPacket>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000524 	.word	0x20000524

08009658 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8009660:	4a03      	ldr	r2, [pc, #12]	@ (8009670 <CDC_AttachRxData+0x18>)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6013      	str	r3, [r2, #0]
}
 8009666:	bf00      	nop
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	bc80      	pop	{r7}
 800966e:	4770      	bx	lr
 8009670:	20000fe8 	.word	0x20000fe8

08009674 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2212      	movs	r2, #18
 8009684:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009686:	4b03      	ldr	r3, [pc, #12]	@ (8009694 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	bc80      	pop	{r7}
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000150 	.word	0x20000150

08009698 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	6039      	str	r1, [r7, #0]
 80096a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2204      	movs	r2, #4
 80096a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80096aa:	4b03      	ldr	r3, [pc, #12]	@ (80096b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bc80      	pop	{r7}
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000164 	.word	0x20000164

080096bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	6039      	str	r1, [r7, #0]
 80096c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d105      	bne.n	80096da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	4907      	ldr	r1, [pc, #28]	@ (80096f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80096d2:	4808      	ldr	r0, [pc, #32]	@ (80096f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80096d4:	f7ff fda1 	bl	800921a <USBD_GetString>
 80096d8:	e004      	b.n	80096e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	4904      	ldr	r1, [pc, #16]	@ (80096f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80096de:	4805      	ldr	r0, [pc, #20]	@ (80096f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80096e0:	f7ff fd9b 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 80096e4:	4b02      	ldr	r3, [pc, #8]	@ (80096f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000fec 	.word	0x20000fec
 80096f4:	0800a76c 	.word	0x0800a76c

080096f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	6039      	str	r1, [r7, #0]
 8009702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	4904      	ldr	r1, [pc, #16]	@ (8009718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009708:	4804      	ldr	r0, [pc, #16]	@ (800971c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800970a:	f7ff fd86 	bl	800921a <USBD_GetString>
  return USBD_StrDesc;
 800970e:	4b02      	ldr	r3, [pc, #8]	@ (8009718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20000fec 	.word	0x20000fec
 800971c:	0800a784 	.word	0x0800a784

08009720 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	221a      	movs	r2, #26
 8009730:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009732:	f000 f843 	bl	80097bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009736:	4b02      	ldr	r3, [pc, #8]	@ (8009740 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000168 	.word	0x20000168

08009744 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d105      	bne.n	8009762 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	4907      	ldr	r1, [pc, #28]	@ (8009778 <USBD_FS_ConfigStrDescriptor+0x34>)
 800975a:	4808      	ldr	r0, [pc, #32]	@ (800977c <USBD_FS_ConfigStrDescriptor+0x38>)
 800975c:	f7ff fd5d 	bl	800921a <USBD_GetString>
 8009760:	e004      	b.n	800976c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4904      	ldr	r1, [pc, #16]	@ (8009778 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009766:	4805      	ldr	r0, [pc, #20]	@ (800977c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009768:	f7ff fd57 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 800976c:	4b02      	ldr	r3, [pc, #8]	@ (8009778 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000fec 	.word	0x20000fec
 800977c:	0800a798 	.word	0x0800a798

08009780 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4907      	ldr	r1, [pc, #28]	@ (80097b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009796:	4808      	ldr	r0, [pc, #32]	@ (80097b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009798:	f7ff fd3f 	bl	800921a <USBD_GetString>
 800979c:	e004      	b.n	80097a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4904      	ldr	r1, [pc, #16]	@ (80097b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097a2:	4805      	ldr	r0, [pc, #20]	@ (80097b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097a4:	f7ff fd39 	bl	800921a <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a8:	4b02      	ldr	r3, [pc, #8]	@ (80097b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000fec 	.word	0x20000fec
 80097b8:	0800a7a4 	.word	0x0800a7a4

080097bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009800 <Get_SerialNum+0x44>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009804 <Get_SerialNum+0x48>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <Get_SerialNum+0x4c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4413      	add	r3, r2
 80097da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d009      	beq.n	80097f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097e2:	2208      	movs	r2, #8
 80097e4:	4909      	ldr	r1, [pc, #36]	@ (800980c <Get_SerialNum+0x50>)
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f814 	bl	8009814 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80097ec:	2204      	movs	r2, #4
 80097ee:	4908      	ldr	r1, [pc, #32]	@ (8009810 <Get_SerialNum+0x54>)
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f000 f80f 	bl	8009814 <IntToUnicode>
  }
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	1ffff7e8 	.word	0x1ffff7e8
 8009804:	1ffff7ec 	.word	0x1ffff7ec
 8009808:	1ffff7f0 	.word	0x1ffff7f0
 800980c:	2000016a 	.word	0x2000016a
 8009810:	2000017a 	.word	0x2000017a

08009814 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	4613      	mov	r3, r2
 8009820:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009826:	2300      	movs	r3, #0
 8009828:	75fb      	strb	r3, [r7, #23]
 800982a:	e027      	b.n	800987c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	0f1b      	lsrs	r3, r3, #28
 8009830:	2b09      	cmp	r3, #9
 8009832:	d80b      	bhi.n	800984c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	0f1b      	lsrs	r3, r3, #28
 8009838:	b2da      	uxtb	r2, r3
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	4619      	mov	r1, r3
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	440b      	add	r3, r1
 8009844:	3230      	adds	r2, #48	@ 0x30
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	e00a      	b.n	8009862 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	0f1b      	lsrs	r3, r3, #28
 8009850:	b2da      	uxtb	r2, r3
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	4619      	mov	r1, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	440b      	add	r3, r1
 800985c:	3237      	adds	r2, #55	@ 0x37
 800985e:	b2d2      	uxtb	r2, r2
 8009860:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	3301      	adds	r3, #1
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	4413      	add	r3, r2
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	3301      	adds	r3, #1
 800987a:	75fb      	strb	r3, [r7, #23]
 800987c:	7dfa      	ldrb	r2, [r7, #23]
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	429a      	cmp	r2, r3
 8009882:	d3d3      	bcc.n	800982c <IntToUnicode+0x18>
  }
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a0d      	ldr	r2, [pc, #52]	@ (80098d4 <HAL_PCD_MspInit+0x44>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d113      	bne.n	80098ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098a2:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <HAL_PCD_MspInit+0x48>)
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <HAL_PCD_MspInit+0x48>)
 80098a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80098ac:	61d3      	str	r3, [r2, #28]
 80098ae:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <HAL_PCD_MspInit+0x48>)
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80098ba:	2200      	movs	r2, #0
 80098bc:	2100      	movs	r1, #0
 80098be:	2014      	movs	r0, #20
 80098c0:	f7f8 f95d 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80098c4:	2014      	movs	r0, #20
 80098c6:	f7f8 f976 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80098ca:	bf00      	nop
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	40005c00 	.word	0x40005c00
 80098d8:	40021000 	.word	0x40021000

080098dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80098f0:	4619      	mov	r1, r3
 80098f2:	4610      	mov	r0, r2
 80098f4:	f7fe fd63 	bl	80083be <USBD_LL_SetupStage>
}
 80098f8:	bf00      	nop
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	00db      	lsls	r3, r3, #3
 800991e:	440b      	add	r3, r1
 8009920:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	4619      	mov	r1, r3
 800992a:	f7fe fd95 	bl	8008458 <USBD_LL_DataOutStage>
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	440b      	add	r3, r1
 8009956:	3324      	adds	r3, #36	@ 0x24
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	4619      	mov	r1, r3
 800995e:	f7fe fdec 	bl	800853a <USBD_LL_DataInStage>
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fefc 	bl	8008776 <USBD_LL_SOF>
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800998e:	2301      	movs	r3, #1
 8009990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	799b      	ldrb	r3, [r3, #6]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d001      	beq.n	800999e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800999a:	f7f7 f94b 	bl	8000c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	4611      	mov	r1, r2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe feac 	bl	8008706 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe fe65 	bl	8008684 <USBD_LL_Reset>
}
 80099ba:	bf00      	nop
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fea6 	bl	8008724 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	7a9b      	ldrb	r3, [r3, #10]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099e0:	4b04      	ldr	r3, [pc, #16]	@ (80099f4 <HAL_PCD_SuspendCallback+0x30>)
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	4a03      	ldr	r2, [pc, #12]	@ (80099f4 <HAL_PCD_SuspendCallback+0x30>)
 80099e6:	f043 0306 	orr.w	r3, r3, #6
 80099ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	e000ed00 	.word	0xe000ed00

080099f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fea0 	bl	800874c <USBD_LL_Resume>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a1c:	4a28      	ldr	r2, [pc, #160]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a26      	ldr	r2, [pc, #152]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a28:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009a2c:	4b24      	ldr	r3, [pc, #144]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a2e:	4a25      	ldr	r2, [pc, #148]	@ (8009ac4 <USBD_LL_Init+0xb0>)
 8009a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a32:	4b23      	ldr	r3, [pc, #140]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a34:	2208      	movs	r2, #8
 8009a36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a38:	4b21      	ldr	r3, [pc, #132]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a3e:	4b20      	ldr	r3, [pc, #128]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a44:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009a50:	481b      	ldr	r0, [pc, #108]	@ (8009ac0 <USBD_LL_Init+0xac>)
 8009a52:	f7f8 fc6e 	bl	8002332 <HAL_PCD_Init>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009a5c:	f7f7 f8ea 	bl	8000c34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a66:	2318      	movs	r3, #24
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	f7fa f97f 	bl	8003d6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a76:	2358      	movs	r3, #88	@ 0x58
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2180      	movs	r1, #128	@ 0x80
 8009a7c:	f7fa f977 	bl	8003d6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a86:	23c0      	movs	r3, #192	@ 0xc0
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2181      	movs	r1, #129	@ 0x81
 8009a8c:	f7fa f96f 	bl	8003d6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a96:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f7fa f966 	bl	8003d6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009aa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009aac:	2200      	movs	r2, #0
 8009aae:	2182      	movs	r1, #130	@ 0x82
 8009ab0:	f7fa f95d 	bl	8003d6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200011ec 	.word	0x200011ec
 8009ac4:	40005c00 	.word	0x40005c00

08009ac8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f8 fd1d 	bl	800251e <HAL_PCD_Start>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f94e 	bl	8009d8c <USBD_Get_USB_Status>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	4608      	mov	r0, r1
 8009b08:	4611      	mov	r1, r2
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	70fb      	strb	r3, [r7, #3]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70bb      	strb	r3, [r7, #2]
 8009b14:	4613      	mov	r3, r2
 8009b16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b26:	78bb      	ldrb	r3, [r7, #2]
 8009b28:	883a      	ldrh	r2, [r7, #0]
 8009b2a:	78f9      	ldrb	r1, [r7, #3]
 8009b2c:	f7f8 fe71 	bl	8002812 <HAL_PCD_EP_Open>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 f928 	bl	8009d8c <USBD_Get_USB_Status>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	460b      	mov	r3, r1
 8009b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b64:	78fa      	ldrb	r2, [r7, #3]
 8009b66:	4611      	mov	r1, r2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7f8 feaf 	bl	80028cc <HAL_PCD_EP_Close>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 f909 	bl	8009d8c <USBD_Get_USB_Status>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f8 ff57 	bl	8002a5a <HAL_PCD_EP_SetStall>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f8ea 	bl	8009d8c <USBD_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f8 ff98 	bl	8002b1a <HAL_PCD_EP_ClrStall>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f8cb 	bl	8009d8c <USBD_Get_USB_Status>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da0b      	bge.n	8009c38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c26:	68f9      	ldr	r1, [r7, #12]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	440b      	add	r3, r1
 8009c32:	3312      	adds	r3, #18
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	e00b      	b.n	8009c50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	440b      	add	r3, r1
 8009c4a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009c4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bc80      	pop	{r7}
 8009c58:	4770      	bx	lr

08009c5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c74:	78fa      	ldrb	r2, [r7, #3]
 8009c76:	4611      	mov	r1, r2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f8 fda6 	bl	80027ca <HAL_PCD_SetAddress>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f881 	bl	8009d8c <USBD_Get_USB_Status>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	607a      	str	r2, [r7, #4]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	72fb      	strb	r3, [r7, #11]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009cba:	893b      	ldrh	r3, [r7, #8]
 8009cbc:	7af9      	ldrb	r1, [r7, #11]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	f7f8 fe94 	bl	80029ec <HAL_PCD_EP_Transmit>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 f85e 	bl	8009d8c <USBD_Get_USB_Status>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b086      	sub	sp, #24
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	460b      	mov	r3, r1
 8009cec:	72fb      	strb	r3, [r7, #11]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d00:	893b      	ldrh	r3, [r7, #8]
 8009d02:	7af9      	ldrb	r1, [r7, #11]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f7f8 fe29 	bl	800295c <HAL_PCD_EP_Receive>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 f83b 	bl	8009d8c <USBD_Get_USB_Status>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d36:	78fa      	ldrb	r2, [r7, #3]
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7f8 fe3f 	bl	80029be <HAL_PCD_EP_GetRxCount>
 8009d40:	4603      	mov	r3, r0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d54:	4b02      	ldr	r3, [pc, #8]	@ (8009d60 <USBD_static_malloc+0x14>)
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bc80      	pop	{r7}
 8009d5e:	4770      	bx	lr
 8009d60:	200014c4 	.word	0x200014c4

08009d64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]

}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bc80      	pop	{r7}
 8009d74:	4770      	bx	lr

08009d76 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d76:	b480      	push	{r7}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr

08009d8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d817      	bhi.n	8009dd0 <USBD_Get_USB_Status+0x44>
 8009da0:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <USBD_Get_USB_Status+0x1c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009dbf 	.word	0x08009dbf
 8009db0:	08009dc5 	.word	0x08009dc5
 8009db4:	08009dcb 	.word	0x08009dcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbc:	e00b      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc2:	e008      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc8:	e005      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dca:	2302      	movs	r3, #2
 8009dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dce:	e002      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd4:	bf00      	nop
  }
  return usb_status;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bc80      	pop	{r7}
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop

08009de4 <siprintf>:
 8009de4:	b40e      	push	{r1, r2, r3}
 8009de6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009dea:	b510      	push	{r4, lr}
 8009dec:	2400      	movs	r4, #0
 8009dee:	b09d      	sub	sp, #116	@ 0x74
 8009df0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009df2:	9002      	str	r0, [sp, #8]
 8009df4:	9006      	str	r0, [sp, #24]
 8009df6:	9107      	str	r1, [sp, #28]
 8009df8:	9104      	str	r1, [sp, #16]
 8009dfa:	4809      	ldr	r0, [pc, #36]	@ (8009e20 <siprintf+0x3c>)
 8009dfc:	4909      	ldr	r1, [pc, #36]	@ (8009e24 <siprintf+0x40>)
 8009dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e02:	9105      	str	r1, [sp, #20]
 8009e04:	6800      	ldr	r0, [r0, #0]
 8009e06:	a902      	add	r1, sp, #8
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009e0c:	f000 f992 	bl	800a134 <_svfiprintf_r>
 8009e10:	9b02      	ldr	r3, [sp, #8]
 8009e12:	701c      	strb	r4, [r3, #0]
 8009e14:	b01d      	add	sp, #116	@ 0x74
 8009e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e1a:	b003      	add	sp, #12
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	20000184 	.word	0x20000184
 8009e24:	ffff0208 	.word	0xffff0208

08009e28 <memset>:
 8009e28:	4603      	mov	r3, r0
 8009e2a:	4402      	add	r2, r0
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d100      	bne.n	8009e32 <memset+0xa>
 8009e30:	4770      	bx	lr
 8009e32:	f803 1b01 	strb.w	r1, [r3], #1
 8009e36:	e7f9      	b.n	8009e2c <memset+0x4>

08009e38 <__errno>:
 8009e38:	4b01      	ldr	r3, [pc, #4]	@ (8009e40 <__errno+0x8>)
 8009e3a:	6818      	ldr	r0, [r3, #0]
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20000184 	.word	0x20000184

08009e44 <__libc_init_array>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	2600      	movs	r6, #0
 8009e48:	4d0c      	ldr	r5, [pc, #48]	@ (8009e7c <__libc_init_array+0x38>)
 8009e4a:	4c0d      	ldr	r4, [pc, #52]	@ (8009e80 <__libc_init_array+0x3c>)
 8009e4c:	1b64      	subs	r4, r4, r5
 8009e4e:	10a4      	asrs	r4, r4, #2
 8009e50:	42a6      	cmp	r6, r4
 8009e52:	d109      	bne.n	8009e68 <__libc_init_array+0x24>
 8009e54:	f000 fc76 	bl	800a744 <_init>
 8009e58:	2600      	movs	r6, #0
 8009e5a:	4d0a      	ldr	r5, [pc, #40]	@ (8009e84 <__libc_init_array+0x40>)
 8009e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8009e88 <__libc_init_array+0x44>)
 8009e5e:	1b64      	subs	r4, r4, r5
 8009e60:	10a4      	asrs	r4, r4, #2
 8009e62:	42a6      	cmp	r6, r4
 8009e64:	d105      	bne.n	8009e72 <__libc_init_array+0x2e>
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6c:	4798      	blx	r3
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7ee      	b.n	8009e50 <__libc_init_array+0xc>
 8009e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e76:	4798      	blx	r3
 8009e78:	3601      	adds	r6, #1
 8009e7a:	e7f2      	b.n	8009e62 <__libc_init_array+0x1e>
 8009e7c:	0800a80c 	.word	0x0800a80c
 8009e80:	0800a80c 	.word	0x0800a80c
 8009e84:	0800a80c 	.word	0x0800a80c
 8009e88:	0800a810 	.word	0x0800a810

08009e8c <__retarget_lock_acquire_recursive>:
 8009e8c:	4770      	bx	lr

08009e8e <__retarget_lock_release_recursive>:
 8009e8e:	4770      	bx	lr

08009e90 <_free_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4605      	mov	r5, r0
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d040      	beq.n	8009f1a <_free_r+0x8a>
 8009e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9c:	1f0c      	subs	r4, r1, #4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	18e4      	addlt	r4, r4, r3
 8009ea4:	f000 f8de 	bl	800a064 <__malloc_lock>
 8009ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8009f1c <_free_r+0x8c>)
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	b933      	cbnz	r3, 8009ebc <_free_r+0x2c>
 8009eae:	6063      	str	r3, [r4, #4]
 8009eb0:	6014      	str	r4, [r2, #0]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb8:	f000 b8da 	b.w	800a070 <__malloc_unlock>
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	d908      	bls.n	8009ed2 <_free_r+0x42>
 8009ec0:	6820      	ldr	r0, [r4, #0]
 8009ec2:	1821      	adds	r1, r4, r0
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	bf01      	itttt	eq
 8009ec8:	6819      	ldreq	r1, [r3, #0]
 8009eca:	685b      	ldreq	r3, [r3, #4]
 8009ecc:	1809      	addeq	r1, r1, r0
 8009ece:	6021      	streq	r1, [r4, #0]
 8009ed0:	e7ed      	b.n	8009eae <_free_r+0x1e>
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	b10b      	cbz	r3, 8009edc <_free_r+0x4c>
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	d9fa      	bls.n	8009ed2 <_free_r+0x42>
 8009edc:	6811      	ldr	r1, [r2, #0]
 8009ede:	1850      	adds	r0, r2, r1
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d10b      	bne.n	8009efc <_free_r+0x6c>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	4401      	add	r1, r0
 8009ee8:	1850      	adds	r0, r2, r1
 8009eea:	4283      	cmp	r3, r0
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	d1e0      	bne.n	8009eb2 <_free_r+0x22>
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4408      	add	r0, r1
 8009ef6:	6010      	str	r0, [r2, #0]
 8009ef8:	6053      	str	r3, [r2, #4]
 8009efa:	e7da      	b.n	8009eb2 <_free_r+0x22>
 8009efc:	d902      	bls.n	8009f04 <_free_r+0x74>
 8009efe:	230c      	movs	r3, #12
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	e7d6      	b.n	8009eb2 <_free_r+0x22>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	1821      	adds	r1, r4, r0
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	bf01      	itttt	eq
 8009f0c:	6819      	ldreq	r1, [r3, #0]
 8009f0e:	685b      	ldreq	r3, [r3, #4]
 8009f10:	1809      	addeq	r1, r1, r0
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	6054      	str	r4, [r2, #4]
 8009f18:	e7cb      	b.n	8009eb2 <_free_r+0x22>
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20001828 	.word	0x20001828

08009f20 <sbrk_aligned>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4e0f      	ldr	r6, [pc, #60]	@ (8009f60 <sbrk_aligned+0x40>)
 8009f24:	460c      	mov	r4, r1
 8009f26:	6831      	ldr	r1, [r6, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b911      	cbnz	r1, 8009f32 <sbrk_aligned+0x12>
 8009f2c:	f000 fba8 	bl	800a680 <_sbrk_r>
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 fba3 	bl	800a680 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d103      	bne.n	8009f46 <sbrk_aligned+0x26>
 8009f3e:	f04f 34ff 	mov.w	r4, #4294967295
 8009f42:	4620      	mov	r0, r4
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	1cc4      	adds	r4, r0, #3
 8009f48:	f024 0403 	bic.w	r4, r4, #3
 8009f4c:	42a0      	cmp	r0, r4
 8009f4e:	d0f8      	beq.n	8009f42 <sbrk_aligned+0x22>
 8009f50:	1a21      	subs	r1, r4, r0
 8009f52:	4628      	mov	r0, r5
 8009f54:	f000 fb94 	bl	800a680 <_sbrk_r>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d1f2      	bne.n	8009f42 <sbrk_aligned+0x22>
 8009f5c:	e7ef      	b.n	8009f3e <sbrk_aligned+0x1e>
 8009f5e:	bf00      	nop
 8009f60:	20001824 	.word	0x20001824

08009f64 <_malloc_r>:
 8009f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f68:	1ccd      	adds	r5, r1, #3
 8009f6a:	f025 0503 	bic.w	r5, r5, #3
 8009f6e:	3508      	adds	r5, #8
 8009f70:	2d0c      	cmp	r5, #12
 8009f72:	bf38      	it	cc
 8009f74:	250c      	movcc	r5, #12
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	4606      	mov	r6, r0
 8009f7a:	db01      	blt.n	8009f80 <_malloc_r+0x1c>
 8009f7c:	42a9      	cmp	r1, r5
 8009f7e:	d904      	bls.n	8009f8a <_malloc_r+0x26>
 8009f80:	230c      	movs	r3, #12
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	2000      	movs	r0, #0
 8009f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a060 <_malloc_r+0xfc>
 8009f8e:	f000 f869 	bl	800a064 <__malloc_lock>
 8009f92:	f8d8 3000 	ldr.w	r3, [r8]
 8009f96:	461c      	mov	r4, r3
 8009f98:	bb44      	cbnz	r4, 8009fec <_malloc_r+0x88>
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7ff ffbf 	bl	8009f20 <sbrk_aligned>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	d158      	bne.n	800a05a <_malloc_r+0xf6>
 8009fa8:	f8d8 4000 	ldr.w	r4, [r8]
 8009fac:	4627      	mov	r7, r4
 8009fae:	2f00      	cmp	r7, #0
 8009fb0:	d143      	bne.n	800a03a <_malloc_r+0xd6>
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	d04b      	beq.n	800a04e <_malloc_r+0xea>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	4639      	mov	r1, r7
 8009fba:	4630      	mov	r0, r6
 8009fbc:	eb04 0903 	add.w	r9, r4, r3
 8009fc0:	f000 fb5e 	bl	800a680 <_sbrk_r>
 8009fc4:	4581      	cmp	r9, r0
 8009fc6:	d142      	bne.n	800a04e <_malloc_r+0xea>
 8009fc8:	6821      	ldr	r1, [r4, #0]
 8009fca:	4630      	mov	r0, r6
 8009fcc:	1a6d      	subs	r5, r5, r1
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7ff ffa6 	bl	8009f20 <sbrk_aligned>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d03a      	beq.n	800a04e <_malloc_r+0xea>
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	442b      	add	r3, r5
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	bb62      	cbnz	r2, 800a040 <_malloc_r+0xdc>
 8009fe6:	f8c8 7000 	str.w	r7, [r8]
 8009fea:	e00f      	b.n	800a00c <_malloc_r+0xa8>
 8009fec:	6822      	ldr	r2, [r4, #0]
 8009fee:	1b52      	subs	r2, r2, r5
 8009ff0:	d420      	bmi.n	800a034 <_malloc_r+0xd0>
 8009ff2:	2a0b      	cmp	r2, #11
 8009ff4:	d917      	bls.n	800a026 <_malloc_r+0xc2>
 8009ff6:	1961      	adds	r1, r4, r5
 8009ff8:	42a3      	cmp	r3, r4
 8009ffa:	6025      	str	r5, [r4, #0]
 8009ffc:	bf18      	it	ne
 8009ffe:	6059      	strne	r1, [r3, #4]
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	bf08      	it	eq
 800a004:	f8c8 1000 	streq.w	r1, [r8]
 800a008:	5162      	str	r2, [r4, r5]
 800a00a:	604b      	str	r3, [r1, #4]
 800a00c:	4630      	mov	r0, r6
 800a00e:	f000 f82f 	bl	800a070 <__malloc_unlock>
 800a012:	f104 000b 	add.w	r0, r4, #11
 800a016:	1d23      	adds	r3, r4, #4
 800a018:	f020 0007 	bic.w	r0, r0, #7
 800a01c:	1ac2      	subs	r2, r0, r3
 800a01e:	bf1c      	itt	ne
 800a020:	1a1b      	subne	r3, r3, r0
 800a022:	50a3      	strne	r3, [r4, r2]
 800a024:	e7af      	b.n	8009f86 <_malloc_r+0x22>
 800a026:	6862      	ldr	r2, [r4, #4]
 800a028:	42a3      	cmp	r3, r4
 800a02a:	bf0c      	ite	eq
 800a02c:	f8c8 2000 	streq.w	r2, [r8]
 800a030:	605a      	strne	r2, [r3, #4]
 800a032:	e7eb      	b.n	800a00c <_malloc_r+0xa8>
 800a034:	4623      	mov	r3, r4
 800a036:	6864      	ldr	r4, [r4, #4]
 800a038:	e7ae      	b.n	8009f98 <_malloc_r+0x34>
 800a03a:	463c      	mov	r4, r7
 800a03c:	687f      	ldr	r7, [r7, #4]
 800a03e:	e7b6      	b.n	8009fae <_malloc_r+0x4a>
 800a040:	461a      	mov	r2, r3
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	42a3      	cmp	r3, r4
 800a046:	d1fb      	bne.n	800a040 <_malloc_r+0xdc>
 800a048:	2300      	movs	r3, #0
 800a04a:	6053      	str	r3, [r2, #4]
 800a04c:	e7de      	b.n	800a00c <_malloc_r+0xa8>
 800a04e:	230c      	movs	r3, #12
 800a050:	4630      	mov	r0, r6
 800a052:	6033      	str	r3, [r6, #0]
 800a054:	f000 f80c 	bl	800a070 <__malloc_unlock>
 800a058:	e794      	b.n	8009f84 <_malloc_r+0x20>
 800a05a:	6005      	str	r5, [r0, #0]
 800a05c:	e7d6      	b.n	800a00c <_malloc_r+0xa8>
 800a05e:	bf00      	nop
 800a060:	20001828 	.word	0x20001828

0800a064 <__malloc_lock>:
 800a064:	4801      	ldr	r0, [pc, #4]	@ (800a06c <__malloc_lock+0x8>)
 800a066:	f7ff bf11 	b.w	8009e8c <__retarget_lock_acquire_recursive>
 800a06a:	bf00      	nop
 800a06c:	20001820 	.word	0x20001820

0800a070 <__malloc_unlock>:
 800a070:	4801      	ldr	r0, [pc, #4]	@ (800a078 <__malloc_unlock+0x8>)
 800a072:	f7ff bf0c 	b.w	8009e8e <__retarget_lock_release_recursive>
 800a076:	bf00      	nop
 800a078:	20001820 	.word	0x20001820

0800a07c <__ssputs_r>:
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	461f      	mov	r7, r3
 800a082:	688e      	ldr	r6, [r1, #8]
 800a084:	4682      	mov	sl, r0
 800a086:	42be      	cmp	r6, r7
 800a088:	460c      	mov	r4, r1
 800a08a:	4690      	mov	r8, r2
 800a08c:	680b      	ldr	r3, [r1, #0]
 800a08e:	d82d      	bhi.n	800a0ec <__ssputs_r+0x70>
 800a090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a094:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a098:	d026      	beq.n	800a0e8 <__ssputs_r+0x6c>
 800a09a:	6965      	ldr	r5, [r4, #20]
 800a09c:	6909      	ldr	r1, [r1, #16]
 800a09e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0a2:	eba3 0901 	sub.w	r9, r3, r1
 800a0a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0aa:	1c7b      	adds	r3, r7, #1
 800a0ac:	444b      	add	r3, r9
 800a0ae:	106d      	asrs	r5, r5, #1
 800a0b0:	429d      	cmp	r5, r3
 800a0b2:	bf38      	it	cc
 800a0b4:	461d      	movcc	r5, r3
 800a0b6:	0553      	lsls	r3, r2, #21
 800a0b8:	d527      	bpl.n	800a10a <__ssputs_r+0x8e>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7ff ff52 	bl	8009f64 <_malloc_r>
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	b360      	cbz	r0, 800a11e <__ssputs_r+0xa2>
 800a0c4:	464a      	mov	r2, r9
 800a0c6:	6921      	ldr	r1, [r4, #16]
 800a0c8:	f000 faf8 	bl	800a6bc <memcpy>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	6126      	str	r6, [r4, #16]
 800a0da:	444e      	add	r6, r9
 800a0dc:	6026      	str	r6, [r4, #0]
 800a0de:	463e      	mov	r6, r7
 800a0e0:	6165      	str	r5, [r4, #20]
 800a0e2:	eba5 0509 	sub.w	r5, r5, r9
 800a0e6:	60a5      	str	r5, [r4, #8]
 800a0e8:	42be      	cmp	r6, r7
 800a0ea:	d900      	bls.n	800a0ee <__ssputs_r+0x72>
 800a0ec:	463e      	mov	r6, r7
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	6820      	ldr	r0, [r4, #0]
 800a0f4:	f000 faaa 	bl	800a64c <memmove>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	68a3      	ldr	r3, [r4, #8]
 800a0fc:	1b9b      	subs	r3, r3, r6
 800a0fe:	60a3      	str	r3, [r4, #8]
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	4433      	add	r3, r6
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	462a      	mov	r2, r5
 800a10c:	f000 fae4 	bl	800a6d8 <_realloc_r>
 800a110:	4606      	mov	r6, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	d1e0      	bne.n	800a0d8 <__ssputs_r+0x5c>
 800a116:	4650      	mov	r0, sl
 800a118:	6921      	ldr	r1, [r4, #16]
 800a11a:	f7ff feb9 	bl	8009e90 <_free_r>
 800a11e:	230c      	movs	r3, #12
 800a120:	f8ca 3000 	str.w	r3, [sl]
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	f04f 30ff 	mov.w	r0, #4294967295
 800a12a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	e7e9      	b.n	800a106 <__ssputs_r+0x8a>
	...

0800a134 <_svfiprintf_r>:
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	4698      	mov	r8, r3
 800a13a:	898b      	ldrh	r3, [r1, #12]
 800a13c:	4607      	mov	r7, r0
 800a13e:	061b      	lsls	r3, r3, #24
 800a140:	460d      	mov	r5, r1
 800a142:	4614      	mov	r4, r2
 800a144:	b09d      	sub	sp, #116	@ 0x74
 800a146:	d510      	bpl.n	800a16a <_svfiprintf_r+0x36>
 800a148:	690b      	ldr	r3, [r1, #16]
 800a14a:	b973      	cbnz	r3, 800a16a <_svfiprintf_r+0x36>
 800a14c:	2140      	movs	r1, #64	@ 0x40
 800a14e:	f7ff ff09 	bl	8009f64 <_malloc_r>
 800a152:	6028      	str	r0, [r5, #0]
 800a154:	6128      	str	r0, [r5, #16]
 800a156:	b930      	cbnz	r0, 800a166 <_svfiprintf_r+0x32>
 800a158:	230c      	movs	r3, #12
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295
 800a160:	b01d      	add	sp, #116	@ 0x74
 800a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a166:	2340      	movs	r3, #64	@ 0x40
 800a168:	616b      	str	r3, [r5, #20]
 800a16a:	2300      	movs	r3, #0
 800a16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16e:	2320      	movs	r3, #32
 800a170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a174:	2330      	movs	r3, #48	@ 0x30
 800a176:	f04f 0901 	mov.w	r9, #1
 800a17a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a17e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a318 <_svfiprintf_r+0x1e4>
 800a182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a186:	4623      	mov	r3, r4
 800a188:	469a      	mov	sl, r3
 800a18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18e:	b10a      	cbz	r2, 800a194 <_svfiprintf_r+0x60>
 800a190:	2a25      	cmp	r2, #37	@ 0x25
 800a192:	d1f9      	bne.n	800a188 <_svfiprintf_r+0x54>
 800a194:	ebba 0b04 	subs.w	fp, sl, r4
 800a198:	d00b      	beq.n	800a1b2 <_svfiprintf_r+0x7e>
 800a19a:	465b      	mov	r3, fp
 800a19c:	4622      	mov	r2, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f7ff ff6b 	bl	800a07c <__ssputs_r>
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f000 80a7 	beq.w	800a2fa <_svfiprintf_r+0x1c6>
 800a1ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ae:	445a      	add	r2, fp
 800a1b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 809f 	beq.w	800a2fa <_svfiprintf_r+0x1c6>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c6:	f10a 0a01 	add.w	sl, sl, #1
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	9307      	str	r3, [sp, #28]
 800a1ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1d4:	4654      	mov	r4, sl
 800a1d6:	2205      	movs	r2, #5
 800a1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1dc:	484e      	ldr	r0, [pc, #312]	@ (800a318 <_svfiprintf_r+0x1e4>)
 800a1de:	f000 fa5f 	bl	800a6a0 <memchr>
 800a1e2:	9a04      	ldr	r2, [sp, #16]
 800a1e4:	b9d8      	cbnz	r0, 800a21e <_svfiprintf_r+0xea>
 800a1e6:	06d0      	lsls	r0, r2, #27
 800a1e8:	bf44      	itt	mi
 800a1ea:	2320      	movmi	r3, #32
 800a1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1f0:	0711      	lsls	r1, r2, #28
 800a1f2:	bf44      	itt	mi
 800a1f4:	232b      	movmi	r3, #43	@ 0x2b
 800a1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a200:	d015      	beq.n	800a22e <_svfiprintf_r+0xfa>
 800a202:	4654      	mov	r4, sl
 800a204:	2000      	movs	r0, #0
 800a206:	f04f 0c0a 	mov.w	ip, #10
 800a20a:	9a07      	ldr	r2, [sp, #28]
 800a20c:	4621      	mov	r1, r4
 800a20e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a212:	3b30      	subs	r3, #48	@ 0x30
 800a214:	2b09      	cmp	r3, #9
 800a216:	d94b      	bls.n	800a2b0 <_svfiprintf_r+0x17c>
 800a218:	b1b0      	cbz	r0, 800a248 <_svfiprintf_r+0x114>
 800a21a:	9207      	str	r2, [sp, #28]
 800a21c:	e014      	b.n	800a248 <_svfiprintf_r+0x114>
 800a21e:	eba0 0308 	sub.w	r3, r0, r8
 800a222:	fa09 f303 	lsl.w	r3, r9, r3
 800a226:	4313      	orrs	r3, r2
 800a228:	46a2      	mov	sl, r4
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	e7d2      	b.n	800a1d4 <_svfiprintf_r+0xa0>
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	1d19      	adds	r1, r3, #4
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	9103      	str	r1, [sp, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	bfbb      	ittet	lt
 800a23a:	425b      	neglt	r3, r3
 800a23c:	f042 0202 	orrlt.w	r2, r2, #2
 800a240:	9307      	strge	r3, [sp, #28]
 800a242:	9307      	strlt	r3, [sp, #28]
 800a244:	bfb8      	it	lt
 800a246:	9204      	strlt	r2, [sp, #16]
 800a248:	7823      	ldrb	r3, [r4, #0]
 800a24a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a24c:	d10a      	bne.n	800a264 <_svfiprintf_r+0x130>
 800a24e:	7863      	ldrb	r3, [r4, #1]
 800a250:	2b2a      	cmp	r3, #42	@ 0x2a
 800a252:	d132      	bne.n	800a2ba <_svfiprintf_r+0x186>
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	3402      	adds	r4, #2
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	9203      	str	r2, [sp, #12]
 800a25e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a262:	9305      	str	r3, [sp, #20]
 800a264:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a31c <_svfiprintf_r+0x1e8>
 800a268:	2203      	movs	r2, #3
 800a26a:	4650      	mov	r0, sl
 800a26c:	7821      	ldrb	r1, [r4, #0]
 800a26e:	f000 fa17 	bl	800a6a0 <memchr>
 800a272:	b138      	cbz	r0, 800a284 <_svfiprintf_r+0x150>
 800a274:	2240      	movs	r2, #64	@ 0x40
 800a276:	9b04      	ldr	r3, [sp, #16]
 800a278:	eba0 000a 	sub.w	r0, r0, sl
 800a27c:	4082      	lsls	r2, r0
 800a27e:	4313      	orrs	r3, r2
 800a280:	3401      	adds	r4, #1
 800a282:	9304      	str	r3, [sp, #16]
 800a284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a288:	2206      	movs	r2, #6
 800a28a:	4825      	ldr	r0, [pc, #148]	@ (800a320 <_svfiprintf_r+0x1ec>)
 800a28c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a290:	f000 fa06 	bl	800a6a0 <memchr>
 800a294:	2800      	cmp	r0, #0
 800a296:	d036      	beq.n	800a306 <_svfiprintf_r+0x1d2>
 800a298:	4b22      	ldr	r3, [pc, #136]	@ (800a324 <_svfiprintf_r+0x1f0>)
 800a29a:	bb1b      	cbnz	r3, 800a2e4 <_svfiprintf_r+0x1b0>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	3307      	adds	r3, #7
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	9303      	str	r3, [sp, #12]
 800a2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2aa:	4433      	add	r3, r6
 800a2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ae:	e76a      	b.n	800a186 <_svfiprintf_r+0x52>
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2b8:	e7a8      	b.n	800a20c <_svfiprintf_r+0xd8>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f04f 0c0a 	mov.w	ip, #10
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	3401      	adds	r4, #1
 800a2c4:	9305      	str	r3, [sp, #20]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2cc:	3a30      	subs	r2, #48	@ 0x30
 800a2ce:	2a09      	cmp	r2, #9
 800a2d0:	d903      	bls.n	800a2da <_svfiprintf_r+0x1a6>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0c6      	beq.n	800a264 <_svfiprintf_r+0x130>
 800a2d6:	9105      	str	r1, [sp, #20]
 800a2d8:	e7c4      	b.n	800a264 <_svfiprintf_r+0x130>
 800a2da:	4604      	mov	r4, r0
 800a2dc:	2301      	movs	r3, #1
 800a2de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e2:	e7f0      	b.n	800a2c6 <_svfiprintf_r+0x192>
 800a2e4:	ab03      	add	r3, sp, #12
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a328 <_svfiprintf_r+0x1f4>)
 800a2ee:	a904      	add	r1, sp, #16
 800a2f0:	f3af 8000 	nop.w
 800a2f4:	1c42      	adds	r2, r0, #1
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	d1d6      	bne.n	800a2a8 <_svfiprintf_r+0x174>
 800a2fa:	89ab      	ldrh	r3, [r5, #12]
 800a2fc:	065b      	lsls	r3, r3, #25
 800a2fe:	f53f af2d 	bmi.w	800a15c <_svfiprintf_r+0x28>
 800a302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a304:	e72c      	b.n	800a160 <_svfiprintf_r+0x2c>
 800a306:	ab03      	add	r3, sp, #12
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	462a      	mov	r2, r5
 800a30c:	4638      	mov	r0, r7
 800a30e:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <_svfiprintf_r+0x1f4>)
 800a310:	a904      	add	r1, sp, #16
 800a312:	f000 f87d 	bl	800a410 <_printf_i>
 800a316:	e7ed      	b.n	800a2f4 <_svfiprintf_r+0x1c0>
 800a318:	0800a7d6 	.word	0x0800a7d6
 800a31c:	0800a7dc 	.word	0x0800a7dc
 800a320:	0800a7e0 	.word	0x0800a7e0
 800a324:	00000000 	.word	0x00000000
 800a328:	0800a07d 	.word	0x0800a07d

0800a32c <_printf_common>:
 800a32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a330:	4616      	mov	r6, r2
 800a332:	4698      	mov	r8, r3
 800a334:	688a      	ldr	r2, [r1, #8]
 800a336:	690b      	ldr	r3, [r1, #16]
 800a338:	4607      	mov	r7, r0
 800a33a:	4293      	cmp	r3, r2
 800a33c:	bfb8      	it	lt
 800a33e:	4613      	movlt	r3, r2
 800a340:	6033      	str	r3, [r6, #0]
 800a342:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a346:	460c      	mov	r4, r1
 800a348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a34c:	b10a      	cbz	r2, 800a352 <_printf_common+0x26>
 800a34e:	3301      	adds	r3, #1
 800a350:	6033      	str	r3, [r6, #0]
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	0699      	lsls	r1, r3, #26
 800a356:	bf42      	ittt	mi
 800a358:	6833      	ldrmi	r3, [r6, #0]
 800a35a:	3302      	addmi	r3, #2
 800a35c:	6033      	strmi	r3, [r6, #0]
 800a35e:	6825      	ldr	r5, [r4, #0]
 800a360:	f015 0506 	ands.w	r5, r5, #6
 800a364:	d106      	bne.n	800a374 <_printf_common+0x48>
 800a366:	f104 0a19 	add.w	sl, r4, #25
 800a36a:	68e3      	ldr	r3, [r4, #12]
 800a36c:	6832      	ldr	r2, [r6, #0]
 800a36e:	1a9b      	subs	r3, r3, r2
 800a370:	42ab      	cmp	r3, r5
 800a372:	dc2b      	bgt.n	800a3cc <_printf_common+0xa0>
 800a374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a378:	6822      	ldr	r2, [r4, #0]
 800a37a:	3b00      	subs	r3, #0
 800a37c:	bf18      	it	ne
 800a37e:	2301      	movne	r3, #1
 800a380:	0692      	lsls	r2, r2, #26
 800a382:	d430      	bmi.n	800a3e6 <_printf_common+0xba>
 800a384:	4641      	mov	r1, r8
 800a386:	4638      	mov	r0, r7
 800a388:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a38c:	47c8      	blx	r9
 800a38e:	3001      	adds	r0, #1
 800a390:	d023      	beq.n	800a3da <_printf_common+0xae>
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	6922      	ldr	r2, [r4, #16]
 800a396:	f003 0306 	and.w	r3, r3, #6
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	bf14      	ite	ne
 800a39e:	2500      	movne	r5, #0
 800a3a0:	6833      	ldreq	r3, [r6, #0]
 800a3a2:	f04f 0600 	mov.w	r6, #0
 800a3a6:	bf08      	it	eq
 800a3a8:	68e5      	ldreq	r5, [r4, #12]
 800a3aa:	f104 041a 	add.w	r4, r4, #26
 800a3ae:	bf08      	it	eq
 800a3b0:	1aed      	subeq	r5, r5, r3
 800a3b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a3b6:	bf08      	it	eq
 800a3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	bfc4      	itt	gt
 800a3c0:	1a9b      	subgt	r3, r3, r2
 800a3c2:	18ed      	addgt	r5, r5, r3
 800a3c4:	42b5      	cmp	r5, r6
 800a3c6:	d11a      	bne.n	800a3fe <_printf_common+0xd2>
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	e008      	b.n	800a3de <_printf_common+0xb2>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	4641      	mov	r1, r8
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c8      	blx	r9
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d103      	bne.n	800a3e2 <_printf_common+0xb6>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e2:	3501      	adds	r5, #1
 800a3e4:	e7c1      	b.n	800a36a <_printf_common+0x3e>
 800a3e6:	2030      	movs	r0, #48	@ 0x30
 800a3e8:	18e1      	adds	r1, r4, r3
 800a3ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3f4:	4422      	add	r2, r4
 800a3f6:	3302      	adds	r3, #2
 800a3f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a3fc:	e7c2      	b.n	800a384 <_printf_common+0x58>
 800a3fe:	2301      	movs	r3, #1
 800a400:	4622      	mov	r2, r4
 800a402:	4641      	mov	r1, r8
 800a404:	4638      	mov	r0, r7
 800a406:	47c8      	blx	r9
 800a408:	3001      	adds	r0, #1
 800a40a:	d0e6      	beq.n	800a3da <_printf_common+0xae>
 800a40c:	3601      	adds	r6, #1
 800a40e:	e7d9      	b.n	800a3c4 <_printf_common+0x98>

0800a410 <_printf_i>:
 800a410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a414:	7e0f      	ldrb	r7, [r1, #24]
 800a416:	4691      	mov	r9, r2
 800a418:	2f78      	cmp	r7, #120	@ 0x78
 800a41a:	4680      	mov	r8, r0
 800a41c:	460c      	mov	r4, r1
 800a41e:	469a      	mov	sl, r3
 800a420:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a426:	d807      	bhi.n	800a438 <_printf_i+0x28>
 800a428:	2f62      	cmp	r7, #98	@ 0x62
 800a42a:	d80a      	bhi.n	800a442 <_printf_i+0x32>
 800a42c:	2f00      	cmp	r7, #0
 800a42e:	f000 80d1 	beq.w	800a5d4 <_printf_i+0x1c4>
 800a432:	2f58      	cmp	r7, #88	@ 0x58
 800a434:	f000 80b8 	beq.w	800a5a8 <_printf_i+0x198>
 800a438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a43c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a440:	e03a      	b.n	800a4b8 <_printf_i+0xa8>
 800a442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a446:	2b15      	cmp	r3, #21
 800a448:	d8f6      	bhi.n	800a438 <_printf_i+0x28>
 800a44a:	a101      	add	r1, pc, #4	@ (adr r1, 800a450 <_printf_i+0x40>)
 800a44c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a450:	0800a4a9 	.word	0x0800a4a9
 800a454:	0800a4bd 	.word	0x0800a4bd
 800a458:	0800a439 	.word	0x0800a439
 800a45c:	0800a439 	.word	0x0800a439
 800a460:	0800a439 	.word	0x0800a439
 800a464:	0800a439 	.word	0x0800a439
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a439 	.word	0x0800a439
 800a470:	0800a439 	.word	0x0800a439
 800a474:	0800a439 	.word	0x0800a439
 800a478:	0800a439 	.word	0x0800a439
 800a47c:	0800a5bb 	.word	0x0800a5bb
 800a480:	0800a4e7 	.word	0x0800a4e7
 800a484:	0800a575 	.word	0x0800a575
 800a488:	0800a439 	.word	0x0800a439
 800a48c:	0800a439 	.word	0x0800a439
 800a490:	0800a5dd 	.word	0x0800a5dd
 800a494:	0800a439 	.word	0x0800a439
 800a498:	0800a4e7 	.word	0x0800a4e7
 800a49c:	0800a439 	.word	0x0800a439
 800a4a0:	0800a439 	.word	0x0800a439
 800a4a4:	0800a57d 	.word	0x0800a57d
 800a4a8:	6833      	ldr	r3, [r6, #0]
 800a4aa:	1d1a      	adds	r2, r3, #4
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6032      	str	r2, [r6, #0]
 800a4b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e09c      	b.n	800a5f6 <_printf_i+0x1e6>
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	6820      	ldr	r0, [r4, #0]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	6031      	str	r1, [r6, #0]
 800a4c4:	0606      	lsls	r6, r0, #24
 800a4c6:	d501      	bpl.n	800a4cc <_printf_i+0xbc>
 800a4c8:	681d      	ldr	r5, [r3, #0]
 800a4ca:	e003      	b.n	800a4d4 <_printf_i+0xc4>
 800a4cc:	0645      	lsls	r5, r0, #25
 800a4ce:	d5fb      	bpl.n	800a4c8 <_printf_i+0xb8>
 800a4d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4d4:	2d00      	cmp	r5, #0
 800a4d6:	da03      	bge.n	800a4e0 <_printf_i+0xd0>
 800a4d8:	232d      	movs	r3, #45	@ 0x2d
 800a4da:	426d      	negs	r5, r5
 800a4dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4e0:	230a      	movs	r3, #10
 800a4e2:	4858      	ldr	r0, [pc, #352]	@ (800a644 <_printf_i+0x234>)
 800a4e4:	e011      	b.n	800a50a <_printf_i+0xfa>
 800a4e6:	6821      	ldr	r1, [r4, #0]
 800a4e8:	6833      	ldr	r3, [r6, #0]
 800a4ea:	0608      	lsls	r0, r1, #24
 800a4ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4f0:	d402      	bmi.n	800a4f8 <_printf_i+0xe8>
 800a4f2:	0649      	lsls	r1, r1, #25
 800a4f4:	bf48      	it	mi
 800a4f6:	b2ad      	uxthmi	r5, r5
 800a4f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a4fa:	6033      	str	r3, [r6, #0]
 800a4fc:	bf14      	ite	ne
 800a4fe:	230a      	movne	r3, #10
 800a500:	2308      	moveq	r3, #8
 800a502:	4850      	ldr	r0, [pc, #320]	@ (800a644 <_printf_i+0x234>)
 800a504:	2100      	movs	r1, #0
 800a506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a50a:	6866      	ldr	r6, [r4, #4]
 800a50c:	2e00      	cmp	r6, #0
 800a50e:	60a6      	str	r6, [r4, #8]
 800a510:	db05      	blt.n	800a51e <_printf_i+0x10e>
 800a512:	6821      	ldr	r1, [r4, #0]
 800a514:	432e      	orrs	r6, r5
 800a516:	f021 0104 	bic.w	r1, r1, #4
 800a51a:	6021      	str	r1, [r4, #0]
 800a51c:	d04b      	beq.n	800a5b6 <_printf_i+0x1a6>
 800a51e:	4616      	mov	r6, r2
 800a520:	fbb5 f1f3 	udiv	r1, r5, r3
 800a524:	fb03 5711 	mls	r7, r3, r1, r5
 800a528:	5dc7      	ldrb	r7, [r0, r7]
 800a52a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a52e:	462f      	mov	r7, r5
 800a530:	42bb      	cmp	r3, r7
 800a532:	460d      	mov	r5, r1
 800a534:	d9f4      	bls.n	800a520 <_printf_i+0x110>
 800a536:	2b08      	cmp	r3, #8
 800a538:	d10b      	bne.n	800a552 <_printf_i+0x142>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	07df      	lsls	r7, r3, #31
 800a53e:	d508      	bpl.n	800a552 <_printf_i+0x142>
 800a540:	6923      	ldr	r3, [r4, #16]
 800a542:	6861      	ldr	r1, [r4, #4]
 800a544:	4299      	cmp	r1, r3
 800a546:	bfde      	ittt	le
 800a548:	2330      	movle	r3, #48	@ 0x30
 800a54a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a54e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a552:	1b92      	subs	r2, r2, r6
 800a554:	6122      	str	r2, [r4, #16]
 800a556:	464b      	mov	r3, r9
 800a558:	4621      	mov	r1, r4
 800a55a:	4640      	mov	r0, r8
 800a55c:	f8cd a000 	str.w	sl, [sp]
 800a560:	aa03      	add	r2, sp, #12
 800a562:	f7ff fee3 	bl	800a32c <_printf_common>
 800a566:	3001      	adds	r0, #1
 800a568:	d14a      	bne.n	800a600 <_printf_i+0x1f0>
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	b004      	add	sp, #16
 800a570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	f043 0320 	orr.w	r3, r3, #32
 800a57a:	6023      	str	r3, [r4, #0]
 800a57c:	2778      	movs	r7, #120	@ 0x78
 800a57e:	4832      	ldr	r0, [pc, #200]	@ (800a648 <_printf_i+0x238>)
 800a580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	6831      	ldr	r1, [r6, #0]
 800a588:	061f      	lsls	r7, r3, #24
 800a58a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a58e:	d402      	bmi.n	800a596 <_printf_i+0x186>
 800a590:	065f      	lsls	r7, r3, #25
 800a592:	bf48      	it	mi
 800a594:	b2ad      	uxthmi	r5, r5
 800a596:	6031      	str	r1, [r6, #0]
 800a598:	07d9      	lsls	r1, r3, #31
 800a59a:	bf44      	itt	mi
 800a59c:	f043 0320 	orrmi.w	r3, r3, #32
 800a5a0:	6023      	strmi	r3, [r4, #0]
 800a5a2:	b11d      	cbz	r5, 800a5ac <_printf_i+0x19c>
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	e7ad      	b.n	800a504 <_printf_i+0xf4>
 800a5a8:	4826      	ldr	r0, [pc, #152]	@ (800a644 <_printf_i+0x234>)
 800a5aa:	e7e9      	b.n	800a580 <_printf_i+0x170>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	f023 0320 	bic.w	r3, r3, #32
 800a5b2:	6023      	str	r3, [r4, #0]
 800a5b4:	e7f6      	b.n	800a5a4 <_printf_i+0x194>
 800a5b6:	4616      	mov	r6, r2
 800a5b8:	e7bd      	b.n	800a536 <_printf_i+0x126>
 800a5ba:	6833      	ldr	r3, [r6, #0]
 800a5bc:	6825      	ldr	r5, [r4, #0]
 800a5be:	1d18      	adds	r0, r3, #4
 800a5c0:	6961      	ldr	r1, [r4, #20]
 800a5c2:	6030      	str	r0, [r6, #0]
 800a5c4:	062e      	lsls	r6, r5, #24
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	d501      	bpl.n	800a5ce <_printf_i+0x1be>
 800a5ca:	6019      	str	r1, [r3, #0]
 800a5cc:	e002      	b.n	800a5d4 <_printf_i+0x1c4>
 800a5ce:	0668      	lsls	r0, r5, #25
 800a5d0:	d5fb      	bpl.n	800a5ca <_printf_i+0x1ba>
 800a5d2:	8019      	strh	r1, [r3, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4616      	mov	r6, r2
 800a5d8:	6123      	str	r3, [r4, #16]
 800a5da:	e7bc      	b.n	800a556 <_printf_i+0x146>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	2100      	movs	r1, #0
 800a5e0:	1d1a      	adds	r2, r3, #4
 800a5e2:	6032      	str	r2, [r6, #0]
 800a5e4:	681e      	ldr	r6, [r3, #0]
 800a5e6:	6862      	ldr	r2, [r4, #4]
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f000 f859 	bl	800a6a0 <memchr>
 800a5ee:	b108      	cbz	r0, 800a5f4 <_printf_i+0x1e4>
 800a5f0:	1b80      	subs	r0, r0, r6
 800a5f2:	6060      	str	r0, [r4, #4]
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5fe:	e7aa      	b.n	800a556 <_printf_i+0x146>
 800a600:	4632      	mov	r2, r6
 800a602:	4649      	mov	r1, r9
 800a604:	4640      	mov	r0, r8
 800a606:	6923      	ldr	r3, [r4, #16]
 800a608:	47d0      	blx	sl
 800a60a:	3001      	adds	r0, #1
 800a60c:	d0ad      	beq.n	800a56a <_printf_i+0x15a>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	079b      	lsls	r3, r3, #30
 800a612:	d413      	bmi.n	800a63c <_printf_i+0x22c>
 800a614:	68e0      	ldr	r0, [r4, #12]
 800a616:	9b03      	ldr	r3, [sp, #12]
 800a618:	4298      	cmp	r0, r3
 800a61a:	bfb8      	it	lt
 800a61c:	4618      	movlt	r0, r3
 800a61e:	e7a6      	b.n	800a56e <_printf_i+0x15e>
 800a620:	2301      	movs	r3, #1
 800a622:	4632      	mov	r2, r6
 800a624:	4649      	mov	r1, r9
 800a626:	4640      	mov	r0, r8
 800a628:	47d0      	blx	sl
 800a62a:	3001      	adds	r0, #1
 800a62c:	d09d      	beq.n	800a56a <_printf_i+0x15a>
 800a62e:	3501      	adds	r5, #1
 800a630:	68e3      	ldr	r3, [r4, #12]
 800a632:	9903      	ldr	r1, [sp, #12]
 800a634:	1a5b      	subs	r3, r3, r1
 800a636:	42ab      	cmp	r3, r5
 800a638:	dcf2      	bgt.n	800a620 <_printf_i+0x210>
 800a63a:	e7eb      	b.n	800a614 <_printf_i+0x204>
 800a63c:	2500      	movs	r5, #0
 800a63e:	f104 0619 	add.w	r6, r4, #25
 800a642:	e7f5      	b.n	800a630 <_printf_i+0x220>
 800a644:	0800a7e7 	.word	0x0800a7e7
 800a648:	0800a7f8 	.word	0x0800a7f8

0800a64c <memmove>:
 800a64c:	4288      	cmp	r0, r1
 800a64e:	b510      	push	{r4, lr}
 800a650:	eb01 0402 	add.w	r4, r1, r2
 800a654:	d902      	bls.n	800a65c <memmove+0x10>
 800a656:	4284      	cmp	r4, r0
 800a658:	4623      	mov	r3, r4
 800a65a:	d807      	bhi.n	800a66c <memmove+0x20>
 800a65c:	1e43      	subs	r3, r0, #1
 800a65e:	42a1      	cmp	r1, r4
 800a660:	d008      	beq.n	800a674 <memmove+0x28>
 800a662:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a66a:	e7f8      	b.n	800a65e <memmove+0x12>
 800a66c:	4601      	mov	r1, r0
 800a66e:	4402      	add	r2, r0
 800a670:	428a      	cmp	r2, r1
 800a672:	d100      	bne.n	800a676 <memmove+0x2a>
 800a674:	bd10      	pop	{r4, pc}
 800a676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a67a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a67e:	e7f7      	b.n	800a670 <memmove+0x24>

0800a680 <_sbrk_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	2300      	movs	r3, #0
 800a684:	4d05      	ldr	r5, [pc, #20]	@ (800a69c <_sbrk_r+0x1c>)
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	602b      	str	r3, [r5, #0]
 800a68c:	f7f6 fc4a 	bl	8000f24 <_sbrk>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_sbrk_r+0x1a>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_sbrk_r+0x1a>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	2000181c 	.word	0x2000181c

0800a6a0 <memchr>:
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	b510      	push	{r4, lr}
 800a6a4:	b2c9      	uxtb	r1, r1
 800a6a6:	4402      	add	r2, r0
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	d101      	bne.n	800a6b2 <memchr+0x12>
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	e003      	b.n	800a6ba <memchr+0x1a>
 800a6b2:	7804      	ldrb	r4, [r0, #0]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	428c      	cmp	r4, r1
 800a6b8:	d1f6      	bne.n	800a6a8 <memchr+0x8>
 800a6ba:	bd10      	pop	{r4, pc}

0800a6bc <memcpy>:
 800a6bc:	440a      	add	r2, r1
 800a6be:	4291      	cmp	r1, r2
 800a6c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c4:	d100      	bne.n	800a6c8 <memcpy+0xc>
 800a6c6:	4770      	bx	lr
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ce:	4291      	cmp	r1, r2
 800a6d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d4:	d1f9      	bne.n	800a6ca <memcpy+0xe>
 800a6d6:	bd10      	pop	{r4, pc}

0800a6d8 <_realloc_r>:
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	4607      	mov	r7, r0
 800a6de:	4614      	mov	r4, r2
 800a6e0:	460d      	mov	r5, r1
 800a6e2:	b921      	cbnz	r1, 800a6ee <_realloc_r+0x16>
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ea:	f7ff bc3b 	b.w	8009f64 <_malloc_r>
 800a6ee:	b92a      	cbnz	r2, 800a6fc <_realloc_r+0x24>
 800a6f0:	f7ff fbce 	bl	8009e90 <_free_r>
 800a6f4:	4625      	mov	r5, r4
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6fc:	f000 f81a 	bl	800a734 <_malloc_usable_size_r>
 800a700:	4284      	cmp	r4, r0
 800a702:	4606      	mov	r6, r0
 800a704:	d802      	bhi.n	800a70c <_realloc_r+0x34>
 800a706:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a70a:	d8f4      	bhi.n	800a6f6 <_realloc_r+0x1e>
 800a70c:	4621      	mov	r1, r4
 800a70e:	4638      	mov	r0, r7
 800a710:	f7ff fc28 	bl	8009f64 <_malloc_r>
 800a714:	4680      	mov	r8, r0
 800a716:	b908      	cbnz	r0, 800a71c <_realloc_r+0x44>
 800a718:	4645      	mov	r5, r8
 800a71a:	e7ec      	b.n	800a6f6 <_realloc_r+0x1e>
 800a71c:	42b4      	cmp	r4, r6
 800a71e:	4622      	mov	r2, r4
 800a720:	4629      	mov	r1, r5
 800a722:	bf28      	it	cs
 800a724:	4632      	movcs	r2, r6
 800a726:	f7ff ffc9 	bl	800a6bc <memcpy>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4638      	mov	r0, r7
 800a72e:	f7ff fbaf 	bl	8009e90 <_free_r>
 800a732:	e7f1      	b.n	800a718 <_realloc_r+0x40>

0800a734 <_malloc_usable_size_r>:
 800a734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a738:	1f18      	subs	r0, r3, #4
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	bfbc      	itt	lt
 800a73e:	580b      	ldrlt	r3, [r1, r0]
 800a740:	18c0      	addlt	r0, r0, r3
 800a742:	4770      	bx	lr

0800a744 <_init>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	bf00      	nop
 800a748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a74a:	bc08      	pop	{r3}
 800a74c:	469e      	mov	lr, r3
 800a74e:	4770      	bx	lr

0800a750 <_fini>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	bf00      	nop
 800a754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a756:	bc08      	pop	{r3}
 800a758:	469e      	mov	lr, r3
 800a75a:	4770      	bx	lr
