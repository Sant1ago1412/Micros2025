
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009e3c  08009e3c  0000ae3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eec  08009eec  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009eec  08009eec  0000b1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009eec  08009eec  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eec  08009eec  0000aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ef0  08009ef0  0000aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009ef4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001610  200001d4  0800a0c8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  0800a0c8  0000b7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001404b  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a22  00000000  00000000  0001f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00022c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df0  00000000  00000000  00023ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1be  00000000  00000000  00024cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178e9  00000000  00000000  0003fe7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927d0  00000000  00000000  00057767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9f37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  000e9f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000eef84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009e24 	.word	0x08009e24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	08009e24 	.word	0x08009e24

0800014c <SendInfo>:
 */

#include "UnerProtocol.h"


void SendInfo(uint8_t bufferAux[],uint8_t bytes){
 800014c:	b480      	push	{r7}
 800014e:	b08d      	sub	sp, #52	@ 0x34
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8000158:	2300      	movs	r3, #0
 800015a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800015e:	2300      	movs	r3, #0
 8000160:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000164:	2300      	movs	r3, #0
 8000166:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800016a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800016e:	1c5a      	adds	r2, r3, #1
 8000170:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000174:	3330      	adds	r3, #48	@ 0x30
 8000176:	443b      	add	r3, r7
 8000178:	2255      	movs	r2, #85	@ 0x55
 800017a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800017e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000182:	1c5a      	adds	r2, r3, #1
 8000184:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000188:	3330      	adds	r3, #48	@ 0x30
 800018a:	443b      	add	r3, r7
 800018c:	224e      	movs	r2, #78	@ 0x4e
 800018e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800019c:	3330      	adds	r3, #48	@ 0x30
 800019e:	443b      	add	r3, r7
 80001a0:	2245      	movs	r2, #69	@ 0x45
 80001a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80001a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001b0:	3330      	adds	r3, #48	@ 0x30
 80001b2:	443b      	add	r3, r7
 80001b4:	2252      	movs	r2, #82	@ 0x52
 80001b6:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 80001ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001c4:	3330      	adds	r3, #48	@ 0x30
 80001c6:	443b      	add	r3, r7
 80001c8:	78fa      	ldrb	r2, [r7, #3]
 80001ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80001ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001d2:	1c5a      	adds	r2, r3, #1
 80001d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001d8:	3330      	adds	r3, #48	@ 0x30
 80001da:	443b      	add	r3, r7
 80001dc:	223a      	movs	r2, #58	@ 0x3a
 80001de:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80001e8:	e012      	b.n	8000210 <SendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 80001ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	441a      	add	r2, r3
 80001f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001f6:	1c59      	adds	r1, r3, #1
 80001f8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80001fc:	7812      	ldrb	r2, [r2, #0]
 80001fe:	3330      	adds	r3, #48	@ 0x30
 8000200:	443b      	add	r3, r7
 8000202:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 8000206:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800020a:	3301      	adds	r3, #1
 800020c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000210:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000214:	78fb      	ldrb	r3, [r7, #3]
 8000216:	3b01      	subs	r3, #1
 8000218:	429a      	cmp	r2, r3
 800021a:	dbe6      	blt.n	80001ea <SendInfo+0x9e>

    cks=0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8000222:	2300      	movs	r3, #0
 8000224:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000228:	e021      	b.n	800026e <SendInfo+0x122>
        cks^= bufAux[i];
 800022a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800022e:	3330      	adds	r3, #48	@ 0x30
 8000230:	443b      	add	r3, r7
 8000232:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800023a:	4053      	eors	r3, r2
 800023c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 8000240:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <SendInfo+0x15c>)
 8000246:	795b      	ldrb	r3, [r3, #5]
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	b2c8      	uxtb	r0, r1
 800024c:	4916      	ldr	r1, [pc, #88]	@ (80002a8 <SendInfo+0x15c>)
 800024e:	7148      	strb	r0, [r1, #5]
 8000250:	4619      	mov	r1, r3
 8000252:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000256:	443b      	add	r3, r7
 8000258:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <SendInfo+0x15c>)
 800025e:	440b      	add	r3, r1
 8000260:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(i=0 ;i<indiceAux;i++){
 8000264:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000268:	3301      	adds	r3, #1
 800026a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800026e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000276:	429a      	cmp	r2, r3
 8000278:	d3d7      	bcc.n	800022a <SendInfo+0xde>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <SendInfo+0x15c>)
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	b2d1      	uxtb	r1, r2
 8000282:	4a09      	ldr	r2, [pc, #36]	@ (80002a8 <SendInfo+0x15c>)
 8000284:	7151      	strb	r1, [r2, #5]
 8000286:	461a      	mov	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <SendInfo+0x15c>)
 800028a:	4413      	add	r3, r2
 800028c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000290:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

     datosComSerie.bytesTosend=indiceAux;
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <SendInfo+0x15c>)
 8000296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800029a:	f882 3207 	strb.w	r3, [r2, #519]	@ 0x207

}
 800029e:	bf00      	nop
 80002a0:	3734      	adds	r7, #52	@ 0x34
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200002b0 	.word	0x200002b0

080002ac <DecodeHeader>:

void DecodeHeader(_sDato *datosCom){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80002ba:	e0e2      	b.n	8000482 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80002bc:	4b76      	ldr	r3, [pc, #472]	@ (8000498 <DecodeHeader+0x1ec>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	f200 80d7 	bhi.w	8000474 <DecodeHeader+0x1c8>
 80002c6:	a201      	add	r2, pc, #4	@ (adr r2, 80002cc <DecodeHeader+0x20>)
 80002c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002cc:	080002e9 	.word	0x080002e9
 80002d0:	08000311 	.word	0x08000311
 80002d4:	08000345 	.word	0x08000345
 80002d8:	08000379 	.word	0x08000379
 80002dc:	080003ad 	.word	0x080003ad
 80002e0:	080003d5 	.word	0x080003d5
 80002e4:	08000417 	.word	0x08000417
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	b2d1      	uxtb	r1, r2
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	7111      	strb	r1, [r2, #4]
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	79db      	ldrb	r3, [r3, #7]
 80002fc:	2b55      	cmp	r3, #85	@ 0x55
 80002fe:	f040 80bd 	bne.w	800047c <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000302:	4b65      	ldr	r3, [pc, #404]	@ (8000498 <DecodeHeader+0x1ec>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800030e:	e0b5      	b.n	800047c <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	791b      	ldrb	r3, [r3, #4]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	b2d1      	uxtb	r1, r2
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7111      	strb	r1, [r2, #4]
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	79db      	ldrb	r3, [r3, #7]
 8000324:	2b4e      	cmp	r3, #78	@ 0x4e
 8000326:	d103      	bne.n	8000330 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000328:	4b5b      	ldr	r3, [pc, #364]	@ (8000498 <DecodeHeader+0x1ec>)
 800032a:	2202      	movs	r2, #2
 800032c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800032e:	e0a8      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	3b01      	subs	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800033c:	4b56      	ldr	r3, [pc, #344]	@ (8000498 <DecodeHeader+0x1ec>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
                break;
 8000342:	e09e      	b.n	8000482 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	b2d1      	uxtb	r1, r2
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7111      	strb	r1, [r2, #4]
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	79db      	ldrb	r3, [r3, #7]
 8000358:	2b45      	cmp	r3, #69	@ 0x45
 800035a:	d103      	bne.n	8000364 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800035c:	4b4e      	ldr	r3, [pc, #312]	@ (8000498 <DecodeHeader+0x1ec>)
 800035e:	2203      	movs	r2, #3
 8000360:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000362:	e08e      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000370:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <DecodeHeader+0x1ec>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
                break;
 8000376:	e084      	b.n	8000482 <DecodeHeader+0x1d6>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	b2d1      	uxtb	r1, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	7111      	strb	r1, [r2, #4]
 8000384:	461a      	mov	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	79db      	ldrb	r3, [r3, #7]
 800038c:	2b52      	cmp	r3, #82	@ 0x52
 800038e:	d103      	bne.n	8000398 <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000390:	4b41      	ldr	r3, [pc, #260]	@ (8000498 <DecodeHeader+0x1ec>)
 8000392:	2204      	movs	r2, #4
 8000394:	701a      	strb	r2, [r3, #0]
				else{
					datosCom->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 8000396:	e074      	b.n	8000482 <DecodeHeader+0x1d6>
					datosCom->indexReadRx--;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	3b01      	subs	r3, #1
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80003a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000498 <DecodeHeader+0x1ec>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
            break;
 80003aa:	e06a      	b.n	8000482 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791a      	ldrb	r2, [r3, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	b2d1      	uxtb	r1, r2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7111      	strb	r1, [r2, #4]
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	79da      	ldrb	r2, [r3, #7]
 80003c8:	4b34      	ldr	r3, [pc, #208]	@ (800049c <DecodeHeader+0x1f0>)
 80003ca:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80003cc:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ce:	2205      	movs	r2, #5
 80003d0:	701a      	strb	r2, [r3, #0]
                break;
 80003d2:	e056      	b.n	8000482 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	791b      	ldrb	r3, [r3, #4]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	b2d1      	uxtb	r1, r2
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7111      	strb	r1, [r2, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	79db      	ldrb	r3, [r3, #7]
 80003e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80003ea:	d10a      	bne.n	8000402 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ee:	2206      	movs	r2, #6
 80003f0:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003f2:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <DecodeHeader+0x1f0>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000400:	e03f      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800040e:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <DecodeHeader+0x1ec>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
                break;
 8000414:	e035      	b.n	8000482 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <DecodeHeader+0x1f0>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d90f      	bls.n	800043e <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	b2d1      	uxtb	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7111      	strb	r1, [r2, #4]
 800042a:	461a      	mov	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	79da      	ldrb	r2, [r3, #7]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	4053      	eors	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <DecodeHeader+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	3b01      	subs	r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <DecodeHeader+0x1f0>)
 8000448:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <DecodeHeader+0x1f0>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d116      	bne.n	8000480 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <DecodeHeader+0x1ec>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	440b      	add	r3, r1
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	429a      	cmp	r2, r3
 800046a:	d109      	bne.n	8000480 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f817 	bl	80004a0 <decodeData>
                    }
                }

                break;
 8000472:	e005      	b.n	8000480 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <DecodeHeader+0x1ec>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
                break;
 800047a:	e002      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 800047c:	bf00      	nop
 800047e:	e000      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 8000480:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	7bfa      	ldrb	r2, [r7, #15]
 8000488:	429a      	cmp	r2, r3
 800048a:	f47f af17 	bne.w	80002bc <DecodeHeader+0x10>
        }
    }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200004b8 	.word	0x200004b8
 800049c:	200001f0 	.word	0x200001f0

080004a0 <decodeData>:



void decodeData(_sDato *datosCom){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	77bb      	strb	r3, [r7, #30]
 80004ac:	2300      	movs	r3, #0
 80004ae:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	785b      	ldrb	r3, [r3, #1]
 80004b4:	3302      	adds	r3, #2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	2bf2      	cmp	r3, #242	@ 0xf2
 80004be:	d024      	beq.n	800050a <decodeData+0x6a>
 80004c0:	2bf2      	cmp	r3, #242	@ 0xf2
 80004c2:	dc2d      	bgt.n	8000520 <decodeData+0x80>
 80004c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80004c6:	d002      	beq.n	80004ce <decodeData+0x2e>
 80004c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80004ca:	d00b      	beq.n	80004e4 <decodeData+0x44>
 80004cc:	e028      	b.n	8000520 <decodeData+0x80>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80004ce:	7fbb      	ldrb	r3, [r7, #30]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	77ba      	strb	r2, [r7, #30]
 80004d4:	3320      	adds	r3, #32
 80004d6:	443b      	add	r3, r7
 80004d8:	22f0      	movs	r2, #240	@ 0xf0
 80004da:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80004de:	2302      	movs	r3, #2
 80004e0:	77fb      	strb	r3, [r7, #31]

    break;
 80004e2:	e028      	b.n	8000536 <decodeData+0x96>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80004e4:	7fbb      	ldrb	r3, [r7, #30]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	77ba      	strb	r2, [r7, #30]
 80004ea:	3320      	adds	r3, #32
 80004ec:	443b      	add	r3, r7
 80004ee:	22f1      	movs	r2, #241	@ 0xf1
 80004f0:	f803 2c18 	strb.w	r2, [r3, #-24]
		bufAux[indiceAux++]=0x02;
 80004f4:	7fbb      	ldrb	r3, [r7, #30]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	77ba      	strb	r2, [r7, #30]
 80004fa:	3320      	adds	r3, #32
 80004fc:	443b      	add	r3, r7
 80004fe:	2202      	movs	r2, #2
 8000500:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x03;
 8000504:	2303      	movs	r3, #3
 8000506:	77fb      	strb	r3, [r7, #31]

    break;
 8000508:	e015      	b.n	8000536 <decodeData+0x96>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 800050a:	7fbb      	ldrb	r3, [r7, #30]
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	77ba      	strb	r2, [r7, #30]
 8000510:	3320      	adds	r3, #32
 8000512:	443b      	add	r3, r7
 8000514:	22f2      	movs	r2, #242	@ 0xf2
 8000516:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x03;
 800051a:	2303      	movs	r3, #3
 800051c:	77fb      	strb	r3, [r7, #31]

    break;
 800051e:	e00a      	b.n	8000536 <decodeData+0x96>

    default:

        bufAux[indiceAux++]=0xFF;
 8000520:	7fbb      	ldrb	r3, [r7, #30]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	77ba      	strb	r2, [r7, #30]
 8000526:	3320      	adds	r3, #32
 8000528:	443b      	add	r3, r7
 800052a:	22ff      	movs	r2, #255	@ 0xff
 800052c:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000530:	2302      	movs	r3, #2
 8000532:	77fb      	strb	r3, [r7, #31]

    break;
 8000534:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 8000536:	7ffa      	ldrb	r2, [r7, #31]
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe04 	bl	800014c <SendInfo>
}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000558:	2300      	movs	r3, #0
 800055a:	81fb      	strh	r3, [r7, #14]
 800055c:	e014      	b.n	8000588 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <datafromUSB+0x50>)
 8000566:	78d2      	ldrb	r2, [r2, #3]
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	4611      	mov	r1, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <datafromUSB+0x50>)
 8000570:	440b      	add	r3, r1
 8000572:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 8000574:	4b09      	ldr	r3, [pc, #36]	@ (800059c <datafromUSB+0x50>)
 8000576:	78db      	ldrb	r3, [r3, #3]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <datafromUSB+0x50>)
 8000580:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000582:	89fb      	ldrh	r3, [r7, #14]
 8000584:	3301      	adds	r3, #1
 8000586:	81fb      	strh	r3, [r7, #14]
 8000588:	89fa      	ldrh	r2, [r7, #14]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3e6      	bcc.n	800055e <datafromUSB+0x12>
  }

}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	200002b0 	.word	0x200002b0

080005a0 <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	77fb      	strb	r3, [r7, #31]
 80005b0:	e00c      	b.n	80005cc <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 80005b2:	7ffa      	ldrb	r2, [r7, #31]
 80005b4:	7ffb      	ldrb	r3, [r7, #31]
 80005b6:	490b      	ldr	r1, [pc, #44]	@ (80005e4 <HAL_ADC_ConvCpltCallback+0x44>)
 80005b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005bc:	f107 000c 	add.w	r0, r7, #12
 80005c0:	4909      	ldr	r1, [pc, #36]	@ (80005e8 <HAL_ADC_ConvCpltCallback+0x48>)
 80005c2:	f008 ff7f 	bl	80094c4 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 80005c6:	7ffb      	ldrb	r3, [r7, #31]
 80005c8:	3301      	adds	r3, #1
 80005ca:	77fb      	strb	r3, [r7, #31]
 80005cc:	7ffb      	ldrb	r3, [r7, #31]
 80005ce:	2b07      	cmp	r3, #7
 80005d0:	d9ef      	bls.n	80005b2 <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80005d8:	f001 fd6a 	bl	80020b0 <HAL_GPIO_TogglePin>
}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200004bc 	.word	0x200004bc
 80005e8:	08009e3c 	.word	0x08009e3c
 80005ec:	40011000 	.word	0x40011000

080005f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	IS10MS=TRUE;
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005fa:	7813      	ldrb	r3, [r2, #0]
 80005fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000600:	7013      	strb	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	200004cc 	.word	0x200004cc

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter=0;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
	uint8_t DMAcounter=0;
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fbbb 	bl	8000d98 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(&datafromUSB);
 8000622:	4825      	ldr	r0, [pc, #148]	@ (80006b8 <main+0xa8>)
 8000624:	f008 fb88 	bl	8008d38 <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <main+0xac>)
 800062a:	2200      	movs	r2, #0
 800062c:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 800062e:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <main+0xac>)
 8000630:	2200      	movs	r2, #0
 8000632:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags=0;
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <main+0xb0>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f849 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f9b1 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000642:	f000 f991 	bl	8000968 <MX_DMA_Init>
  MX_ADC1_Init();
 8000646:	f000 f8a1 	bl	800078c <MX_ADC1_Init>
  MX_TIM2_Init();
 800064a:	f000 f941 	bl	80008d0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800064e:	f008 fa31 	bl	8008ab4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000652:	481c      	ldr	r0, [pc, #112]	@ (80006c4 <main+0xb4>)
 8000654:	f003 ff8a 	bl	800456c <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if(IS10MS){
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <main+0xb0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f8      	beq.n	8000658 <main+0x48>
		if(counter>10){
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b0a      	cmp	r3, #10
 800066a:	d904      	bls.n	8000676 <main+0x66>
			comunicationsTask(&datosComSerie);
 800066c:	4813      	ldr	r0, [pc, #76]	@ (80006bc <main+0xac>)
 800066e:	f000 f9e5 	bl	8000a3c <comunicationsTask>
			counter=0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]
		}
		if(DMAcounter>100){
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	2b64      	cmp	r3, #100	@ 0x64
 800067a:	d906      	bls.n	800068a <main+0x7a>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 800067c:	2208      	movs	r2, #8
 800067e:	4912      	ldr	r1, [pc, #72]	@ (80006c8 <main+0xb8>)
 8000680:	4812      	ldr	r0, [pc, #72]	@ (80006cc <main+0xbc>)
 8000682:	f000 fcc3 	bl	800100c <HAL_ADC_Start_DMA>
			DMAcounter=0;
 8000686:	2300      	movs	r3, #0
 8000688:	71bb      	strb	r3, [r7, #6]
		}
		IS10MS=!IS10MS;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <main+0xb0>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf0c      	ite	eq
 8000698:	2301      	moveq	r3, #1
 800069a:	2300      	movne	r3, #0
 800069c:	b2d9      	uxtb	r1, r3
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <main+0xb0>)
 80006a0:	7813      	ldrb	r3, [r2, #0]
 80006a2:	f361 1386 	bfi	r3, r1, #6, #1
 80006a6:	7013      	strb	r3, [r2, #0]
		counter++;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3301      	adds	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
		DMAcounter++;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	3301      	adds	r3, #1
 80006b2:	71bb      	strb	r3, [r7, #6]
	if(IS10MS){
 80006b4:	e7d0      	b.n	8000658 <main+0x48>
 80006b6:	bf00      	nop
 80006b8:	0800054d 	.word	0x0800054d
 80006bc:	200002b0 	.word	0x200002b0
 80006c0:	200004cc 	.word	0x200004cc
 80006c4:	20000268 	.word	0x20000268
 80006c8:	200004bc 	.word	0x200004bc
 80006cc:	200001f4 	.word	0x200001f4

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006da:	2228      	movs	r2, #40	@ 0x28
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f008 ff12 	bl	8009508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000700:	2301      	movs	r3, #1
 8000702:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800071c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fa3c 	bl	8003ba4 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000732:	f000 f9af 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000746:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fca8 	bl	80040a8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800075e:	f000 f999 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000762:	2312      	movs	r3, #18
 8000764:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800076a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fdf4 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800077e:	f000 f989 	bl	8000a94 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079c:	4b4a      	ldr	r3, [pc, #296]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 800079e:	4a4b      	ldr	r2, [pc, #300]	@ (80008cc <MX_ADC1_Init+0x140>)
 80007a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a2:	4b49      	ldr	r3, [pc, #292]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b47      	ldr	r3, [pc, #284]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b45      	ldr	r3, [pc, #276]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b6:	4b44      	ldr	r3, [pc, #272]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007b8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007be:	4b42      	ldr	r3, [pc, #264]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80007c4:	4b40      	ldr	r3, [pc, #256]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ca:	483f      	ldr	r0, [pc, #252]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007cc:	f000 fb46 	bl	8000e5c <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007d6:	f000 f95d 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007de:	2301      	movs	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007e2:	2307      	movs	r3, #7
 80007e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4837      	ldr	r0, [pc, #220]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80007ec:	f000 fdc6 	bl	800137c <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f94d 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007fe:	2302      	movs	r3, #2
 8000800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4830      	ldr	r0, [pc, #192]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 8000808:	f000 fdb8 	bl	800137c <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000812:	f000 f93f 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000816:	2302      	movs	r3, #2
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4829      	ldr	r0, [pc, #164]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 8000824:	f000 fdaa 	bl	800137c <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800082e:	f000 f931 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000836:	2304      	movs	r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4822      	ldr	r0, [pc, #136]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 8000840:	f000 fd9c 	bl	800137c <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800084a:	f000 f923 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800084e:	2304      	movs	r3, #4
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000852:	2305      	movs	r3, #5
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	481b      	ldr	r0, [pc, #108]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 800085c:	f000 fd8e 	bl	800137c <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000866:	f000 f915 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800086a:	2305      	movs	r3, #5
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800086e:	2306      	movs	r3, #6
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 8000878:	f000 fd80 	bl	800137c <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000882:	f000 f907 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000886:	2306      	movs	r3, #6
 8000888:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800088a:	2307      	movs	r3, #7
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 8000894:	f000 fd72 	bl	800137c <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800089e:	f000 f8f9 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008a2:	2307      	movs	r3, #7
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008a6:	2308      	movs	r3, #8
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_ADC1_Init+0x13c>)
 80008b0:	f000 fd64 	bl	800137c <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80008ba:	f000 f8eb 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001f4 	.word	0x200001f4
 80008cc:	40012400 	.word	0x40012400

080008d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_TIM2_Init+0x94>)
 80008ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_TIM2_Init+0x94>)
 80008f6:	2247      	movs	r2, #71	@ 0x47
 80008f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_TIM2_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000902:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_TIM2_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000916:	f003 fdd9 	bl	80044cc <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000920:	f000 f8b8 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_TIM2_Init+0x94>)
 8000932:	f003 ff5d 	bl	80047f0 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800093c:	f000 f8aa 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_TIM2_Init+0x94>)
 800094e:	f004 f93f 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f89c 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000268 	.word	0x20000268

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_DMA_Init+0x38>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <MX_DMA_Init+0x38>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_DMA_Init+0x38>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200b      	movs	r0, #11
 800098c:	f000 ffcf 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000990:	200b      	movs	r0, #11
 8000992:	f000 ffe8 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009d6:	f043 0320 	orr.w	r3, r3, #32
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_GPIO_Init+0x90>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a06:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_GPIO_Init+0x94>)
 8000a08:	f001 fb3a 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x94>)
 8000a26:	f001 f9a7 	bl	8001d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40011000 	.word	0x40011000

08000a3c <comunicationsTask>:

/* USER CODE BEGIN 4 */

void comunicationsTask(_sDato *datosCom){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	791a      	ldrb	r2, [r3, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	78db      	ldrb	r3, [r3, #3]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d007      	beq.n	8000a62 <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fc2a 	bl	80002ac <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <comunicationsTask+0x50>)
 8000a5a:	78db      	ldrb	r3, [r3, #3]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <comunicationsTask+0x50>)
 8000a60:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	799a      	ldrb	r2, [r3, #6]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d00a      	beq.n	8000a84 <comunicationsTask+0x48>
		CDC_Transmit_FS(&datosComSerie.bufferTx[0], datosComSerie.bytesTosend);
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <comunicationsTask+0x50>)
 8000a70:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <comunicationsTask+0x54>)
 8000a78:	f008 f938 	bl	8008cec <CDC_Transmit_FS>
		datosComSerie.indexReadTx=datosComSerie.indexWriteTx;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <comunicationsTask+0x50>)
 8000a7e:	795a      	ldrb	r2, [r3, #5]
 8000a80:	4b02      	ldr	r3, [pc, #8]	@ (8000a8c <comunicationsTask+0x50>)
 8000a82:	719a      	strb	r2, [r3, #6]
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200002b0 	.word	0x200002b0
 8000a90:	200003b7 	.word	0x200003b7

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_MspInit+0x5c>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_MspInit+0x5c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x5c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x5c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <HAL_MspInit+0x60>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <HAL_MspInit+0x60>)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000

08000b04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <HAL_ADC_MspInit+0xcc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d151      	bne.n	8000bc8 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b24:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <HAL_ADC_MspInit+0xd0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd4 <HAL_ADC_MspInit+0xd0>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <HAL_ADC_MspInit+0xd0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <HAL_ADC_MspInit+0xd0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a24      	ldr	r2, [pc, #144]	@ (8000bd4 <HAL_ADC_MspInit+0xd0>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <HAL_ADC_MspInit+0xd0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b54:	23ff      	movs	r3, #255	@ 0xff
 8000b56:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	481d      	ldr	r0, [pc, #116]	@ (8000bd8 <HAL_ADC_MspInit+0xd4>)
 8000b64:	f001 f908 	bl	8001d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <HAL_ADC_MspInit+0xdc>)
 8000b6c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b86:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b9c:	480f      	ldr	r0, [pc, #60]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000b9e:	f000 fefd 	bl	800199c <HAL_DMA_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ba8:	f7ff ff74 	bl	8000a94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000bb0:	621a      	str	r2, [r3, #32]
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <HAL_ADC_MspInit+0xd8>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2012      	movs	r0, #18
 8000bbe:	f000 feb6 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f000 fecf 	bl	8001966 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40012400 	.word	0x40012400
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	20000224 	.word	0x20000224
 8000be0:	40020008 	.word	0x40020008

08000be4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf4:	d113      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_TIM_Base_MspInit+0x44>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <HAL_TIM_Base_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_TIM_Base_MspInit+0x44>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	201c      	movs	r0, #28
 8000c14:	f000 fe8b 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c18:	201c      	movs	r0, #28
 8000c1a:	f000 fea4 	bl	8001966 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f8d2 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <DMA1_Channel1_IRQHandler+0x10>)
 8000c8a:	f000 ff41 	bl	8001b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000224 	.word	0x20000224

08000c98 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <ADC1_2_IRQHandler+0x10>)
 8000c9e:	f000 fa93 	bl	80011c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001f4 	.word	0x200001f4

08000cac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cb2:	f001 fb32 	bl	800231a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200011a4 	.word	0x200011a4

08000cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <TIM2_IRQHandler+0x10>)
 8000cc6:	f003 fca3 	bl	8004610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000268 	.word	0x20000268

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f008 fc08 	bl	8009518 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20005000 	.word	0x20005000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	200004d0 	.word	0x200004d0
 8000d3c:	200017e8 	.word	0x200017e8

08000d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d4c:	f7ff fff8 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d52:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d68:	4c09      	ldr	r4, [pc, #36]	@ (8000d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d76:	f008 fbd5 	bl	8009524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7a:	f7ff fc49 	bl	8000610 <main>
  bx lr
 8000d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000d88:	08009ef4 	.word	0x08009ef4
  ldr r2, =_sbss
 8000d8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000d90:	200017e4 	.word	0x200017e4

08000d94 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <CAN1_RX1_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 fdb5 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fe74 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fdcd 	bl	8001982 <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 fd95 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x1c>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a03      	ldr	r2, [pc, #12]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200004d4 	.word	0x200004d4

08000e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	@ (8000e58 <HAL_GetTick+0x10>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	200004d4 	.word	0x200004d4

08000e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e0be      	b.n	8000ffc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d109      	bne.n	8000ea0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fe32 	bl	8000b04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fbbd 	bl	8001620 <ADC_ConversionStop_Disable>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8099 	bne.w	8000fea <HAL_ADC_Init+0x18e>
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8095 	bne.w	8000fea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ec8:	f023 0302 	bic.w	r3, r3, #2
 8000ecc:	f043 0202 	orr.w	r2, r3, #2
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000edc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7b1b      	ldrb	r3, [r3, #12]
 8000ee2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ee4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ef4:	d003      	beq.n	8000efe <HAL_ADC_Init+0xa2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d102      	bne.n	8000f04 <HAL_ADC_Init+0xa8>
 8000efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f02:	e000      	b.n	8000f06 <HAL_ADC_Init+0xaa>
 8000f04:	2300      	movs	r3, #0
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7d1b      	ldrb	r3, [r3, #20]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d119      	bne.n	8000f48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7b1b      	ldrb	r3, [r3, #12]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d109      	bne.n	8000f30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	035a      	lsls	r2, r3, #13
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e00b      	b.n	8000f48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f043 0220 	orr.w	r2, r3, #32
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <HAL_ADC_Init+0x1a8>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	68b9      	ldr	r1, [r7, #8]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f78:	d003      	beq.n	8000f82 <HAL_ADC_Init+0x126>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d104      	bne.n	8000f8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	051b      	lsls	r3, r3, #20
 8000f8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f92:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_ADC_Init+0x1ac>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d10b      	bne.n	8000fc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc6:	e018      	b.n	8000ffa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fcc:	f023 0312 	bic.w	r3, r3, #18
 8000fd0:	f043 0210 	orr.w	r2, r3, #16
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe8:	e007      	b.n	8000ffa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	ffe1f7fd 	.word	0xffe1f7fd
 8001008:	ff1f0efe 	.word	0xff1f0efe

0800100c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a64      	ldr	r2, [pc, #400]	@ (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d004      	beq.n	8001030 <HAL_ADC_Start_DMA+0x24>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a63      	ldr	r2, [pc, #396]	@ (80011b8 <HAL_ADC_Start_DMA+0x1ac>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d106      	bne.n	800103e <HAL_ADC_Start_DMA+0x32>
 8001030:	4b60      	ldr	r3, [pc, #384]	@ (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 80b3 	bne.w	80011a4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_ADC_Start_DMA+0x40>
 8001048:	2302      	movs	r3, #2
 800104a:	e0ae      	b.n	80011aa <HAL_ADC_Start_DMA+0x19e>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 fa89 	bl	800156c <ADC_Enable>
 800105a:	4603      	mov	r3, r0
 800105c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f040 809a 	bne.w	800119a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a4e      	ldr	r2, [pc, #312]	@ (80011b8 <HAL_ADC_Start_DMA+0x1ac>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d105      	bne.n	8001090 <HAL_ADC_Start_DMA+0x84>
 8001084:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d115      	bne.n	80010bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d026      	beq.n	80010f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ba:	e01d      	b.n	80010f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a39      	ldr	r2, [pc, #228]	@ (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d004      	beq.n	80010dc <HAL_ADC_Start_DMA+0xd0>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a38      	ldr	r2, [pc, #224]	@ (80011b8 <HAL_ADC_Start_DMA+0x1ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d10d      	bne.n	80010f8 <HAL_ADC_Start_DMA+0xec>
 80010dc:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <HAL_ADC_Start_DMA+0x1a8>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d007      	beq.n	80010f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001108:	f023 0206 	bic.w	r2, r3, #6
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001110:	e002      	b.n	8001118 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a25      	ldr	r2, [pc, #148]	@ (80011bc <HAL_ADC_Start_DMA+0x1b0>)
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_ADC_Start_DMA+0x1b4>)
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a23      	ldr	r2, [pc, #140]	@ (80011c4 <HAL_ADC_Start_DMA+0x1b8>)
 8001136:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f06f 0202 	mvn.w	r2, #2
 8001140:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001150:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a18      	ldr	r0, [r3, #32]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	334c      	adds	r3, #76	@ 0x4c
 800115c:	4619      	mov	r1, r3
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f000 fc75 	bl	8001a50 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001170:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001174:	d108      	bne.n	8001188 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001184:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001186:	e00f      	b.n	80011a8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001196:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001198:	e006      	b.n	80011a8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80011a2:	e001      	b.n	80011a8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40012400 	.word	0x40012400
 80011b8:	40012800 	.word	0x40012800
 80011bc:	080016a3 	.word	0x080016a3
 80011c0:	0800171f 	.word	0x0800171f
 80011c4:	0800173b 	.word	0x0800173b

080011c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f003 0320 	and.w	r3, r3, #32
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d03e      	beq.n	8001268 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d039      	beq.n	8001268 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d105      	bne.n	800120c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001204:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001216:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800121a:	d11d      	bne.n	8001258 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001220:	2b00      	cmp	r3, #0
 8001222:	d119      	bne.n	8001258 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0220 	bic.w	r2, r2, #32
 8001232:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f9a1 	bl	80005a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0212 	mvn.w	r2, #18
 8001266:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	2b00      	cmp	r3, #0
 8001270:	d04d      	beq.n	800130e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d048      	beq.n	800130e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800129e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80012a2:	d012      	beq.n	80012ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d125      	bne.n	80012fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012bc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012c0:	d11d      	bne.n	80012fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d119      	bne.n	80012fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f6:	f043 0201 	orr.w	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fa35 	bl	800176e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 020c 	mvn.w	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d012      	beq.n	800133e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00d      	beq.n	800133e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f812 	bl	8001358 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f06f 0201 	mvn.w	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_ADC_ConfigChannel+0x20>
 8001398:	2302      	movs	r3, #2
 800139a:	e0dc      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1da>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d81c      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b05      	subs	r3, #5
 80013be:	221f      	movs	r2, #31
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4019      	ands	r1, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b05      	subs	r3, #5
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e4:	e03c      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	d81c      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	3b23      	subs	r3, #35	@ 0x23
 8001400:	221f      	movs	r2, #31
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b23      	subs	r3, #35	@ 0x23
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	631a      	str	r2, [r3, #48]	@ 0x30
 8001426:	e01b      	b.n	8001460 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b41      	subs	r3, #65	@ 0x41
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	@ 0x41
 8001454:	fa00 f203 	lsl.w	r2, r0, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b09      	cmp	r3, #9
 8001466:	d91c      	bls.n	80014a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	3b1e      	subs	r3, #30
 800147a:	2207      	movs	r2, #7
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	4019      	ands	r1, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6898      	ldr	r0, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3b1e      	subs	r3, #30
 8001494:	fa00 f203 	lsl.w	r2, r0, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e019      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4019      	ands	r1, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b10      	cmp	r3, #16
 80014dc:	d003      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014e2:	2b11      	cmp	r3, #17
 80014e4:	d132      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001560 <HAL_ADC_ConfigChannel+0x1e4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d125      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d126      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800150c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d11a      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_ADC_ConfigChannel+0x1e8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <HAL_ADC_ConfigChannel+0x1ec>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_ConfigChannel+0x1b2>
 800153a:	e007      	b.n	800154c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001540:	f043 0220 	orr.w	r2, r3, #32
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40012400 	.word	0x40012400
 8001564:	20000000 	.word	0x20000000
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d040      	beq.n	800160c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800159a:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <ADC_Enable+0xac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <ADC_Enable+0xb0>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a8:	e002      	b.n	80015b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015b6:	f7ff fc47 	bl	8000e48 <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	e01f      	b.n	80015fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015be:	f7ff fc43 	bl	8000e48 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d918      	bls.n	80015fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d011      	beq.n	80015fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015de:	f043 0210 	orr.w	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e007      	b.n	800160e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d1d8      	bne.n	80015be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83

08001620 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d12e      	bne.n	8001698 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800164a:	f7ff fbfd 	bl	8000e48 <HAL_GetTick>
 800164e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001650:	e01b      	b.n	800168a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001652:	f7ff fbf9 	bl	8000e48 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d914      	bls.n	800168a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d10d      	bne.n	800168a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	f043 0210 	orr.w	r2, r3, #16
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e007      	b.n	800169a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d0dc      	beq.n	8001652 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d127      	bne.n	800170c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016d2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016d6:	d115      	bne.n	8001704 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7fe ff4b 	bl	80005a0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800170a:	e004      	b.n	8001716 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff fe0a 	bl	8001346 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001746:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	f043 0204 	orr.w	r2, r3, #4
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fe02 	bl	800136a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4906      	ldr	r1, [pc, #24]	@ (8001818 <__NVIC_EnableIRQ+0x34>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	@ (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	@ 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff90 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff2d 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff42 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff35 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e043      	b.n	8001a3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_DMA_Init+0xa8>)
 80019ba:	4413      	add	r3, r2
 80019bc:	4a22      	ldr	r2, [pc, #136]	@ (8001a48 <HAL_DMA_Init+0xac>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	009a      	lsls	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <HAL_DMA_Init+0xb0>)
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	bffdfff8 	.word	0xbffdfff8
 8001a48:	cccccccd 	.word	0xcccccccd
 8001a4c:	40020000 	.word	0x40020000

08001a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_DMA_Start_IT+0x20>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e04b      	b.n	8001b08 <HAL_DMA_Start_IT+0xb8>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d13a      	bne.n	8001afa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2202      	movs	r2, #2
 8001a88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f937 	bl	8001d1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 020e 	orr.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00f      	b.n	8001ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 020a 	orr.w	r2, r2, #10
 8001ae6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e005      	b.n	8001b06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
 8001b04:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d04f      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0xc8>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04a      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a66      	ldr	r2, [pc, #408]	@ (8001d00 <HAL_DMA_IRQHandler+0x1f0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d029      	beq.n	8001bbe <HAL_DMA_IRQHandler+0xae>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_DMA_IRQHandler+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <HAL_DMA_IRQHandler+0xaa>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a63      	ldr	r2, [pc, #396]	@ (8001d08 <HAL_DMA_IRQHandler+0x1f8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0xa4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a62      	ldr	r2, [pc, #392]	@ (8001d0c <HAL_DMA_IRQHandler+0x1fc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d012      	beq.n	8001bae <HAL_DMA_IRQHandler+0x9e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a60      	ldr	r2, [pc, #384]	@ (8001d10 <HAL_DMA_IRQHandler+0x200>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x98>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a5f      	ldr	r2, [pc, #380]	@ (8001d14 <HAL_DMA_IRQHandler+0x204>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <HAL_DMA_IRQHandler+0x92>
 8001b9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ba0:	e00e      	b.n	8001bc0 <HAL_DMA_IRQHandler+0xb0>
 8001ba2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ba6:	e00b      	b.n	8001bc0 <HAL_DMA_IRQHandler+0xb0>
 8001ba8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bac:	e008      	b.n	8001bc0 <HAL_DMA_IRQHandler+0xb0>
 8001bae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bb2:	e005      	b.n	8001bc0 <HAL_DMA_IRQHandler+0xb0>
 8001bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb8:	e002      	b.n	8001bc0 <HAL_DMA_IRQHandler+0xb0>
 8001bba:	2340      	movs	r3, #64	@ 0x40
 8001bbc:	e000      	b.n	8001bc0 <HAL_DMA_IRQHandler+0xb0>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	4a55      	ldr	r2, [pc, #340]	@ (8001d18 <HAL_DMA_IRQHandler+0x208>)
 8001bc2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8094 	beq.w	8001cf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bd6:	e08e      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	2202      	movs	r2, #2
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d056      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x186>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d051      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10b      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020a 	bic.w	r2, r2, #10
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a38      	ldr	r2, [pc, #224]	@ (8001d00 <HAL_DMA_IRQHandler+0x1f0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d029      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x166>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a37      	ldr	r2, [pc, #220]	@ (8001d04 <HAL_DMA_IRQHandler+0x1f4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x162>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a35      	ldr	r2, [pc, #212]	@ (8001d08 <HAL_DMA_IRQHandler+0x1f8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01a      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x15c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a34      	ldr	r2, [pc, #208]	@ (8001d0c <HAL_DMA_IRQHandler+0x1fc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d012      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x156>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a32      	ldr	r2, [pc, #200]	@ (8001d10 <HAL_DMA_IRQHandler+0x200>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x150>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a31      	ldr	r2, [pc, #196]	@ (8001d14 <HAL_DMA_IRQHandler+0x204>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d102      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x14a>
 8001c54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c58:	e00e      	b.n	8001c78 <HAL_DMA_IRQHandler+0x168>
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c5e:	e00b      	b.n	8001c78 <HAL_DMA_IRQHandler+0x168>
 8001c60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c64:	e008      	b.n	8001c78 <HAL_DMA_IRQHandler+0x168>
 8001c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c6a:	e005      	b.n	8001c78 <HAL_DMA_IRQHandler+0x168>
 8001c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c70:	e002      	b.n	8001c78 <HAL_DMA_IRQHandler+0x168>
 8001c72:	2320      	movs	r3, #32
 8001c74:	e000      	b.n	8001c78 <HAL_DMA_IRQHandler+0x168>
 8001c76:	2302      	movs	r3, #2
 8001c78:	4a27      	ldr	r2, [pc, #156]	@ (8001d18 <HAL_DMA_IRQHandler+0x208>)
 8001c7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d034      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c94:	e02f      	b.n	8001cf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d028      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x1e8>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d023      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 020e 	bic.w	r2, r2, #14
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
    }
  }
  return;
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
}
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020008 	.word	0x40020008
 8001d04:	4002001c 	.word	0x4002001c
 8001d08:	40020030 	.word	0x40020030
 8001d0c:	40020044 	.word	0x40020044
 8001d10:	40020058 	.word	0x40020058
 8001d14:	4002006c 	.word	0x4002006c
 8001d18:	40020000 	.word	0x40020000

08001d1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d32:	2101      	movs	r1, #1
 8001d34:	fa01 f202 	lsl.w	r2, r1, r2
 8001d38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d108      	bne.n	8001d5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d5a:	e007      	b.n	8001d6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	60da      	str	r2, [r3, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b08b      	sub	sp, #44	@ 0x2c
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e169      	b.n	8002060 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f040 8158 	bne.w	800205a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a9a      	ldr	r2, [pc, #616]	@ (8002018 <HAL_GPIO_Init+0x2a0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d05e      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001db4:	4a98      	ldr	r2, [pc, #608]	@ (8002018 <HAL_GPIO_Init+0x2a0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d875      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dba:	4a98      	ldr	r2, [pc, #608]	@ (800201c <HAL_GPIO_Init+0x2a4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d058      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a96      	ldr	r2, [pc, #600]	@ (800201c <HAL_GPIO_Init+0x2a4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d86f      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dc6:	4a96      	ldr	r2, [pc, #600]	@ (8002020 <HAL_GPIO_Init+0x2a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d052      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a94      	ldr	r2, [pc, #592]	@ (8002020 <HAL_GPIO_Init+0x2a8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d869      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dd2:	4a94      	ldr	r2, [pc, #592]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d04c      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a92      	ldr	r2, [pc, #584]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d863      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dde:	4a92      	ldr	r2, [pc, #584]	@ (8002028 <HAL_GPIO_Init+0x2b0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d046      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001de4:	4a90      	ldr	r2, [pc, #576]	@ (8002028 <HAL_GPIO_Init+0x2b0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d85d      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d82a      	bhi.n	8001e44 <HAL_GPIO_Init+0xcc>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d859      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_GPIO_Init+0x80>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e5f 	.word	0x08001e5f
 8001e04:	08001ea1 	.word	0x08001ea1
 8001e08:	08001ea7 	.word	0x08001ea7
 8001e0c:	08001ea7 	.word	0x08001ea7
 8001e10:	08001ea7 	.word	0x08001ea7
 8001e14:	08001ea7 	.word	0x08001ea7
 8001e18:	08001ea7 	.word	0x08001ea7
 8001e1c:	08001ea7 	.word	0x08001ea7
 8001e20:	08001ea7 	.word	0x08001ea7
 8001e24:	08001ea7 	.word	0x08001ea7
 8001e28:	08001ea7 	.word	0x08001ea7
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001ea7 	.word	0x08001ea7
 8001e34:	08001ea7 	.word	0x08001ea7
 8001e38:	08001ea7 	.word	0x08001ea7
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e69 	.word	0x08001e69
 8001e44:	4a79      	ldr	r2, [pc, #484]	@ (800202c <HAL_GPIO_Init+0x2b4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4a:	e02c      	b.n	8001ea6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e029      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e024      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	3308      	adds	r3, #8
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e01f      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e01a      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e013      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	611a      	str	r2, [r3, #16]
          break;
 8001e92:	e009      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e94:	2308      	movs	r3, #8
 8001e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	615a      	str	r2, [r3, #20]
          break;
 8001e9e:	e003      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          break;
 8001ea6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	@ 0xff
 8001eac:	d801      	bhi.n	8001eb2 <HAL_GPIO_Init+0x13a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_Init+0x13e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_GPIO_Init+0x14c>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x152>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	3b08      	subs	r3, #8
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	6a39      	ldr	r1, [r7, #32]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80b1 	beq.w	800205a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a4c      	ldr	r2, [pc, #304]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b4a      	ldr	r3, [pc, #296]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f10:	4a48      	ldr	r2, [pc, #288]	@ (8002034 <HAL_GPIO_Init+0x2bc>)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a40      	ldr	r2, [pc, #256]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_GPIO_Init+0x1ec>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800203c <HAL_GPIO_Init+0x2c4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00d      	beq.n	8001f60 <HAL_GPIO_Init+0x1e8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3e      	ldr	r2, [pc, #248]	@ (8002040 <HAL_GPIO_Init+0x2c8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <HAL_GPIO_Init+0x1e4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002044 <HAL_GPIO_Init+0x2cc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_GPIO_Init+0x1e0>
 8001f54:	2303      	movs	r3, #3
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e004      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f64:	2300      	movs	r3, #0
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f76:	492f      	ldr	r1, [pc, #188]	@ (8002034 <HAL_GPIO_Init+0x2bc>)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	492c      	ldr	r1, [pc, #176]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4928      	ldr	r1, [pc, #160]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4922      	ldr	r1, [pc, #136]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	491e      	ldr	r1, [pc, #120]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4918      	ldr	r1, [pc, #96]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4914      	ldr	r1, [pc, #80]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d021      	beq.n	800204c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	490e      	ldr	r1, [pc, #56]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e021      	b.n	800205a <HAL_GPIO_Init+0x2e2>
 8002016:	bf00      	nop
 8002018:	10320000 	.word	0x10320000
 800201c:	10310000 	.word	0x10310000
 8002020:	10220000 	.word	0x10220000
 8002024:	10210000 	.word	0x10210000
 8002028:	10120000 	.word	0x10120000
 800202c:	10110000 	.word	0x10110000
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	40010800 	.word	0x40010800
 800203c:	40010c00 	.word	0x40010c00
 8002040:	40011000 	.word	0x40011000
 8002044:	40011400 	.word	0x40011400
 8002048:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_GPIO_Init+0x304>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	43db      	mvns	r3, r3
 8002054:	4909      	ldr	r1, [pc, #36]	@ (800207c <HAL_GPIO_Init+0x304>)
 8002056:	4013      	ands	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	3301      	adds	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	f47f ae8e 	bne.w	8001d8c <HAL_GPIO_Init+0x14>
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	372c      	adds	r7, #44	@ 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43d9      	mvns	r1, r3
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	400b      	ands	r3, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	611a      	str	r2, [r3, #16]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0e8      	b.n	80022c6 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f006 ff31 	bl	8008f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2203      	movs	r2, #3
 8002112:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fde8 	bl	8004cf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002130:	f002 fdbe 	bl	8004cb0 <USB_CoreInit>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0bf      	b.n	80022c6 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fdec 	bl	8004d2a <USB_SetCurrentMode>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b0      	b.n	80022c6 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e03e      	b.n	80021e8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3311      	adds	r3, #17
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	3310      	adds	r3, #16
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	3313      	adds	r3, #19
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	3320      	adds	r3, #32
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3324      	adds	r3, #36	@ 0x24
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	3301      	adds	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	7bfa      	ldrb	r2, [r7, #15]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3bb      	bcc.n	800216a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e044      	b.n	8002282 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	3301      	adds	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	429a      	cmp	r2, r3
 800228a:	d3b5      	bcc.n	80021f8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002296:	f002 fd54 	bl	8004d42 <USB_DevInit>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e00c      	b.n	80022c6 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 ffd3 	bl	800726a <USB_DevDisconnect>

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_Start+0x16>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e016      	b.n	8002312 <HAL_PCD_Start+0x44>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fcea 	bl	8004cca <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80022f6:	2101      	movs	r1, #1
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f007 f8ac 	bl	8009456 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f004 ffa7 	bl	8007256 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b088      	sub	sp, #32
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f004 ffa9 	bl	800727e <USB_ReadInterrupts>
 800232c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fb1a 	bl	8002972 <PCD_EP_ISR_Handler>

    return;
 800233e:	e119      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d013      	beq.n	8002372 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235c:	b292      	uxth	r2, r2
 800235e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f006 fe7f 	bl	8009066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002368:	2100      	movs	r1, #0
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f905 	bl	800257a <HAL_PCD_SetAddress>

    return;
 8002370:	e100      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800238e:	b292      	uxth	r2, r2
 8002390:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002394:	e0ee      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00c      	beq.n	80023ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023b2:	b292      	uxth	r2, r2
 80023b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80023b8:	e0dc      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d027      	beq.n	8002414 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	b292      	uxth	r2, r2
 80023d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0208 	bic.w	r2, r2, #8
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f006 fe6f 	bl	80090d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800240c:	b292      	uxth	r2, r2
 800240e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002412:	e0af      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8083 	beq.w	8002526 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	77fb      	strb	r3, [r7, #31]
 8002424:	e010      	b.n	8002448 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	7ffb      	ldrb	r3, [r7, #31]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	441a      	add	r2, r3
 8002432:	7ffb      	ldrb	r3, [r7, #31]
 8002434:	8812      	ldrh	r2, [r2, #0]
 8002436:	b292      	uxth	r2, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	3320      	adds	r3, #32
 800243c:	443b      	add	r3, r7
 800243e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002442:	7ffb      	ldrb	r3, [r7, #31]
 8002444:	3301      	adds	r3, #1
 8002446:	77fb      	strb	r3, [r7, #31]
 8002448:	7ffb      	ldrb	r3, [r7, #31]
 800244a:	2b07      	cmp	r3, #7
 800244c:	d9eb      	bls.n	8002426 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	b292      	uxth	r2, r2
 8002462:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	b292      	uxth	r2, r2
 800247a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800247e:	bf00      	nop
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002488:	b29b      	uxth	r3, r3
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f6      	beq.n	8002480 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	b292      	uxth	r2, r2
 80024a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	77fb      	strb	r3, [r7, #31]
 80024ae:	e00f      	b.n	80024d0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80024b0:	7ffb      	ldrb	r3, [r7, #31]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	4611      	mov	r1, r2
 80024b8:	7ffa      	ldrb	r2, [r7, #31]
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	440a      	add	r2, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	3320      	adds	r3, #32
 80024c2:	443b      	add	r3, r7
 80024c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80024c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	3301      	adds	r3, #1
 80024ce:	77fb      	strb	r3, [r7, #31]
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
 80024d2:	2b07      	cmp	r3, #7
 80024d4:	d9ec      	bls.n	80024b0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024de:	b29a      	uxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0208 	orr.w	r2, r2, #8
 80024e8:	b292      	uxth	r2, r2
 80024ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002500:	b292      	uxth	r2, r2
 8002502:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800250e:	b29a      	uxth	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0204 	orr.w	r2, r2, #4
 8002518:	b292      	uxth	r2, r2
 800251a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f006 fdc0 	bl	80090a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002524:	e026      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00f      	beq.n	8002550 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002538:	b29a      	uxth	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002542:	b292      	uxth	r2, r2
 8002544:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f006 fd7e 	bl	800904a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800254e:	e011      	b.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002562:	b29a      	uxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800256c:	b292      	uxth	r2, r2
 800256e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002572:	bf00      	nop
  }
}
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_PCD_SetAddress+0x1a>
 8002590:	2302      	movs	r3, #2
 8002592:	e012      	b.n	80025ba <HAL_PCD_SetAddress+0x40>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f004 fe40 	bl	8007230 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	4608      	mov	r0, r1
 80025cc:	4611      	mov	r1, r2
 80025ce:	461a      	mov	r2, r3
 80025d0:	4603      	mov	r3, r0
 80025d2:	70fb      	strb	r3, [r7, #3]
 80025d4:	460b      	mov	r3, r1
 80025d6:	803b      	strh	r3, [r7, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da0e      	bge.n	8002606 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 0207 	and.w	r2, r3, #7
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	3310      	adds	r3, #16
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	705a      	strb	r2, [r3, #1]
 8002604:	e00e      	b.n	8002624 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 0207 	and.w	r2, r3, #7
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002630:	883a      	ldrh	r2, [r7, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	78ba      	ldrb	r2, [r7, #2]
 800263a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800263c:	78bb      	ldrb	r3, [r7, #2]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d102      	bne.n	8002648 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_PCD_EP_Open+0x94>
 8002652:	2302      	movs	r3, #2
 8002654:	e00e      	b.n	8002674 <HAL_PCD_EP_Open+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 fb89 	bl	8004d7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002672:	7afb      	ldrb	r3, [r7, #11]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da0e      	bge.n	80026ae <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	f003 0207 	and.w	r2, r3, #7
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	3310      	adds	r3, #16
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00e      	b.n	80026cc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 0207 	and.w	r2, r3, #7
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_PCD_EP_Close+0x6a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e00e      	b.n	8002704 <HAL_PCD_EP_Close+0x88>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 ff01 	bl	80054fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	460b      	mov	r3, r1
 800271a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	f003 0207 	and.w	r2, r3, #7
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800274c:	7afb      	ldrb	r3, [r7, #11]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	b2da      	uxtb	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6979      	ldr	r1, [r7, #20]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 f8b8 	bl	80058d4 <USB_EPStartXfer>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	f003 0207 	and.w	r2, r3, #7
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	440b      	add	r3, r1
 800278c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002790:	681b      	ldr	r3, [r3, #0]
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	460b      	mov	r3, r1
 80027aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	f003 0207 	and.w	r2, r3, #7
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	3310      	adds	r3, #16
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2201      	movs	r2, #1
 80027e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6979      	ldr	r1, [r7, #20]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 f86a 	bl	80058d4 <USB_EPStartXfer>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	7912      	ldrb	r2, [r2, #4]
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04c      	b.n	80028c2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da0e      	bge.n	800284e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	f003 0207 	and.w	r2, r3, #7
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	3310      	adds	r3, #16
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	705a      	strb	r2, [r3, #1]
 800284c:	e00c      	b.n	8002868 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_PCD_EP_SetStall+0x7e>
 8002884:	2302      	movs	r3, #2
 8002886:	e01c      	b.n	80028c2 <HAL_PCD_EP_SetStall+0xb8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fbcd 	bl	8007036 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f004 fcf2 	bl	800729c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	7912      	ldrb	r2, [r2, #4]
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d901      	bls.n	80028e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e040      	b.n	800296a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da0e      	bge.n	800290e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0207 	and.w	r2, r3, #7
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	3310      	adds	r3, #16
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	705a      	strb	r2, [r3, #1]
 800290c:	e00e      	b.n	800292c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 0207 	and.w	r2, r3, #7
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_PCD_EP_ClrStall+0x82>
 8002948:	2302      	movs	r3, #2
 800294a:	e00e      	b.n	800296a <HAL_PCD_EP_ClrStall+0xa0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68f9      	ldr	r1, [r7, #12]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fbbb 	bl	80070d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b096      	sub	sp, #88	@ 0x58
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800297a:	e3bb      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002984:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002988:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002996:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 8175 	bne.w	8002c8a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d14e      	bne.n	8002a4a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80029b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029bc:	81fb      	strh	r3, [r7, #14]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	89fb      	ldrh	r3, [r7, #14]
 80029c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3310      	adds	r3, #16
 80029d4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	3302      	adds	r3, #2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	441a      	add	r2, r3
 8002a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a10:	2100      	movs	r1, #0
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f006 faff 	bl	8009016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	7b5b      	ldrb	r3, [r3, #13]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8368 	beq.w	80030f4 <PCD_EP_ISR_Handler+0x782>
 8002a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 8363 	bne.w	80030f4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7b5b      	ldrb	r3, [r3, #13]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	735a      	strb	r2, [r3, #13]
 8002a48:	e354      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a50:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d034      	beq.n	8002ad2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3306      	adds	r3, #6
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a92:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f004 fc49 	bl	800733e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ab8:	4013      	ands	r3, r2
 8002aba:	823b      	strh	r3, [r7, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	8a3a      	ldrh	r2, [r7, #16]
 8002ac2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f006 fa76 	bl	8008fbc <HAL_PCD_SetupStageCallback>
 8002ad0:	e310      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ad2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f280 830c 	bge.w	80030f4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ae8:	4013      	ands	r3, r2
 8002aea:	83fb      	strh	r3, [r7, #30]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	8bfa      	ldrh	r2, [r7, #30]
 8002af2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002af6:	b292      	uxth	r2, r2
 8002af8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3306      	adds	r3, #6
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d019      	beq.n	8002b62 <PCD_EP_ISR_Handler+0x1f0>
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3c:	6959      	ldr	r1, [r3, #20]
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b40:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f004 fbf9 	bl	800733e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	441a      	add	r2, r3
 8002b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b58:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f006 fa3f 	bl	8008fe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 82bd 	bne.w	80030f4 <PCD_EP_ISR_Handler+0x782>
 8002b7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b7e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b86:	f000 82b5 	beq.w	80030f4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bc0:	d91d      	bls.n	8002bfe <PCD_EP_ISR_Handler+0x28c>
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <PCD_EP_ISR_Handler+0x26a>
 8002bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	029b      	lsls	r3, r3, #10
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4313      	orrs	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	801a      	strh	r2, [r3, #0]
 8002bfc:	e026      	b.n	8002c4c <PCD_EP_ISR_Handler+0x2da>
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <PCD_EP_ISR_Handler+0x2aa>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	e017      	b.n	8002c4c <PCD_EP_ISR_Handler+0x2da>
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <PCD_EP_ISR_Handler+0x2c4>
 8002c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c32:	3301      	adds	r3, #1
 8002c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	029b      	lsls	r3, r3, #10
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5c:	827b      	strh	r3, [r7, #18]
 8002c5e:	8a7b      	ldrh	r3, [r7, #18]
 8002c60:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002c64:	827b      	strh	r3, [r7, #18]
 8002c66:	8a7b      	ldrh	r3, [r7, #18]
 8002c68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c6c:	827b      	strh	r3, [r7, #18]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	8a7b      	ldrh	r3, [r7, #18]
 8002c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	8013      	strh	r3, [r2, #0]
 8002c88:	e234      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c9e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f280 80fc 	bge.w	8002ea0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002cd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cde:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf6:	7b1b      	ldrb	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d125      	bne.n	8002d48 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3306      	adds	r3, #6
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d24:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002d28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 8092 	beq.w	8002e56 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d38:	6959      	ldr	r1, [r3, #20]
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3c:	88da      	ldrh	r2, [r3, #6]
 8002d3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d42:	f004 fafc 	bl	800733e <USB_ReadPMA>
 8002d46:	e086      	b.n	8002e56 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4a:	78db      	ldrb	r3, [r3, #3]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d10a      	bne.n	8002d66 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d54:	461a      	mov	r2, r3
 8002d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9d9 	bl	8003110 <HAL_PCD_EP_DB_Receive>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002d64:	e077      	b.n	8002e56 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d80:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d024      	beq.n	8002e0e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02e      	beq.n	8002e56 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	6959      	ldr	r1, [r3, #20]
 8002e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e02:	891a      	ldrh	r2, [r3, #8]
 8002e04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e08:	f004 fa99 	bl	800733e <USB_ReadPMA>
 8002e0c:	e023      	b.n	8002e56 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	3306      	adds	r3, #6
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e36:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002e3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e48:	6959      	ldr	r1, [r3, #20]
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4c:	895a      	ldrh	r2, [r3, #10]
 8002e4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e52:	f004 fa74 	bl	800733e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e5e:	441a      	add	r2, r3
 8002e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e6c:	441a      	add	r2, r3
 8002e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e70:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <PCD_EP_ISR_Handler+0x514>
 8002e7a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d206      	bcs.n	8002e94 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f006 f8a7 	bl	8008fe0 <HAL_PCD_DataOutStageCallback>
 8002e92:	e005      	b.n	8002ea0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fd1a 	bl	80058d4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8123 	beq.w	80030f4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002eae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	3310      	adds	r3, #16
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002edc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f00:	78db      	ldrb	r3, [r3, #3]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	f040 80a2 	bne.w	800304c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f10:	7b1b      	ldrb	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8093 	beq.w	800303e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d046      	beq.n	8002fb2 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d126      	bne.n	8002f7a <PCD_EP_ISR_Handler+0x608>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	4413      	add	r3, r2
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	e061      	b.n	800303e <PCD_EP_ISR_Handler+0x6cc>
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d15d      	bne.n	800303e <PCD_EP_ISR_Handler+0x6cc>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	4413      	add	r3, r2
 8002f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	011a      	lsls	r2, r3, #4
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fac:	2200      	movs	r2, #0
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	e045      	b.n	800303e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d126      	bne.n	800300e <PCD_EP_ISR_Handler+0x69c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	4413      	add	r3, r2
 8002fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	011a      	lsls	r2, r3, #4
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003006:	b29a      	uxth	r2, r3
 8003008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	e017      	b.n	800303e <PCD_EP_ISR_Handler+0x6cc>
 800300e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d113      	bne.n	800303e <PCD_EP_ISR_Handler+0x6cc>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003024:	4413      	add	r3, r2
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	011a      	lsls	r2, r3, #4
 800302e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003030:	4413      	add	r3, r2
 8003032:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303a:	2200      	movs	r2, #0
 800303c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800303e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f005 ffe6 	bl	8009016 <HAL_PCD_DataInStageCallback>
 800304a:	e053      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800304c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d146      	bne.n	80030e6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	3302      	adds	r3, #2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003080:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003086:	699a      	ldr	r2, [r3, #24]
 8003088:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800308c:	429a      	cmp	r2, r3
 800308e:	d907      	bls.n	80030a0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003098:	1ad2      	subs	r2, r2, r3
 800309a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309c:	619a      	str	r2, [r3, #24]
 800309e:	e002      	b.n	80030a6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	2200      	movs	r2, #0
 80030a4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80030a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f005 ffae 	bl	8009016 <HAL_PCD_DataInStageCallback>
 80030ba:	e01b      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80030c4:	441a      	add	r2, r3
 80030c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80030d2:	441a      	add	r2, r3
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fbf8 	bl	80058d4 <USB_EPStartXfer>
 80030e4:	e006      	b.n	80030f4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030ea:	461a      	mov	r2, r3
 80030ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f91b 	bl	800332a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b21b      	sxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	f6ff ac3b 	blt.w	800297c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3758      	adds	r7, #88	@ 0x58
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d07e      	beq.n	8003226 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003130:	b29b      	uxth	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	3302      	adds	r3, #2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003150:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	8b7b      	ldrh	r3, [r7, #26]
 8003158:	429a      	cmp	r2, r3
 800315a:	d306      	bcc.n	800316a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	8b7b      	ldrh	r3, [r7, #26]
 8003162:	1ad2      	subs	r2, r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	619a      	str	r2, [r3, #24]
 8003168:	e002      	b.n	8003170 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d123      	bne.n	80031c0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800318e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003192:	833b      	strh	r3, [r7, #24]
 8003194:	8b3b      	ldrh	r3, [r7, #24]
 8003196:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800319a:	833b      	strh	r3, [r7, #24]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	8b3b      	ldrh	r3, [r7, #24]
 80031ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01f      	beq.n	800320a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e4:	82fb      	strh	r3, [r7, #22]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	441a      	add	r2, r3
 80031f4:	8afb      	ldrh	r3, [r7, #22]
 80031f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003206:	b29b      	uxth	r3, r3
 8003208:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800320a:	8b7b      	ldrh	r3, [r7, #26]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8087 	beq.w	8003320 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6959      	ldr	r1, [r3, #20]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	891a      	ldrh	r2, [r3, #8]
 800321e:	8b7b      	ldrh	r3, [r7, #26]
 8003220:	f004 f88d 	bl	800733e <USB_ReadPMA>
 8003224:	e07c      	b.n	8003320 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	3306      	adds	r3, #6
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800324e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	8b7b      	ldrh	r3, [r7, #26]
 8003256:	429a      	cmp	r2, r3
 8003258:	d306      	bcc.n	8003268 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	8b7b      	ldrh	r3, [r7, #26]
 8003260:	1ad2      	subs	r2, r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	619a      	str	r2, [r3, #24]
 8003266:	e002      	b.n	800326e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d123      	bne.n	80032be <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800328c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003290:	83fb      	strh	r3, [r7, #30]
 8003292:	8bfb      	ldrh	r3, [r7, #30]
 8003294:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003298:	83fb      	strh	r3, [r7, #30]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	8bfb      	ldrh	r3, [r7, #30]
 80032aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11f      	bne.n	8003308 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	83bb      	strh	r3, [r7, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	8bbb      	ldrh	r3, [r7, #28]
 80032f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003300:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003308:	8b7b      	ldrh	r3, [r7, #26]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6959      	ldr	r1, [r3, #20]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	895a      	ldrh	r2, [r3, #10]
 800331a:	8b7b      	ldrh	r3, [r7, #26]
 800331c:	f004 f80f 	bl	800733e <USB_ReadPMA>
    }
  }

  return count;
 8003320:	8b7b      	ldrh	r3, [r7, #26]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b0a4      	sub	sp, #144	@ 0x90
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	4613      	mov	r3, r2
 8003336:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 81dd 	beq.w	80036fe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800334c:	b29b      	uxth	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	3302      	adds	r3, #2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003378:	429a      	cmp	r2, r3
 800337a:	d907      	bls.n	800338c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	619a      	str	r2, [r3, #24]
 800338a:	e002      	b.n	8003392 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 80b9 	bne.w	800350e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d126      	bne.n	80033f2 <HAL_PCD_EP_DB_Transmit+0xc8>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	4413      	add	r3, r2
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	011a      	lsls	r2, r3, #4
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	4413      	add	r3, r2
 80033c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	e01a      	b.n	8003428 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d116      	bne.n	8003428 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	4413      	add	r3, r2
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	011a      	lsls	r2, r3, #4
 8003418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341a:	4413      	add	r3, r2
 800341c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003420:	633b      	str	r3, [r7, #48]	@ 0x30
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d126      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	011a      	lsls	r2, r3, #4
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003468:	b29a      	uxth	r2, r3
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347c:	b29a      	uxth	r2, r3
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e017      	b.n	80034b4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d113      	bne.n	80034b4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	4413      	add	r3, r2
 800349c:	627b      	str	r3, [r7, #36]	@ 0x24
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	011a      	lsls	r2, r3, #4
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	4413      	add	r3, r2
 80034a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2200      	movs	r2, #0
 80034b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f005 fdab 	bl	8009016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 82fc 	beq.w	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	82fb      	strh	r3, [r7, #22]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	8afb      	ldrh	r3, [r7, #22]
 80034f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003508:	b29b      	uxth	r3, r3
 800350a:	8013      	strh	r3, [r2, #0]
 800350c:	e2da      	b.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d021      	beq.n	800355c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800352e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003532:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	441a      	add	r2, r3
 8003544:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800354c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003558:	b29b      	uxth	r3, r3
 800355a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	f040 82ae 	bne.w	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003570:	441a      	add	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800357e:	441a      	add	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6a1a      	ldr	r2, [r3, #32]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	d30b      	bcc.n	80035a8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a0:	1ad2      	subs	r2, r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	621a      	str	r2, [r3, #32]
 80035a6:	e017      	b.n	80035d8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80035b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035c0:	e00a      	b.n	80035d8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2200      	movs	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d165      	bne.n	80036ac <HAL_PCD_EP_DB_Transmit+0x382>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f4:	4413      	add	r3, r2
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	011a      	lsls	r2, r3, #4
 80035fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003600:	4413      	add	r3, r2
 8003602:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003606:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003612:	b29a      	uxth	r2, r3
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800361c:	2b3e      	cmp	r3, #62	@ 0x3e
 800361e:	d91d      	bls.n	800365c <HAL_PCD_EP_DB_Transmit+0x332>
 8003620:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_PCD_EP_DB_Transmit+0x310>
 8003634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003636:	3b01      	subs	r3, #1
 8003638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29a      	uxth	r2, r3
 8003640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003642:	b29b      	uxth	r3, r3
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	b29b      	uxth	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003654:	b29a      	uxth	r2, r3
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	e044      	b.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800365c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_PCD_EP_DB_Transmit+0x350>
 8003664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003672:	b29a      	uxth	r2, r3
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	801a      	strh	r2, [r3, #0]
 8003678:	e035      	b.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800367a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_PCD_EP_DB_Transmit+0x36a>
 800368e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003690:	3301      	adds	r3, #1
 8003692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29a      	uxth	r2, r3
 800369a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800369c:	b29b      	uxth	r3, r3
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	e01c      	b.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d118      	bne.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c8:	4413      	add	r3, r2
 80036ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	011a      	lsls	r2, r3, #4
 80036d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d4:	4413      	add	r3, r2
 80036d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036da:	643b      	str	r3, [r7, #64]	@ 0x40
 80036dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6959      	ldr	r1, [r3, #20]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	891a      	ldrh	r2, [r3, #8]
 80036f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f003 fddb 	bl	80072b2 <USB_WritePMA>
 80036fc:	e1e2      	b.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003706:	b29b      	uxth	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	3306      	adds	r3, #6
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003726:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003732:	429a      	cmp	r2, r3
 8003734:	d307      	bcc.n	8003746 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	619a      	str	r2, [r3, #24]
 8003744:	e002      	b.n	800374c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f040 80c0 	bne.w	80038d6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d126      	bne.n	80037ac <HAL_PCD_EP_DB_Transmit+0x482>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800376c:	b29b      	uxth	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003772:	4413      	add	r3, r2
 8003774:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	011a      	lsls	r2, r3, #4
 800377c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800377e:	4413      	add	r3, r2
 8003780:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003790:	b29a      	uxth	r2, r3
 8003792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	e01a      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d116      	bne.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037c8:	4413      	add	r3, r2
 80037ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	011a      	lsls	r2, r3, #4
 80037d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037d4:	4413      	add	r3, r2
 80037d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037da:	663b      	str	r3, [r7, #96]	@ 0x60
 80037dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037de:	2200      	movs	r2, #0
 80037e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d12b      	bne.n	8003848 <HAL_PCD_EP_DB_Transmit+0x51e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003804:	4413      	add	r3, r2
 8003806:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	011a      	lsls	r2, r3, #4
 800380e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003810:	4413      	add	r3, r2
 8003812:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003816:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800381a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003826:	b29a      	uxth	r2, r3
 8003828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800383a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383e:	b29a      	uxth	r2, r3
 8003840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003844:	801a      	strh	r2, [r3, #0]
 8003846:	e017      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d113      	bne.n	8003878 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003858:	b29b      	uxth	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800385e:	4413      	add	r3, r2
 8003860:	677b      	str	r3, [r7, #116]	@ 0x74
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	011a      	lsls	r2, r3, #4
 8003868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800386a:	4413      	add	r3, r2
 800386c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003870:	673b      	str	r3, [r7, #112]	@ 0x70
 8003872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f005 fbc9 	bl	8009016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 811a 	bne.w	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038aa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	441a      	add	r2, r3
 80038bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80038c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	8013      	strh	r3, [r2, #0]
 80038d4:	e0f6      	b.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d121      	bne.n	8003924 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800391c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003920:	b29b      	uxth	r3, r3
 8003922:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 80ca 	bne.w	8003ac4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003938:	441a      	add	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003946:	441a      	add	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	429a      	cmp	r2, r3
 8003956:	d30b      	bcc.n	8003970 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	621a      	str	r2, [r3, #32]
 800396e:	e017      	b.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003978:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800397c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003988:	e00a      	b.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2200      	movs	r2, #0
 8003996:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	785b      	ldrb	r3, [r3, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d165      	bne.n	8003a7a <HAL_PCD_EP_DB_Transmit+0x750>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039bc:	b29b      	uxth	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c2:	4413      	add	r3, r2
 80039c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	011a      	lsls	r2, r3, #4
 80039cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ce:	4413      	add	r3, r2
 80039d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80039ec:	d91d      	bls.n	8003a2a <HAL_PCD_EP_DB_Transmit+0x700>
 80039ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a04:	3b01      	subs	r3, #1
 8003a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	029b      	lsls	r3, r3, #10
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	e041      	b.n	8003aae <HAL_PCD_EP_DB_Transmit+0x784>
 8003a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e032      	b.n	8003aae <HAL_PCD_EP_DB_Transmit+0x784>
 8003a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x738>
 8003a5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a5e:	3301      	adds	r3, #1
 8003a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4313      	orrs	r3, r2
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	e019      	b.n	8003aae <HAL_PCD_EP_DB_Transmit+0x784>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d115      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x784>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a90:	4413      	add	r3, r2
 8003a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	011a      	lsls	r2, r3, #4
 8003a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	895a      	ldrh	r2, [r3, #10]
 8003aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f003 fbf7 	bl	80072b2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ade:	82bb      	strh	r3, [r7, #20]
 8003ae0:	8abb      	ldrh	r3, [r7, #20]
 8003ae2:	f083 0310 	eor.w	r3, r3, #16
 8003ae6:	82bb      	strh	r3, [r7, #20]
 8003ae8:	8abb      	ldrh	r3, [r7, #20]
 8003aea:	f083 0320 	eor.w	r3, r3, #32
 8003aee:	82bb      	strh	r3, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	8abb      	ldrh	r3, [r7, #20]
 8003b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3790      	adds	r7, #144	@ 0x90
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b087      	sub	sp, #28
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	817b      	strh	r3, [r7, #10]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b30:	897b      	ldrh	r3, [r7, #10]
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3c:	897b      	ldrh	r3, [r7, #10]
 8003b3e:	f003 0207 	and.w	r2, r3, #7
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e009      	b.n	8003b68 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b54:	897a      	ldrh	r2, [r7, #10]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	80da      	strh	r2, [r3, #6]
 8003b7c:	e00b      	b.n	8003b96 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2201      	movs	r2, #1
 8003b82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e272      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8087 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc4:	4b92      	ldr	r3, [pc, #584]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d00c      	beq.n	8003bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d112      	bne.n	8003c02 <HAL_RCC_OscConfig+0x5e>
 8003bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be8:	d10b      	bne.n	8003c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bea:	4b89      	ldr	r3, [pc, #548]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d06c      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x12c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d168      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e24c      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x76>
 8003c0c:	4b80      	ldr	r3, [pc, #512]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7f      	ldr	r2, [pc, #508]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e02e      	b.n	8003c78 <HAL_RCC_OscConfig+0xd4>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x98>
 8003c22:	4b7b      	ldr	r3, [pc, #492]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7a      	ldr	r2, [pc, #488]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b78      	ldr	r3, [pc, #480]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a77      	ldr	r2, [pc, #476]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0xd4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0xbc>
 8003c46:	4b72      	ldr	r3, [pc, #456]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a71      	ldr	r2, [pc, #452]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b6f      	ldr	r3, [pc, #444]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6e      	ldr	r2, [pc, #440]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0xd4>
 8003c60:	4b6b      	ldr	r3, [pc, #428]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6a      	ldr	r2, [pc, #424]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b68      	ldr	r3, [pc, #416]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a67      	ldr	r2, [pc, #412]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd f8e2 	bl	8000e48 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fd f8de 	bl	8000e48 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	@ 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e200      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xe4>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f8ce 	bl	8000e48 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fd f8ca 	bl	8000e48 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1ec      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x10c>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cde:	4b4c      	ldr	r3, [pc, #304]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cea:	4b49      	ldr	r3, [pc, #292]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x18c>
 8003cf6:	4b46      	ldr	r3, [pc, #280]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b43      	ldr	r3, [pc, #268]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x176>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1c0      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4939      	ldr	r1, [pc, #228]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e03a      	b.n	8003da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b36      	ldr	r3, [pc, #216]	@ (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fd f883 	bl	8000e48 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fd f87f 	bl	8000e48 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1a1      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	4b2d      	ldr	r3, [pc, #180]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b2a      	ldr	r3, [pc, #168]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4927      	ldr	r1, [pc, #156]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b26      	ldr	r3, [pc, #152]	@ (8003e14 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd f862 	bl	8000e48 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fd f85e 	bl	8000e48 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e180      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d03a      	beq.n	8003e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b17      	ldr	r3, [pc, #92]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd f842 	bl	8000e48 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fd f83e 	bl	8000e48 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e160      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f000 fa9c 	bl	8004324 <RCC_Delay>
 8003dec:	e01c      	b.n	8003e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <HAL_RCC_OscConfig+0x274>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df4:	f7fd f828 	bl	8000e48 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfa:	e00f      	b.n	8003e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fd f824 	bl	8000e48 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d908      	bls.n	8003e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e146      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	42420000 	.word	0x42420000
 8003e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b92      	ldr	r3, [pc, #584]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e9      	bne.n	8003dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a6 	beq.w	8003f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4b88      	ldr	r3, [pc, #544]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4a87      	ldr	r2, [pc, #540]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	61d3      	str	r3, [r2, #28]
 8003e52:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b82      	ldr	r3, [pc, #520]	@ (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7e      	ldr	r2, [pc, #504]	@ (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7a:	f7fc ffe5 	bl	8000e48 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e82:	f7fc ffe1 	bl	8000e48 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e103      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e94:	4b75      	ldr	r3, [pc, #468]	@ (800406c <HAL_RCC_OscConfig+0x4c8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x312>
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a6e      	ldr	r2, [pc, #440]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	e02d      	b.n	8003f12 <HAL_RCC_OscConfig+0x36e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x334>
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a69      	ldr	r2, [pc, #420]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6213      	str	r3, [r2, #32]
 8003eca:	4b67      	ldr	r3, [pc, #412]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4a66      	ldr	r2, [pc, #408]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	6213      	str	r3, [r2, #32]
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCC_OscConfig+0x36e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d10c      	bne.n	8003efa <HAL_RCC_OscConfig+0x356>
 8003ee0:	4b61      	ldr	r3, [pc, #388]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4a60      	ldr	r2, [pc, #384]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6213      	str	r3, [r2, #32]
 8003eec:	4b5e      	ldr	r3, [pc, #376]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6213      	str	r3, [r2, #32]
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x36e>
 8003efa:	4b5b      	ldr	r3, [pc, #364]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a5a      	ldr	r2, [pc, #360]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6213      	str	r3, [r2, #32]
 8003f06:	4b58      	ldr	r3, [pc, #352]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4a57      	ldr	r2, [pc, #348]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1a:	f7fc ff95 	bl	8000e48 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fc ff91 	bl	8000e48 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0b1      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b4b      	ldr	r3, [pc, #300]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCC_OscConfig+0x37e>
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f46:	f7fc ff7f 	bl	8000e48 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fc ff7b 	bl	8000e48 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e09b      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	4b40      	ldr	r3, [pc, #256]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ee      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8087 	beq.w	800409a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f8c:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d061      	beq.n	800405c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d146      	bne.n	800402e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b33      	ldr	r3, [pc, #204]	@ (8004070 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fc ff4f 	bl	8000e48 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fae:	f7fc ff4b 	bl	8000e48 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e06d      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc0:	4b29      	ldr	r3, [pc, #164]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4921      	ldr	r1, [pc, #132]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a19      	ldr	r1, [r3, #32]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	491b      	ldr	r1, [pc, #108]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fc ff1f 	bl	8000e48 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400e:	f7fc ff1b 	bl	8000e48 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e03d      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x46a>
 800402c:	e035      	b.n	800409a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <HAL_RCC_OscConfig+0x4cc>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fc ff08 	bl	8000e48 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fc ff04 	bl	8000e48 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e026      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x498>
 800405a:	e01e      	b.n	800409a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e019      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
 8004068:	40021000 	.word	0x40021000
 800406c:	40007000 	.word	0x40007000
 8004070:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCC_OscConfig+0x500>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	429a      	cmp	r2, r3
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d0      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d910      	bls.n	80040ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ca:	4b67      	ldr	r3, [pc, #412]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 0207 	bic.w	r2, r3, #7
 80040d2:	4965      	ldr	r1, [pc, #404]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b63      	ldr	r3, [pc, #396]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0b8      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d020      	beq.n	800413a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004104:	4b59      	ldr	r3, [pc, #356]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a58      	ldr	r2, [pc, #352]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800410e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800411c:	4b53      	ldr	r3, [pc, #332]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a52      	ldr	r2, [pc, #328]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b50      	ldr	r3, [pc, #320]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	494d      	ldr	r1, [pc, #308]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d040      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b47      	ldr	r3, [pc, #284]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d115      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e07f      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b41      	ldr	r3, [pc, #260]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e073      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	4b3d      	ldr	r3, [pc, #244]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004186:	4b39      	ldr	r3, [pc, #228]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	4936      	ldr	r1, [pc, #216]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004198:	f7fc fe56 	bl	8000e48 <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a0:	f7fc fe52 	bl	8000e48 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e053      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	4b2d      	ldr	r3, [pc, #180]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 020c 	and.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d1eb      	bne.n	80041a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b27      	ldr	r3, [pc, #156]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d210      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	4922      	ldr	r1, [pc, #136]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e032      	b.n	800425e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b19      	ldr	r3, [pc, #100]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4916      	ldr	r1, [pc, #88]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004222:	4b12      	ldr	r3, [pc, #72]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	490e      	ldr	r1, [pc, #56]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004236:	f000 f821 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800423a:	4602      	mov	r2, r0
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	490a      	ldr	r1, [pc, #40]	@ (8004270 <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	5ccb      	ldrb	r3, [r1, r3]
 800424a:	fa22 f303 	lsr.w	r3, r2, r3
 800424e:	4a09      	ldr	r2, [pc, #36]	@ (8004274 <HAL_RCC_ClockConfig+0x1cc>)
 8004250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004252:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <HAL_RCC_ClockConfig+0x1d0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7fc fdb4 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40022000 	.word	0x40022000
 800426c:	40021000 	.word	0x40021000
 8004270:	08009e94 	.word	0x08009e94
 8004274:	20000000 	.word	0x20000000
 8004278:	20000004 	.word	0x20000004

0800427c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004296:	4b1e      	ldr	r3, [pc, #120]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x94>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d002      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x30>
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x36>
 80042aa:	e027      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042ac:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ae:	613b      	str	r3, [r7, #16]
      break;
 80042b0:	e027      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	0c9b      	lsrs	r3, r3, #18
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	4a17      	ldr	r2, [pc, #92]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042bc:	5cd3      	ldrb	r3, [r2, r3]
 80042be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042ca:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x94>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	0c5b      	lsrs	r3, r3, #17
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	4a11      	ldr	r2, [pc, #68]	@ (800431c <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x98>)
 80042de:	fb03 f202 	mul.w	r2, r3, r2
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e004      	b.n	80042f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	613b      	str	r3, [r7, #16]
      break;
 80042fa:	e002      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x98>)
 80042fe:	613b      	str	r3, [r7, #16]
      break;
 8004300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004302:	693b      	ldr	r3, [r7, #16]
}
 8004304:	4618      	mov	r0, r3
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	007a1200 	.word	0x007a1200
 8004318:	08009ea4 	.word	0x08009ea4
 800431c:	08009eb4 	.word	0x08009eb4
 8004320:	003d0900 	.word	0x003d0900

08004324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <RCC_Delay+0x34>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <RCC_Delay+0x38>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0a5b      	lsrs	r3, r3, #9
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004340:	bf00      	nop
  }
  while (Delay --);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	60fa      	str	r2, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f9      	bne.n	8004340 <RCC_Delay+0x1c>
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	20000000 	.word	0x20000000
 800435c:	10624dd3 	.word	0x10624dd3

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d07d      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800437c:	2300      	movs	r3, #0
 800437e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004380:	4b4f      	ldr	r3, [pc, #316]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	4b4c      	ldr	r3, [pc, #304]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	4a4b      	ldr	r2, [pc, #300]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004396:	61d3      	str	r3, [r2, #28]
 8004398:	4b49      	ldr	r3, [pc, #292]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	4b46      	ldr	r3, [pc, #280]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d118      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043b4:	4b43      	ldr	r3, [pc, #268]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a42      	ldr	r2, [pc, #264]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c0:	f7fc fd42 	bl	8000e48 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c6:	e008      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c8:	f7fc fd3e 	bl	8000e48 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	@ 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e06d      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043da:	4b3a      	ldr	r3, [pc, #232]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043e6:	4b36      	ldr	r3, [pc, #216]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02e      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d027      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004404:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800440e:	4b2e      	ldr	r3, [pc, #184]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004414:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800441a:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d014      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fc fd0d 	bl	8000e48 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fc fd09 	bl	8000e48 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e036      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ee      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004454:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4917      	ldr	r1, [pc, #92]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	4313      	orrs	r3, r2
 8004464:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446c:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4a13      	ldr	r2, [pc, #76]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004476:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004484:	4b0e      	ldr	r3, [pc, #56]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	490b      	ldr	r1, [pc, #44]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d008      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4904      	ldr	r1, [pc, #16]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40007000 	.word	0x40007000
 80044c8:	42420440 	.word	0x42420440

080044cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e041      	b.n	8004562 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc fb76 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4610      	mov	r0, r2
 800450c:	f000 fa5c 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d001      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e03a      	b.n	80045fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <HAL_TIM_Base_Start_IT+0x98>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x58>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ae:	d009      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x58>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a14      	ldr	r2, [pc, #80]	@ (8004608 <HAL_TIM_Base_Start_IT+0x9c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x58>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	@ (800460c <HAL_TIM_Base_Start_IT+0xa0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d010      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	e007      	b.n	80045f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800

08004610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d020      	beq.n	8004674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01b      	beq.n	8004674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0202 	mvn.w	r2, #2
 8004644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f998 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f98b 	bl	800497e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f99a 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0204 	mvn.w	r2, #4
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f972 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f965 	bl	800497e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f974 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0208 	mvn.w	r2, #8
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2204      	movs	r2, #4
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f94c 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f93f 	bl	800497e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f94e 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	d020      	beq.n	8004758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0210 	mvn.w	r2, #16
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2208      	movs	r2, #8
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f926 	bl	8004990 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f919 	bl	800497e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f928 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0201 	mvn.w	r2, #1
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fb ff3a 	bl	80005f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa7f 	bl	8004c9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8f8 	bl	80049b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0220 	mvn.w	r2, #32
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa52 	bl	8004c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIM_ConfigClockSource+0x1c>
 8004808:	2302      	movs	r3, #2
 800480a:	e0b4      	b.n	8004976 <HAL_TIM_ConfigClockSource+0x186>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800482a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004844:	d03e      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484a:	f200 8087 	bhi.w	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004852:	f000 8086 	beq.w	8004962 <HAL_TIM_ConfigClockSource+0x172>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	d87f      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b70      	cmp	r3, #112	@ 0x70
 800485e:	d01a      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0xa6>
 8004860:	2b70      	cmp	r3, #112	@ 0x70
 8004862:	d87b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b60      	cmp	r3, #96	@ 0x60
 8004866:	d050      	beq.n	800490a <HAL_TIM_ConfigClockSource+0x11a>
 8004868:	2b60      	cmp	r3, #96	@ 0x60
 800486a:	d877      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b50      	cmp	r3, #80	@ 0x50
 800486e:	d03c      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xfa>
 8004870:	2b50      	cmp	r3, #80	@ 0x50
 8004872:	d873      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b40      	cmp	r3, #64	@ 0x40
 8004876:	d058      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x13a>
 8004878:	2b40      	cmp	r3, #64	@ 0x40
 800487a:	d86f      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b30      	cmp	r3, #48	@ 0x30
 800487e:	d064      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	2b30      	cmp	r3, #48	@ 0x30
 8004882:	d86b      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b20      	cmp	r3, #32
 8004886:	d060      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b20      	cmp	r3, #32
 800488a:	d867      	bhi.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d05c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	2b10      	cmp	r3, #16
 8004892:	d05a      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x15a>
 8004894:	e062      	b.n	800495c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a6:	f000 f974 	bl	8004b92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	609a      	str	r2, [r3, #8]
      break;
 80048c2:	e04f      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048d4:	f000 f95d 	bl	8004b92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e6:	609a      	str	r2, [r3, #8]
      break;
 80048e8:	e03c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	461a      	mov	r2, r3
 80048f8:	f000 f8d4 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2150      	movs	r1, #80	@ 0x50
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f92b 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004908:	e02c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	461a      	mov	r2, r3
 8004918:	f000 f8f2 	bl	8004b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2160      	movs	r1, #96	@ 0x60
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f91b 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004928:	e01c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	461a      	mov	r2, r3
 8004938:	f000 f8b4 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2140      	movs	r1, #64	@ 0x40
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f90b 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004948:	e00c      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4619      	mov	r1, r3
 8004954:	4610      	mov	r0, r2
 8004956:	f000 f902 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 800495a:	e003      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	e000      	b.n	8004964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr

080049b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
	...

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a2f      	ldr	r2, [pc, #188]	@ (8004a98 <TIM_Base_SetConfig+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00b      	beq.n	80049f8 <TIM_Base_SetConfig+0x30>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0x30>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a2c      	ldr	r2, [pc, #176]	@ (8004a9c <TIM_Base_SetConfig+0xd4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0x30>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa0 <TIM_Base_SetConfig+0xd8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a22      	ldr	r2, [pc, #136]	@ (8004a98 <TIM_Base_SetConfig+0xd0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x62>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x62>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a9c <TIM_Base_SetConfig+0xd4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa0 <TIM_Base_SetConfig+0xd8>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0d      	ldr	r2, [pc, #52]	@ (8004a98 <TIM_Base_SetConfig+0xd0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800

08004aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0201 	bic.w	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 030a 	bic.w	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0210 	bic.w	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	031b      	lsls	r3, r3, #12
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	621a      	str	r2, [r3, #32]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f043 0307 	orr.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	021a      	lsls	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	609a      	str	r2, [r3, #8]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e046      	b.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a16      	ldr	r2, [pc, #88]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c34:	d009      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a10      	ldr	r2, [pc, #64]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10c      	bne.n	8004c64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800

08004c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	4638      	mov	r0, r7
 8004cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cda:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004cde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b085      	sub	sp, #20
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cfe:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004d02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4013      	ands	r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b09d      	sub	sp, #116	@ 0x74
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	78db      	ldrb	r3, [r3, #3]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d81f      	bhi.n	8004dee <USB_ActivateEndpoint+0x72>
 8004dae:	a201      	add	r2, pc, #4	@ (adr r2, 8004db4 <USB_ActivateEndpoint+0x38>)
 8004db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004df7 	.word	0x08004df7
 8004dc0:	08004dd3 	.word	0x08004dd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dcc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004dd0:	e012      	b.n	8004df8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dd2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dd6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004dda:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004dde:	e00b      	b.n	8004df8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004de0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004de4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004de8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004dec:	e004      	b.n	8004df8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004df4:	e000      	b.n	8004df8 <USB_ActivateEndpoint+0x7c>
      break;
 8004df6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	7b1b      	ldrb	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8178 	bne.w	8005158 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8084 	beq.w	8004f7a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	4413      	add	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	011a      	lsls	r2, r3, #4
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	88db      	ldrh	r3, [r3, #6]
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	827b      	strh	r3, [r7, #18]
 8004eb4:	8a7b      	ldrh	r3, [r7, #18]
 8004eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01b      	beq.n	8004ef6 <USB_ActivateEndpoint+0x17a>
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed4:	823b      	strh	r3, [r7, #16]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	441a      	add	r2, r3
 8004ee0:	8a3b      	ldrh	r3, [r7, #16]
 8004ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	78db      	ldrb	r3, [r3, #3]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d020      	beq.n	8004f40 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f14:	81bb      	strh	r3, [r7, #12]
 8004f16:	89bb      	ldrh	r3, [r7, #12]
 8004f18:	f083 0320 	eor.w	r3, r3, #32
 8004f1c:	81bb      	strh	r3, [r7, #12]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	441a      	add	r2, r3
 8004f28:	89bb      	ldrh	r3, [r7, #12]
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]
 8004f3e:	e2d5      	b.n	80054ec <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f56:	81fb      	strh	r3, [r7, #14]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	89fb      	ldrh	r3, [r7, #14]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
 8004f78:	e2b8      	b.n	80054ec <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	4413      	add	r3, r2
 8004f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	011a      	lsls	r2, r3, #4
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	88db      	ldrh	r3, [r3, #6]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fac:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	4413      	add	r3, r2
 8004fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fe8:	d91d      	bls.n	8005026 <USB_ActivateEndpoint+0x2aa>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <USB_ActivateEndpoint+0x288>
 8004ffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005000:	3b01      	subs	r3, #1
 8005002:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
 800500a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800500c:	b29b      	uxth	r3, r3
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	b29b      	uxth	r3, r3
 8005012:	4313      	orrs	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501e:	b29a      	uxth	r2, r3
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e026      	b.n	8005074 <USB_ActivateEndpoint+0x2f8>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <USB_ActivateEndpoint+0x2c8>
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29a      	uxth	r2, r3
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	e017      	b.n	8005074 <USB_ActivateEndpoint+0x2f8>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <USB_ActivateEndpoint+0x2e2>
 8005058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800505a:	3301      	adds	r3, #1
 800505c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29a      	uxth	r2, r3
 8005064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005066:	b29b      	uxth	r3, r3
 8005068:	029b      	lsls	r3, r3, #10
 800506a:	b29b      	uxth	r3, r3
 800506c:	4313      	orrs	r3, r2
 800506e:	b29a      	uxth	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005082:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01b      	beq.n	80050c4 <USB_ActivateEndpoint+0x348>
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800509e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a2:	843b      	strh	r3, [r7, #32]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8c3b      	ldrh	r3, [r7, #32]
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d124      	bne.n	8005116 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	83bb      	strh	r3, [r7, #28]
 80050e4:	8bbb      	ldrh	r3, [r7, #28]
 80050e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80050ea:	83bb      	strh	r3, [r7, #28]
 80050ec:	8bbb      	ldrh	r3, [r7, #28]
 80050ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80050f2:	83bb      	strh	r3, [r7, #28]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8bbb      	ldrh	r3, [r7, #28]
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
 8005114:	e1ea      	b.n	80054ec <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512c:	83fb      	strh	r3, [r7, #30]
 800512e:	8bfb      	ldrh	r3, [r7, #30]
 8005130:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005134:	83fb      	strh	r3, [r7, #30]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8bfb      	ldrh	r3, [r7, #30]
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800514a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]
 8005156:	e1c9      	b.n	80054ec <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	78db      	ldrb	r3, [r3, #3]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d11e      	bne.n	800519e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005176:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800518c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005190:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005198:	b29b      	uxth	r3, r3
 800519a:	8013      	strh	r3, [r2, #0]
 800519c:	e01d      	b.n	80051da <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80051b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ea:	4413      	add	r3, r2
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	011a      	lsls	r2, r3, #4
 80051f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	891b      	ldrh	r3, [r3, #8]
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	b29b      	uxth	r3, r3
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	657b      	str	r3, [r7, #84]	@ 0x54
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521e:	4413      	add	r3, r2
 8005220:	657b      	str	r3, [r7, #84]	@ 0x54
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	011a      	lsls	r2, r3, #4
 8005228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800522a:	4413      	add	r3, r2
 800522c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005230:	653b      	str	r3, [r7, #80]	@ 0x50
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	895b      	ldrh	r3, [r3, #10]
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005240:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 8093 	bne.w	8005372 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800525c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01b      	beq.n	80052a0 <USB_ActivateEndpoint+0x524>
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800527a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	441a      	add	r2, r3
 800528a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800528c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005294:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800529c:	b29b      	uxth	r3, r3
 800529e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80052ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80052b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <USB_ActivateEndpoint+0x574>
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	441a      	add	r2, r3
 80052da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80052dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005306:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005308:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800530a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800530e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005310:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005312:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005316:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	441a      	add	r2, r3
 8005322:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800532c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800534e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800535c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800536c:	b29b      	uxth	r3, r3
 800536e:	8013      	strh	r3, [r2, #0]
 8005370:	e0bc      	b.n	80054ec <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01d      	beq.n	80053ca <USB_ActivateEndpoint+0x64e>
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80053da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01d      	beq.n	8005422 <USB_ActivateEndpoint+0x6a6>
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800541a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	78db      	ldrb	r3, [r3, #3]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d024      	beq.n	8005474 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005440:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005444:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005448:	f083 0320 	eor.w	r3, r3, #32
 800544c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
 8005472:	e01d      	b.n	80054b0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	441a      	add	r2, r3
 8005498:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80054ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3774      	adds	r7, #116	@ 0x74
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop

080054fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b08d      	sub	sp, #52	@ 0x34
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	7b1b      	ldrb	r3, [r3, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 808e 	bne.w	800562c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d044      	beq.n	80055a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	81bb      	strh	r3, [r7, #12]
 8005526:	89bb      	ldrh	r3, [r7, #12]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01b      	beq.n	8005568 <USB_DeactivateEndpoint+0x6c>
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005546:	817b      	strh	r3, [r7, #10]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005560:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800557e:	813b      	strh	r3, [r7, #8]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	893b      	ldrh	r3, [r7, #8]
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]
 80055a0:	e192      	b.n	80058c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	827b      	strh	r3, [r7, #18]
 80055b0:	8a7b      	ldrh	r3, [r7, #18]
 80055b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01b      	beq.n	80055f2 <USB_DeactivateEndpoint+0xf6>
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d0:	823b      	strh	r3, [r7, #16]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	8a3b      	ldrh	r3, [r7, #16]
 80055de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005608:	81fb      	strh	r3, [r7, #14]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	441a      	add	r2, r3
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800561a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800561e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005626:	b29b      	uxth	r3, r3
 8005628:	8013      	strh	r3, [r2, #0]
 800562a:	e14d      	b.n	80058c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 80a5 	bne.w	8005780 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	843b      	strh	r3, [r7, #32]
 8005644:	8c3b      	ldrh	r3, [r7, #32]
 8005646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01b      	beq.n	8005686 <USB_DeactivateEndpoint+0x18a>
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005664:	83fb      	strh	r3, [r7, #30]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	8bfb      	ldrh	r3, [r7, #30]
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800567a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800567e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	83bb      	strh	r3, [r7, #28]
 8005694:	8bbb      	ldrh	r3, [r7, #28]
 8005696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01b      	beq.n	80056d6 <USB_DeactivateEndpoint+0x1da>
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b4:	837b      	strh	r3, [r7, #26]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	441a      	add	r2, r3
 80056c0:	8b7b      	ldrh	r3, [r7, #26]
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ec:	833b      	strh	r3, [r7, #24]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	441a      	add	r2, r3
 80056f8:	8b3b      	ldrh	r3, [r7, #24]
 80056fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005706:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800570a:	b29b      	uxth	r3, r3
 800570c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005724:	82fb      	strh	r3, [r7, #22]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	8afb      	ldrh	r3, [r7, #22]
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800573e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800575c:	82bb      	strh	r3, [r7, #20]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	8abb      	ldrh	r3, [r7, #20]
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]
 800577e:	e0a3      	b.n	80058c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800578e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <USB_DeactivateEndpoint+0x2d4>
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80057de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <USB_DeactivateEndpoint+0x324>
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800580c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005818:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800581c:	b29b      	uxth	r3, r3
 800581e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	441a      	add	r2, r3
 8005842:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800584c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005854:	b29b      	uxth	r3, r3
 8005856:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800586a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800586e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	441a      	add	r2, r3
 800587a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800587c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588c:	b29b      	uxth	r3, r3
 800588e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3734      	adds	r7, #52	@ 0x34
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b0c2      	sub	sp, #264	@ 0x108
 80058d8:	af00      	add	r7, sp, #0
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e2:	6018      	str	r0, [r3, #0]
 80058e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ec:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	f040 86b7 	bne.w	800666e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d908      	bls.n	800592e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800591c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800592c:	e007      	b.n	800593e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800592e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800593e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	7b1b      	ldrb	r3, [r3, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d13a      	bne.n	80059c4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800594e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6959      	ldr	r1, [r3, #20]
 800595a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	88da      	ldrh	r2, [r3, #6]
 8005966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596a:	b29b      	uxth	r3, r3
 800596c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005970:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005974:	6800      	ldr	r0, [r0, #0]
 8005976:	f001 fc9c 	bl	80072b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800597a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005994:	b29b      	uxth	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	011a      	lsls	r2, r3, #4
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	f000 be1f 	b.w	8006602 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	78db      	ldrb	r3, [r3, #3]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	f040 8462 	bne.w	800629a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	f240 83df 	bls.w	80061b2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a44:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 81c7 	beq.w	8005e24 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	785b      	ldrb	r3, [r3, #1]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d177      	bne.n	8005ba2 <USB_EPStartXfer+0x2ce>
 8005ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad2:	4413      	add	r3, r2
 8005ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	011a      	lsls	r2, r3, #4
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b02:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b04:	d921      	bls.n	8005b4a <USB_EPStartXfer+0x276>
 8005b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <USB_EPStartXfer+0x252>
 8005b1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b20:	3b01      	subs	r3, #1
 8005b22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	029b      	lsls	r3, r3, #10
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e050      	b.n	8005bec <USB_EPStartXfer+0x318>
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <USB_EPStartXfer+0x294>
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e041      	b.n	8005bec <USB_EPStartXfer+0x318>
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <USB_EPStartXfer+0x2b4>
 8005b7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b82:	3301      	adds	r3, #1
 8005b84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	e024      	b.n	8005bec <USB_EPStartXfer+0x318>
 8005ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d11c      	bne.n	8005bec <USB_EPStartXfer+0x318>
 8005bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc6:	4413      	add	r3, r2
 8005bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	011a      	lsls	r2, r3, #4
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	895b      	ldrh	r3, [r3, #10]
 8005bf8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6959      	ldr	r1, [r3, #20]
 8005c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	f001 fb49 	bl	80072b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c30:	441a      	add	r2, r3
 8005c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a1a      	ldr	r2, [r3, #32]
 8005c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d90f      	bls.n	8005c7a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	621a      	str	r2, [r3, #32]
 8005c78:	e00e      	b.n	8005c98 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d177      	bne.n	8005d98 <USB_EPStartXfer+0x4c4>
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	4413      	add	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	011a      	lsls	r2, r3, #4
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cfa:	d921      	bls.n	8005d40 <USB_EPStartXfer+0x46c>
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <USB_EPStartXfer+0x448>
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d16:	3b01      	subs	r3, #1
 8005d18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	029b      	lsls	r3, r3, #10
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	e056      	b.n	8005dee <USB_EPStartXfer+0x51a>
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <USB_EPStartXfer+0x48a>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	e047      	b.n	8005dee <USB_EPStartXfer+0x51a>
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d004      	beq.n	8005d7e <USB_EPStartXfer+0x4aa>
 8005d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e02a      	b.n	8005dee <USB_EPStartXfer+0x51a>
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d122      	bne.n	8005dee <USB_EPStartXfer+0x51a>
 8005da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	4413      	add	r3, r2
 8005dca:	623b      	str	r3, [r7, #32]
 8005dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	011a      	lsls	r2, r3, #4
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	891b      	ldrh	r3, [r3, #8]
 8005dfa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6959      	ldr	r1, [r3, #20]
 8005e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e18:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e1c:	6800      	ldr	r0, [r0, #0]
 8005e1e:	f001 fa48 	bl	80072b2 <USB_WritePMA>
 8005e22:	e3ee      	b.n	8006602 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d177      	bne.n	8005f24 <USB_EPStartXfer+0x650>
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e54:	4413      	add	r3, r2
 8005e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	011a      	lsls	r2, r3, #4
 8005e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e84:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e86:	d921      	bls.n	8005ecc <USB_EPStartXfer+0x5f8>
 8005e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <USB_EPStartXfer+0x5d4>
 8005e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	029b      	lsls	r3, r3, #10
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e056      	b.n	8005f7a <USB_EPStartXfer+0x6a6>
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <USB_EPStartXfer+0x616>
 8005ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e047      	b.n	8005f7a <USB_EPStartXfer+0x6a6>
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <USB_EPStartXfer+0x636>
 8005f00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f04:	3301      	adds	r3, #1
 8005f06:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	029b      	lsls	r3, r3, #10
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	e02a      	b.n	8005f7a <USB_EPStartXfer+0x6a6>
 8005f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d122      	bne.n	8005f7a <USB_EPStartXfer+0x6a6>
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f54:	4413      	add	r3, r2
 8005f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	891b      	ldrh	r3, [r3, #8]
 8005f86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6959      	ldr	r1, [r3, #20]
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005fa0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005fa4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fa8:	6800      	ldr	r0, [r0, #0]
 8005faa:	f001 f982 	bl	80072b2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbe:	441a      	add	r2, r3
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d90f      	bls.n	8006008 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff8:	1ad2      	subs	r2, r2, r3
 8005ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	621a      	str	r2, [r3, #32]
 8006006:	e00e      	b.n	8006026 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2200      	movs	r2, #0
 8006024:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	643b      	str	r3, [r7, #64]	@ 0x40
 8006032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d177      	bne.n	8006132 <USB_EPStartXfer+0x85e>
 8006042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800604e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	4413      	add	r3, r2
 8006064:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	011a      	lsls	r2, r3, #4
 8006074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006076:	4413      	add	r3, r2
 8006078:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006088:	b29a      	uxth	r2, r3
 800608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	2b3e      	cmp	r3, #62	@ 0x3e
 8006094:	d921      	bls.n	80060da <USB_EPStartXfer+0x806>
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	f003 031f 	and.w	r3, r3, #31
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <USB_EPStartXfer+0x7e2>
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	3b01      	subs	r3, #1
 80060b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	029b      	lsls	r3, r3, #10
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e050      	b.n	800617c <USB_EPStartXfer+0x8a8>
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10a      	bne.n	80060f8 <USB_EPStartXfer+0x824>
 80060e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e041      	b.n	800617c <USB_EPStartXfer+0x8a8>
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <USB_EPStartXfer+0x844>
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006112:	3301      	adds	r3, #1
 8006114:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29a      	uxth	r2, r3
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	4313      	orrs	r3, r2
 800612a:	b29a      	uxth	r2, r3
 800612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e024      	b.n	800617c <USB_EPStartXfer+0x8a8>
 8006132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d11c      	bne.n	800617c <USB_EPStartXfer+0x8a8>
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006156:	4413      	add	r3, r2
 8006158:	643b      	str	r3, [r7, #64]	@ 0x40
 800615a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	011a      	lsls	r2, r3, #4
 8006168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800616a:	4413      	add	r3, r2
 800616c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006176:	b29a      	uxth	r2, r3
 8006178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800617c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	895b      	ldrh	r3, [r3, #10]
 8006188:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800618c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6959      	ldr	r1, [r3, #20]
 8006198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619c:	b29b      	uxth	r3, r3
 800619e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80061a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061aa:	6800      	ldr	r0, [r0, #0]
 80061ac:	f001 f881 	bl	80072b2 <USB_WritePMA>
 80061b0:	e227      	b.n	8006602 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80061e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80061ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800621e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800623e:	4413      	add	r3, r2
 8006240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	011a      	lsls	r2, r3, #4
 8006250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006252:	4413      	add	r3, r2
 8006254:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006258:	65bb      	str	r3, [r7, #88]	@ 0x58
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625e:	b29a      	uxth	r2, r3
 8006260:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006262:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	891b      	ldrh	r3, [r3, #8]
 8006270:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6959      	ldr	r1, [r3, #20]
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	b29b      	uxth	r3, r3
 8006286:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800628a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800628e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	f001 f80d 	bl	80072b2 <USB_WritePMA>
 8006298:	e1b3      	b.n	8006602 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062aa:	1ad2      	subs	r2, r2, r3
 80062ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80c6 	beq.w	800646c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80062ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d177      	bne.n	80063ec <USB_EPStartXfer+0xb18>
 80062fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800631c:	4413      	add	r3, r2
 800631e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	011a      	lsls	r2, r3, #4
 800632e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006330:	4413      	add	r3, r2
 8006332:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006336:	667b      	str	r3, [r7, #100]	@ 0x64
 8006338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006342:	b29a      	uxth	r2, r3
 8006344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634c:	2b3e      	cmp	r3, #62	@ 0x3e
 800634e:	d921      	bls.n	8006394 <USB_EPStartXfer+0xac0>
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <USB_EPStartXfer+0xa9c>
 8006366:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800636a:	3b01      	subs	r3, #1
 800636c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29a      	uxth	r2, r3
 8006376:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800637a:	b29b      	uxth	r3, r3
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	b29b      	uxth	r3, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29a      	uxth	r2, r3
 800638e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006390:	801a      	strh	r2, [r3, #0]
 8006392:	e050      	b.n	8006436 <USB_EPStartXfer+0xb62>
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <USB_EPStartXfer+0xade>
 800639c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	e041      	b.n	8006436 <USB_EPStartXfer+0xb62>
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b6:	085b      	lsrs	r3, r3, #1
 80063b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <USB_EPStartXfer+0xafe>
 80063c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063cc:	3301      	adds	r3, #1
 80063ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063dc:	b29b      	uxth	r3, r3
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e024      	b.n	8006436 <USB_EPStartXfer+0xb62>
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d11c      	bne.n	8006436 <USB_EPStartXfer+0xb62>
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006410:	4413      	add	r3, r2
 8006412:	673b      	str	r3, [r7, #112]	@ 0x70
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006424:	4413      	add	r3, r2
 8006426:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800642a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006430:	b29a      	uxth	r2, r3
 8006432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006434:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	895b      	ldrh	r3, [r3, #10]
 8006442:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6959      	ldr	r1, [r3, #20]
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	b29b      	uxth	r3, r3
 8006458:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800645c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006460:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006464:	6800      	ldr	r0, [r0, #0]
 8006466:	f000 ff24 	bl	80072b2 <USB_WritePMA>
 800646a:	e0ca      	b.n	8006602 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d177      	bne.n	800656c <USB_EPStartXfer+0xc98>
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800649c:	4413      	add	r3, r2
 800649e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	011a      	lsls	r2, r3, #4
 80064ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064b0:	4413      	add	r3, r2
 80064b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80064ce:	d921      	bls.n	8006514 <USB_EPStartXfer+0xc40>
 80064d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <USB_EPStartXfer+0xc1c>
 80064e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	b29b      	uxth	r3, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650c:	b29a      	uxth	r2, r3
 800650e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e05c      	b.n	80065ce <USB_EPStartXfer+0xcfa>
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <USB_EPStartXfer+0xc5e>
 800651c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e04d      	b.n	80065ce <USB_EPStartXfer+0xcfa>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <USB_EPStartXfer+0xc7e>
 8006548:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800654c:	3301      	adds	r3, #1
 800654e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006552:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800655c:	b29b      	uxth	r3, r3
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	b29b      	uxth	r3, r3
 8006562:	4313      	orrs	r3, r2
 8006564:	b29a      	uxth	r2, r3
 8006566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	e030      	b.n	80065ce <USB_EPStartXfer+0xcfa>
 800656c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d128      	bne.n	80065ce <USB_EPStartXfer+0xcfa>
 800657c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800658a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a0:	4413      	add	r3, r2
 80065a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	011a      	lsls	r2, r3, #4
 80065b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b8:	4413      	add	r3, r2
 80065ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	891b      	ldrh	r3, [r3, #8]
 80065da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f000 fe58 	bl	80072b2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006628:	817b      	strh	r3, [r7, #10]
 800662a:	897b      	ldrh	r3, [r7, #10]
 800662c:	f083 0310 	eor.w	r3, r3, #16
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	897b      	ldrh	r3, [r7, #10]
 8006634:	f083 0320 	eor.w	r3, r3, #32
 8006638:	817b      	strh	r3, [r7, #10]
 800663a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	897b      	ldrh	r3, [r7, #10]
 8006656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800665e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006666:	b29b      	uxth	r3, r3
 8006668:	8013      	strh	r3, [r2, #0]
 800666a:	f000 bcde 	b.w	800702a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	7b1b      	ldrb	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 80bb 	bne.w	80067f6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699a      	ldr	r2, [r3, #24]
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	429a      	cmp	r2, r3
 800669a:	d917      	bls.n	80066cc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699a      	ldr	r2, [r3, #24]
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066bc:	1ad2      	subs	r2, r2, r3
 80066be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	619a      	str	r2, [r3, #24]
 80066ca:	e00e      	b.n	80066ea <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006706:	b29b      	uxth	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800670e:	4413      	add	r3, r2
 8006710:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	011a      	lsls	r2, r3, #4
 8006722:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006726:	4413      	add	r3, r2
 8006728:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800672c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	2b3e      	cmp	r3, #62	@ 0x3e
 800674a:	d924      	bls.n	8006796 <USB_EPStartXfer+0xec2>
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <USB_EPStartXfer+0xe98>
 8006762:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006766:	3b01      	subs	r3, #1
 8006768:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800676c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29b      	uxth	r3, r3
 800677e:	4313      	orrs	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678a:	b29a      	uxth	r2, r3
 800678c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	f000 bc10 	b.w	8006fb6 <USB_EPStartXfer+0x16e2>
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10c      	bne.n	80067b8 <USB_EPStartXfer+0xee4>
 800679e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e3fe      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	085b      	lsrs	r3, r3, #1
 80067be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <USB_EPStartXfer+0xf04>
 80067ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067d2:	3301      	adds	r3, #1
 80067d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e3df      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	78db      	ldrb	r3, [r3, #3]
 8006802:	2b02      	cmp	r3, #2
 8006804:	f040 8218 	bne.w	8006c38 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 809d 	bne.w	8006954 <USB_EPStartXfer+0x1080>
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800683e:	4413      	add	r3, r2
 8006840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	011a      	lsls	r2, r3, #4
 8006852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006856:	4413      	add	r3, r2
 8006858:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800685c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800686c:	b29a      	uxth	r2, r3
 800686e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b3e      	cmp	r3, #62	@ 0x3e
 8006882:	d92b      	bls.n	80068dc <USB_EPStartXfer+0x1008>
 8006884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <USB_EPStartXfer+0xfe0>
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ae:	3b01      	subs	r3, #1
 80068b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	029b      	lsls	r3, r3, #10
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	e070      	b.n	80069be <USB_EPStartXfer+0x10ea>
 80068dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10c      	bne.n	8006906 <USB_EPStartXfer+0x1032>
 80068ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006902:	801a      	strh	r2, [r3, #0]
 8006904:	e05b      	b.n	80069be <USB_EPStartXfer+0x10ea>
 8006906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <USB_EPStartXfer+0x1062>
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006930:	3301      	adds	r3, #1
 8006932:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29a      	uxth	r2, r3
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006942:	b29b      	uxth	r3, r3
 8006944:	029b      	lsls	r3, r3, #10
 8006946:	b29b      	uxth	r3, r3
 8006948:	4313      	orrs	r3, r2
 800694a:	b29a      	uxth	r2, r3
 800694c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006950:	801a      	strh	r2, [r3, #0]
 8006952:	e034      	b.n	80069be <USB_EPStartXfer+0x10ea>
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d12c      	bne.n	80069be <USB_EPStartXfer+0x10ea>
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006980:	b29b      	uxth	r3, r3
 8006982:	461a      	mov	r2, r3
 8006984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006988:	4413      	add	r3, r2
 800698a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800698e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	011a      	lsls	r2, r3, #4
 800699c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 809d 	bne.w	8006b18 <USB_EPStartXfer+0x1244>
 80069de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a02:	4413      	add	r3, r2
 8006a04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a46:	d92b      	bls.n	8006aa0 <USB_EPStartXfer+0x11cc>
 8006a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <USB_EPStartXfer+0x11a4>
 8006a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a72:	3b01      	subs	r3, #1
 8006a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	e069      	b.n	8006b74 <USB_EPStartXfer+0x12a0>
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10c      	bne.n	8006aca <USB_EPStartXfer+0x11f6>
 8006ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e054      	b.n	8006b74 <USB_EPStartXfer+0x12a0>
 8006aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <USB_EPStartXfer+0x1226>
 8006af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af4:	3301      	adds	r3, #1
 8006af6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006afa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	e02d      	b.n	8006b74 <USB_EPStartXfer+0x12a0>
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	785b      	ldrb	r3, [r3, #1]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d125      	bne.n	8006b74 <USB_EPStartXfer+0x12a0>
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b3e:	4413      	add	r3, r2
 8006b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	011a      	lsls	r2, r3, #4
 8006b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b56:	4413      	add	r3, r2
 8006b58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b72:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8218 	beq.w	8006fb6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ba6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <USB_EPStartXfer+0x12ea>
 8006bb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10d      	bne.n	8006bda <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 81f5 	bne.w	8006fb6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bcc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 81ee 	bne.w	8006fb6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c00:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	8013      	strh	r3, [r2, #0]
 8006c36:	e1be      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	78db      	ldrb	r3, [r3, #3]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 81b4 	bne.w	8006fb2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d917      	bls.n	8006c96 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c86:	1ad2      	subs	r2, r2, r3
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	619a      	str	r2, [r3, #24]
 8006c94:	e00e      	b.n	8006cb4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f040 8085 	bne.w	8006dd0 <USB_EPStartXfer+0x14fc>
 8006cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cea:	4413      	add	r3, r2
 8006cec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	011a      	lsls	r2, r3, #4
 8006cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d02:	4413      	add	r3, r2
 8006d04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d26:	d923      	bls.n	8006d70 <USB_EPStartXfer+0x149c>
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d104      	bne.n	8006d48 <USB_EPStartXfer+0x1474>
 8006d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d42:	3b01      	subs	r3, #1
 8006d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	029b      	lsls	r3, r3, #10
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	e060      	b.n	8006e32 <USB_EPStartXfer+0x155e>
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10c      	bne.n	8006d92 <USB_EPStartXfer+0x14be>
 8006d78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	e04f      	b.n	8006e32 <USB_EPStartXfer+0x155e>
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d004      	beq.n	8006db2 <USB_EPStartXfer+0x14de>
 8006da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dac:	3301      	adds	r3, #1
 8006dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	029b      	lsls	r3, r3, #10
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e030      	b.n	8006e32 <USB_EPStartXfer+0x155e>
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d128      	bne.n	8006e32 <USB_EPStartXfer+0x155e>
 8006de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e04:	4413      	add	r3, r2
 8006e06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	011a      	lsls	r2, r3, #4
 8006e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f040 8085 	bne.w	8006f5c <USB_EPStartXfer+0x1688>
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e76:	4413      	add	r3, r2
 8006e78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	011a      	lsls	r2, r3, #4
 8006e8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb2:	d923      	bls.n	8006efc <USB_EPStartXfer+0x1628>
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <USB_EPStartXfer+0x1600>
 8006eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ed4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	029b      	lsls	r3, r3, #10
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	e05c      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10c      	bne.n	8006f1e <USB_EPStartXfer+0x164a>
 8006f04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e04b      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <USB_EPStartXfer+0x166a>
 8006f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f38:	3301      	adds	r3, #1
 8006f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	029b      	lsls	r3, r3, #10
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	4313      	orrs	r3, r2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	e02c      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d124      	bne.n	8006fb6 <USB_EPStartXfer+0x16e2>
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f82:	4413      	add	r3, r2
 8006f84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	011a      	lsls	r2, r3, #4
 8006f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e001      	b.n	8006fb6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e03a      	b.n	800702c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fdc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006fe0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006fe4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fe8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006fec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ff0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ff4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	441a      	add	r2, r3
 8007012:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d020      	beq.n	800708a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800705a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800705e:	81bb      	strh	r3, [r7, #12]
 8007060:	89bb      	ldrh	r3, [r7, #12]
 8007062:	f083 0310 	eor.w	r3, r3, #16
 8007066:	81bb      	strh	r3, [r7, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	89bb      	ldrh	r3, [r7, #12]
 8007074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007084:	b29b      	uxth	r3, r3
 8007086:	8013      	strh	r3, [r2, #0]
 8007088:	e01f      	b.n	80070ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800709c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a0:	81fb      	strh	r3, [r7, #14]
 80070a2:	89fb      	ldrh	r3, [r7, #14]
 80070a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070a8:	81fb      	strh	r3, [r7, #14]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	89fb      	ldrh	r3, [r7, #14]
 80070b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	7b1b      	ldrb	r3, [r3, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f040 809d 	bne.w	8007224 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	785b      	ldrb	r3, [r3, #1]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d04c      	beq.n	800718c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	823b      	strh	r3, [r7, #16]
 8007100:	8a3b      	ldrh	r3, [r7, #16]
 8007102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01b      	beq.n	8007142 <USB_EPClearStall+0x6c>
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800711c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007120:	81fb      	strh	r3, [r7, #14]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800713a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d06c      	beq.n	8007224 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800715c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007160:	81bb      	strh	r3, [r7, #12]
 8007162:	89bb      	ldrh	r3, [r7, #12]
 8007164:	f083 0320 	eor.w	r3, r3, #32
 8007168:	81bb      	strh	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	441a      	add	r2, r3
 8007174:	89bb      	ldrh	r3, [r7, #12]
 8007176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800717a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800717e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]
 800718a:	e04b      	b.n	8007224 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	82fb      	strh	r3, [r7, #22]
 800719a:	8afb      	ldrh	r3, [r7, #22]
 800719c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <USB_EPClearStall+0x106>
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ba:	82bb      	strh	r3, [r7, #20]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	441a      	add	r2, r3
 80071c6:	8abb      	ldrh	r3, [r7, #20]
 80071c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d8:	b29b      	uxth	r3, r3
 80071da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071f2:	827b      	strh	r3, [r7, #18]
 80071f4:	8a7b      	ldrh	r3, [r7, #18]
 80071f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071fa:	827b      	strh	r3, [r7, #18]
 80071fc:	8a7b      	ldrh	r3, [r7, #18]
 80071fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007202:	827b      	strh	r3, [r7, #18]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	441a      	add	r2, r3
 800720e:	8a7b      	ldrh	r3, [r7, #18]
 8007210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800721c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007220:	b29b      	uxth	r3, r3
 8007222:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2280      	movs	r2, #128	@ 0x80
 8007246:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800728c:	b29b      	uxth	r3, r3
 800728e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr

080072b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b08b      	sub	sp, #44	@ 0x2c
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	4611      	mov	r1, r2
 80072be:	461a      	mov	r2, r3
 80072c0:	460b      	mov	r3, r1
 80072c2:	80fb      	strh	r3, [r7, #6]
 80072c4:	4613      	mov	r3, r2
 80072c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072c8:	88bb      	ldrh	r3, [r7, #4]
 80072ca:	3301      	adds	r3, #1
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	005a      	lsls	r2, r3, #1
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ea:	e01f      	b.n	800732c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	3301      	adds	r3, #1
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b21b      	sxth	r3, r3
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	b21a      	sxth	r2, r3
 80072fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007302:	4313      	orrs	r3, r2
 8007304:	b21b      	sxth	r3, r3
 8007306:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	8a7a      	ldrh	r2, [r7, #18]
 800730c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	3302      	adds	r3, #2
 8007312:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	3302      	adds	r3, #2
 8007318:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	3301      	adds	r3, #1
 800731e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3301      	adds	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	3b01      	subs	r3, #1
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1dc      	bne.n	80072ec <USB_WritePMA+0x3a>
  }
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	372c      	adds	r7, #44	@ 0x2c
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800733e:	b480      	push	{r7}
 8007340:	b08b      	sub	sp, #44	@ 0x2c
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	4611      	mov	r1, r2
 800734a:	461a      	mov	r2, r3
 800734c:	460b      	mov	r3, r1
 800734e:	80fb      	strh	r3, [r7, #6]
 8007350:	4613      	mov	r3, r2
 8007352:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007354:	88bb      	ldrh	r3, [r7, #4]
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	005a      	lsls	r2, r3, #1
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007370:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
 8007376:	e01b      	b.n	80073b0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	3302      	adds	r3, #2
 8007384:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	b2da      	uxtb	r2, r3
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	b2da      	uxtb	r2, r3
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	3301      	adds	r3, #1
 80073a2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	3302      	adds	r3, #2
 80073a8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	3b01      	subs	r3, #1
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e0      	bne.n	8007378 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80073b6:	88bb      	ldrh	r3, [r7, #4]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	701a      	strb	r2, [r3, #0]
  }
}
 80073d2:	bf00      	nop
 80073d4:	372c      	adds	r7, #44	@ 0x2c
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr

080073dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	7c1b      	ldrb	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d115      	bne.n	8007420 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073f8:	2202      	movs	r2, #2
 80073fa:	2181      	movs	r1, #129	@ 0x81
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 feee 	bl	80091de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800740c:	2202      	movs	r2, #2
 800740e:	2101      	movs	r1, #1
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fee4 	bl	80091de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800741e:	e012      	b.n	8007446 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007420:	2340      	movs	r3, #64	@ 0x40
 8007422:	2202      	movs	r2, #2
 8007424:	2181      	movs	r1, #129	@ 0x81
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fed9 	bl	80091de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007432:	2340      	movs	r3, #64	@ 0x40
 8007434:	2202      	movs	r2, #2
 8007436:	2101      	movs	r1, #1
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 fed0 	bl	80091de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007446:	2308      	movs	r3, #8
 8007448:	2203      	movs	r2, #3
 800744a:	2182      	movs	r1, #130	@ 0x82
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 fec6 	bl	80091de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007458:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800745c:	f001 ffe6 	bl	800942c <USBD_static_malloc>
 8007460:	4602      	mov	r2, r0
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007472:	2301      	movs	r3, #1
 8007474:	73fb      	strb	r3, [r7, #15]
 8007476:	e026      	b.n	80074c6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800747e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	7c1b      	ldrb	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ac:	2101      	movs	r1, #1
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f001 ff85 	bl	80093be <USBD_LL_PrepareReceive>
 80074b4:	e007      	b.n	80074c6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074bc:	2340      	movs	r3, #64	@ 0x40
 80074be:	2101      	movs	r1, #1
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 ff7c 	bl	80093be <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074e0:	2181      	movs	r1, #129	@ 0x81
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fea1 	bl	800922a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074ee:	2101      	movs	r1, #1
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 fe9a 	bl	800922a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074fe:	2182      	movs	r1, #130	@ 0x82
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fe92 	bl	800922a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00e      	beq.n	8007534 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007526:	4618      	mov	r0, r3
 8007528:	f001 ff8c 	bl	8009444 <USBD_static_free>
    pdev->pClassData = NULL;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007564:	2b00      	cmp	r3, #0
 8007566:	d039      	beq.n	80075dc <USBD_CDC_Setup+0x9e>
 8007568:	2b20      	cmp	r3, #32
 800756a:	d17f      	bne.n	800766c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	88db      	ldrh	r3, [r3, #6]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d029      	beq.n	80075c8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b25b      	sxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	da11      	bge.n	80075a2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800758a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	88d2      	ldrh	r2, [r2, #6]
 8007590:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007592:	6939      	ldr	r1, [r7, #16]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	88db      	ldrh	r3, [r3, #6]
 8007598:	461a      	mov	r2, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fa06 	bl	80089ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80075a0:	e06b      	b.n	800767a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	785a      	ldrb	r2, [r3, #1]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	88db      	ldrh	r3, [r3, #6]
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075b8:	6939      	ldr	r1, [r7, #16]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	88db      	ldrh	r3, [r3, #6]
 80075be:	461a      	mov	r2, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 fa21 	bl	8008a08 <USBD_CtlPrepareRx>
      break;
 80075c6:	e058      	b.n	800767a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	7850      	ldrb	r0, [r2, #1]
 80075d4:	2200      	movs	r2, #0
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	4798      	blx	r3
      break;
 80075da:	e04e      	b.n	800767a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b0b      	cmp	r3, #11
 80075e2:	d02e      	beq.n	8007642 <USBD_CDC_Setup+0x104>
 80075e4:	2b0b      	cmp	r3, #11
 80075e6:	dc38      	bgt.n	800765a <USBD_CDC_Setup+0x11c>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <USBD_CDC_Setup+0xb4>
 80075ec:	2b0a      	cmp	r3, #10
 80075ee:	d014      	beq.n	800761a <USBD_CDC_Setup+0xdc>
 80075f0:	e033      	b.n	800765a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d107      	bne.n	800760c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80075fc:	f107 030c 	add.w	r3, r7, #12
 8007600:	2202      	movs	r2, #2
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f9d1 	bl	80089ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800760a:	e02e      	b.n	800766a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 f962 	bl	80088d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007614:	2302      	movs	r3, #2
 8007616:	75fb      	strb	r3, [r7, #23]
          break;
 8007618:	e027      	b.n	800766a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007620:	2b03      	cmp	r3, #3
 8007622:	d107      	bne.n	8007634 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007624:	f107 030f 	add.w	r3, r7, #15
 8007628:	2201      	movs	r2, #1
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f9bd 	bl	80089ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007632:	e01a      	b.n	800766a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 f94e 	bl	80088d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800763c:	2302      	movs	r3, #2
 800763e:	75fb      	strb	r3, [r7, #23]
          break;
 8007640:	e013      	b.n	800766a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007648:	2b03      	cmp	r3, #3
 800764a:	d00d      	beq.n	8007668 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f001 f942 	bl	80088d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007654:	2302      	movs	r3, #2
 8007656:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007658:	e006      	b.n	8007668 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f93b 	bl	80088d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007662:	2302      	movs	r3, #2
 8007664:	75fb      	strb	r3, [r7, #23]
          break;
 8007666:	e000      	b.n	800766a <USBD_CDC_Setup+0x12c>
          break;
 8007668:	bf00      	nop
      }
      break;
 800766a:	e006      	b.n	800767a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f932 	bl	80088d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	75fb      	strb	r3, [r7, #23]
      break;
 8007678:	bf00      	nop
  }

  return ret;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007696:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800769e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d03a      	beq.n	8007720 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	331c      	adds	r3, #28
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d029      	beq.n	8007714 <USBD_CDC_DataIn+0x90>
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	440b      	add	r3, r1
 80076ce:	331c      	adds	r3, #28
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	78f9      	ldrb	r1, [r7, #3]
 80076d4:	68b8      	ldr	r0, [r7, #8]
 80076d6:	460b      	mov	r3, r1
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4403      	add	r3, r0
 80076e0:	3320      	adds	r3, #32
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d110      	bne.n	8007714 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	331c      	adds	r3, #28
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007706:	78f9      	ldrb	r1, [r7, #3]
 8007708:	2300      	movs	r3, #0
 800770a:	2200      	movs	r2, #0
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 fe33 	bl	8009378 <USBD_LL_Transmit>
 8007712:	e003      	b.n	800771c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	e000      	b.n	8007722 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007720:	2302      	movs	r3, #2
  }
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800773c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 fe5e 	bl	8009404 <USBD_LL_GetRxDataSize>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800776e:	4611      	mov	r1, r2
 8007770:	4798      	blx	r3

    return USBD_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	e000      	b.n	8007778 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007776:	2302      	movs	r3, #2
  }
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800778e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <USBD_CDC_EP0_RxReady+0x44>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80077a0:	2bff      	cmp	r3, #255	@ 0xff
 80077a2:	d00f      	beq.n	80077c4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80077b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	22ff      	movs	r2, #255	@ 0xff
 80077c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2243      	movs	r2, #67	@ 0x43
 80077dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80077de:	4b03      	ldr	r3, [pc, #12]	@ (80077ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20000094 	.word	0x20000094

080077f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2243      	movs	r2, #67	@ 0x43
 80077fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077fe:	4b03      	ldr	r3, [pc, #12]	@ (800780c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	20000050 	.word	0x20000050

08007810 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2243      	movs	r2, #67	@ 0x43
 800781c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800781e:	4b03      	ldr	r3, [pc, #12]	@ (800782c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	200000d8 	.word	0x200000d8

08007830 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	220a      	movs	r2, #10
 800783c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800783e:	4b03      	ldr	r3, [pc, #12]	@ (800784c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	2000000c 	.word	0x2000000c

08007850 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800785a:	2302      	movs	r3, #2
 800785c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007890:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800789a:	88fa      	ldrh	r2, [r7, #6]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01c      	beq.n	8007928 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d115      	bne.n	8007924 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007916:	b29b      	uxth	r3, r3
 8007918:	2181      	movs	r1, #129	@ 0x81
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 fd2c 	bl	8009378 <USBD_LL_Transmit>

      return USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	e002      	b.n	800792a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007940:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007948:	2b00      	cmp	r3, #0
 800794a:	d017      	beq.n	800797c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7c1b      	ldrb	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800795a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800795e:	2101      	movs	r1, #1
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fd2c 	bl	80093be <USBD_LL_PrepareReceive>
 8007966:	e007      	b.n	8007978 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800796e:	2340      	movs	r3, #64	@ 0x40
 8007970:	2101      	movs	r1, #1
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fd23 	bl	80093be <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e000      	b.n	800797e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800797c:	2302      	movs	r3, #2
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	4613      	mov	r3, r2
 8007992:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800799a:	2302      	movs	r3, #2
 800799c:	e01a      	b.n	80079d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	79fa      	ldrb	r2, [r7, #7]
 80079ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f001 fb91 	bl	80090f4 <USBD_LL_Init>

  return USBD_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d006      	beq.n	80079fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
 80079fc:	e001      	b.n	8007a02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr

08007a0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fbc6 	bl	80091a8 <USBD_LL_Start>

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr

08007a3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a46:	2302      	movs	r3, #2
 8007a48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00c      	beq.n	8007a6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	4611      	mov	r1, r2
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	4611      	mov	r1, r2
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fed8 	bl	8008866 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007ad2:	f003 031f 	and.w	r3, r3, #31
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d016      	beq.n	8007b08 <USBD_LL_SetupStage+0x6a>
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d81c      	bhi.n	8007b18 <USBD_LL_SetupStage+0x7a>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <USBD_LL_SetupStage+0x4a>
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d008      	beq.n	8007af8 <USBD_LL_SetupStage+0x5a>
 8007ae6:	e017      	b.n	8007b18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9cb 	bl	8007e8c <USBD_StdDevReq>
      break;
 8007af6:	e01a      	b.n	8007b2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fa2d 	bl	8007f60 <USBD_StdItfReq>
      break;
 8007b06:	e012      	b.n	8007b2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa6d 	bl	8007ff0 <USBD_StdEPReq>
      break;
 8007b16:	e00a      	b.n	8007b2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007b1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fb9e 	bl	8009268 <USBD_LL_StallEP>
      break;
 8007b2c:	bf00      	nop
  }

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	607a      	str	r2, [r7, #4]
 8007b44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d14b      	bne.n	8007be4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d134      	bne.n	8007bc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d919      	bls.n	8007b9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d203      	bcs.n	8007b8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	e002      	b.n	8007b92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 ff54 	bl	8008a44 <USBD_CtlContinueRx>
 8007b9c:	e038      	b.n	8007c10 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d105      	bne.n	8007bc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 ff51 	bl	8008a68 <USBD_CtlSendStatus>
 8007bc6:	e023      	b.n	8007c10 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bce:	2b05      	cmp	r3, #5
 8007bd0:	d11e      	bne.n	8007c10 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007bda:	2100      	movs	r1, #0
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f001 fb43 	bl	8009268 <USBD_LL_StallEP>
 8007be2:	e015      	b.n	8007c10 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d108      	bne.n	8007c0c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	7afa      	ldrb	r2, [r7, #11]
 8007c04:	4611      	mov	r1, r2
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	4798      	blx	r3
 8007c0a:	e001      	b.n	8007c10 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e000      	b.n	8007c12 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	460b      	mov	r3, r1
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d17f      	bne.n	8007d2e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3314      	adds	r3, #20
 8007c32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d15c      	bne.n	8007cf8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d915      	bls.n	8007c76 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	1ad2      	subs	r2, r2, r3
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 febe 	bl	80089e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f001 fba5 	bl	80093be <USBD_LL_PrepareReceive>
 8007c74:	e04e      	b.n	8007d14 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	6912      	ldr	r2, [r2, #16]
 8007c7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c82:	fb01 f202 	mul.w	r2, r1, r2
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11c      	bne.n	8007cc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d316      	bcc.n	8007cc6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d20f      	bcs.n	8007cc6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fe9a 	bl	80089e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f001 fb7d 	bl	80093be <USBD_LL_PrepareReceive>
 8007cc4:	e026      	b.n	8007d14 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d105      	bne.n	8007ce8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ce8:	2180      	movs	r1, #128	@ 0x80
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 fabc 	bl	8009268 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 fecc 	bl	8008a8e <USBD_CtlReceiveStatus>
 8007cf6:	e00d      	b.n	8007d14 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d004      	beq.n	8007d0c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d0c:	2180      	movs	r1, #128	@ 0x80
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f001 faaa 	bl	8009268 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d11d      	bne.n	8007d5a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fe81 	bl	8007a26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d2c:	e015      	b.n	8007d5a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00d      	beq.n	8007d56 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d108      	bne.n	8007d56 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	7afa      	ldrb	r2, [r7, #11]
 8007d4e:	4611      	mov	r1, r2
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	4798      	blx	r3
 8007d54:	e001      	b.n	8007d5a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d56:	2302      	movs	r3, #2
 8007d58:	e000      	b.n	8007d5c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d6c:	2340      	movs	r3, #64	@ 0x40
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2100      	movs	r1, #0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fa33 	bl	80091de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2240      	movs	r2, #64	@ 0x40
 8007d84:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d88:	2340      	movs	r3, #64	@ 0x40
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2180      	movs	r1, #128	@ 0x80
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fa25 	bl	80091de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2240      	movs	r2, #64	@ 0x40
 8007d9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d009      	beq.n	8007ddc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6852      	ldr	r2, [r2, #4]
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
  }

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	460b      	mov	r3, r1
 8007df0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d105      	bne.n	8007e4a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr

08007e56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d10b      	bne.n	8007e80 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ea2:	2b40      	cmp	r3, #64	@ 0x40
 8007ea4:	d005      	beq.n	8007eb2 <USBD_StdDevReq+0x26>
 8007ea6:	2b40      	cmp	r3, #64	@ 0x40
 8007ea8:	d84f      	bhi.n	8007f4a <USBD_StdDevReq+0xbe>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <USBD_StdDevReq+0x36>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d14b      	bne.n	8007f4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
      break;
 8007ec0:	e048      	b.n	8007f54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b09      	cmp	r3, #9
 8007ec8:	d839      	bhi.n	8007f3e <USBD_StdDevReq+0xb2>
 8007eca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <USBD_StdDevReq+0x44>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f21 	.word	0x08007f21
 8007ed4:	08007f35 	.word	0x08007f35
 8007ed8:	08007f3f 	.word	0x08007f3f
 8007edc:	08007f2b 	.word	0x08007f2b
 8007ee0:	08007f3f 	.word	0x08007f3f
 8007ee4:	08007f03 	.word	0x08007f03
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007f3f 	.word	0x08007f3f
 8007ef0:	08007f17 	.word	0x08007f17
 8007ef4:	08007f0d 	.word	0x08007f0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9dc 	bl	80082b8 <USBD_GetDescriptor>
          break;
 8007f00:	e022      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fb3f 	bl	8008588 <USBD_SetAddress>
          break;
 8007f0a:	e01d      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fb7e 	bl	8008610 <USBD_SetConfig>
          break;
 8007f14:	e018      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc07 	bl	800872c <USBD_GetConfig>
          break;
 8007f1e:	e013      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fc37 	bl	8008796 <USBD_GetStatus>
          break;
 8007f28:	e00e      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc65 	bl	80087fc <USBD_SetFeature>
          break;
 8007f32:	e009      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fc74 	bl	8008824 <USBD_ClrFeature>
          break;
 8007f3c:	e004      	b.n	8007f48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fcc9 	bl	80088d8 <USBD_CtlError>
          break;
 8007f46:	bf00      	nop
      }
      break;
 8007f48:	e004      	b.n	8007f54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fcc3 	bl	80088d8 <USBD_CtlError>
      break;
 8007f52:	bf00      	nop
  }

  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop

08007f60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d005      	beq.n	8007f86 <USBD_StdItfReq+0x26>
 8007f7a:	2b40      	cmp	r3, #64	@ 0x40
 8007f7c:	d82e      	bhi.n	8007fdc <USBD_StdItfReq+0x7c>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <USBD_StdItfReq+0x26>
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d12a      	bne.n	8007fdc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d81d      	bhi.n	8007fce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	889b      	ldrh	r3, [r3, #4]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d813      	bhi.n	8007fc4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	88db      	ldrh	r3, [r3, #6]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d110      	bne.n	8007fd8 <USBD_StdItfReq+0x78>
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10d      	bne.n	8007fd8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fd53 	bl	8008a68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fc2:	e009      	b.n	8007fd8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fc86 	bl	80088d8 <USBD_CtlError>
          break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fc81 	bl	80088d8 <USBD_CtlError>
          break;
 8007fd6:	e000      	b.n	8007fda <USBD_StdItfReq+0x7a>
          break;
 8007fd8:	bf00      	nop
      }
      break;
 8007fda:	e004      	b.n	8007fe6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc7a 	bl	80088d8 <USBD_CtlError>
      break;
 8007fe4:	bf00      	nop
  }

  return USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	889b      	ldrh	r3, [r3, #4]
 8008002:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800800c:	2b40      	cmp	r3, #64	@ 0x40
 800800e:	d007      	beq.n	8008020 <USBD_StdEPReq+0x30>
 8008010:	2b40      	cmp	r3, #64	@ 0x40
 8008012:	f200 8146 	bhi.w	80082a2 <USBD_StdEPReq+0x2b2>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <USBD_StdEPReq+0x40>
 800801a:	2b20      	cmp	r3, #32
 800801c:	f040 8141 	bne.w	80082a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
      break;
 800802e:	e13d      	b.n	80082ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008038:	2b20      	cmp	r3, #32
 800803a:	d10a      	bne.n	8008052 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	e12d      	b.n	80082ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d007      	beq.n	800806a <USBD_StdEPReq+0x7a>
 800805a:	2b03      	cmp	r3, #3
 800805c:	f300 811b 	bgt.w	8008296 <USBD_StdEPReq+0x2a6>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d072      	beq.n	800814a <USBD_StdEPReq+0x15a>
 8008064:	2b01      	cmp	r3, #1
 8008066:	d03a      	beq.n	80080de <USBD_StdEPReq+0xee>
 8008068:	e115      	b.n	8008296 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008070:	2b02      	cmp	r3, #2
 8008072:	d002      	beq.n	800807a <USBD_StdEPReq+0x8a>
 8008074:	2b03      	cmp	r3, #3
 8008076:	d015      	beq.n	80080a4 <USBD_StdEPReq+0xb4>
 8008078:	e02b      	b.n	80080d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <USBD_StdEPReq+0xaa>
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b80      	cmp	r3, #128	@ 0x80
 8008084:	d009      	beq.n	800809a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f8ec 	bl	8009268 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008090:	2180      	movs	r1, #128	@ 0x80
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f8e8 	bl	8009268 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008098:	e020      	b.n	80080dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fc1b 	bl	80088d8 <USBD_CtlError>
              break;
 80080a2:	e01b      	b.n	80080dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	885b      	ldrh	r3, [r3, #2]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10e      	bne.n	80080ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <USBD_StdEPReq+0xda>
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b80      	cmp	r3, #128	@ 0x80
 80080b6:	d008      	beq.n	80080ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	88db      	ldrh	r3, [r3, #6]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f8cf 	bl	8009268 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fccc 	bl	8008a68 <USBD_CtlSendStatus>

              break;
 80080d0:	e004      	b.n	80080dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fbff 	bl	80088d8 <USBD_CtlError>
              break;
 80080da:	bf00      	nop
          }
          break;
 80080dc:	e0e0      	b.n	80082a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d002      	beq.n	80080ee <USBD_StdEPReq+0xfe>
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d015      	beq.n	8008118 <USBD_StdEPReq+0x128>
 80080ec:	e026      	b.n	800813c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00c      	beq.n	800810e <USBD_StdEPReq+0x11e>
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b80      	cmp	r3, #128	@ 0x80
 80080f8:	d009      	beq.n	800810e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f8b2 	bl	8009268 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008104:	2180      	movs	r1, #128	@ 0x80
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f8ae 	bl	8009268 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800810c:	e01c      	b.n	8008148 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fbe1 	bl	80088d8 <USBD_CtlError>
              break;
 8008116:	e017      	b.n	8008148 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d112      	bne.n	8008146 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008126:	2b00      	cmp	r3, #0
 8008128:	d004      	beq.n	8008134 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 f8b9 	bl	80092a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc97 	bl	8008a68 <USBD_CtlSendStatus>
              }
              break;
 800813a:	e004      	b.n	8008146 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fbca 	bl	80088d8 <USBD_CtlError>
              break;
 8008144:	e000      	b.n	8008148 <USBD_StdEPReq+0x158>
              break;
 8008146:	bf00      	nop
          }
          break;
 8008148:	e0aa      	b.n	80082a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008150:	2b02      	cmp	r3, #2
 8008152:	d002      	beq.n	800815a <USBD_StdEPReq+0x16a>
 8008154:	2b03      	cmp	r3, #3
 8008156:	d032      	beq.n	80081be <USBD_StdEPReq+0x1ce>
 8008158:	e097      	b.n	800828a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <USBD_StdEPReq+0x180>
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b80      	cmp	r3, #128	@ 0x80
 8008164:	d004      	beq.n	8008170 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fbb5 	bl	80088d8 <USBD_CtlError>
                break;
 800816e:	e091      	b.n	8008294 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008174:	2b00      	cmp	r3, #0
 8008176:	da0b      	bge.n	8008190 <USBD_StdEPReq+0x1a0>
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800817e:	4613      	mov	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	3310      	adds	r3, #16
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	4413      	add	r3, r2
 800818c:	3304      	adds	r3, #4
 800818e:	e00b      	b.n	80081a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	4413      	add	r3, r2
 80081a6:	3304      	adds	r3, #4
 80081a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2202      	movs	r2, #2
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fbf8 	bl	80089ac <USBD_CtlSendData>
              break;
 80081bc:	e06a      	b.n	8008294 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da11      	bge.n	80081ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	f003 020f 	and.w	r2, r3, #15
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	3318      	adds	r3, #24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d117      	bne.n	8008210 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fb78 	bl	80088d8 <USBD_CtlError>
                  break;
 80081e8:	e054      	b.n	8008294 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	f003 020f 	and.w	r2, r3, #15
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb65 	bl	80088d8 <USBD_CtlError>
                  break;
 800820e:	e041      	b.n	8008294 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	da0b      	bge.n	8008230 <USBD_StdEPReq+0x240>
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	3310      	adds	r3, #16
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	4413      	add	r3, r2
 800822c:	3304      	adds	r3, #4
 800822e:	e00b      	b.n	8008248 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	4413      	add	r3, r2
 8008246:	3304      	adds	r3, #4
 8008248:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <USBD_StdEPReq+0x266>
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b80      	cmp	r3, #128	@ 0x80
 8008254:	d103      	bne.n	800825e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e00e      	b.n	800827c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 f83e 	bl	80092e4 <USBD_LL_IsStallEP>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2201      	movs	r2, #1
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e002      	b.n	800827c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2202      	movs	r2, #2
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fb92 	bl	80089ac <USBD_CtlSendData>
              break;
 8008288:	e004      	b.n	8008294 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb23 	bl	80088d8 <USBD_CtlError>
              break;
 8008292:	bf00      	nop
          }
          break;
 8008294:	e004      	b.n	80082a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fb1d 	bl	80088d8 <USBD_CtlError>
          break;
 800829e:	bf00      	nop
      }
      break;
 80082a0:	e004      	b.n	80082ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fb17 	bl	80088d8 <USBD_CtlError>
      break;
 80082aa:	bf00      	nop
  }

  return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	0a1b      	lsrs	r3, r3, #8
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	2b06      	cmp	r3, #6
 80082da:	f200 8128 	bhi.w	800852e <USBD_GetDescriptor+0x276>
 80082de:	a201      	add	r2, pc, #4	@ (adr r2, 80082e4 <USBD_GetDescriptor+0x2c>)
 80082e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e4:	08008301 	.word	0x08008301
 80082e8:	08008319 	.word	0x08008319
 80082ec:	08008359 	.word	0x08008359
 80082f0:	0800852f 	.word	0x0800852f
 80082f4:	0800852f 	.word	0x0800852f
 80082f8:	080084cf 	.word	0x080084cf
 80082fc:	080084fb 	.word	0x080084fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
      break;
 8008316:	e112      	b.n	800853e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7c1b      	ldrb	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10d      	bne.n	800833c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008328:	f107 0208 	add.w	r2, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3301      	adds	r3, #1
 8008336:	2202      	movs	r2, #2
 8008338:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800833a:	e100      	b.n	800853e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	f107 0208 	add.w	r2, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
      break;
 8008356:	e0f2      	b.n	800853e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	885b      	ldrh	r3, [r3, #2]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b05      	cmp	r3, #5
 8008360:	f200 80ac 	bhi.w	80084bc <USBD_GetDescriptor+0x204>
 8008364:	a201      	add	r2, pc, #4	@ (adr r2, 800836c <USBD_GetDescriptor+0xb4>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	08008385 	.word	0x08008385
 8008370:	080083b9 	.word	0x080083b9
 8008374:	080083ed 	.word	0x080083ed
 8008378:	08008421 	.word	0x08008421
 800837c:	08008455 	.word	0x08008455
 8008380:	08008489 	.word	0x08008489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 0108 	add.w	r1, r7, #8
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a6:	e091      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa94 	bl	80088d8 <USBD_CtlError>
            err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
          break;
 80083b6:	e089      	b.n	80084cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7c12      	ldrb	r2, [r2, #16]
 80083d0:	f107 0108 	add.w	r1, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083da:	e077      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa7a 	bl	80088d8 <USBD_CtlError>
            err++;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	3301      	adds	r3, #1
 80083e8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ea:	e06f      	b.n	80084cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	7c12      	ldrb	r2, [r2, #16]
 8008404:	f107 0108 	add.w	r1, r7, #8
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800840e:	e05d      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa60 	bl	80088d8 <USBD_CtlError>
            err++;
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	3301      	adds	r3, #1
 800841c:	72fb      	strb	r3, [r7, #11]
          break;
 800841e:	e055      	b.n	80084cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008442:	e043      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa46 	bl	80088d8 <USBD_CtlError>
            err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
          break;
 8008452:	e03b      	b.n	80084cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7c12      	ldrb	r2, [r2, #16]
 800846c:	f107 0108 	add.w	r1, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008476:	e029      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa2c 	bl	80088d8 <USBD_CtlError>
            err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
          break;
 8008486:	e021      	b.n	80084cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084aa:	e00f      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa12 	bl	80088d8 <USBD_CtlError>
            err++;
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	3301      	adds	r3, #1
 80084b8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ba:	e007      	b.n	80084cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa0a 	bl	80088d8 <USBD_CtlError>
          err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084ca:	e038      	b.n	800853e <USBD_GetDescriptor+0x286>
 80084cc:	e037      	b.n	800853e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7c1b      	ldrb	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084de:	f107 0208 	add.w	r2, r7, #8
 80084e2:	4610      	mov	r0, r2
 80084e4:	4798      	blx	r3
 80084e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e8:	e029      	b.n	800853e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9f3 	bl	80088d8 <USBD_CtlError>
        err++;
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	3301      	adds	r3, #1
 80084f6:	72fb      	strb	r3, [r7, #11]
      break;
 80084f8:	e021      	b.n	800853e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7c1b      	ldrb	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10d      	bne.n	800851e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800850a:	f107 0208 	add.w	r2, r7, #8
 800850e:	4610      	mov	r0, r2
 8008510:	4798      	blx	r3
 8008512:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	2207      	movs	r2, #7
 800851a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800851c:	e00f      	b.n	800853e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f9d9 	bl	80088d8 <USBD_CtlError>
        err++;
 8008526:	7afb      	ldrb	r3, [r7, #11]
 8008528:	3301      	adds	r3, #1
 800852a:	72fb      	strb	r3, [r7, #11]
      break;
 800852c:	e007      	b.n	800853e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9d1 	bl	80088d8 <USBD_CtlError>
      err++;
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	3301      	adds	r3, #1
 800853a:	72fb      	strb	r3, [r7, #11]
      break;
 800853c:	bf00      	nop
  }

  if (err != 0U)
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d11c      	bne.n	800857e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008544:	893b      	ldrh	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d011      	beq.n	800856e <USBD_GetDescriptor+0x2b6>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00d      	beq.n	800856e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88da      	ldrh	r2, [r3, #6]
 8008556:	893b      	ldrh	r3, [r7, #8]
 8008558:	4293      	cmp	r3, r2
 800855a:	bf28      	it	cs
 800855c:	4613      	movcs	r3, r2
 800855e:	b29b      	uxth	r3, r3
 8008560:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008562:	893b      	ldrh	r3, [r7, #8]
 8008564:	461a      	mov	r2, r3
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa1f 	bl	80089ac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	88db      	ldrh	r3, [r3, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa76 	bl	8008a68 <USBD_CtlSendStatus>
 800857c:	e000      	b.n	8008580 <USBD_GetDescriptor+0x2c8>
    return;
 800857e:	bf00      	nop
    }
  }
}
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop

08008588 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	889b      	ldrh	r3, [r3, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d130      	bne.n	80085fc <USBD_SetAddress+0x74>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d12c      	bne.n	80085fc <USBD_SetAddress+0x74>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80085a8:	d828      	bhi.n	80085fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d104      	bne.n	80085ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f988 	bl	80088d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c8:	e01d      	b.n	8008606 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	7bfa      	ldrb	r2, [r7, #15]
 80085ce:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 feaf 	bl	800933a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fa43 	bl	8008a68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f0:	e009      	b.n	8008606 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fa:	e004      	b.n	8008606 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f96a 	bl	80088d8 <USBD_CtlError>
  }
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	885b      	ldrh	r3, [r3, #2]
 800861e:	b2da      	uxtb	r2, r3
 8008620:	4b41      	ldr	r3, [pc, #260]	@ (8008728 <USBD_SetConfig+0x118>)
 8008622:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008624:	4b40      	ldr	r3, [pc, #256]	@ (8008728 <USBD_SetConfig+0x118>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d904      	bls.n	8008636 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f952 	bl	80088d8 <USBD_CtlError>
 8008634:	e075      	b.n	8008722 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863c:	2b02      	cmp	r3, #2
 800863e:	d002      	beq.n	8008646 <USBD_SetConfig+0x36>
 8008640:	2b03      	cmp	r3, #3
 8008642:	d023      	beq.n	800868c <USBD_SetConfig+0x7c>
 8008644:	e062      	b.n	800870c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008646:	4b38      	ldr	r3, [pc, #224]	@ (8008728 <USBD_SetConfig+0x118>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d01a      	beq.n	8008684 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800864e:	4b36      	ldr	r3, [pc, #216]	@ (8008728 <USBD_SetConfig+0x118>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2203      	movs	r2, #3
 800865c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008660:	4b31      	ldr	r3, [pc, #196]	@ (8008728 <USBD_SetConfig+0x118>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff f9e7 	bl	8007a3a <USBD_SetClassConfig>
 800866c:	4603      	mov	r3, r0
 800866e:	2b02      	cmp	r3, #2
 8008670:	d104      	bne.n	800867c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f92f 	bl	80088d8 <USBD_CtlError>
            return;
 800867a:	e052      	b.n	8008722 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9f3 	bl	8008a68 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008682:	e04e      	b.n	8008722 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f9ef 	bl	8008a68 <USBD_CtlSendStatus>
        break;
 800868a:	e04a      	b.n	8008722 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800868c:	4b26      	ldr	r3, [pc, #152]	@ (8008728 <USBD_SetConfig+0x118>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d112      	bne.n	80086ba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800869c:	4b22      	ldr	r3, [pc, #136]	@ (8008728 <USBD_SetConfig+0x118>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086a6:	4b20      	ldr	r3, [pc, #128]	@ (8008728 <USBD_SetConfig+0x118>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7ff f9e3 	bl	8007a78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9d8 	bl	8008a68 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086b8:	e033      	b.n	8008722 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008728 <USBD_SetConfig+0x118>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d01d      	beq.n	8008704 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff f9d1 	bl	8007a78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086d6:	4b14      	ldr	r3, [pc, #80]	@ (8008728 <USBD_SetConfig+0x118>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086e0:	4b11      	ldr	r3, [pc, #68]	@ (8008728 <USBD_SetConfig+0x118>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff f9a7 	bl	8007a3a <USBD_SetClassConfig>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d104      	bne.n	80086fc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f8ef 	bl	80088d8 <USBD_CtlError>
            return;
 80086fa:	e012      	b.n	8008722 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9b3 	bl	8008a68 <USBD_CtlSendStatus>
        break;
 8008702:	e00e      	b.n	8008722 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f9af 	bl	8008a68 <USBD_CtlSendStatus>
        break;
 800870a:	e00a      	b.n	8008722 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f8e2 	bl	80088d8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008714:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <USBD_SetConfig+0x118>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff f9ac 	bl	8007a78 <USBD_ClrClassConfig>
        break;
 8008720:	bf00      	nop
    }
  }
}
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	200004d8 	.word	0x200004d8

0800872c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d004      	beq.n	8008748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8c9 	bl	80088d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008746:	e022      	b.n	800878e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874e:	2b02      	cmp	r3, #2
 8008750:	dc02      	bgt.n	8008758 <USBD_GetConfig+0x2c>
 8008752:	2b00      	cmp	r3, #0
 8008754:	dc03      	bgt.n	800875e <USBD_GetConfig+0x32>
 8008756:	e015      	b.n	8008784 <USBD_GetConfig+0x58>
 8008758:	2b03      	cmp	r3, #3
 800875a:	d00b      	beq.n	8008774 <USBD_GetConfig+0x48>
 800875c:	e012      	b.n	8008784 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3308      	adds	r3, #8
 8008768:	2201      	movs	r2, #1
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f91d 	bl	80089ac <USBD_CtlSendData>
        break;
 8008772:	e00c      	b.n	800878e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	2201      	movs	r2, #1
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f915 	bl	80089ac <USBD_CtlSendData>
        break;
 8008782:	e004      	b.n	800878e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f8a6 	bl	80088d8 <USBD_CtlError>
        break;
 800878c:	bf00      	nop
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a6:	3b01      	subs	r3, #1
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d81e      	bhi.n	80087ea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	88db      	ldrh	r3, [r3, #6]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d004      	beq.n	80087be <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f88e 	bl	80088d8 <USBD_CtlError>
        break;
 80087bc:	e01a      	b.n	80087f4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f043 0202 	orr.w	r2, r3, #2
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	330c      	adds	r3, #12
 80087de:	2202      	movs	r2, #2
 80087e0:	4619      	mov	r1, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f8e2 	bl	80089ac <USBD_CtlSendData>
      break;
 80087e8:	e004      	b.n	80087f4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f873 	bl	80088d8 <USBD_CtlError>
      break;
 80087f2:	bf00      	nop
  }
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	885b      	ldrh	r3, [r3, #2]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d106      	bne.n	800881c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f926 	bl	8008a68 <USBD_CtlSendStatus>
  }
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008834:	3b01      	subs	r3, #1
 8008836:	2b02      	cmp	r3, #2
 8008838:	d80b      	bhi.n	8008852 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	885b      	ldrh	r3, [r3, #2]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d10c      	bne.n	800885c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f90c 	bl	8008a68 <USBD_CtlSendStatus>
      }
      break;
 8008850:	e004      	b.n	800885c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f83f 	bl	80088d8 <USBD_CtlError>
      break;
 800885a:	e000      	b.n	800885e <USBD_ClrFeature+0x3a>
      break;
 800885c:	bf00      	nop
  }
}
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	785a      	ldrb	r2, [r3, #1]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	3302      	adds	r3, #2
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	3303      	adds	r3, #3
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	021b      	lsls	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	4413      	add	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	3304      	adds	r3, #4
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	3305      	adds	r3, #5
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4413      	add	r3, r2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3306      	adds	r3, #6
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	3307      	adds	r3, #7
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4413      	add	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	80da      	strh	r2, [r3, #6]

}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088e2:	2180      	movs	r1, #128	@ 0x80
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fcbf 	bl	8009268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088ea:	2100      	movs	r1, #0
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fcbb 	bl	8009268 <USBD_LL_StallEP>
}
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d032      	beq.n	8008976 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f834 	bl	800897e <USBD_GetLen>
 8008916:	4603      	mov	r3, r0
 8008918:	3301      	adds	r3, #1
 800891a:	b29b      	uxth	r3, r3
 800891c:	005b      	lsls	r3, r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	75fa      	strb	r2, [r7, #23]
 800892a:	461a      	mov	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4413      	add	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	75fa      	strb	r2, [r7, #23]
 800893c:	461a      	mov	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4413      	add	r3, r2
 8008942:	2203      	movs	r2, #3
 8008944:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008946:	e012      	b.n	800896e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	60fa      	str	r2, [r7, #12]
 800894e:	7dfa      	ldrb	r2, [r7, #23]
 8008950:	1c51      	adds	r1, r2, #1
 8008952:	75f9      	strb	r1, [r7, #23]
 8008954:	4611      	mov	r1, r2
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	440a      	add	r2, r1
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	75fa      	strb	r2, [r7, #23]
 8008964:	461a      	mov	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4413      	add	r3, r2
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e8      	bne.n	8008948 <USBD_GetString+0x4e>
    }
  }
}
 8008976:	bf00      	nop
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800898a:	e005      	b.n	8008998 <USBD_GetLen+0x1a>
  {
    len++;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	3301      	adds	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3301      	adds	r3, #1
 8008996:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1f5      	bne.n	800898c <USBD_GetLen+0xe>
  }

  return len;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2202      	movs	r2, #2
 80089be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	2100      	movs	r1, #0
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 fccf 	bl	8009378 <USBD_LL_Transmit>

  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f2:	88fb      	ldrh	r3, [r7, #6]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	2100      	movs	r1, #0
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fcbd 	bl	8009378 <USBD_LL_Transmit>

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2203      	movs	r2, #3
 8008a1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a26:	88fa      	ldrh	r2, [r7, #6]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	2100      	movs	r1, #0
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 fcc2 	bl	80093be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	2100      	movs	r1, #0
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fcb0 	bl	80093be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2204      	movs	r2, #4
 8008a74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a78:	2300      	movs	r3, #0
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fc7a 	bl	8009378 <USBD_LL_Transmit>

  return USBD_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2205      	movs	r2, #5
 8008a9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fc8a 	bl	80093be <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4912      	ldr	r1, [pc, #72]	@ (8008b04 <MX_USB_DEVICE_Init+0x50>)
 8008abc:	4812      	ldr	r0, [pc, #72]	@ (8008b08 <MX_USB_DEVICE_Init+0x54>)
 8008abe:	f7fe ff62 	bl	8007986 <USBD_Init>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ac8:	f7f7 ffe4 	bl	8000a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008acc:	490f      	ldr	r1, [pc, #60]	@ (8008b0c <MX_USB_DEVICE_Init+0x58>)
 8008ace:	480e      	ldr	r0, [pc, #56]	@ (8008b08 <MX_USB_DEVICE_Init+0x54>)
 8008ad0:	f7fe ff84 	bl	80079dc <USBD_RegisterClass>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ada:	f7f7 ffdb 	bl	8000a94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ade:	490c      	ldr	r1, [pc, #48]	@ (8008b10 <MX_USB_DEVICE_Init+0x5c>)
 8008ae0:	4809      	ldr	r0, [pc, #36]	@ (8008b08 <MX_USB_DEVICE_Init+0x54>)
 8008ae2:	f7fe feb5 	bl	8007850 <USBD_CDC_RegisterInterface>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008aec:	f7f7 ffd2 	bl	8000a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008af0:	4805      	ldr	r0, [pc, #20]	@ (8008b08 <MX_USB_DEVICE_Init+0x54>)
 8008af2:	f7fe ff8c 	bl	8007a0e <USBD_Start>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008afc:	f7f7 ffca 	bl	8000a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b00:	bf00      	nop
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	20000134 	.word	0x20000134
 8008b08:	200004dc 	.word	0x200004dc
 8008b0c:	20000018 	.word	0x20000018
 8008b10:	20000124 	.word	0x20000124

08008b14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4905      	ldr	r1, [pc, #20]	@ (8008b30 <CDC_Init_FS+0x1c>)
 8008b1c:	4805      	ldr	r0, [pc, #20]	@ (8008b34 <CDC_Init_FS+0x20>)
 8008b1e:	f7fe fead 	bl	800787c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b22:	4905      	ldr	r1, [pc, #20]	@ (8008b38 <CDC_Init_FS+0x24>)
 8008b24:	4803      	ldr	r0, [pc, #12]	@ (8008b34 <CDC_Init_FS+0x20>)
 8008b26:	f7fe fec2 	bl	80078ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20000ba0 	.word	0x20000ba0
 8008b34:	200004dc 	.word	0x200004dc
 8008b38:	200007a0 	.word	0x200007a0

08008b3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr
	...

08008b4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b23      	cmp	r3, #35	@ 0x23
 8008b60:	f200 8098 	bhi.w	8008c94 <CDC_Control_FS+0x148>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <CDC_Control_FS+0x20>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008c95 	.word	0x08008c95
 8008b70:	08008c95 	.word	0x08008c95
 8008b74:	08008c95 	.word	0x08008c95
 8008b78:	08008c95 	.word	0x08008c95
 8008b7c:	08008c95 	.word	0x08008c95
 8008b80:	08008c95 	.word	0x08008c95
 8008b84:	08008c95 	.word	0x08008c95
 8008b88:	08008c95 	.word	0x08008c95
 8008b8c:	08008c95 	.word	0x08008c95
 8008b90:	08008c95 	.word	0x08008c95
 8008b94:	08008c95 	.word	0x08008c95
 8008b98:	08008c95 	.word	0x08008c95
 8008b9c:	08008c95 	.word	0x08008c95
 8008ba0:	08008c95 	.word	0x08008c95
 8008ba4:	08008c95 	.word	0x08008c95
 8008ba8:	08008c95 	.word	0x08008c95
 8008bac:	08008c95 	.word	0x08008c95
 8008bb0:	08008c95 	.word	0x08008c95
 8008bb4:	08008c95 	.word	0x08008c95
 8008bb8:	08008c95 	.word	0x08008c95
 8008bbc:	08008c95 	.word	0x08008c95
 8008bc0:	08008c95 	.word	0x08008c95
 8008bc4:	08008c95 	.word	0x08008c95
 8008bc8:	08008c95 	.word	0x08008c95
 8008bcc:	08008c95 	.word	0x08008c95
 8008bd0:	08008c95 	.word	0x08008c95
 8008bd4:	08008c95 	.word	0x08008c95
 8008bd8:	08008c95 	.word	0x08008c95
 8008bdc:	08008c95 	.word	0x08008c95
 8008be0:	08008c95 	.word	0x08008c95
 8008be4:	08008c95 	.word	0x08008c95
 8008be8:	08008c95 	.word	0x08008c95
 8008bec:	08008bfd 	.word	0x08008bfd
 8008bf0:	08008c41 	.word	0x08008c41
 8008bf4:	08008c95 	.word	0x08008c95
 8008bf8:	08008c95 	.word	0x08008c95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	021b      	lsls	r3, r3, #8
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	3302      	adds	r3, #2
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	041b      	lsls	r3, r3, #16
 8008c14:	431a      	orrs	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	3303      	adds	r3, #3
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	061b      	lsls	r3, r3, #24
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	461a      	mov	r2, r3
 8008c22:	4b20      	ldr	r3, [pc, #128]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c24:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	791a      	ldrb	r2, [r3, #4]
 8008c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c2c:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	795a      	ldrb	r2, [r3, #5]
 8008c32:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c34:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	799a      	ldrb	r2, [r3, #6]
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c3c:	719a      	strb	r2, [r3, #6]
    break;
 8008c3e:	e02a      	b.n	8008c96 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008c40:	4b18      	ldr	r3, [pc, #96]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008c4a:	4b16      	ldr	r3, [pc, #88]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	0a1a      	lsrs	r2, r3, #8
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008c58:	4b12      	ldr	r3, [pc, #72]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	0c1a      	lsrs	r2, r3, #16
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	3302      	adds	r3, #2
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008c66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	0e1a      	lsrs	r2, r3, #24
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	3303      	adds	r3, #3
 8008c70:	b2d2      	uxtb	r2, r2
 8008c72:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c7a:	7912      	ldrb	r2, [r2, #4]
 8008c7c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	3305      	adds	r3, #5
 8008c82:	4a08      	ldr	r2, [pc, #32]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c84:	7952      	ldrb	r2, [r2, #5]
 8008c86:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	3306      	adds	r3, #6
 8008c8c:	4a05      	ldr	r2, [pc, #20]	@ (8008ca4 <CDC_Control_FS+0x158>)
 8008c8e:	7992      	ldrb	r2, [r2, #6]
 8008c90:	701a      	strb	r2, [r3, #0]
    break;
 8008c92:	e000      	b.n	8008c96 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c94:	bf00      	nop
  }

  return (USBD_OK);
 8008c96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	2000011c 	.word	0x2000011c

08008ca8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <CDC_Receive_FS+0x3c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d007      	beq.n	8008cca <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8008cba:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce4 <CDC_Receive_FS+0x3c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	4806      	ldr	r0, [pc, #24]	@ (8008ce8 <CDC_Receive_FS+0x40>)
 8008cce:	f7fe fdee 	bl	80078ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cd2:	4805      	ldr	r0, [pc, #20]	@ (8008ce8 <CDC_Receive_FS+0x40>)
 8008cd4:	f7fe fe2d 	bl	8007932 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000fa0 	.word	0x20000fa0
 8008ce8:	200004dc 	.word	0x200004dc

08008cec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d34 <CDC_Transmit_FS+0x48>)
 8008cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e00b      	b.n	8008d2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	4806      	ldr	r0, [pc, #24]	@ (8008d34 <CDC_Transmit_FS+0x48>)
 8008d1a:	f7fe fdaf 	bl	800787c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d1e:	4805      	ldr	r0, [pc, #20]	@ (8008d34 <CDC_Transmit_FS+0x48>)
 8008d20:	f7fe fdd8 	bl	80078d4 <USBD_CDC_TransmitPacket>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	200004dc 	.word	0x200004dc

08008d38 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8008d40:	4a03      	ldr	r2, [pc, #12]	@ (8008d50 <CDC_AttachRxData+0x18>)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6013      	str	r3, [r2, #0]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr
 8008d50:	20000fa0 	.word	0x20000fa0

08008d54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2212      	movs	r2, #18
 8008d64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d66:	4b03      	ldr	r3, [pc, #12]	@ (8008d74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bc80      	pop	{r7}
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000150 	.word	0x20000150

08008d78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2204      	movs	r2, #4
 8008d88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d8a:	4b03      	ldr	r3, [pc, #12]	@ (8008d98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	20000164 	.word	0x20000164

08008d9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	6039      	str	r1, [r7, #0]
 8008da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	4907      	ldr	r1, [pc, #28]	@ (8008dd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008db2:	4808      	ldr	r0, [pc, #32]	@ (8008dd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008db4:	f7ff fda1 	bl	80088fa <USBD_GetString>
 8008db8:	e004      	b.n	8008dc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	4904      	ldr	r1, [pc, #16]	@ (8008dd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dbe:	4805      	ldr	r0, [pc, #20]	@ (8008dd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc0:	f7ff fd9b 	bl	80088fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc4:	4b02      	ldr	r3, [pc, #8]	@ (8008dd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000fa4 	.word	0x20000fa4
 8008dd4:	08009e4c 	.word	0x08009e4c

08008dd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	4904      	ldr	r1, [pc, #16]	@ (8008df8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008de8:	4804      	ldr	r0, [pc, #16]	@ (8008dfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dea:	f7ff fd86 	bl	80088fa <USBD_GetString>
  return USBD_StrDesc;
 8008dee:	4b02      	ldr	r3, [pc, #8]	@ (8008df8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000fa4 	.word	0x20000fa4
 8008dfc:	08009e64 	.word	0x08009e64

08008e00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	6039      	str	r1, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	221a      	movs	r2, #26
 8008e10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e12:	f000 f843 	bl	8008e9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e16:	4b02      	ldr	r3, [pc, #8]	@ (8008e20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000168 	.word	0x20000168

08008e24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d105      	bne.n	8008e42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	4907      	ldr	r1, [pc, #28]	@ (8008e58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e3a:	4808      	ldr	r0, [pc, #32]	@ (8008e5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e3c:	f7ff fd5d 	bl	80088fa <USBD_GetString>
 8008e40:	e004      	b.n	8008e4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	4904      	ldr	r1, [pc, #16]	@ (8008e58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e46:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e48:	f7ff fd57 	bl	80088fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e4c:	4b02      	ldr	r3, [pc, #8]	@ (8008e58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000fa4 	.word	0x20000fa4
 8008e5c:	08009e78 	.word	0x08009e78

08008e60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	4907      	ldr	r1, [pc, #28]	@ (8008e94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e76:	4808      	ldr	r0, [pc, #32]	@ (8008e98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e78:	f7ff fd3f 	bl	80088fa <USBD_GetString>
 8008e7c:	e004      	b.n	8008e88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	4904      	ldr	r1, [pc, #16]	@ (8008e94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e82:	4805      	ldr	r0, [pc, #20]	@ (8008e98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e84:	f7ff fd39 	bl	80088fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e88:	4b02      	ldr	r3, [pc, #8]	@ (8008e94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20000fa4 	.word	0x20000fa4
 8008e98:	08009e84 	.word	0x08009e84

08008e9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee0 <Get_SerialNum+0x44>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee4 <Get_SerialNum+0x48>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eae:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee8 <Get_SerialNum+0x4c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	4909      	ldr	r1, [pc, #36]	@ (8008eec <Get_SerialNum+0x50>)
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 f814 	bl	8008ef4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ecc:	2204      	movs	r2, #4
 8008ece:	4908      	ldr	r1, [pc, #32]	@ (8008ef0 <Get_SerialNum+0x54>)
 8008ed0:	68b8      	ldr	r0, [r7, #8]
 8008ed2:	f000 f80f 	bl	8008ef4 <IntToUnicode>
  }
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	1ffff7e8 	.word	0x1ffff7e8
 8008ee4:	1ffff7ec 	.word	0x1ffff7ec
 8008ee8:	1ffff7f0 	.word	0x1ffff7f0
 8008eec:	2000016a 	.word	0x2000016a
 8008ef0:	2000017a 	.word	0x2000017a

08008ef4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]
 8008f0a:	e027      	b.n	8008f5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0f1b      	lsrs	r3, r3, #28
 8008f10:	2b09      	cmp	r3, #9
 8008f12:	d80b      	bhi.n	8008f2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	0f1b      	lsrs	r3, r3, #28
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	4619      	mov	r1, r3
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	440b      	add	r3, r1
 8008f24:	3230      	adds	r2, #48	@ 0x30
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	e00a      	b.n	8008f42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	0f1b      	lsrs	r3, r3, #28
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	4619      	mov	r1, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	440b      	add	r3, r1
 8008f3c:	3237      	adds	r2, #55	@ 0x37
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	2200      	movs	r2, #0
 8008f54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]
 8008f5c:	7dfa      	ldrb	r2, [r7, #23]
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d3d3      	bcc.n	8008f0c <IntToUnicode+0x18>
  }
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bc80      	pop	{r7}
 8008f6e:	4770      	bx	lr

08008f70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8008fb4 <HAL_PCD_MspInit+0x44>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d113      	bne.n	8008faa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f82:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb8 <HAL_PCD_MspInit+0x48>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb8 <HAL_PCD_MspInit+0x48>)
 8008f88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f8c:	61d3      	str	r3, [r2, #28]
 8008f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb8 <HAL_PCD_MspInit+0x48>)
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	2014      	movs	r0, #20
 8008fa0:	f7f8 fcc5 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fa4:	2014      	movs	r0, #20
 8008fa6:	f7f8 fcde 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40005c00 	.word	0x40005c00
 8008fb8:	40021000 	.word	0x40021000

08008fbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	f7fe fd63 	bl	8007a9e <USBD_LL_SetupStage>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	440b      	add	r3, r1
 8009000:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	4619      	mov	r1, r3
 800900a:	f7fe fd95 	bl	8007b38 <USBD_LL_DataOutStage>
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	440b      	add	r3, r1
 8009036:	3324      	adds	r3, #36	@ 0x24
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	4619      	mov	r1, r3
 800903e:	f7fe fdec 	bl	8007c1a <USBD_LL_DataInStage>
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fefc 	bl	8007e56 <USBD_LL_SOF>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	799b      	ldrb	r3, [r3, #6]
 8009076:	2b02      	cmp	r3, #2
 8009078:	d001      	beq.n	800907e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800907a:	f7f7 fd0b 	bl	8000a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009084:	7bfa      	ldrb	r2, [r7, #15]
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe feac 	bl	8007de6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fe65 	bl	8007d64 <USBD_LL_Reset>
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fea6 	bl	8007e04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	7a9b      	ldrb	r3, [r3, #10]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090c0:	4b04      	ldr	r3, [pc, #16]	@ (80090d4 <HAL_PCD_SuspendCallback+0x30>)
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	4a03      	ldr	r2, [pc, #12]	@ (80090d4 <HAL_PCD_SuspendCallback+0x30>)
 80090c6:	f043 0306 	orr.w	r3, r3, #6
 80090ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000ed00 	.word	0xe000ed00

080090d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fea0 	bl	8007e2c <USBD_LL_Resume>
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80090fc:	4a28      	ldr	r2, [pc, #160]	@ (80091a0 <USBD_LL_Init+0xac>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a26      	ldr	r2, [pc, #152]	@ (80091a0 <USBD_LL_Init+0xac>)
 8009108:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800910c:	4b24      	ldr	r3, [pc, #144]	@ (80091a0 <USBD_LL_Init+0xac>)
 800910e:	4a25      	ldr	r2, [pc, #148]	@ (80091a4 <USBD_LL_Init+0xb0>)
 8009110:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009112:	4b23      	ldr	r3, [pc, #140]	@ (80091a0 <USBD_LL_Init+0xac>)
 8009114:	2208      	movs	r2, #8
 8009116:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009118:	4b21      	ldr	r3, [pc, #132]	@ (80091a0 <USBD_LL_Init+0xac>)
 800911a:	2202      	movs	r2, #2
 800911c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800911e:	4b20      	ldr	r3, [pc, #128]	@ (80091a0 <USBD_LL_Init+0xac>)
 8009120:	2200      	movs	r2, #0
 8009122:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009124:	4b1e      	ldr	r3, [pc, #120]	@ (80091a0 <USBD_LL_Init+0xac>)
 8009126:	2200      	movs	r2, #0
 8009128:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800912a:	4b1d      	ldr	r3, [pc, #116]	@ (80091a0 <USBD_LL_Init+0xac>)
 800912c:	2200      	movs	r2, #0
 800912e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009130:	481b      	ldr	r0, [pc, #108]	@ (80091a0 <USBD_LL_Init+0xac>)
 8009132:	f7f8 ffd6 	bl	80020e2 <HAL_PCD_Init>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800913c:	f7f7 fcaa 	bl	8000a94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009146:	2318      	movs	r3, #24
 8009148:	2200      	movs	r2, #0
 800914a:	2100      	movs	r1, #0
 800914c:	f7fa fce7 	bl	8003b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009156:	2358      	movs	r3, #88	@ 0x58
 8009158:	2200      	movs	r2, #0
 800915a:	2180      	movs	r1, #128	@ 0x80
 800915c:	f7fa fcdf 	bl	8003b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009166:	23c0      	movs	r3, #192	@ 0xc0
 8009168:	2200      	movs	r2, #0
 800916a:	2181      	movs	r1, #129	@ 0x81
 800916c:	f7fa fcd7 	bl	8003b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009176:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800917a:	2200      	movs	r2, #0
 800917c:	2101      	movs	r1, #1
 800917e:	f7fa fcce 	bl	8003b1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800918c:	2200      	movs	r2, #0
 800918e:	2182      	movs	r1, #130	@ 0x82
 8009190:	f7fa fcc5 	bl	8003b1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200011a4 	.word	0x200011a4
 80091a4:	40005c00 	.word	0x40005c00

080091a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091be:	4618      	mov	r0, r3
 80091c0:	f7f9 f885 	bl	80022ce <HAL_PCD_Start>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f94e 	bl	800946c <USBD_Get_USB_Status>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	461a      	mov	r2, r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	70fb      	strb	r3, [r7, #3]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70bb      	strb	r3, [r7, #2]
 80091f4:	4613      	mov	r3, r2
 80091f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009206:	78bb      	ldrb	r3, [r7, #2]
 8009208:	883a      	ldrh	r2, [r7, #0]
 800920a:	78f9      	ldrb	r1, [r7, #3]
 800920c:	f7f9 f9d9 	bl	80025c2 <HAL_PCD_EP_Open>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f928 	bl	800946c <USBD_Get_USB_Status>
 800921c:	4603      	mov	r3, r0
 800921e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009220:	7bbb      	ldrb	r3, [r7, #14]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	4611      	mov	r1, r2
 8009248:	4618      	mov	r0, r3
 800924a:	f7f9 fa17 	bl	800267c <HAL_PCD_EP_Close>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 f909 	bl	800946c <USBD_Get_USB_Status>
 800925a:	4603      	mov	r3, r0
 800925c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009282:	78fa      	ldrb	r2, [r7, #3]
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7f9 fabf 	bl	800280a <HAL_PCD_EP_SetStall>
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009290:	7bfb      	ldrb	r3, [r7, #15]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f8ea 	bl	800946c <USBD_Get_USB_Status>
 8009298:	4603      	mov	r3, r0
 800929a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929c:	7bbb      	ldrb	r3, [r7, #14]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	4611      	mov	r1, r2
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f9 fb00 	bl	80028ca <HAL_PCD_EP_ClrStall>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f8cb 	bl	800946c <USBD_Get_USB_Status>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092da:	7bbb      	ldrb	r3, [r7, #14]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	da0b      	bge.n	8009318 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	4613      	mov	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	440b      	add	r3, r1
 8009312:	3312      	adds	r3, #18
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	e00b      	b.n	8009330 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009318:	78fb      	ldrb	r3, [r7, #3]
 800931a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800932e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr

0800933a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	4611      	mov	r1, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f7f9 f90e 	bl	800257a <HAL_PCD_SetAddress>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f881 	bl	800946c <USBD_Get_USB_Status>
 800936a:	4603      	mov	r3, r0
 800936c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	607a      	str	r2, [r7, #4]
 8009382:	461a      	mov	r2, r3
 8009384:	460b      	mov	r3, r1
 8009386:	72fb      	strb	r3, [r7, #11]
 8009388:	4613      	mov	r3, r2
 800938a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800939a:	893b      	ldrh	r3, [r7, #8]
 800939c:	7af9      	ldrb	r1, [r7, #11]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	f7f9 f9fc 	bl	800279c <HAL_PCD_EP_Transmit>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f85e 	bl	800946c <USBD_Get_USB_Status>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b086      	sub	sp, #24
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	461a      	mov	r2, r3
 80093ca:	460b      	mov	r3, r1
 80093cc:	72fb      	strb	r3, [r7, #11]
 80093ce:	4613      	mov	r3, r2
 80093d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80093e0:	893b      	ldrh	r3, [r7, #8]
 80093e2:	7af9      	ldrb	r1, [r7, #11]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	f7f9 f991 	bl	800270c <HAL_PCD_EP_Receive>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f000 f83b 	bl	800946c <USBD_Get_USB_Status>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7f9 f9a7 	bl	800276e <HAL_PCD_EP_GetRxCount>
 8009420:	4603      	mov	r3, r0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009434:	4b02      	ldr	r3, [pc, #8]	@ (8009440 <USBD_static_malloc+0x14>)
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr
 8009440:	2000147c 	.word	0x2000147c

08009444 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]

}
 800944c:	bf00      	nop
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr

08009456 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009456:	b480      	push	{r7}
 8009458:	b083      	sub	sp, #12
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009462:	bf00      	nop
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr

0800946c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	2b03      	cmp	r3, #3
 800947e:	d817      	bhi.n	80094b0 <USBD_Get_USB_Status+0x44>
 8009480:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <USBD_Get_USB_Status+0x1c>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	08009499 	.word	0x08009499
 800948c:	0800949f 	.word	0x0800949f
 8009490:	080094a5 	.word	0x080094a5
 8009494:	080094ab 	.word	0x080094ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73fb      	strb	r3, [r7, #15]
    break;
 800949c:	e00b      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800949e:	2302      	movs	r3, #2
 80094a0:	73fb      	strb	r3, [r7, #15]
    break;
 80094a2:	e008      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	e005      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094aa:	2302      	movs	r3, #2
 80094ac:	73fb      	strb	r3, [r7, #15]
    break;
 80094ae:	e002      	b.n	80094b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094b0:	2302      	movs	r3, #2
 80094b2:	73fb      	strb	r3, [r7, #15]
    break;
 80094b4:	bf00      	nop
  }
  return usb_status;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop

080094c4 <siprintf>:
 80094c4:	b40e      	push	{r1, r2, r3}
 80094c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094ca:	b510      	push	{r4, lr}
 80094cc:	2400      	movs	r4, #0
 80094ce:	b09d      	sub	sp, #116	@ 0x74
 80094d0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80094d2:	9002      	str	r0, [sp, #8]
 80094d4:	9006      	str	r0, [sp, #24]
 80094d6:	9107      	str	r1, [sp, #28]
 80094d8:	9104      	str	r1, [sp, #16]
 80094da:	4809      	ldr	r0, [pc, #36]	@ (8009500 <siprintf+0x3c>)
 80094dc:	4909      	ldr	r1, [pc, #36]	@ (8009504 <siprintf+0x40>)
 80094de:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e2:	9105      	str	r1, [sp, #20]
 80094e4:	6800      	ldr	r0, [r0, #0]
 80094e6:	a902      	add	r1, sp, #8
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80094ec:	f000 f992 	bl	8009814 <_svfiprintf_r>
 80094f0:	9b02      	ldr	r3, [sp, #8]
 80094f2:	701c      	strb	r4, [r3, #0]
 80094f4:	b01d      	add	sp, #116	@ 0x74
 80094f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fa:	b003      	add	sp, #12
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000184 	.word	0x20000184
 8009504:	ffff0208 	.word	0xffff0208

08009508 <memset>:
 8009508:	4603      	mov	r3, r0
 800950a:	4402      	add	r2, r0
 800950c:	4293      	cmp	r3, r2
 800950e:	d100      	bne.n	8009512 <memset+0xa>
 8009510:	4770      	bx	lr
 8009512:	f803 1b01 	strb.w	r1, [r3], #1
 8009516:	e7f9      	b.n	800950c <memset+0x4>

08009518 <__errno>:
 8009518:	4b01      	ldr	r3, [pc, #4]	@ (8009520 <__errno+0x8>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	20000184 	.word	0x20000184

08009524 <__libc_init_array>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	2600      	movs	r6, #0
 8009528:	4d0c      	ldr	r5, [pc, #48]	@ (800955c <__libc_init_array+0x38>)
 800952a:	4c0d      	ldr	r4, [pc, #52]	@ (8009560 <__libc_init_array+0x3c>)
 800952c:	1b64      	subs	r4, r4, r5
 800952e:	10a4      	asrs	r4, r4, #2
 8009530:	42a6      	cmp	r6, r4
 8009532:	d109      	bne.n	8009548 <__libc_init_array+0x24>
 8009534:	f000 fc76 	bl	8009e24 <_init>
 8009538:	2600      	movs	r6, #0
 800953a:	4d0a      	ldr	r5, [pc, #40]	@ (8009564 <__libc_init_array+0x40>)
 800953c:	4c0a      	ldr	r4, [pc, #40]	@ (8009568 <__libc_init_array+0x44>)
 800953e:	1b64      	subs	r4, r4, r5
 8009540:	10a4      	asrs	r4, r4, #2
 8009542:	42a6      	cmp	r6, r4
 8009544:	d105      	bne.n	8009552 <__libc_init_array+0x2e>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	f855 3b04 	ldr.w	r3, [r5], #4
 800954c:	4798      	blx	r3
 800954e:	3601      	adds	r6, #1
 8009550:	e7ee      	b.n	8009530 <__libc_init_array+0xc>
 8009552:	f855 3b04 	ldr.w	r3, [r5], #4
 8009556:	4798      	blx	r3
 8009558:	3601      	adds	r6, #1
 800955a:	e7f2      	b.n	8009542 <__libc_init_array+0x1e>
 800955c:	08009eec 	.word	0x08009eec
 8009560:	08009eec 	.word	0x08009eec
 8009564:	08009eec 	.word	0x08009eec
 8009568:	08009ef0 	.word	0x08009ef0

0800956c <__retarget_lock_acquire_recursive>:
 800956c:	4770      	bx	lr

0800956e <__retarget_lock_release_recursive>:
 800956e:	4770      	bx	lr

08009570 <_free_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	2900      	cmp	r1, #0
 8009576:	d040      	beq.n	80095fa <_free_r+0x8a>
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f0c      	subs	r4, r1, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	18e4      	addlt	r4, r4, r3
 8009584:	f000 f8de 	bl	8009744 <__malloc_lock>
 8009588:	4a1c      	ldr	r2, [pc, #112]	@ (80095fc <_free_r+0x8c>)
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	b933      	cbnz	r3, 800959c <_free_r+0x2c>
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	6014      	str	r4, [r2, #0]
 8009592:	4628      	mov	r0, r5
 8009594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009598:	f000 b8da 	b.w	8009750 <__malloc_unlock>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d908      	bls.n	80095b2 <_free_r+0x42>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	1821      	adds	r1, r4, r0
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf01      	itttt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	e7ed      	b.n	800958e <_free_r+0x1e>
 80095b2:	461a      	mov	r2, r3
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	b10b      	cbz	r3, 80095bc <_free_r+0x4c>
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	d9fa      	bls.n	80095b2 <_free_r+0x42>
 80095bc:	6811      	ldr	r1, [r2, #0]
 80095be:	1850      	adds	r0, r2, r1
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d10b      	bne.n	80095dc <_free_r+0x6c>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	4401      	add	r1, r0
 80095c8:	1850      	adds	r0, r2, r1
 80095ca:	4283      	cmp	r3, r0
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	d1e0      	bne.n	8009592 <_free_r+0x22>
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4408      	add	r0, r1
 80095d6:	6010      	str	r0, [r2, #0]
 80095d8:	6053      	str	r3, [r2, #4]
 80095da:	e7da      	b.n	8009592 <_free_r+0x22>
 80095dc:	d902      	bls.n	80095e4 <_free_r+0x74>
 80095de:	230c      	movs	r3, #12
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	e7d6      	b.n	8009592 <_free_r+0x22>
 80095e4:	6820      	ldr	r0, [r4, #0]
 80095e6:	1821      	adds	r1, r4, r0
 80095e8:	428b      	cmp	r3, r1
 80095ea:	bf01      	itttt	eq
 80095ec:	6819      	ldreq	r1, [r3, #0]
 80095ee:	685b      	ldreq	r3, [r3, #4]
 80095f0:	1809      	addeq	r1, r1, r0
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	6063      	str	r3, [r4, #4]
 80095f6:	6054      	str	r4, [r2, #4]
 80095f8:	e7cb      	b.n	8009592 <_free_r+0x22>
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	200017e0 	.word	0x200017e0

08009600 <sbrk_aligned>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	4e0f      	ldr	r6, [pc, #60]	@ (8009640 <sbrk_aligned+0x40>)
 8009604:	460c      	mov	r4, r1
 8009606:	6831      	ldr	r1, [r6, #0]
 8009608:	4605      	mov	r5, r0
 800960a:	b911      	cbnz	r1, 8009612 <sbrk_aligned+0x12>
 800960c:	f000 fba8 	bl	8009d60 <_sbrk_r>
 8009610:	6030      	str	r0, [r6, #0]
 8009612:	4621      	mov	r1, r4
 8009614:	4628      	mov	r0, r5
 8009616:	f000 fba3 	bl	8009d60 <_sbrk_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d103      	bne.n	8009626 <sbrk_aligned+0x26>
 800961e:	f04f 34ff 	mov.w	r4, #4294967295
 8009622:	4620      	mov	r0, r4
 8009624:	bd70      	pop	{r4, r5, r6, pc}
 8009626:	1cc4      	adds	r4, r0, #3
 8009628:	f024 0403 	bic.w	r4, r4, #3
 800962c:	42a0      	cmp	r0, r4
 800962e:	d0f8      	beq.n	8009622 <sbrk_aligned+0x22>
 8009630:	1a21      	subs	r1, r4, r0
 8009632:	4628      	mov	r0, r5
 8009634:	f000 fb94 	bl	8009d60 <_sbrk_r>
 8009638:	3001      	adds	r0, #1
 800963a:	d1f2      	bne.n	8009622 <sbrk_aligned+0x22>
 800963c:	e7ef      	b.n	800961e <sbrk_aligned+0x1e>
 800963e:	bf00      	nop
 8009640:	200017dc 	.word	0x200017dc

08009644 <_malloc_r>:
 8009644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009648:	1ccd      	adds	r5, r1, #3
 800964a:	f025 0503 	bic.w	r5, r5, #3
 800964e:	3508      	adds	r5, #8
 8009650:	2d0c      	cmp	r5, #12
 8009652:	bf38      	it	cc
 8009654:	250c      	movcc	r5, #12
 8009656:	2d00      	cmp	r5, #0
 8009658:	4606      	mov	r6, r0
 800965a:	db01      	blt.n	8009660 <_malloc_r+0x1c>
 800965c:	42a9      	cmp	r1, r5
 800965e:	d904      	bls.n	800966a <_malloc_r+0x26>
 8009660:	230c      	movs	r3, #12
 8009662:	6033      	str	r3, [r6, #0]
 8009664:	2000      	movs	r0, #0
 8009666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009740 <_malloc_r+0xfc>
 800966e:	f000 f869 	bl	8009744 <__malloc_lock>
 8009672:	f8d8 3000 	ldr.w	r3, [r8]
 8009676:	461c      	mov	r4, r3
 8009678:	bb44      	cbnz	r4, 80096cc <_malloc_r+0x88>
 800967a:	4629      	mov	r1, r5
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff ffbf 	bl	8009600 <sbrk_aligned>
 8009682:	1c43      	adds	r3, r0, #1
 8009684:	4604      	mov	r4, r0
 8009686:	d158      	bne.n	800973a <_malloc_r+0xf6>
 8009688:	f8d8 4000 	ldr.w	r4, [r8]
 800968c:	4627      	mov	r7, r4
 800968e:	2f00      	cmp	r7, #0
 8009690:	d143      	bne.n	800971a <_malloc_r+0xd6>
 8009692:	2c00      	cmp	r4, #0
 8009694:	d04b      	beq.n	800972e <_malloc_r+0xea>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	4639      	mov	r1, r7
 800969a:	4630      	mov	r0, r6
 800969c:	eb04 0903 	add.w	r9, r4, r3
 80096a0:	f000 fb5e 	bl	8009d60 <_sbrk_r>
 80096a4:	4581      	cmp	r9, r0
 80096a6:	d142      	bne.n	800972e <_malloc_r+0xea>
 80096a8:	6821      	ldr	r1, [r4, #0]
 80096aa:	4630      	mov	r0, r6
 80096ac:	1a6d      	subs	r5, r5, r1
 80096ae:	4629      	mov	r1, r5
 80096b0:	f7ff ffa6 	bl	8009600 <sbrk_aligned>
 80096b4:	3001      	adds	r0, #1
 80096b6:	d03a      	beq.n	800972e <_malloc_r+0xea>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	442b      	add	r3, r5
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	f8d8 3000 	ldr.w	r3, [r8]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	bb62      	cbnz	r2, 8009720 <_malloc_r+0xdc>
 80096c6:	f8c8 7000 	str.w	r7, [r8]
 80096ca:	e00f      	b.n	80096ec <_malloc_r+0xa8>
 80096cc:	6822      	ldr	r2, [r4, #0]
 80096ce:	1b52      	subs	r2, r2, r5
 80096d0:	d420      	bmi.n	8009714 <_malloc_r+0xd0>
 80096d2:	2a0b      	cmp	r2, #11
 80096d4:	d917      	bls.n	8009706 <_malloc_r+0xc2>
 80096d6:	1961      	adds	r1, r4, r5
 80096d8:	42a3      	cmp	r3, r4
 80096da:	6025      	str	r5, [r4, #0]
 80096dc:	bf18      	it	ne
 80096de:	6059      	strne	r1, [r3, #4]
 80096e0:	6863      	ldr	r3, [r4, #4]
 80096e2:	bf08      	it	eq
 80096e4:	f8c8 1000 	streq.w	r1, [r8]
 80096e8:	5162      	str	r2, [r4, r5]
 80096ea:	604b      	str	r3, [r1, #4]
 80096ec:	4630      	mov	r0, r6
 80096ee:	f000 f82f 	bl	8009750 <__malloc_unlock>
 80096f2:	f104 000b 	add.w	r0, r4, #11
 80096f6:	1d23      	adds	r3, r4, #4
 80096f8:	f020 0007 	bic.w	r0, r0, #7
 80096fc:	1ac2      	subs	r2, r0, r3
 80096fe:	bf1c      	itt	ne
 8009700:	1a1b      	subne	r3, r3, r0
 8009702:	50a3      	strne	r3, [r4, r2]
 8009704:	e7af      	b.n	8009666 <_malloc_r+0x22>
 8009706:	6862      	ldr	r2, [r4, #4]
 8009708:	42a3      	cmp	r3, r4
 800970a:	bf0c      	ite	eq
 800970c:	f8c8 2000 	streq.w	r2, [r8]
 8009710:	605a      	strne	r2, [r3, #4]
 8009712:	e7eb      	b.n	80096ec <_malloc_r+0xa8>
 8009714:	4623      	mov	r3, r4
 8009716:	6864      	ldr	r4, [r4, #4]
 8009718:	e7ae      	b.n	8009678 <_malloc_r+0x34>
 800971a:	463c      	mov	r4, r7
 800971c:	687f      	ldr	r7, [r7, #4]
 800971e:	e7b6      	b.n	800968e <_malloc_r+0x4a>
 8009720:	461a      	mov	r2, r3
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	42a3      	cmp	r3, r4
 8009726:	d1fb      	bne.n	8009720 <_malloc_r+0xdc>
 8009728:	2300      	movs	r3, #0
 800972a:	6053      	str	r3, [r2, #4]
 800972c:	e7de      	b.n	80096ec <_malloc_r+0xa8>
 800972e:	230c      	movs	r3, #12
 8009730:	4630      	mov	r0, r6
 8009732:	6033      	str	r3, [r6, #0]
 8009734:	f000 f80c 	bl	8009750 <__malloc_unlock>
 8009738:	e794      	b.n	8009664 <_malloc_r+0x20>
 800973a:	6005      	str	r5, [r0, #0]
 800973c:	e7d6      	b.n	80096ec <_malloc_r+0xa8>
 800973e:	bf00      	nop
 8009740:	200017e0 	.word	0x200017e0

08009744 <__malloc_lock>:
 8009744:	4801      	ldr	r0, [pc, #4]	@ (800974c <__malloc_lock+0x8>)
 8009746:	f7ff bf11 	b.w	800956c <__retarget_lock_acquire_recursive>
 800974a:	bf00      	nop
 800974c:	200017d8 	.word	0x200017d8

08009750 <__malloc_unlock>:
 8009750:	4801      	ldr	r0, [pc, #4]	@ (8009758 <__malloc_unlock+0x8>)
 8009752:	f7ff bf0c 	b.w	800956e <__retarget_lock_release_recursive>
 8009756:	bf00      	nop
 8009758:	200017d8 	.word	0x200017d8

0800975c <__ssputs_r>:
 800975c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009760:	461f      	mov	r7, r3
 8009762:	688e      	ldr	r6, [r1, #8]
 8009764:	4682      	mov	sl, r0
 8009766:	42be      	cmp	r6, r7
 8009768:	460c      	mov	r4, r1
 800976a:	4690      	mov	r8, r2
 800976c:	680b      	ldr	r3, [r1, #0]
 800976e:	d82d      	bhi.n	80097cc <__ssputs_r+0x70>
 8009770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009778:	d026      	beq.n	80097c8 <__ssputs_r+0x6c>
 800977a:	6965      	ldr	r5, [r4, #20]
 800977c:	6909      	ldr	r1, [r1, #16]
 800977e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009782:	eba3 0901 	sub.w	r9, r3, r1
 8009786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800978a:	1c7b      	adds	r3, r7, #1
 800978c:	444b      	add	r3, r9
 800978e:	106d      	asrs	r5, r5, #1
 8009790:	429d      	cmp	r5, r3
 8009792:	bf38      	it	cc
 8009794:	461d      	movcc	r5, r3
 8009796:	0553      	lsls	r3, r2, #21
 8009798:	d527      	bpl.n	80097ea <__ssputs_r+0x8e>
 800979a:	4629      	mov	r1, r5
 800979c:	f7ff ff52 	bl	8009644 <_malloc_r>
 80097a0:	4606      	mov	r6, r0
 80097a2:	b360      	cbz	r0, 80097fe <__ssputs_r+0xa2>
 80097a4:	464a      	mov	r2, r9
 80097a6:	6921      	ldr	r1, [r4, #16]
 80097a8:	f000 faf8 	bl	8009d9c <memcpy>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	6126      	str	r6, [r4, #16]
 80097ba:	444e      	add	r6, r9
 80097bc:	6026      	str	r6, [r4, #0]
 80097be:	463e      	mov	r6, r7
 80097c0:	6165      	str	r5, [r4, #20]
 80097c2:	eba5 0509 	sub.w	r5, r5, r9
 80097c6:	60a5      	str	r5, [r4, #8]
 80097c8:	42be      	cmp	r6, r7
 80097ca:	d900      	bls.n	80097ce <__ssputs_r+0x72>
 80097cc:	463e      	mov	r6, r7
 80097ce:	4632      	mov	r2, r6
 80097d0:	4641      	mov	r1, r8
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	f000 faaa 	bl	8009d2c <memmove>
 80097d8:	2000      	movs	r0, #0
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	1b9b      	subs	r3, r3, r6
 80097de:	60a3      	str	r3, [r4, #8]
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	4433      	add	r3, r6
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ea:	462a      	mov	r2, r5
 80097ec:	f000 fae4 	bl	8009db8 <_realloc_r>
 80097f0:	4606      	mov	r6, r0
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d1e0      	bne.n	80097b8 <__ssputs_r+0x5c>
 80097f6:	4650      	mov	r0, sl
 80097f8:	6921      	ldr	r1, [r4, #16]
 80097fa:	f7ff feb9 	bl	8009570 <_free_r>
 80097fe:	230c      	movs	r3, #12
 8009800:	f8ca 3000 	str.w	r3, [sl]
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f04f 30ff 	mov.w	r0, #4294967295
 800980a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	e7e9      	b.n	80097e6 <__ssputs_r+0x8a>
	...

08009814 <_svfiprintf_r>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	4698      	mov	r8, r3
 800981a:	898b      	ldrh	r3, [r1, #12]
 800981c:	4607      	mov	r7, r0
 800981e:	061b      	lsls	r3, r3, #24
 8009820:	460d      	mov	r5, r1
 8009822:	4614      	mov	r4, r2
 8009824:	b09d      	sub	sp, #116	@ 0x74
 8009826:	d510      	bpl.n	800984a <_svfiprintf_r+0x36>
 8009828:	690b      	ldr	r3, [r1, #16]
 800982a:	b973      	cbnz	r3, 800984a <_svfiprintf_r+0x36>
 800982c:	2140      	movs	r1, #64	@ 0x40
 800982e:	f7ff ff09 	bl	8009644 <_malloc_r>
 8009832:	6028      	str	r0, [r5, #0]
 8009834:	6128      	str	r0, [r5, #16]
 8009836:	b930      	cbnz	r0, 8009846 <_svfiprintf_r+0x32>
 8009838:	230c      	movs	r3, #12
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	f04f 30ff 	mov.w	r0, #4294967295
 8009840:	b01d      	add	sp, #116	@ 0x74
 8009842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009846:	2340      	movs	r3, #64	@ 0x40
 8009848:	616b      	str	r3, [r5, #20]
 800984a:	2300      	movs	r3, #0
 800984c:	9309      	str	r3, [sp, #36]	@ 0x24
 800984e:	2320      	movs	r3, #32
 8009850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009854:	2330      	movs	r3, #48	@ 0x30
 8009856:	f04f 0901 	mov.w	r9, #1
 800985a:	f8cd 800c 	str.w	r8, [sp, #12]
 800985e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80099f8 <_svfiprintf_r+0x1e4>
 8009862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009866:	4623      	mov	r3, r4
 8009868:	469a      	mov	sl, r3
 800986a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800986e:	b10a      	cbz	r2, 8009874 <_svfiprintf_r+0x60>
 8009870:	2a25      	cmp	r2, #37	@ 0x25
 8009872:	d1f9      	bne.n	8009868 <_svfiprintf_r+0x54>
 8009874:	ebba 0b04 	subs.w	fp, sl, r4
 8009878:	d00b      	beq.n	8009892 <_svfiprintf_r+0x7e>
 800987a:	465b      	mov	r3, fp
 800987c:	4622      	mov	r2, r4
 800987e:	4629      	mov	r1, r5
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ff6b 	bl	800975c <__ssputs_r>
 8009886:	3001      	adds	r0, #1
 8009888:	f000 80a7 	beq.w	80099da <_svfiprintf_r+0x1c6>
 800988c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800988e:	445a      	add	r2, fp
 8009890:	9209      	str	r2, [sp, #36]	@ 0x24
 8009892:	f89a 3000 	ldrb.w	r3, [sl]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 809f 	beq.w	80099da <_svfiprintf_r+0x1c6>
 800989c:	2300      	movs	r3, #0
 800989e:	f04f 32ff 	mov.w	r2, #4294967295
 80098a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a6:	f10a 0a01 	add.w	sl, sl, #1
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	9307      	str	r3, [sp, #28]
 80098ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80098b4:	4654      	mov	r4, sl
 80098b6:	2205      	movs	r2, #5
 80098b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098bc:	484e      	ldr	r0, [pc, #312]	@ (80099f8 <_svfiprintf_r+0x1e4>)
 80098be:	f000 fa5f 	bl	8009d80 <memchr>
 80098c2:	9a04      	ldr	r2, [sp, #16]
 80098c4:	b9d8      	cbnz	r0, 80098fe <_svfiprintf_r+0xea>
 80098c6:	06d0      	lsls	r0, r2, #27
 80098c8:	bf44      	itt	mi
 80098ca:	2320      	movmi	r3, #32
 80098cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098d0:	0711      	lsls	r1, r2, #28
 80098d2:	bf44      	itt	mi
 80098d4:	232b      	movmi	r3, #43	@ 0x2b
 80098d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098da:	f89a 3000 	ldrb.w	r3, [sl]
 80098de:	2b2a      	cmp	r3, #42	@ 0x2a
 80098e0:	d015      	beq.n	800990e <_svfiprintf_r+0xfa>
 80098e2:	4654      	mov	r4, sl
 80098e4:	2000      	movs	r0, #0
 80098e6:	f04f 0c0a 	mov.w	ip, #10
 80098ea:	9a07      	ldr	r2, [sp, #28]
 80098ec:	4621      	mov	r1, r4
 80098ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f2:	3b30      	subs	r3, #48	@ 0x30
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d94b      	bls.n	8009990 <_svfiprintf_r+0x17c>
 80098f8:	b1b0      	cbz	r0, 8009928 <_svfiprintf_r+0x114>
 80098fa:	9207      	str	r2, [sp, #28]
 80098fc:	e014      	b.n	8009928 <_svfiprintf_r+0x114>
 80098fe:	eba0 0308 	sub.w	r3, r0, r8
 8009902:	fa09 f303 	lsl.w	r3, r9, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	46a2      	mov	sl, r4
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	e7d2      	b.n	80098b4 <_svfiprintf_r+0xa0>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	1d19      	adds	r1, r3, #4
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	9103      	str	r1, [sp, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfbb      	ittet	lt
 800991a:	425b      	neglt	r3, r3
 800991c:	f042 0202 	orrlt.w	r2, r2, #2
 8009920:	9307      	strge	r3, [sp, #28]
 8009922:	9307      	strlt	r3, [sp, #28]
 8009924:	bfb8      	it	lt
 8009926:	9204      	strlt	r2, [sp, #16]
 8009928:	7823      	ldrb	r3, [r4, #0]
 800992a:	2b2e      	cmp	r3, #46	@ 0x2e
 800992c:	d10a      	bne.n	8009944 <_svfiprintf_r+0x130>
 800992e:	7863      	ldrb	r3, [r4, #1]
 8009930:	2b2a      	cmp	r3, #42	@ 0x2a
 8009932:	d132      	bne.n	800999a <_svfiprintf_r+0x186>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	3402      	adds	r4, #2
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80099fc <_svfiprintf_r+0x1e8>
 8009948:	2203      	movs	r2, #3
 800994a:	4650      	mov	r0, sl
 800994c:	7821      	ldrb	r1, [r4, #0]
 800994e:	f000 fa17 	bl	8009d80 <memchr>
 8009952:	b138      	cbz	r0, 8009964 <_svfiprintf_r+0x150>
 8009954:	2240      	movs	r2, #64	@ 0x40
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	eba0 000a 	sub.w	r0, r0, sl
 800995c:	4082      	lsls	r2, r0
 800995e:	4313      	orrs	r3, r2
 8009960:	3401      	adds	r4, #1
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	2206      	movs	r2, #6
 800996a:	4825      	ldr	r0, [pc, #148]	@ (8009a00 <_svfiprintf_r+0x1ec>)
 800996c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009970:	f000 fa06 	bl	8009d80 <memchr>
 8009974:	2800      	cmp	r0, #0
 8009976:	d036      	beq.n	80099e6 <_svfiprintf_r+0x1d2>
 8009978:	4b22      	ldr	r3, [pc, #136]	@ (8009a04 <_svfiprintf_r+0x1f0>)
 800997a:	bb1b      	cbnz	r3, 80099c4 <_svfiprintf_r+0x1b0>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	3307      	adds	r3, #7
 8009980:	f023 0307 	bic.w	r3, r3, #7
 8009984:	3308      	adds	r3, #8
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998a:	4433      	add	r3, r6
 800998c:	9309      	str	r3, [sp, #36]	@ 0x24
 800998e:	e76a      	b.n	8009866 <_svfiprintf_r+0x52>
 8009990:	460c      	mov	r4, r1
 8009992:	2001      	movs	r0, #1
 8009994:	fb0c 3202 	mla	r2, ip, r2, r3
 8009998:	e7a8      	b.n	80098ec <_svfiprintf_r+0xd8>
 800999a:	2300      	movs	r3, #0
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4619      	mov	r1, r3
 80099a2:	3401      	adds	r4, #1
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	4620      	mov	r0, r4
 80099a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ac:	3a30      	subs	r2, #48	@ 0x30
 80099ae:	2a09      	cmp	r2, #9
 80099b0:	d903      	bls.n	80099ba <_svfiprintf_r+0x1a6>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0c6      	beq.n	8009944 <_svfiprintf_r+0x130>
 80099b6:	9105      	str	r1, [sp, #20]
 80099b8:	e7c4      	b.n	8009944 <_svfiprintf_r+0x130>
 80099ba:	4604      	mov	r4, r0
 80099bc:	2301      	movs	r3, #1
 80099be:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c2:	e7f0      	b.n	80099a6 <_svfiprintf_r+0x192>
 80099c4:	ab03      	add	r3, sp, #12
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	462a      	mov	r2, r5
 80099ca:	4638      	mov	r0, r7
 80099cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009a08 <_svfiprintf_r+0x1f4>)
 80099ce:	a904      	add	r1, sp, #16
 80099d0:	f3af 8000 	nop.w
 80099d4:	1c42      	adds	r2, r0, #1
 80099d6:	4606      	mov	r6, r0
 80099d8:	d1d6      	bne.n	8009988 <_svfiprintf_r+0x174>
 80099da:	89ab      	ldrh	r3, [r5, #12]
 80099dc:	065b      	lsls	r3, r3, #25
 80099de:	f53f af2d 	bmi.w	800983c <_svfiprintf_r+0x28>
 80099e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099e4:	e72c      	b.n	8009840 <_svfiprintf_r+0x2c>
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	462a      	mov	r2, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	4b06      	ldr	r3, [pc, #24]	@ (8009a08 <_svfiprintf_r+0x1f4>)
 80099f0:	a904      	add	r1, sp, #16
 80099f2:	f000 f87d 	bl	8009af0 <_printf_i>
 80099f6:	e7ed      	b.n	80099d4 <_svfiprintf_r+0x1c0>
 80099f8:	08009eb6 	.word	0x08009eb6
 80099fc:	08009ebc 	.word	0x08009ebc
 8009a00:	08009ec0 	.word	0x08009ec0
 8009a04:	00000000 	.word	0x00000000
 8009a08:	0800975d 	.word	0x0800975d

08009a0c <_printf_common>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	4616      	mov	r6, r2
 8009a12:	4698      	mov	r8, r3
 8009a14:	688a      	ldr	r2, [r1, #8]
 8009a16:	690b      	ldr	r3, [r1, #16]
 8009a18:	4607      	mov	r7, r0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bfb8      	it	lt
 8009a1e:	4613      	movlt	r3, r2
 8009a20:	6033      	str	r3, [r6, #0]
 8009a22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a26:	460c      	mov	r4, r1
 8009a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a2c:	b10a      	cbz	r2, 8009a32 <_printf_common+0x26>
 8009a2e:	3301      	adds	r3, #1
 8009a30:	6033      	str	r3, [r6, #0]
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	0699      	lsls	r1, r3, #26
 8009a36:	bf42      	ittt	mi
 8009a38:	6833      	ldrmi	r3, [r6, #0]
 8009a3a:	3302      	addmi	r3, #2
 8009a3c:	6033      	strmi	r3, [r6, #0]
 8009a3e:	6825      	ldr	r5, [r4, #0]
 8009a40:	f015 0506 	ands.w	r5, r5, #6
 8009a44:	d106      	bne.n	8009a54 <_printf_common+0x48>
 8009a46:	f104 0a19 	add.w	sl, r4, #25
 8009a4a:	68e3      	ldr	r3, [r4, #12]
 8009a4c:	6832      	ldr	r2, [r6, #0]
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	42ab      	cmp	r3, r5
 8009a52:	dc2b      	bgt.n	8009aac <_printf_common+0xa0>
 8009a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	3b00      	subs	r3, #0
 8009a5c:	bf18      	it	ne
 8009a5e:	2301      	movne	r3, #1
 8009a60:	0692      	lsls	r2, r2, #26
 8009a62:	d430      	bmi.n	8009ac6 <_printf_common+0xba>
 8009a64:	4641      	mov	r1, r8
 8009a66:	4638      	mov	r0, r7
 8009a68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a6c:	47c8      	blx	r9
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d023      	beq.n	8009aba <_printf_common+0xae>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	6922      	ldr	r2, [r4, #16]
 8009a76:	f003 0306 	and.w	r3, r3, #6
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	bf14      	ite	ne
 8009a7e:	2500      	movne	r5, #0
 8009a80:	6833      	ldreq	r3, [r6, #0]
 8009a82:	f04f 0600 	mov.w	r6, #0
 8009a86:	bf08      	it	eq
 8009a88:	68e5      	ldreq	r5, [r4, #12]
 8009a8a:	f104 041a 	add.w	r4, r4, #26
 8009a8e:	bf08      	it	eq
 8009a90:	1aed      	subeq	r5, r5, r3
 8009a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a96:	bf08      	it	eq
 8009a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	bfc4      	itt	gt
 8009aa0:	1a9b      	subgt	r3, r3, r2
 8009aa2:	18ed      	addgt	r5, r5, r3
 8009aa4:	42b5      	cmp	r5, r6
 8009aa6:	d11a      	bne.n	8009ade <_printf_common+0xd2>
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	e008      	b.n	8009abe <_printf_common+0xb2>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4652      	mov	r2, sl
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	47c8      	blx	r9
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d103      	bne.n	8009ac2 <_printf_common+0xb6>
 8009aba:	f04f 30ff 	mov.w	r0, #4294967295
 8009abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac2:	3501      	adds	r5, #1
 8009ac4:	e7c1      	b.n	8009a4a <_printf_common+0x3e>
 8009ac6:	2030      	movs	r0, #48	@ 0x30
 8009ac8:	18e1      	adds	r1, r4, r3
 8009aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ad4:	4422      	add	r2, r4
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009adc:	e7c2      	b.n	8009a64 <_printf_common+0x58>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4622      	mov	r2, r4
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	47c8      	blx	r9
 8009ae8:	3001      	adds	r0, #1
 8009aea:	d0e6      	beq.n	8009aba <_printf_common+0xae>
 8009aec:	3601      	adds	r6, #1
 8009aee:	e7d9      	b.n	8009aa4 <_printf_common+0x98>

08009af0 <_printf_i>:
 8009af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	7e0f      	ldrb	r7, [r1, #24]
 8009af6:	4691      	mov	r9, r2
 8009af8:	2f78      	cmp	r7, #120	@ 0x78
 8009afa:	4680      	mov	r8, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	469a      	mov	sl, r3
 8009b00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b06:	d807      	bhi.n	8009b18 <_printf_i+0x28>
 8009b08:	2f62      	cmp	r7, #98	@ 0x62
 8009b0a:	d80a      	bhi.n	8009b22 <_printf_i+0x32>
 8009b0c:	2f00      	cmp	r7, #0
 8009b0e:	f000 80d1 	beq.w	8009cb4 <_printf_i+0x1c4>
 8009b12:	2f58      	cmp	r7, #88	@ 0x58
 8009b14:	f000 80b8 	beq.w	8009c88 <_printf_i+0x198>
 8009b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b20:	e03a      	b.n	8009b98 <_printf_i+0xa8>
 8009b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b26:	2b15      	cmp	r3, #21
 8009b28:	d8f6      	bhi.n	8009b18 <_printf_i+0x28>
 8009b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009b30 <_printf_i+0x40>)
 8009b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b30:	08009b89 	.word	0x08009b89
 8009b34:	08009b9d 	.word	0x08009b9d
 8009b38:	08009b19 	.word	0x08009b19
 8009b3c:	08009b19 	.word	0x08009b19
 8009b40:	08009b19 	.word	0x08009b19
 8009b44:	08009b19 	.word	0x08009b19
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009b19 	.word	0x08009b19
 8009b50:	08009b19 	.word	0x08009b19
 8009b54:	08009b19 	.word	0x08009b19
 8009b58:	08009b19 	.word	0x08009b19
 8009b5c:	08009c9b 	.word	0x08009c9b
 8009b60:	08009bc7 	.word	0x08009bc7
 8009b64:	08009c55 	.word	0x08009c55
 8009b68:	08009b19 	.word	0x08009b19
 8009b6c:	08009b19 	.word	0x08009b19
 8009b70:	08009cbd 	.word	0x08009cbd
 8009b74:	08009b19 	.word	0x08009b19
 8009b78:	08009bc7 	.word	0x08009bc7
 8009b7c:	08009b19 	.word	0x08009b19
 8009b80:	08009b19 	.word	0x08009b19
 8009b84:	08009c5d 	.word	0x08009c5d
 8009b88:	6833      	ldr	r3, [r6, #0]
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6032      	str	r2, [r6, #0]
 8009b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e09c      	b.n	8009cd6 <_printf_i+0x1e6>
 8009b9c:	6833      	ldr	r3, [r6, #0]
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	1d19      	adds	r1, r3, #4
 8009ba2:	6031      	str	r1, [r6, #0]
 8009ba4:	0606      	lsls	r6, r0, #24
 8009ba6:	d501      	bpl.n	8009bac <_printf_i+0xbc>
 8009ba8:	681d      	ldr	r5, [r3, #0]
 8009baa:	e003      	b.n	8009bb4 <_printf_i+0xc4>
 8009bac:	0645      	lsls	r5, r0, #25
 8009bae:	d5fb      	bpl.n	8009ba8 <_printf_i+0xb8>
 8009bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	da03      	bge.n	8009bc0 <_printf_i+0xd0>
 8009bb8:	232d      	movs	r3, #45	@ 0x2d
 8009bba:	426d      	negs	r5, r5
 8009bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc0:	230a      	movs	r3, #10
 8009bc2:	4858      	ldr	r0, [pc, #352]	@ (8009d24 <_printf_i+0x234>)
 8009bc4:	e011      	b.n	8009bea <_printf_i+0xfa>
 8009bc6:	6821      	ldr	r1, [r4, #0]
 8009bc8:	6833      	ldr	r3, [r6, #0]
 8009bca:	0608      	lsls	r0, r1, #24
 8009bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bd0:	d402      	bmi.n	8009bd8 <_printf_i+0xe8>
 8009bd2:	0649      	lsls	r1, r1, #25
 8009bd4:	bf48      	it	mi
 8009bd6:	b2ad      	uxthmi	r5, r5
 8009bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bda:	6033      	str	r3, [r6, #0]
 8009bdc:	bf14      	ite	ne
 8009bde:	230a      	movne	r3, #10
 8009be0:	2308      	moveq	r3, #8
 8009be2:	4850      	ldr	r0, [pc, #320]	@ (8009d24 <_printf_i+0x234>)
 8009be4:	2100      	movs	r1, #0
 8009be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bea:	6866      	ldr	r6, [r4, #4]
 8009bec:	2e00      	cmp	r6, #0
 8009bee:	60a6      	str	r6, [r4, #8]
 8009bf0:	db05      	blt.n	8009bfe <_printf_i+0x10e>
 8009bf2:	6821      	ldr	r1, [r4, #0]
 8009bf4:	432e      	orrs	r6, r5
 8009bf6:	f021 0104 	bic.w	r1, r1, #4
 8009bfa:	6021      	str	r1, [r4, #0]
 8009bfc:	d04b      	beq.n	8009c96 <_printf_i+0x1a6>
 8009bfe:	4616      	mov	r6, r2
 8009c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c04:	fb03 5711 	mls	r7, r3, r1, r5
 8009c08:	5dc7      	ldrb	r7, [r0, r7]
 8009c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c0e:	462f      	mov	r7, r5
 8009c10:	42bb      	cmp	r3, r7
 8009c12:	460d      	mov	r5, r1
 8009c14:	d9f4      	bls.n	8009c00 <_printf_i+0x110>
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	d10b      	bne.n	8009c32 <_printf_i+0x142>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	07df      	lsls	r7, r3, #31
 8009c1e:	d508      	bpl.n	8009c32 <_printf_i+0x142>
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	6861      	ldr	r1, [r4, #4]
 8009c24:	4299      	cmp	r1, r3
 8009c26:	bfde      	ittt	le
 8009c28:	2330      	movle	r3, #48	@ 0x30
 8009c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c32:	1b92      	subs	r2, r2, r6
 8009c34:	6122      	str	r2, [r4, #16]
 8009c36:	464b      	mov	r3, r9
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f8cd a000 	str.w	sl, [sp]
 8009c40:	aa03      	add	r2, sp, #12
 8009c42:	f7ff fee3 	bl	8009a0c <_printf_common>
 8009c46:	3001      	adds	r0, #1
 8009c48:	d14a      	bne.n	8009ce0 <_printf_i+0x1f0>
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	b004      	add	sp, #16
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	f043 0320 	orr.w	r3, r3, #32
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	2778      	movs	r7, #120	@ 0x78
 8009c5e:	4832      	ldr	r0, [pc, #200]	@ (8009d28 <_printf_i+0x238>)
 8009c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	6831      	ldr	r1, [r6, #0]
 8009c68:	061f      	lsls	r7, r3, #24
 8009c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c6e:	d402      	bmi.n	8009c76 <_printf_i+0x186>
 8009c70:	065f      	lsls	r7, r3, #25
 8009c72:	bf48      	it	mi
 8009c74:	b2ad      	uxthmi	r5, r5
 8009c76:	6031      	str	r1, [r6, #0]
 8009c78:	07d9      	lsls	r1, r3, #31
 8009c7a:	bf44      	itt	mi
 8009c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8009c80:	6023      	strmi	r3, [r4, #0]
 8009c82:	b11d      	cbz	r5, 8009c8c <_printf_i+0x19c>
 8009c84:	2310      	movs	r3, #16
 8009c86:	e7ad      	b.n	8009be4 <_printf_i+0xf4>
 8009c88:	4826      	ldr	r0, [pc, #152]	@ (8009d24 <_printf_i+0x234>)
 8009c8a:	e7e9      	b.n	8009c60 <_printf_i+0x170>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	f023 0320 	bic.w	r3, r3, #32
 8009c92:	6023      	str	r3, [r4, #0]
 8009c94:	e7f6      	b.n	8009c84 <_printf_i+0x194>
 8009c96:	4616      	mov	r6, r2
 8009c98:	e7bd      	b.n	8009c16 <_printf_i+0x126>
 8009c9a:	6833      	ldr	r3, [r6, #0]
 8009c9c:	6825      	ldr	r5, [r4, #0]
 8009c9e:	1d18      	adds	r0, r3, #4
 8009ca0:	6961      	ldr	r1, [r4, #20]
 8009ca2:	6030      	str	r0, [r6, #0]
 8009ca4:	062e      	lsls	r6, r5, #24
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	d501      	bpl.n	8009cae <_printf_i+0x1be>
 8009caa:	6019      	str	r1, [r3, #0]
 8009cac:	e002      	b.n	8009cb4 <_printf_i+0x1c4>
 8009cae:	0668      	lsls	r0, r5, #25
 8009cb0:	d5fb      	bpl.n	8009caa <_printf_i+0x1ba>
 8009cb2:	8019      	strh	r1, [r3, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4616      	mov	r6, r2
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	e7bc      	b.n	8009c36 <_printf_i+0x146>
 8009cbc:	6833      	ldr	r3, [r6, #0]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	1d1a      	adds	r2, r3, #4
 8009cc2:	6032      	str	r2, [r6, #0]
 8009cc4:	681e      	ldr	r6, [r3, #0]
 8009cc6:	6862      	ldr	r2, [r4, #4]
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 f859 	bl	8009d80 <memchr>
 8009cce:	b108      	cbz	r0, 8009cd4 <_printf_i+0x1e4>
 8009cd0:	1b80      	subs	r0, r0, r6
 8009cd2:	6060      	str	r0, [r4, #4]
 8009cd4:	6863      	ldr	r3, [r4, #4]
 8009cd6:	6123      	str	r3, [r4, #16]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cde:	e7aa      	b.n	8009c36 <_printf_i+0x146>
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	47d0      	blx	sl
 8009cea:	3001      	adds	r0, #1
 8009cec:	d0ad      	beq.n	8009c4a <_printf_i+0x15a>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	079b      	lsls	r3, r3, #30
 8009cf2:	d413      	bmi.n	8009d1c <_printf_i+0x22c>
 8009cf4:	68e0      	ldr	r0, [r4, #12]
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	4298      	cmp	r0, r3
 8009cfa:	bfb8      	it	lt
 8009cfc:	4618      	movlt	r0, r3
 8009cfe:	e7a6      	b.n	8009c4e <_printf_i+0x15e>
 8009d00:	2301      	movs	r3, #1
 8009d02:	4632      	mov	r2, r6
 8009d04:	4649      	mov	r1, r9
 8009d06:	4640      	mov	r0, r8
 8009d08:	47d0      	blx	sl
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d09d      	beq.n	8009c4a <_printf_i+0x15a>
 8009d0e:	3501      	adds	r5, #1
 8009d10:	68e3      	ldr	r3, [r4, #12]
 8009d12:	9903      	ldr	r1, [sp, #12]
 8009d14:	1a5b      	subs	r3, r3, r1
 8009d16:	42ab      	cmp	r3, r5
 8009d18:	dcf2      	bgt.n	8009d00 <_printf_i+0x210>
 8009d1a:	e7eb      	b.n	8009cf4 <_printf_i+0x204>
 8009d1c:	2500      	movs	r5, #0
 8009d1e:	f104 0619 	add.w	r6, r4, #25
 8009d22:	e7f5      	b.n	8009d10 <_printf_i+0x220>
 8009d24:	08009ec7 	.word	0x08009ec7
 8009d28:	08009ed8 	.word	0x08009ed8

08009d2c <memmove>:
 8009d2c:	4288      	cmp	r0, r1
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	eb01 0402 	add.w	r4, r1, r2
 8009d34:	d902      	bls.n	8009d3c <memmove+0x10>
 8009d36:	4284      	cmp	r4, r0
 8009d38:	4623      	mov	r3, r4
 8009d3a:	d807      	bhi.n	8009d4c <memmove+0x20>
 8009d3c:	1e43      	subs	r3, r0, #1
 8009d3e:	42a1      	cmp	r1, r4
 8009d40:	d008      	beq.n	8009d54 <memmove+0x28>
 8009d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d4a:	e7f8      	b.n	8009d3e <memmove+0x12>
 8009d4c:	4601      	mov	r1, r0
 8009d4e:	4402      	add	r2, r0
 8009d50:	428a      	cmp	r2, r1
 8009d52:	d100      	bne.n	8009d56 <memmove+0x2a>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5e:	e7f7      	b.n	8009d50 <memmove+0x24>

08009d60 <_sbrk_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	2300      	movs	r3, #0
 8009d64:	4d05      	ldr	r5, [pc, #20]	@ (8009d7c <_sbrk_r+0x1c>)
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f6 ffb2 	bl	8000cd4 <_sbrk>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_sbrk_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_sbrk_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	200017d4 	.word	0x200017d4

08009d80 <memchr>:
 8009d80:	4603      	mov	r3, r0
 8009d82:	b510      	push	{r4, lr}
 8009d84:	b2c9      	uxtb	r1, r1
 8009d86:	4402      	add	r2, r0
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	d101      	bne.n	8009d92 <memchr+0x12>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e003      	b.n	8009d9a <memchr+0x1a>
 8009d92:	7804      	ldrb	r4, [r0, #0]
 8009d94:	3301      	adds	r3, #1
 8009d96:	428c      	cmp	r4, r1
 8009d98:	d1f6      	bne.n	8009d88 <memchr+0x8>
 8009d9a:	bd10      	pop	{r4, pc}

08009d9c <memcpy>:
 8009d9c:	440a      	add	r2, r1
 8009d9e:	4291      	cmp	r1, r2
 8009da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009da4:	d100      	bne.n	8009da8 <memcpy+0xc>
 8009da6:	4770      	bx	lr
 8009da8:	b510      	push	{r4, lr}
 8009daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dae:	4291      	cmp	r1, r2
 8009db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009db4:	d1f9      	bne.n	8009daa <memcpy+0xe>
 8009db6:	bd10      	pop	{r4, pc}

08009db8 <_realloc_r>:
 8009db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbc:	4607      	mov	r7, r0
 8009dbe:	4614      	mov	r4, r2
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	b921      	cbnz	r1, 8009dce <_realloc_r+0x16>
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dca:	f7ff bc3b 	b.w	8009644 <_malloc_r>
 8009dce:	b92a      	cbnz	r2, 8009ddc <_realloc_r+0x24>
 8009dd0:	f7ff fbce 	bl	8009570 <_free_r>
 8009dd4:	4625      	mov	r5, r4
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ddc:	f000 f81a 	bl	8009e14 <_malloc_usable_size_r>
 8009de0:	4284      	cmp	r4, r0
 8009de2:	4606      	mov	r6, r0
 8009de4:	d802      	bhi.n	8009dec <_realloc_r+0x34>
 8009de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dea:	d8f4      	bhi.n	8009dd6 <_realloc_r+0x1e>
 8009dec:	4621      	mov	r1, r4
 8009dee:	4638      	mov	r0, r7
 8009df0:	f7ff fc28 	bl	8009644 <_malloc_r>
 8009df4:	4680      	mov	r8, r0
 8009df6:	b908      	cbnz	r0, 8009dfc <_realloc_r+0x44>
 8009df8:	4645      	mov	r5, r8
 8009dfa:	e7ec      	b.n	8009dd6 <_realloc_r+0x1e>
 8009dfc:	42b4      	cmp	r4, r6
 8009dfe:	4622      	mov	r2, r4
 8009e00:	4629      	mov	r1, r5
 8009e02:	bf28      	it	cs
 8009e04:	4632      	movcs	r2, r6
 8009e06:	f7ff ffc9 	bl	8009d9c <memcpy>
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f7ff fbaf 	bl	8009570 <_free_r>
 8009e12:	e7f1      	b.n	8009df8 <_realloc_r+0x40>

08009e14 <_malloc_usable_size_r>:
 8009e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e18:	1f18      	subs	r0, r3, #4
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	bfbc      	itt	lt
 8009e1e:	580b      	ldrlt	r3, [r1, r0]
 8009e20:	18c0      	addlt	r0, r0, r3
 8009e22:	4770      	bx	lr

08009e24 <_init>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr

08009e30 <_fini>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	bf00      	nop
 8009e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e36:	bc08      	pop	{r3}
 8009e38:	469e      	mov	lr, r3
 8009e3a:	4770      	bx	lr
