
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6bc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a7c8  0800a7c8  0000b7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a878  0800a878  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a878  0800a878  0000c1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a878  0800a878  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a878  0800a878  0000b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a87c  0800a87c  0000b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a880  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000165c  200001d4  0800aa54  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001830  0800aa54  0000c830  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014260  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a87  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00023ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00025160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0d2  00000000  00000000  00025f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017732  00000000  00000000  00041037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928fe  00000000  00000000  00058769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  000eb0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f0118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a7b0 	.word	0x0800a7b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	0800a7b0 	.word	0x0800a7b0

0800014c <SendInfo>:

#include "UnerProtocol.h"

_work casts;

void SendInfo(uint8_t bufferAux[],uint8_t bytes){
 800014c:	b480      	push	{r7}
 800014e:	b08d      	sub	sp, #52	@ 0x34
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8000158:	2300      	movs	r3, #0
 800015a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800015e:	2300      	movs	r3, #0
 8000160:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000164:	2300      	movs	r3, #0
 8000166:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800016a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800016e:	1c5a      	adds	r2, r3, #1
 8000170:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000174:	3330      	adds	r3, #48	@ 0x30
 8000176:	443b      	add	r3, r7
 8000178:	2255      	movs	r2, #85	@ 0x55
 800017a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800017e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000182:	1c5a      	adds	r2, r3, #1
 8000184:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000188:	3330      	adds	r3, #48	@ 0x30
 800018a:	443b      	add	r3, r7
 800018c:	224e      	movs	r2, #78	@ 0x4e
 800018e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800019c:	3330      	adds	r3, #48	@ 0x30
 800019e:	443b      	add	r3, r7
 80001a0:	2245      	movs	r2, #69	@ 0x45
 80001a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80001a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001b0:	3330      	adds	r3, #48	@ 0x30
 80001b2:	443b      	add	r3, r7
 80001b4:	2252      	movs	r2, #82	@ 0x52
 80001b6:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 80001ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001c4:	3330      	adds	r3, #48	@ 0x30
 80001c6:	443b      	add	r3, r7
 80001c8:	78fa      	ldrb	r2, [r7, #3]
 80001ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80001ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001d2:	1c5a      	adds	r2, r3, #1
 80001d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001d8:	3330      	adds	r3, #48	@ 0x30
 80001da:	443b      	add	r3, r7
 80001dc:	223a      	movs	r2, #58	@ 0x3a
 80001de:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80001e8:	e012      	b.n	8000210 <SendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 80001ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	441a      	add	r2, r3
 80001f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001f6:	1c59      	adds	r1, r3, #1
 80001f8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80001fc:	7812      	ldrb	r2, [r2, #0]
 80001fe:	3330      	adds	r3, #48	@ 0x30
 8000200:	443b      	add	r3, r7
 8000202:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 8000206:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800020a:	3301      	adds	r3, #1
 800020c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000210:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000214:	78fb      	ldrb	r3, [r7, #3]
 8000216:	3b01      	subs	r3, #1
 8000218:	429a      	cmp	r2, r3
 800021a:	dbe6      	blt.n	80001ea <SendInfo+0x9e>

    cks=0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8000222:	2300      	movs	r3, #0
 8000224:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000228:	e021      	b.n	800026e <SendInfo+0x122>
        cks^= bufAux[i];
 800022a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800022e:	3330      	adds	r3, #48	@ 0x30
 8000230:	443b      	add	r3, r7
 8000232:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800023a:	4053      	eors	r3, r2
 800023c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 8000240:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <SendInfo+0x15c>)
 8000246:	795b      	ldrb	r3, [r3, #5]
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	b2c8      	uxtb	r0, r1
 800024c:	4916      	ldr	r1, [pc, #88]	@ (80002a8 <SendInfo+0x15c>)
 800024e:	7148      	strb	r0, [r1, #5]
 8000250:	4619      	mov	r1, r3
 8000252:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000256:	443b      	add	r3, r7
 8000258:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <SendInfo+0x15c>)
 800025e:	440b      	add	r3, r1
 8000260:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(i=0 ;i<indiceAux;i++){
 8000264:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000268:	3301      	adds	r3, #1
 800026a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800026e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000276:	429a      	cmp	r2, r3
 8000278:	d3d7      	bcc.n	800022a <SendInfo+0xde>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <SendInfo+0x15c>)
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	b2d1      	uxtb	r1, r2
 8000282:	4a09      	ldr	r2, [pc, #36]	@ (80002a8 <SendInfo+0x15c>)
 8000284:	7151      	strb	r1, [r2, #5]
 8000286:	461a      	mov	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <SendInfo+0x15c>)
 800028a:	4413      	add	r3, r2
 800028c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000290:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

     datosComSerie.bytesTosend=indiceAux;
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <SendInfo+0x15c>)
 8000296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800029a:	f882 3207 	strb.w	r3, [r2, #519]	@ 0x207

}
 800029e:	bf00      	nop
 80002a0:	3734      	adds	r7, #52	@ 0x34
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200002fc 	.word	0x200002fc

080002ac <DecodeHeader>:

void DecodeHeader(_sDato *datosCom){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80002ba:	e0e2      	b.n	8000482 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80002bc:	4b76      	ldr	r3, [pc, #472]	@ (8000498 <DecodeHeader+0x1ec>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	f200 80d7 	bhi.w	8000474 <DecodeHeader+0x1c8>
 80002c6:	a201      	add	r2, pc, #4	@ (adr r2, 80002cc <DecodeHeader+0x20>)
 80002c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002cc:	080002e9 	.word	0x080002e9
 80002d0:	08000311 	.word	0x08000311
 80002d4:	08000345 	.word	0x08000345
 80002d8:	08000379 	.word	0x08000379
 80002dc:	080003ad 	.word	0x080003ad
 80002e0:	080003d5 	.word	0x080003d5
 80002e4:	08000417 	.word	0x08000417
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	b2d1      	uxtb	r1, r2
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	7111      	strb	r1, [r2, #4]
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	79db      	ldrb	r3, [r3, #7]
 80002fc:	2b55      	cmp	r3, #85	@ 0x55
 80002fe:	f040 80bd 	bne.w	800047c <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000302:	4b65      	ldr	r3, [pc, #404]	@ (8000498 <DecodeHeader+0x1ec>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800030e:	e0b5      	b.n	800047c <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	791b      	ldrb	r3, [r3, #4]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	b2d1      	uxtb	r1, r2
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7111      	strb	r1, [r2, #4]
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	79db      	ldrb	r3, [r3, #7]
 8000324:	2b4e      	cmp	r3, #78	@ 0x4e
 8000326:	d103      	bne.n	8000330 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000328:	4b5b      	ldr	r3, [pc, #364]	@ (8000498 <DecodeHeader+0x1ec>)
 800032a:	2202      	movs	r2, #2
 800032c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800032e:	e0a8      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	3b01      	subs	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800033c:	4b56      	ldr	r3, [pc, #344]	@ (8000498 <DecodeHeader+0x1ec>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
                break;
 8000342:	e09e      	b.n	8000482 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	b2d1      	uxtb	r1, r2
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7111      	strb	r1, [r2, #4]
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	79db      	ldrb	r3, [r3, #7]
 8000358:	2b45      	cmp	r3, #69	@ 0x45
 800035a:	d103      	bne.n	8000364 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800035c:	4b4e      	ldr	r3, [pc, #312]	@ (8000498 <DecodeHeader+0x1ec>)
 800035e:	2203      	movs	r2, #3
 8000360:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000362:	e08e      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000370:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <DecodeHeader+0x1ec>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
                break;
 8000376:	e084      	b.n	8000482 <DecodeHeader+0x1d6>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	b2d1      	uxtb	r1, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	7111      	strb	r1, [r2, #4]
 8000384:	461a      	mov	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	79db      	ldrb	r3, [r3, #7]
 800038c:	2b52      	cmp	r3, #82	@ 0x52
 800038e:	d103      	bne.n	8000398 <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000390:	4b41      	ldr	r3, [pc, #260]	@ (8000498 <DecodeHeader+0x1ec>)
 8000392:	2204      	movs	r2, #4
 8000394:	701a      	strb	r2, [r3, #0]
				else{
					datosCom->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 8000396:	e074      	b.n	8000482 <DecodeHeader+0x1d6>
					datosCom->indexReadRx--;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	3b01      	subs	r3, #1
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80003a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000498 <DecodeHeader+0x1ec>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
            break;
 80003aa:	e06a      	b.n	8000482 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791a      	ldrb	r2, [r3, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	b2d1      	uxtb	r1, r2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7111      	strb	r1, [r2, #4]
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	79da      	ldrb	r2, [r3, #7]
 80003c8:	4b34      	ldr	r3, [pc, #208]	@ (800049c <DecodeHeader+0x1f0>)
 80003ca:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80003cc:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ce:	2205      	movs	r2, #5
 80003d0:	701a      	strb	r2, [r3, #0]
                break;
 80003d2:	e056      	b.n	8000482 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	791b      	ldrb	r3, [r3, #4]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	b2d1      	uxtb	r1, r2
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7111      	strb	r1, [r2, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	79db      	ldrb	r3, [r3, #7]
 80003e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80003ea:	d10a      	bne.n	8000402 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ee:	2206      	movs	r2, #6
 80003f0:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003f2:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <DecodeHeader+0x1f0>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000400:	e03f      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800040e:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <DecodeHeader+0x1ec>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
                break;
 8000414:	e035      	b.n	8000482 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <DecodeHeader+0x1f0>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d90f      	bls.n	800043e <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	b2d1      	uxtb	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7111      	strb	r1, [r2, #4]
 800042a:	461a      	mov	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	79da      	ldrb	r2, [r3, #7]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	4053      	eors	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <DecodeHeader+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	3b01      	subs	r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <DecodeHeader+0x1f0>)
 8000448:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <DecodeHeader+0x1f0>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d116      	bne.n	8000480 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <DecodeHeader+0x1ec>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	440b      	add	r3, r1
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	429a      	cmp	r2, r3
 800046a:	d109      	bne.n	8000480 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f817 	bl	80004a0 <decodeData>
                    }
                }

                break;
 8000472:	e005      	b.n	8000480 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <DecodeHeader+0x1ec>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
                break;
 800047a:	e002      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 800047c:	bf00      	nop
 800047e:	e000      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 8000480:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	7bfa      	ldrb	r2, [r7, #15]
 8000488:	429a      	cmp	r2, r3
 800048a:	f47f af17 	bne.w	80002bc <DecodeHeader+0x10>
        }
    }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000504 	.word	0x20000504
 800049c:	200001f4 	.word	0x200001f4

080004a0 <decodeData>:



void decodeData(_sDato *datosCom){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	77bb      	strb	r3, [r7, #30]
 80004ac:	2300      	movs	r3, #0
 80004ae:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	785b      	ldrb	r3, [r3, #1]
 80004b4:	3302      	adds	r3, #2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	2bf2      	cmp	r3, #242	@ 0xf2
 80004be:	d01f      	beq.n	8000500 <decodeData+0x60>
 80004c0:	2bf2      	cmp	r3, #242	@ 0xf2
 80004c2:	dc3f      	bgt.n	8000544 <decodeData+0xa4>
 80004c4:	2bf1      	cmp	r3, #241	@ 0xf1
 80004c6:	d010      	beq.n	80004ea <decodeData+0x4a>
 80004c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80004ca:	dc3b      	bgt.n	8000544 <decodeData+0xa4>
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d020      	beq.n	8000512 <decodeData+0x72>
 80004d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80004d2:	d137      	bne.n	8000544 <decodeData+0xa4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80004d4:	7fbb      	ldrb	r3, [r7, #30]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	77ba      	strb	r2, [r7, #30]
 80004da:	3320      	adds	r3, #32
 80004dc:	443b      	add	r3, r7
 80004de:	22f0      	movs	r2, #240	@ 0xf0
 80004e0:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80004e4:	2302      	movs	r3, #2
 80004e6:	77fb      	strb	r3, [r7, #31]

    break;
 80004e8:	e037      	b.n	800055a <decodeData+0xba>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80004ea:	7fbb      	ldrb	r3, [r7, #30]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	77ba      	strb	r2, [r7, #30]
 80004f0:	3320      	adds	r3, #32
 80004f2:	443b      	add	r3, r7
 80004f4:	22f1      	movs	r2, #241	@ 0xf1
 80004f6:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80004fa:	2302      	movs	r3, #2
 80004fc:	77fb      	strb	r3, [r7, #31]

    break;
 80004fe:	e02c      	b.n	800055a <decodeData+0xba>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 8000500:	7fbb      	ldrb	r3, [r7, #30]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	77ba      	strb	r2, [r7, #30]
 8000506:	3320      	adds	r3, #32
 8000508:	443b      	add	r3, r7
 800050a:	22f2      	movs	r2, #242	@ 0xf2
 800050c:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 8000510:	e023      	b.n	800055a <decodeData+0xba>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 8000512:	7fbb      	ldrb	r3, [r7, #30]
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	77ba      	strb	r2, [r7, #30]
 8000518:	3320      	adds	r3, #32
 800051a:	443b      	add	r3, r7
 800051c:	2200      	movs	r2, #0
 800051e:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosCom->bufferRx[datosCom->indexStart+3];
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	785b      	ldrb	r3, [r3, #1]
 8000526:	3303      	adds	r3, #3
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	79da      	ldrb	r2, [r3, #7]
 800052e:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <decodeData+0xd0>)
 8000530:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosCom->bufferRx[datosCom->indexStart+4];
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	785b      	ldrb	r3, [r3, #1]
 8000536:	3304      	adds	r3, #4
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	79da      	ldrb	r2, [r3, #7]
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <decodeData+0xd0>)
 8000540:	705a      	strb	r2, [r3, #1]

//    	ptrSpeed = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad

    break;
 8000542:	e00a      	b.n	800055a <decodeData+0xba>
    default:

        bufAux[indiceAux++]=0xFF;
 8000544:	7fbb      	ldrb	r3, [r7, #30]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	77ba      	strb	r2, [r7, #30]
 800054a:	3320      	adds	r3, #32
 800054c:	443b      	add	r3, r7
 800054e:	22ff      	movs	r2, #255	@ 0xff
 8000550:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 8000554:	2302      	movs	r3, #2
 8000556:	77fb      	strb	r3, [r7, #31]

    break;
 8000558:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 800055a:	7ffa      	ldrb	r2, [r7, #31]
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	4611      	mov	r1, r2
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fdf2 	bl	800014c <SendInfo>
}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200001f0 	.word	0x200001f0

08000574 <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000580:	2300      	movs	r3, #0
 8000582:	81fb      	strh	r3, [r7, #14]
 8000584:	e014      	b.n	80005b0 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 8000586:	89fb      	ldrh	r3, [r7, #14]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	4413      	add	r3, r2
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <datafromUSB+0x50>)
 800058e:	78d2      	ldrb	r2, [r2, #3]
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	4611      	mov	r1, r2
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <datafromUSB+0x50>)
 8000598:	440b      	add	r3, r1
 800059a:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <datafromUSB+0x50>)
 800059e:	78db      	ldrb	r3, [r3, #3]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	3301      	adds	r3, #1
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <datafromUSB+0x50>)
 80005a8:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 80005aa:	89fb      	ldrh	r3, [r7, #14]
 80005ac:	3301      	adds	r3, #1
 80005ae:	81fb      	strh	r3, [r7, #14]
 80005b0:	89fa      	ldrh	r2, [r7, #14]
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3e6      	bcc.n	8000586 <datafromUSB+0x12>
  }

}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	200002fc 	.word	0x200002fc

080005c8 <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 80005d4:	2300      	movs	r3, #0
 80005d6:	77fb      	strb	r3, [r7, #31]
 80005d8:	e00c      	b.n	80005f4 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 80005da:	7ffa      	ldrb	r2, [r7, #31]
 80005dc:	7ffb      	ldrb	r3, [r7, #31]
 80005de:	490b      	ldr	r1, [pc, #44]	@ (800060c <HAL_ADC_ConvCpltCallback+0x44>)
 80005e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e4:	f107 000c 	add.w	r0, r7, #12
 80005e8:	4909      	ldr	r1, [pc, #36]	@ (8000610 <HAL_ADC_ConvCpltCallback+0x48>)
 80005ea:	f009 fc31 	bl	8009e50 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 80005ee:	7ffb      	ldrb	r3, [r7, #31]
 80005f0:	3301      	adds	r3, #1
 80005f2:	77fb      	strb	r3, [r7, #31]
 80005f4:	7ffb      	ldrb	r3, [r7, #31]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9ef      	bls.n	80005da <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000600:	f001 feb4 	bl	800236c <HAL_GPIO_TogglePin>
}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000508 	.word	0x20000508
 8000610:	0800a7c8 	.word	0x0800a7c8
 8000614:	40011000 	.word	0x40011000

08000618 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	IS10MS=TRUE;
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000622:	7813      	ldrb	r3, [r2, #0]
 8000624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000628:	7013      	strb	r3, [r2, #0]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	20000518 	.word	0x20000518

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter=0;
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
	uint8_t DMAcounter=0;
 8000642:	2300      	movs	r3, #0
 8000644:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fd05 	bl	8001054 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(&datafromUSB);
 800064a:	4839      	ldr	r0, [pc, #228]	@ (8000730 <main+0xf8>)
 800064c:	f009 f83a 	bl	80096c4 <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 8000650:	4b38      	ldr	r3, [pc, #224]	@ (8000734 <main+0xfc>)
 8000652:	2200      	movs	r2, #0
 8000654:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <main+0xfc>)
 8000658:	2200      	movs	r2, #0
 800065a:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags=0;
 800065c:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <main+0x100>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f875 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 fa5f 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA_Init();
 800066a:	f000 fa3f 	bl	8000aec <MX_DMA_Init>
  MX_ADC1_Init();
 800066e:	f000 f8cd 	bl	800080c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000672:	f000 f96d 	bl	8000950 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000676:	f008 fee3 	bl	8009440 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800067a:	f000 f9b5 	bl	80009e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800067e:	482f      	ldr	r0, [pc, #188]	@ (800073c <main+0x104>)
 8000680:	f004 f8d2 	bl	8004828 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000684:	2104      	movs	r1, #4
 8000686:	482e      	ldr	r0, [pc, #184]	@ (8000740 <main+0x108>)
 8000688:	f004 f978 	bl	800497c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800068c:	2100      	movs	r1, #0
 800068e:	482c      	ldr	r0, [pc, #176]	@ (8000740 <main+0x108>)
 8000690:	f004 f974 	bl	800497c <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(Engine1_GPIO_Port, Engine1_Pin, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	482a      	ldr	r0, [pc, #168]	@ (8000744 <main+0x10c>)
 800069a:	f001 fe4f 	bl	800233c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Engine2_GPIO_Port, Engine2_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	4828      	ldr	r0, [pc, #160]	@ (8000744 <main+0x10c>)
 80006a4:	f001 fe4a 	bl	800233c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	comunicationsTask(&datosComSerie);
 80006a8:	4822      	ldr	r0, [pc, #136]	@ (8000734 <main+0xfc>)
 80006aa:	f000 faa9 	bl	8000c00 <comunicationsTask>

	if(IS10MS){
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <main+0x100>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f5      	beq.n	80006a8 <main+0x70>
		if(counter>10){
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d915      	bls.n	80006ee <main+0xb6>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 9999);
 80006c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <main+0x108>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006ca:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 9999);
 80006cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <main+0x108>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Engine1_1_GPIO_Port, Engine1_1_Pin, 1);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <main+0x10c>)
 80006dc:	f001 fe2e 	bl	800233c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine1_1_GPIO_Port, Engine1_1_Pin, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2110      	movs	r1, #16
 80006e4:	4817      	ldr	r0, [pc, #92]	@ (8000744 <main+0x10c>)
 80006e6:	f001 fe29 	bl	800233c <HAL_GPIO_WritePin>
			counter=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	71fb      	strb	r3, [r7, #7]
		}
		if(DMAcounter>100){
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	2b64      	cmp	r3, #100	@ 0x64
 80006f2:	d906      	bls.n	8000702 <main+0xca>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 80006f4:	2208      	movs	r2, #8
 80006f6:	4914      	ldr	r1, [pc, #80]	@ (8000748 <main+0x110>)
 80006f8:	4814      	ldr	r0, [pc, #80]	@ (800074c <main+0x114>)
 80006fa:	f000 fde5 	bl	80012c8 <HAL_ADC_Start_DMA>
			DMAcounter=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	71bb      	strb	r3, [r7, #6]
		}
		IS10MS=!IS10MS;
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <main+0x100>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2d9      	uxtb	r1, r3
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <main+0x100>)
 8000718:	7813      	ldrb	r3, [r2, #0]
 800071a:	f361 1386 	bfi	r3, r1, #6, #1
 800071e:	7013      	strb	r3, [r2, #0]
		counter++;
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3301      	adds	r3, #1
 8000724:	71fb      	strb	r3, [r7, #7]
		DMAcounter++;
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	3301      	adds	r3, #1
 800072a:	71bb      	strb	r3, [r7, #6]
	comunicationsTask(&datosComSerie);
 800072c:	e7bc      	b.n	80006a8 <main+0x70>
 800072e:	bf00      	nop
 8000730:	08000575 	.word	0x08000575
 8000734:	200002fc 	.word	0x200002fc
 8000738:	20000518 	.word	0x20000518
 800073c:	2000026c 	.word	0x2000026c
 8000740:	200002b4 	.word	0x200002b4
 8000744:	40010c00 	.word	0x40010c00
 8000748:	20000508 	.word	0x20000508
 800074c:	200001f8 	.word	0x200001f8

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075a:	2228      	movs	r2, #40	@ 0x28
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f009 fb98 	bl	8009e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800079c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fb5a 	bl	8003e60 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007b2:	f000 fa75 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2102      	movs	r1, #2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fdc6 	bl	8004364 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007de:	f000 fa5f 	bl	8000ca0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80007e2:	2312      	movs	r3, #18
 80007e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 ff12 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007fe:	f000 fa4f 	bl	8000ca0 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	@ 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800081c:	4b4a      	ldr	r3, [pc, #296]	@ (8000948 <MX_ADC1_Init+0x13c>)
 800081e:	4a4b      	ldr	r2, [pc, #300]	@ (800094c <MX_ADC1_Init+0x140>)
 8000820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000822:	4b49      	ldr	r3, [pc, #292]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000828:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082a:	4b47      	ldr	r3, [pc, #284]	@ (8000948 <MX_ADC1_Init+0x13c>)
 800082c:	2200      	movs	r2, #0
 800082e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000830:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000832:	2200      	movs	r2, #0
 8000834:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000836:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000838:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800083c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000844:	4b40      	ldr	r3, [pc, #256]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000846:	2208      	movs	r2, #8
 8000848:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	483f      	ldr	r0, [pc, #252]	@ (8000948 <MX_ADC1_Init+0x13c>)
 800084c:	f000 fc64 	bl	8001118 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000856:	f000 fa23 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2301      	movs	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000862:	2307      	movs	r3, #7
 8000864:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4837      	ldr	r0, [pc, #220]	@ (8000948 <MX_ADC1_Init+0x13c>)
 800086c:	f000 fee4 	bl	8001638 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 fa13 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087a:	2301      	movs	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800087e:	2302      	movs	r3, #2
 8000880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4830      	ldr	r0, [pc, #192]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000888:	f000 fed6 	bl	8001638 <HAL_ADC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000892:	f000 fa05 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000896:	2302      	movs	r3, #2
 8000898:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800089a:	2303      	movs	r3, #3
 800089c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4829      	ldr	r0, [pc, #164]	@ (8000948 <MX_ADC1_Init+0x13c>)
 80008a4:	f000 fec8 	bl	8001638 <HAL_ADC_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008ae:	f000 f9f7 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008b2:	2303      	movs	r3, #3
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4822      	ldr	r0, [pc, #136]	@ (8000948 <MX_ADC1_Init+0x13c>)
 80008c0:	f000 feba 	bl	8001638 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80008ca:	f000 f9e9 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008d2:	2305      	movs	r3, #5
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	481b      	ldr	r0, [pc, #108]	@ (8000948 <MX_ADC1_Init+0x13c>)
 80008dc:	f000 feac 	bl	8001638 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008e6:	f000 f9db 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ea:	2305      	movs	r3, #5
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80008ee:	2306      	movs	r3, #6
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4814      	ldr	r0, [pc, #80]	@ (8000948 <MX_ADC1_Init+0x13c>)
 80008f8:	f000 fe9e 	bl	8001638 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000902:	f000 f9cd 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000906:	2306      	movs	r3, #6
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800090a:	2307      	movs	r3, #7
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000914:	f000 fe90 	bl	8001638 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800091e:	f000 f9bf 	bl	8000ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000922:	2307      	movs	r3, #7
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000926:	2308      	movs	r3, #8
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_ADC1_Init+0x13c>)
 8000930:	f000 fe82 	bl	8001638 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800093a:	f000 f9b1 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200001f8 	.word	0x200001f8
 800094c:	40012400 	.word	0x40012400

08000950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MX_TIM2_Init+0x94>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_TIM2_Init+0x94>)
 8000976:	2247      	movs	r2, #71	@ 0x47
 8000978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_TIM2_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_TIM2_Init+0x94>)
 8000982:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <MX_TIM2_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_TIM2_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000994:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_TIM2_Init+0x94>)
 8000996:	f003 fef7 	bl	8004788 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a0:	f000 f97e 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_TIM2_Init+0x94>)
 80009b2:	f004 fa37 	bl	8004e24 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009bc:	f000 f970 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_TIM2_Init+0x94>)
 80009ce:	f004 fdc5 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f962 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000026c 	.word	0x2000026c

080009e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	@ 0x38
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a18:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a1a:	4a33      	ldr	r2, [pc, #204]	@ (8000ae8 <MX_TIM4_Init+0x100>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a20:	2247      	movs	r2, #71	@ 0x47
 8000a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a2c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a3e:	4829      	ldr	r0, [pc, #164]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a40:	f003 fea2 	bl	8004788 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a4a:	f000 f929 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4822      	ldr	r0, [pc, #136]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a5c:	f004 f9e2 	bl	8004e24 <HAL_TIM_ConfigClockSource>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a66:	f000 f91b 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a6a:	481e      	ldr	r0, [pc, #120]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a6c:	f003 ff2e 	bl	80048cc <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a76:	f000 f913 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4619      	mov	r1, r3
 8000a88:	4816      	ldr	r0, [pc, #88]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000a8a:	f004 fd67 	bl	800555c <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a94:	f000 f904 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	@ 0x60
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000ab0:	f004 f8f6 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000aba:	f000 f8f1 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000ac6:	f004 f8eb 	bl	8004ca0 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ad0:	f000 f8e6 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ad4:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <MX_TIM4_Init+0xfc>)
 8000ad6:	f000 f9cb 	bl	8000e70 <HAL_TIM_MspPostInit>

}
 8000ada:	bf00      	nop
 8000adc:	3738      	adds	r7, #56	@ 0x38
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002b4 	.word	0x200002b4
 8000ae8:	40000800 	.word	0x40000800

08000aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_DMA_Init+0x38>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <MX_DMA_Init+0x38>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_DMA_Init+0x38>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200b      	movs	r0, #11
 8000b10:	f001 f86b 	bl	8001bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b14:	200b      	movs	r0, #11
 8000b16:	f001 f884 	bl	8001c22 <HAL_NVIC_EnableIRQ>

}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a2c      	ldr	r2, [pc, #176]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a26      	ldr	r2, [pc, #152]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b5a:	f043 0320 	orr.w	r3, r3, #32
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0320 	and.w	r3, r3, #32
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a20      	ldr	r2, [pc, #128]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_GPIO_Init+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba2:	4815      	ldr	r0, [pc, #84]	@ (8000bf8 <MX_GPIO_Init+0xd0>)
 8000ba4:	f001 fbca 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Engine1_1_Pin|Engine1_2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2130      	movs	r1, #48	@ 0x30
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <MX_GPIO_Init+0xd4>)
 8000bae:	f001 fbc5 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480b      	ldr	r0, [pc, #44]	@ (8000bf8 <MX_GPIO_Init+0xd0>)
 8000bcc:	f001 fa32 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : Engine1_1_Pin Engine1_2_Pin */
  GPIO_InitStruct.Pin = Engine1_1_Pin|Engine1_2_Pin;
 8000bd0:	2330      	movs	r3, #48	@ 0x30
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_GPIO_Init+0xd4>)
 8000be8:	f001 fa24 	bl	8002034 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40011000 	.word	0x40011000
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <comunicationsTask>:

/* USER CODE BEGIN 4 */

void comunicationsTask(_sDato *datosCom){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	791a      	ldrb	r2, [r3, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d007      	beq.n	8000c26 <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fb48 	bl	80002ac <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c1e:	78db      	ldrb	r3, [r3, #3]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c24:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	799a      	ldrb	r2, [r3, #6]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d030      	beq.n	8000c94 <comunicationsTask+0x94>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	795a      	ldrb	r2, [r3, #5]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	799b      	ldrb	r3, [r3, #6]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d909      	bls.n	8000c52 <comunicationsTask+0x52>
				datosComSerie.bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	795a      	ldrb	r2, [r3, #5]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c4c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8000c50:	e006      	b.n	8000c60 <comunicationsTask+0x60>
		    }else{
		    	datosComSerie.bytesTosend =  RINGBUFFER - datosCom->indexReadTx;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	799b      	ldrb	r3, [r3, #6]
 8000c56:	425b      	negs	r3, r3
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c5c:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
		    }
		    if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosCom->indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	799b      	ldrb	r3, [r3, #6]
 8000c64:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c68:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3307      	adds	r3, #7
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c70:	f892 2207 	ldrb.w	r2, [r2, #519]	@ 0x207
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f008 fcfe 	bl	8009678 <CDC_Transmit_FS>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d108      	bne.n	8000c94 <comunicationsTask+0x94>
		    	datosCom->indexReadTx += datosComSerie.bytesTosend;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	799a      	ldrb	r2, [r3, #6]
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <comunicationsTask+0x9c>)
 8000c88:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200002fc 	.word	0x200002fc

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <Error_Handler+0x8>

08000cac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <HAL_MspInit+0x5c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	@ (8000d08 <HAL_MspInit+0x5c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_MspInit+0x60>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_MspInit+0x60>)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000

08000d10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ddc <HAL_ADC_MspInit+0xcc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d151      	bne.n	8000dd4 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d30:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <HAL_ADC_MspInit+0xd0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a2a      	ldr	r2, [pc, #168]	@ (8000de0 <HAL_ADC_MspInit+0xd0>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <HAL_ADC_MspInit+0xd0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <HAL_ADC_MspInit+0xd0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a24      	ldr	r2, [pc, #144]	@ (8000de0 <HAL_ADC_MspInit+0xd0>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <HAL_ADC_MspInit+0xd0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d60:	23ff      	movs	r3, #255	@ 0xff
 8000d62:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d64:	2303      	movs	r3, #3
 8000d66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d70:	f001 f960 	bl	8002034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d76:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da8:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000daa:	f000 ff55 	bl	8001c58 <HAL_DMA_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000db4:	f7ff ff74 	bl	8000ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000dbc:	621a      	str	r2, [r3, #32]
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2012      	movs	r0, #18
 8000dca:	f000 ff0e 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f000 ff27 	bl	8001c22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012400 	.word	0x40012400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	20000228 	.word	0x20000228
 8000dec:	40020008 	.word	0x40020008

08000df0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e00:	d114      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e02:	4b19      	ldr	r3, [pc, #100]	@ (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	201c      	movs	r0, #28
 8000e20:	f000 fee3 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e24:	201c      	movs	r0, #28
 8000e26:	f000 fefc 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e2a:	e018      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_TIM_Base_MspInit+0x7c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_TIM_Base_MspInit+0x78>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	201e      	movs	r0, #30
 8000e54:	f000 fec9 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e58:	201e      	movs	r0, #30
 8000e5a:	f000 fee2 	bl	8001c22 <HAL_NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40000800 	.word	0x40000800

08000e70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <HAL_TIM_MspPostInit+0x58>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d117      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_TIM_MspPostInit+0x5c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <HAL_TIM_MspPostInit+0x5c>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_TIM_MspPostInit+0x5c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Engine2_Pin|Engine1_Pin;
 8000ea8:	23c0      	movs	r3, #192	@ 0xc0
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_TIM_MspPostInit+0x60>)
 8000ebc:	f001 f8ba 	bl	8002034 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40000800 	.word	0x40000800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010c00 	.word	0x40010c00

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <NMI_Handler+0x4>

08000edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f24:	f000 f8dc 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f30:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <DMA1_Channel1_IRQHandler+0x10>)
 8000f32:	f000 ff4b 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000228 	.word	0x20000228

08000f40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <ADC1_2_IRQHandler+0x10>)
 8000f46:	f000 fa9d 	bl	8001484 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200001f8 	.word	0x200001f8

08000f54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f5a:	f001 fb3c 	bl	80025d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200011f0 	.word	0x200011f0

08000f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <TIM2_IRQHandler+0x10>)
 8000f6e:	f003 fda7 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000026c 	.word	0x2000026c

08000f7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <TIM4_IRQHandler+0x10>)
 8000f82:	f003 fd9d 	bl	8004ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002b4 	.word	0x200002b4

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f008 ff70 	bl	8009ea4 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20005000 	.word	0x20005000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	2000051c 	.word	0x2000051c
 8000ff8:	20001830 	.word	0x20001830

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff fff8 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	@ (800103c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100e:	490c      	ldr	r1, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001010:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001024:	4c09      	ldr	r4, [pc, #36]	@ (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f008 ff3d 	bl	8009eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff faff 	bl	8000638 <main>
  bx lr
 800103a:	4770      	bx	lr
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001044:	0800a880 	.word	0x0800a880
  ldr r2, =_sbss
 8001048:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800104c:	20001830 	.word	0x20001830

08001050 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <CAN1_RX1_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	@ (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 fdb5 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fe1c 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fdcd 	bl	8001c3e <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 fd95 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <HAL_IncTick+0x20>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000520 	.word	0x20000520

08001104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	@ (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000520 	.word	0x20000520

08001118 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0be      	b.n	80012b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	d109      	bne.n	800115c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fdda 	bl	8000d10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fbbd 	bl	80018dc <ADC_ConversionStop_Disable>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 8099 	bne.w	80012a6 <HAL_ADC_Init+0x18e>
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8095 	bne.w	80012a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001180:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001184:	f023 0302 	bic.w	r3, r3, #2
 8001188:	f043 0202 	orr.w	r2, r3, #2
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001198:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7b1b      	ldrb	r3, [r3, #12]
 800119e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011b0:	d003      	beq.n	80011ba <HAL_ADC_Init+0xa2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_ADC_Init+0xa8>
 80011ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011be:	e000      	b.n	80011c2 <HAL_ADC_Init+0xaa>
 80011c0:	2300      	movs	r3, #0
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7d1b      	ldrb	r3, [r3, #20]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d119      	bne.n	8001204 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	3b01      	subs	r3, #1
 80011de:	035a      	lsls	r2, r3, #13
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	e00b      	b.n	8001204 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	f043 0220 	orr.w	r2, r3, #32
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	430a      	orrs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <HAL_ADC_Init+0x1a8>)
 8001220:	4013      	ands	r3, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	430b      	orrs	r3, r1
 800122a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001234:	d003      	beq.n	800123e <HAL_ADC_Init+0x126>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d104      	bne.n	8001248 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	3b01      	subs	r3, #1
 8001244:	051b      	lsls	r3, r3, #20
 8001246:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	430a      	orrs	r2, r1
 800125a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_ADC_Init+0x1ac>)
 8001264:	4013      	ands	r3, r2
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	429a      	cmp	r2, r3
 800126a:	d10b      	bne.n	8001284 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001282:	e018      	b.n	80012b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	f023 0312 	bic.w	r3, r3, #18
 800128c:	f043 0210 	orr.w	r2, r3, #16
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a4:	e007      	b.n	80012b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	f043 0210 	orr.w	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	ffe1f7fd 	.word	0xffe1f7fd
 80012c4:	ff1f0efe 	.word	0xff1f0efe

080012c8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a64      	ldr	r2, [pc, #400]	@ (8001470 <HAL_ADC_Start_DMA+0x1a8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d004      	beq.n	80012ec <HAL_ADC_Start_DMA+0x24>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a63      	ldr	r2, [pc, #396]	@ (8001474 <HAL_ADC_Start_DMA+0x1ac>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d106      	bne.n	80012fa <HAL_ADC_Start_DMA+0x32>
 80012ec:	4b60      	ldr	r3, [pc, #384]	@ (8001470 <HAL_ADC_Start_DMA+0x1a8>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 80b3 	bne.w	8001460 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_Start_DMA+0x40>
 8001304:	2302      	movs	r3, #2
 8001306:	e0ae      	b.n	8001466 <HAL_ADC_Start_DMA+0x19e>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 fa89 	bl	8001828 <ADC_Enable>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 809a 	bne.w	8001456 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a4e      	ldr	r2, [pc, #312]	@ (8001474 <HAL_ADC_Start_DMA+0x1ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d105      	bne.n	800134c <HAL_ADC_Start_DMA+0x84>
 8001340:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <HAL_ADC_Start_DMA+0x1a8>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d115      	bne.n	8001378 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001350:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001362:	2b00      	cmp	r3, #0
 8001364:	d026      	beq.n	80013b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001376:	e01d      	b.n	80013b4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a39      	ldr	r2, [pc, #228]	@ (8001470 <HAL_ADC_Start_DMA+0x1a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d004      	beq.n	8001398 <HAL_ADC_Start_DMA+0xd0>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_ADC_Start_DMA+0x1ac>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d10d      	bne.n	80013b4 <HAL_ADC_Start_DMA+0xec>
 8001398:	4b35      	ldr	r3, [pc, #212]	@ (8001470 <HAL_ADC_Start_DMA+0x1a8>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c4:	f023 0206 	bic.w	r2, r3, #6
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013cc:	e002      	b.n	80013d4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a25      	ldr	r2, [pc, #148]	@ (8001478 <HAL_ADC_Start_DMA+0x1b0>)
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a24      	ldr	r2, [pc, #144]	@ (800147c <HAL_ADC_Start_DMA+0x1b4>)
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <HAL_ADC_Start_DMA+0x1b8>)
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f06f 0202 	mvn.w	r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800140c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a18      	ldr	r0, [r3, #32]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	334c      	adds	r3, #76	@ 0x4c
 8001418:	4619      	mov	r1, r3
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f000 fc75 	bl	8001d0c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800142c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001430:	d108      	bne.n	8001444 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001440:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001442:	e00f      	b.n	8001464 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001452:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001454:	e006      	b.n	8001464 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800145e:	e001      	b.n	8001464 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001464:	7dfb      	ldrb	r3, [r7, #23]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40012400 	.word	0x40012400
 8001474:	40012800 	.word	0x40012800
 8001478:	0800195f 	.word	0x0800195f
 800147c:	080019db 	.word	0x080019db
 8001480:	080019f7 	.word	0x080019f7

08001484 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03e      	beq.n	8001524 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d039      	beq.n	8001524 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014d2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80014d6:	d11d      	bne.n	8001514 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d119      	bne.n	8001514 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0220 	bic.w	r2, r2, #32
 80014ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff f857 	bl	80005c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0212 	mvn.w	r2, #18
 8001522:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	d04d      	beq.n	80015ca <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d048      	beq.n	80015ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001548:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800155a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800155e:	d012      	beq.n	8001586 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800156a:	2b00      	cmp	r3, #0
 800156c:	d125      	bne.n	80015ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001578:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800157c:	d11d      	bne.n	80015ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001594:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d105      	bne.n	80015ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fa35 	bl	8001a2a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 020c 	mvn.w	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d012      	beq.n	80015fa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00d      	beq.n	80015fa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f812 	bl	8001614 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0201 	mvn.w	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_ADC_ConfigChannel+0x20>
 8001654:	2302      	movs	r3, #2
 8001656:	e0dc      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1da>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b06      	cmp	r3, #6
 8001666:	d81c      	bhi.n	80016a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	3b05      	subs	r3, #5
 800167a:	221f      	movs	r2, #31
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	4019      	ands	r1, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	3b05      	subs	r3, #5
 8001694:	fa00 f203 	lsl.w	r2, r0, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a0:	e03c      	b.n	800171c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d81c      	bhi.n	80016e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	3b23      	subs	r3, #35	@ 0x23
 80016bc:	221f      	movs	r2, #31
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4019      	ands	r1, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b23      	subs	r3, #35	@ 0x23
 80016d6:	fa00 f203 	lsl.w	r2, r0, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80016e2:	e01b      	b.n	800171c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b41      	subs	r3, #65	@ 0x41
 80016f6:	221f      	movs	r2, #31
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4019      	ands	r1, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b41      	subs	r3, #65	@ 0x41
 8001710:	fa00 f203 	lsl.w	r2, r0, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d91c      	bls.n	800175e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68d9      	ldr	r1, [r3, #12]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6898      	ldr	r0, [r3, #8]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	3b1e      	subs	r3, #30
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	e019      	b.n	8001792 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6919      	ldr	r1, [r3, #16]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	2207      	movs	r2, #7
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6898      	ldr	r0, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b10      	cmp	r3, #16
 8001798:	d003      	beq.n	80017a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800179e:	2b11      	cmp	r3, #17
 80017a0:	d132      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_ADC_ConfigChannel+0x1e4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d125      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d126      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d11a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_ADC_ConfigChannel+0x1e8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a13      	ldr	r2, [pc, #76]	@ (8001824 <HAL_ADC_ConfigChannel+0x1ec>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0c9a      	lsrs	r2, r3, #18
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x1b2>
 80017f6:	e007      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	40012400 	.word	0x40012400
 8001820:	20000000 	.word	0x20000000
 8001824:	431bde83 	.word	0x431bde83

08001828 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d040      	beq.n	80018c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001856:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <ADC_Enable+0xac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <ADC_Enable+0xb0>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	0c9b      	lsrs	r3, r3, #18
 8001862:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001864:	e002      	b.n	800186c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3b01      	subs	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001872:	f7ff fc47 	bl	8001104 <HAL_GetTick>
 8001876:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001878:	e01f      	b.n	80018ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800187a:	f7ff fc43 	bl	8001104 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d918      	bls.n	80018ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d011      	beq.n	80018ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e007      	b.n	80018ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d1d8      	bne.n	800187a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83

080018dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d12e      	bne.n	8001954 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001906:	f7ff fbfd 	bl	8001104 <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800190c:	e01b      	b.n	8001946 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fbf9 	bl	8001104 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d914      	bls.n	8001946 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10d      	bne.n	8001946 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192e:	f043 0210 	orr.w	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e007      	b.n	8001956 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d0dc      	beq.n	800190e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001974:	2b00      	cmp	r3, #0
 8001976:	d127      	bne.n	80019c8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800198e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001992:	d115      	bne.n	80019c0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7fe fe01 	bl	80005c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019c6:	e004      	b.n	80019d2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fe0a 	bl	8001602 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	f043 0204 	orr.w	r2, r3, #4
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7ff fe02 	bl	8001626 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4906      	ldr	r1, [pc, #24]	@ (8001ad4 <__NVIC_EnableIRQ+0x34>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	@ 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff90 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff2d 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff42 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff90 	bl	8001b2c <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5f 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff35 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e043      	b.n	8001cf6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <HAL_DMA_Init+0xa8>)
 8001c76:	4413      	add	r3, r2
 8001c78:	4a22      	ldr	r2, [pc, #136]	@ (8001d04 <HAL_DMA_Init+0xac>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	009a      	lsls	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a1f      	ldr	r2, [pc, #124]	@ (8001d08 <HAL_DMA_Init+0xb0>)
 8001c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ca2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ca6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	bffdfff8 	.word	0xbffdfff8
 8001d04:	cccccccd 	.word	0xcccccccd
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_DMA_Start_IT+0x20>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e04b      	b.n	8001dc4 <HAL_DMA_Start_IT+0xb8>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d13a      	bne.n	8001db6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f937 	bl	8001fd8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 020e 	orr.w	r2, r2, #14
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e00f      	b.n	8001da4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0204 	bic.w	r2, r2, #4
 8001d92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 020a 	orr.w	r2, r2, #10
 8001da2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e005      	b.n	8001dc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	2204      	movs	r2, #4
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d04f      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xc8>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d04a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a66      	ldr	r2, [pc, #408]	@ (8001fbc <HAL_DMA_IRQHandler+0x1f0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d029      	beq.n	8001e7a <HAL_DMA_IRQHandler+0xae>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a65      	ldr	r2, [pc, #404]	@ (8001fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xaa>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a63      	ldr	r2, [pc, #396]	@ (8001fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01a      	beq.n	8001e70 <HAL_DMA_IRQHandler+0xa4>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a62      	ldr	r2, [pc, #392]	@ (8001fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d012      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x9e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <HAL_DMA_IRQHandler+0x200>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00a      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x98>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd0 <HAL_DMA_IRQHandler+0x204>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_DMA_IRQHandler+0x92>
 8001e58:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e5c:	e00e      	b.n	8001e7c <HAL_DMA_IRQHandler+0xb0>
 8001e5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e62:	e00b      	b.n	8001e7c <HAL_DMA_IRQHandler+0xb0>
 8001e64:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e68:	e008      	b.n	8001e7c <HAL_DMA_IRQHandler+0xb0>
 8001e6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e6e:	e005      	b.n	8001e7c <HAL_DMA_IRQHandler+0xb0>
 8001e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e74:	e002      	b.n	8001e7c <HAL_DMA_IRQHandler+0xb0>
 8001e76:	2340      	movs	r3, #64	@ 0x40
 8001e78:	e000      	b.n	8001e7c <HAL_DMA_IRQHandler+0xb0>
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	4a55      	ldr	r2, [pc, #340]	@ (8001fd4 <HAL_DMA_IRQHandler+0x208>)
 8001e7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8094 	beq.w	8001fb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e92:	e08e      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	2202      	movs	r2, #2
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d056      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x186>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d051      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020a 	bic.w	r2, r2, #10
 8001eca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a38      	ldr	r2, [pc, #224]	@ (8001fbc <HAL_DMA_IRQHandler+0x1f0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d029      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x166>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a37      	ldr	r2, [pc, #220]	@ (8001fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x162>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a35      	ldr	r2, [pc, #212]	@ (8001fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01a      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x15c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a34      	ldr	r2, [pc, #208]	@ (8001fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d012      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x156>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a32      	ldr	r2, [pc, #200]	@ (8001fcc <HAL_DMA_IRQHandler+0x200>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00a      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x150>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <HAL_DMA_IRQHandler+0x204>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d102      	bne.n	8001f16 <HAL_DMA_IRQHandler+0x14a>
 8001f10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f14:	e00e      	b.n	8001f34 <HAL_DMA_IRQHandler+0x168>
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	e00b      	b.n	8001f34 <HAL_DMA_IRQHandler+0x168>
 8001f1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f20:	e008      	b.n	8001f34 <HAL_DMA_IRQHandler+0x168>
 8001f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f26:	e005      	b.n	8001f34 <HAL_DMA_IRQHandler+0x168>
 8001f28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f2c:	e002      	b.n	8001f34 <HAL_DMA_IRQHandler+0x168>
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_IRQHandler+0x168>
 8001f32:	2302      	movs	r3, #2
 8001f34:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <HAL_DMA_IRQHandler+0x208>)
 8001f36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d034      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f50:	e02f      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2208      	movs	r2, #8
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d028      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x1e8>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d023      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020e 	bic.w	r2, r2, #14
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
    }
  }
  return;
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
}
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40020008 	.word	0x40020008
 8001fc0:	4002001c 	.word	0x4002001c
 8001fc4:	40020030 	.word	0x40020030
 8001fc8:	40020044 	.word	0x40020044
 8001fcc:	40020058 	.word	0x40020058
 8001fd0:	4002006c 	.word	0x4002006c
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d108      	bne.n	8002018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002016:	e007      	b.n	8002028 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
	...

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b08b      	sub	sp, #44	@ 0x2c
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	e169      	b.n	800231c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002048:	2201      	movs	r2, #1
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8158 	bne.w	8002316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a9a      	ldr	r2, [pc, #616]	@ (80022d4 <HAL_GPIO_Init+0x2a0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d05e      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002070:	4a98      	ldr	r2, [pc, #608]	@ (80022d4 <HAL_GPIO_Init+0x2a0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d875      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002076:	4a98      	ldr	r2, [pc, #608]	@ (80022d8 <HAL_GPIO_Init+0x2a4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d058      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 800207c:	4a96      	ldr	r2, [pc, #600]	@ (80022d8 <HAL_GPIO_Init+0x2a4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d86f      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 8002082:	4a96      	ldr	r2, [pc, #600]	@ (80022dc <HAL_GPIO_Init+0x2a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d052      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002088:	4a94      	ldr	r2, [pc, #592]	@ (80022dc <HAL_GPIO_Init+0x2a8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d869      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800208e:	4a94      	ldr	r2, [pc, #592]	@ (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d04c      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 8002094:	4a92      	ldr	r2, [pc, #584]	@ (80022e0 <HAL_GPIO_Init+0x2ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d863      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 800209a:	4a92      	ldr	r2, [pc, #584]	@ (80022e4 <HAL_GPIO_Init+0x2b0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d046      	beq.n	800212e <HAL_GPIO_Init+0xfa>
 80020a0:	4a90      	ldr	r2, [pc, #576]	@ (80022e4 <HAL_GPIO_Init+0x2b0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d85d      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d82a      	bhi.n	8002100 <HAL_GPIO_Init+0xcc>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d859      	bhi.n	8002162 <HAL_GPIO_Init+0x12e>
 80020ae:	a201      	add	r2, pc, #4	@ (adr r2, 80020b4 <HAL_GPIO_Init+0x80>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	08002109 	.word	0x08002109
 80020bc:	0800211b 	.word	0x0800211b
 80020c0:	0800215d 	.word	0x0800215d
 80020c4:	08002163 	.word	0x08002163
 80020c8:	08002163 	.word	0x08002163
 80020cc:	08002163 	.word	0x08002163
 80020d0:	08002163 	.word	0x08002163
 80020d4:	08002163 	.word	0x08002163
 80020d8:	08002163 	.word	0x08002163
 80020dc:	08002163 	.word	0x08002163
 80020e0:	08002163 	.word	0x08002163
 80020e4:	08002163 	.word	0x08002163
 80020e8:	08002163 	.word	0x08002163
 80020ec:	08002163 	.word	0x08002163
 80020f0:	08002163 	.word	0x08002163
 80020f4:	08002163 	.word	0x08002163
 80020f8:	08002111 	.word	0x08002111
 80020fc:	08002125 	.word	0x08002125
 8002100:	4a79      	ldr	r2, [pc, #484]	@ (80022e8 <HAL_GPIO_Init+0x2b4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002106:	e02c      	b.n	8002162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e029      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	3304      	adds	r3, #4
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e024      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	3308      	adds	r3, #8
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e01f      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	330c      	adds	r3, #12
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e01a      	b.n	8002164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002136:	2304      	movs	r3, #4
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e013      	b.n	8002164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002144:	2308      	movs	r3, #8
 8002146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	611a      	str	r2, [r3, #16]
          break;
 800214e:	e009      	b.n	8002164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002150:	2308      	movs	r3, #8
 8002152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	615a      	str	r2, [r3, #20]
          break;
 800215a:	e003      	b.n	8002164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x130>
          break;
 8002162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2bff      	cmp	r3, #255	@ 0xff
 8002168:	d801      	bhi.n	800216e <HAL_GPIO_Init+0x13a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	e001      	b.n	8002172 <HAL_GPIO_Init+0x13e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3304      	adds	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2bff      	cmp	r3, #255	@ 0xff
 8002178:	d802      	bhi.n	8002180 <HAL_GPIO_Init+0x14c>
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x152>
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	3b08      	subs	r3, #8
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	210f      	movs	r1, #15
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80b1 	beq.w	8002316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b4:	4b4d      	ldr	r3, [pc, #308]	@ (80022ec <HAL_GPIO_Init+0x2b8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a4c      	ldr	r2, [pc, #304]	@ (80022ec <HAL_GPIO_Init+0x2b8>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b4a      	ldr	r3, [pc, #296]	@ (80022ec <HAL_GPIO_Init+0x2b8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_GPIO_Init+0x2bc>)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <HAL_GPIO_Init+0x2c0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <HAL_GPIO_Init+0x1ec>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3f      	ldr	r2, [pc, #252]	@ (80022f8 <HAL_GPIO_Init+0x2c4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00d      	beq.n	800221c <HAL_GPIO_Init+0x1e8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3e      	ldr	r2, [pc, #248]	@ (80022fc <HAL_GPIO_Init+0x2c8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d007      	beq.n	8002218 <HAL_GPIO_Init+0x1e4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3d      	ldr	r2, [pc, #244]	@ (8002300 <HAL_GPIO_Init+0x2cc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_Init+0x1e0>
 8002210:	2303      	movs	r3, #3
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002214:	2304      	movs	r3, #4
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x1ee>
 8002220:	2300      	movs	r3, #0
 8002222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002232:	492f      	ldr	r1, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x2bc>)
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	492c      	ldr	r1, [pc, #176]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800225a:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4928      	ldr	r1, [pc, #160]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002264:	4013      	ands	r3, r2
 8002266:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002274:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4922      	ldr	r1, [pc, #136]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	60cb      	str	r3, [r1, #12]
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	43db      	mvns	r3, r3
 800228a:	491e      	ldr	r1, [pc, #120]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800228c:	4013      	ands	r3, r2
 800228e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d006      	beq.n	80022aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800229c:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4918      	ldr	r1, [pc, #96]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022aa:	4b16      	ldr	r3, [pc, #88]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4914      	ldr	r1, [pc, #80]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d021      	beq.n	8002308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	490e      	ldr	r1, [pc, #56]	@ (8002304 <HAL_GPIO_Init+0x2d0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e021      	b.n	8002316 <HAL_GPIO_Init+0x2e2>
 80022d2:	bf00      	nop
 80022d4:	10320000 	.word	0x10320000
 80022d8:	10310000 	.word	0x10310000
 80022dc:	10220000 	.word	0x10220000
 80022e0:	10210000 	.word	0x10210000
 80022e4:	10120000 	.word	0x10120000
 80022e8:	10110000 	.word	0x10110000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40010800 	.word	0x40010800
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_GPIO_Init+0x304>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	43db      	mvns	r3, r3
 8002310:	4909      	ldr	r1, [pc, #36]	@ (8002338 <HAL_GPIO_Init+0x304>)
 8002312:	4013      	ands	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	3301      	adds	r3, #1
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f ae8e 	bne.w	8002048 <HAL_GPIO_Init+0x14>
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	372c      	adds	r7, #44	@ 0x2c
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4013      	ands	r3, r2
 8002384:	041a      	lsls	r2, r3, #16
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43d9      	mvns	r1, r3
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	400b      	ands	r3, r1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	611a      	str	r2, [r3, #16]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0e8      	b.n	8002582 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f007 fa99 	bl	80098fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 f950 	bl	8005682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ec:	f003 f926 	bl	800563c <USB_CoreInit>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0bf      	b.n	8002582 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f954 	bl	80056b6 <USB_SetCurrentMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b0      	b.n	8002582 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e03e      	b.n	80024a4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	3311      	adds	r3, #17
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3310      	adds	r3, #16
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	3313      	adds	r3, #19
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	3320      	adds	r3, #32
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3324      	adds	r3, #36	@ 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	3301      	adds	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d3bb      	bcc.n	8002426 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e044      	b.n	800253e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	440b      	add	r3, r1
 80024ee:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3b5      	bcc.n	80024b4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002552:	f003 f8bc 	bl	80056ce <USB_DevInit>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e00c      	b.n	8002582 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fb3b 	bl	8007bf6 <USB_DevDisconnect>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_Start+0x16>
 800259c:	2302      	movs	r3, #2
 800259e:	e016      	b.n	80025ce <HAL_PCD_Start+0x44>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 f852 	bl	8005656 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80025b2:	2101      	movs	r1, #1
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f007 fc14 	bl	8009de2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f005 fb0f 	bl	8007be2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b088      	sub	sp, #32
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f005 fb11 	bl	8007c0a <USB_ReadInterrupts>
 80025e8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fb1a 	bl	8002c2e <PCD_EP_ISR_Handler>

    return;
 80025fa:	e119      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d013      	beq.n	800262e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002618:	b292      	uxth	r2, r2
 800261a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f007 f9e7 	bl	80099f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002624:	2100      	movs	r1, #0
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f905 	bl	8002836 <HAL_PCD_SetAddress>

    return;
 800262c:	e100      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800264a:	b292      	uxth	r2, r2
 800264c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002650:	e0ee      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002674:	e0dc      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d027      	beq.n	80026d0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	b292      	uxth	r2, r2
 8002694:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0208 	bic.w	r2, r2, #8
 80026aa:	b292      	uxth	r2, r2
 80026ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f007 f9d7 	bl	8009a64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026c8:	b292      	uxth	r2, r2
 80026ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026ce:	e0af      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8083 	beq.w	80027e2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	77fb      	strb	r3, [r7, #31]
 80026e0:	e010      	b.n	8002704 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	b292      	uxth	r2, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	3320      	adds	r3, #32
 80026f8:	443b      	add	r3, r7
 80026fa:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	3301      	adds	r3, #1
 8002702:	77fb      	strb	r3, [r7, #31]
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	2b07      	cmp	r3, #7
 8002708:	d9eb      	bls.n	80026e2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	b292      	uxth	r2, r2
 800271e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	b292      	uxth	r2, r2
 8002736:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800273a:	bf00      	nop
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002744:	b29b      	uxth	r3, r3
 8002746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f6      	beq.n	800273c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002756:	b29a      	uxth	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002760:	b292      	uxth	r2, r2
 8002762:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e00f      	b.n	800278c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800276c:	7ffb      	ldrb	r3, [r7, #31]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4611      	mov	r1, r2
 8002774:	7ffa      	ldrb	r2, [r7, #31]
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	440a      	add	r2, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	3320      	adds	r3, #32
 800277e:	443b      	add	r3, r7
 8002780:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002784:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	3301      	adds	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
 800278c:	7ffb      	ldrb	r3, [r7, #31]
 800278e:	2b07      	cmp	r3, #7
 8002790:	d9ec      	bls.n	800276c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0208 	orr.w	r2, r2, #8
 80027a4:	b292      	uxth	r2, r2
 80027a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027bc:	b292      	uxth	r2, r2
 80027be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0204 	orr.w	r2, r2, #4
 80027d4:	b292      	uxth	r2, r2
 80027d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f007 f928 	bl	8009a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027e0:	e026      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00f      	beq.n	800280c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027fe:	b292      	uxth	r2, r2
 8002800:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f007 f8e6 	bl	80099d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800280a:	e011      	b.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002828:	b292      	uxth	r2, r2
 800282a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800282e:	bf00      	nop
  }
}
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_PCD_SetAddress+0x1a>
 800284c:	2302      	movs	r3, #2
 800284e:	e012      	b.n	8002876 <HAL_PCD_SetAddress+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f005 f9a8 	bl	8007bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	4608      	mov	r0, r1
 8002888:	4611      	mov	r1, r2
 800288a:	461a      	mov	r2, r3
 800288c:	4603      	mov	r3, r0
 800288e:	70fb      	strb	r3, [r7, #3]
 8002890:	460b      	mov	r3, r1
 8002892:	803b      	strh	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800289c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	da0e      	bge.n	80028c2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3310      	adds	r3, #16
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00e      	b.n	80028e0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 0207 	and.w	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028ec:	883a      	ldrh	r2, [r7, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	78ba      	ldrb	r2, [r7, #2]
 80028f6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028f8:	78bb      	ldrb	r3, [r7, #2]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d102      	bne.n	8002904 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_PCD_EP_Open+0x94>
 800290e:	2302      	movs	r3, #2
 8002910:	e00e      	b.n	8002930 <HAL_PCD_EP_Open+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	4618      	mov	r0, r3
 8002922:	f002 fef1 	bl	8005708 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800292e:	7afb      	ldrb	r3, [r7, #11]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	da0e      	bge.n	800296a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	3310      	adds	r3, #16
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00e      	b.n	8002988 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 0207 	and.w	r2, r3, #7
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_PCD_EP_Close+0x6a>
 800299e:	2302      	movs	r3, #2
 80029a0:	e00e      	b.n	80029c0 <HAL_PCD_EP_Close+0x88>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68f9      	ldr	r1, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fa69 	bl	8005e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	460b      	mov	r3, r1
 80029d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 0207 	and.w	r2, r3, #7
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2200      	movs	r2, #0
 8002a00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6979      	ldr	r1, [r7, #20]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 fc20 	bl	8006260 <USB_EPStartXfer>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	f003 0207 	and.w	r2, r3, #7
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002a4c:	681b      	ldr	r3, [r3, #0]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	460b      	mov	r3, r1
 8002a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f003 0207 	and.w	r2, r3, #7
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	3310      	adds	r3, #16
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6979      	ldr	r1, [r7, #20]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fbd2 	bl	8006260 <USB_EPStartXfer>

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	7912      	ldrb	r2, [r2, #4]
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d901      	bls.n	8002ae4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e04c      	b.n	8002b7e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da0e      	bge.n	8002b0a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 0207 	and.w	r2, r3, #7
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	3310      	adds	r3, #16
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	705a      	strb	r2, [r3, #1]
 8002b08:	e00c      	b.n	8002b24 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_PCD_EP_SetStall+0x7e>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e01c      	b.n	8002b7e <HAL_PCD_EP_SetStall+0xb8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68f9      	ldr	r1, [r7, #12]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 ff35 	bl	80079c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f005 f85a 	bl	8007c28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	7912      	ldrb	r2, [r2, #4]
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e040      	b.n	8002c26 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da0e      	bge.n	8002bca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 0207 	and.w	r2, r3, #7
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	3310      	adds	r3, #16
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	705a      	strb	r2, [r3, #1]
 8002bc8:	e00e      	b.n	8002be8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	f003 0207 	and.w	r2, r3, #7
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_EP_ClrStall+0x82>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e00e      	b.n	8002c26 <HAL_PCD_EP_ClrStall+0xa0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f004 ff23 	bl	8007a62 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b096      	sub	sp, #88	@ 0x58
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c36:	e3bb      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002c52:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8175 	bne.w	8002f46 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d14e      	bne.n	8002d06 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c78:	81fb      	strh	r3, [r7, #14]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f006 fe67 	bl	80099a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7b5b      	ldrb	r3, [r3, #13]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8368 	beq.w	80033b0 <PCD_EP_ISR_Handler+0x782>
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 8363 	bne.w	80033b0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7b5b      	ldrb	r3, [r3, #13]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	735a      	strb	r2, [r3, #13]
 8002d04:	e354      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d0c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d034      	beq.n	8002d8e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	3306      	adds	r3, #6
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f004 ffb1 	bl	8007cca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002d74:	4013      	ands	r3, r2
 8002d76:	823b      	strh	r3, [r7, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	8a3a      	ldrh	r2, [r7, #16]
 8002d7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d82:	b292      	uxth	r2, r2
 8002d84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f006 fdde 	bl	8009948 <HAL_PCD_SetupStageCallback>
 8002d8c:	e310      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d8e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f280 830c 	bge.w	80033b0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002da4:	4013      	ands	r3, r2
 8002da6:	83fb      	strh	r3, [r7, #30]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	8bfa      	ldrh	r2, [r7, #30]
 8002dae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002db2:	b292      	uxth	r2, r2
 8002db4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3306      	adds	r3, #6
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d019      	beq.n	8002e1e <PCD_EP_ISR_Handler+0x1f0>
 8002dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d015      	beq.n	8002e1e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df8:	6959      	ldr	r1, [r3, #20]
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e00:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f004 ff61 	bl	8007cca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	441a      	add	r2, r3
 8002e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e14:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e16:	2100      	movs	r1, #0
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f006 fda7 	bl	800996c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002e28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 82bd 	bne.w	80033b0 <PCD_EP_ISR_Handler+0x782>
 8002e36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e3a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002e3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e42:	f000 82b5 	beq.w	80033b0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e7c:	d91d      	bls.n	8002eba <PCD_EP_ISR_Handler+0x28c>
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <PCD_EP_ISR_Handler+0x26a>
 8002e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e94:	3b01      	subs	r3, #1
 8002e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	e026      	b.n	8002f08 <PCD_EP_ISR_Handler+0x2da>
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <PCD_EP_ISR_Handler+0x2aa>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	801a      	strh	r2, [r3, #0]
 8002ed6:	e017      	b.n	8002f08 <PCD_EP_ISR_Handler+0x2da>
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <PCD_EP_ISR_Handler+0x2c4>
 8002eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eee:	3301      	adds	r3, #1
 8002ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	029b      	lsls	r3, r3, #10
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f18:	827b      	strh	r3, [r7, #18]
 8002f1a:	8a7b      	ldrh	r3, [r7, #18]
 8002f1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002f20:	827b      	strh	r3, [r7, #18]
 8002f22:	8a7b      	ldrh	r3, [r7, #18]
 8002f24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f28:	827b      	strh	r3, [r7, #18]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	8a7b      	ldrh	r3, [r7, #18]
 8002f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
 8002f44:	e234      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f5a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f280 80fc 	bge.w	800315c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002f92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f96:	b292      	uxth	r2, r2
 8002f98:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f9a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	7b1b      	ldrb	r3, [r3, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d125      	bne.n	8003004 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3306      	adds	r3, #6
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002fe4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8092 	beq.w	8003112 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	88da      	ldrh	r2, [r3, #6]
 8002ffa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ffe:	f004 fe64 	bl	8007cca <USB_ReadPMA>
 8003002:	e086      	b.n	8003112 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d10a      	bne.n	8003022 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800300c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003010:	461a      	mov	r2, r3
 8003012:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f9d9 	bl	80033cc <HAL_PCD_EP_DB_Receive>
 800301a:	4603      	mov	r3, r0
 800301c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003020:	e077      	b.n	8003112 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	441a      	add	r2, r3
 800304e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003052:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800305a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003062:	b29b      	uxth	r3, r3
 8003064:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d024      	beq.n	80030ca <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	3302      	adds	r3, #2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80030ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02e      	beq.n	8003112 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ba:	6959      	ldr	r1, [r3, #20]
 80030bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030be:	891a      	ldrh	r2, [r3, #8]
 80030c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030c4:	f004 fe01 	bl	8007cca <USB_ReadPMA>
 80030c8:	e023      	b.n	8003112 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	3306      	adds	r3, #6
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80030f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003104:	6959      	ldr	r1, [r3, #20]
 8003106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003108:	895a      	ldrh	r2, [r3, #10]
 800310a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800310e:	f004 fddc 	bl	8007cca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800311a:	441a      	add	r2, r3
 800311c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003128:	441a      	add	r2, r3
 800312a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <PCD_EP_ISR_Handler+0x514>
 8003136:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800313a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	429a      	cmp	r2, r3
 8003140:	d206      	bcs.n	8003150 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f006 fc0f 	bl	800996c <HAL_PCD_DataOutStageCallback>
 800314e:	e005      	b.n	800315c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003156:	4618      	mov	r0, r3
 8003158:	f003 f882 	bl	8006260 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800315c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8123 	beq.w	80033b0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800316a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	3310      	adds	r3, #16
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003198:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80031ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80031ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 80a2 	bne.w	8003308 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80031c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	7b1b      	ldrb	r3, [r3, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8093 	beq.w	80032fa <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d046      	beq.n	800326e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d126      	bne.n	8003236 <PCD_EP_ISR_Handler+0x608>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	4413      	add	r3, r2
 80031fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	011a      	lsls	r2, r3, #4
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	4413      	add	r3, r2
 800320a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321a:	b29a      	uxth	r2, r3
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	801a      	strh	r2, [r3, #0]
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800322a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800322e:	b29a      	uxth	r2, r3
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	e061      	b.n	80032fa <PCD_EP_ISR_Handler+0x6cc>
 8003236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003238:	785b      	ldrb	r3, [r3, #1]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d15d      	bne.n	80032fa <PCD_EP_ISR_Handler+0x6cc>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	4413      	add	r3, r2
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	011a      	lsls	r2, r3, #4
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	4413      	add	r3, r2
 8003260:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	2200      	movs	r2, #0
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	e045      	b.n	80032fa <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d126      	bne.n	80032ca <PCD_EP_ISR_Handler+0x69c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	637b      	str	r3, [r7, #52]	@ 0x34
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003290:	4413      	add	r3, r2
 8003292:	637b      	str	r3, [r7, #52]	@ 0x34
 8003294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	011a      	lsls	r2, r3, #4
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	4413      	add	r3, r2
 800329e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	801a      	strh	r2, [r3, #0]
 80032c8:	e017      	b.n	80032fa <PCD_EP_ISR_Handler+0x6cc>
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d113      	bne.n	80032fa <PCD_EP_ISR_Handler+0x6cc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e0:	4413      	add	r3, r2
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	011a      	lsls	r2, r3, #4
 80032ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ec:	4413      	add	r3, r2
 80032ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f6:	2200      	movs	r2, #0
 80032f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f006 fb4e 	bl	80099a2 <HAL_PCD_DataInStageCallback>
 8003306:	e053      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003308:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d146      	bne.n	80033a2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800331c:	b29b      	uxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	3302      	adds	r3, #2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003348:	429a      	cmp	r2, r3
 800334a:	d907      	bls.n	800335c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003358:	619a      	str	r2, [r3, #24]
 800335a:	e002      	b.n	8003362 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800335c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800336a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f006 fb16 	bl	80099a2 <HAL_PCD_DataInStageCallback>
 8003376:	e01b      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003380:	441a      	add	r2, r3
 8003382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003384:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800338e:	441a      	add	r2, r3
 8003390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003392:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800339a:	4618      	mov	r0, r3
 800339c:	f002 ff60 	bl	8006260 <USB_EPStartXfer>
 80033a0:	e006      	b.n	80033b0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033a6:	461a      	mov	r2, r3
 80033a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f91b 	bl	80035e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f6ff ac3b 	blt.w	8002c38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3758      	adds	r7, #88	@ 0x58
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d07e      	beq.n	80034e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	3302      	adds	r3, #2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	8b7b      	ldrh	r3, [r7, #26]
 8003414:	429a      	cmp	r2, r3
 8003416:	d306      	bcc.n	8003426 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	8b7b      	ldrh	r3, [r7, #26]
 800341e:	1ad2      	subs	r2, r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	619a      	str	r2, [r3, #24]
 8003424:	e002      	b.n	800342c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d123      	bne.n	800347c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800344a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344e:	833b      	strh	r3, [r7, #24]
 8003450:	8b3b      	ldrh	r3, [r7, #24]
 8003452:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003456:	833b      	strh	r3, [r7, #24]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	441a      	add	r2, r3
 8003466:	8b3b      	ldrh	r3, [r7, #24]
 8003468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800346c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003478:	b29b      	uxth	r3, r3
 800347a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01f      	beq.n	80034c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800349c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a0:	82fb      	strh	r3, [r7, #22]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	441a      	add	r2, r3
 80034b0:	8afb      	ldrh	r3, [r7, #22]
 80034b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034c6:	8b7b      	ldrh	r3, [r7, #26]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8087 	beq.w	80035dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6959      	ldr	r1, [r3, #20]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	891a      	ldrh	r2, [r3, #8]
 80034da:	8b7b      	ldrh	r3, [r7, #26]
 80034dc:	f004 fbf5 	bl	8007cca <USB_ReadPMA>
 80034e0:	e07c      	b.n	80035dc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	3306      	adds	r3, #6
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	429a      	cmp	r2, r3
 8003514:	d306      	bcc.n	8003524 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	8b7b      	ldrh	r3, [r7, #26]
 800351c:	1ad2      	subs	r2, r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	619a      	str	r2, [r3, #24]
 8003522:	e002      	b.n	800352a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d123      	bne.n	800357a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354c:	83fb      	strh	r3, [r7, #30]
 800354e:	8bfb      	ldrh	r3, [r7, #30]
 8003550:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003554:	83fb      	strh	r3, [r7, #30]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	8bfb      	ldrh	r3, [r7, #30]
 8003566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800356a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800356e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11f      	bne.n	80035c4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800359a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359e:	83bb      	strh	r3, [r7, #28]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	441a      	add	r2, r3
 80035ae:	8bbb      	ldrh	r3, [r7, #28]
 80035b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035c4:	8b7b      	ldrh	r3, [r7, #26]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6959      	ldr	r1, [r3, #20]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	895a      	ldrh	r2, [r3, #10]
 80035d6:	8b7b      	ldrh	r3, [r7, #26]
 80035d8:	f004 fb77 	bl	8007cca <USB_ReadPMA>
    }
  }

  return count;
 80035dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b0a4      	sub	sp, #144	@ 0x90
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 81dd 	beq.w	80039ba <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003608:	b29b      	uxth	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	3302      	adds	r3, #2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003628:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	699a      	ldr	r2, [r3, #24]
 8003630:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003634:	429a      	cmp	r2, r3
 8003636:	d907      	bls.n	8003648 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	619a      	str	r2, [r3, #24]
 8003646:	e002      	b.n	800364e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 80b9 	bne.w	80037ca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d126      	bne.n	80036ae <HAL_PCD_EP_DB_Transmit+0xc8>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	4413      	add	r3, r2
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	011a      	lsls	r2, r3, #4
 800367e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003680:	4413      	add	r3, r2
 8003682:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003692:	b29a      	uxth	r2, r3
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	801a      	strh	r2, [r3, #0]
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	e01a      	b.n	80036e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d116      	bne.n	80036e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	4413      	add	r3, r2
 80036cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	011a      	lsls	r2, r3, #4
 80036d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d6:	4413      	add	r3, r2
 80036d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	2200      	movs	r2, #0
 80036e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d126      	bne.n	8003740 <HAL_PCD_EP_DB_Transmit+0x15a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011a      	lsls	r2, r3, #4
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003724:	b29a      	uxth	r2, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003738:	b29a      	uxth	r2, r3
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	e017      	b.n	8003770 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d113      	bne.n	8003770 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003750:	b29b      	uxth	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	4413      	add	r3, r2
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	011a      	lsls	r2, r3, #4
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	4413      	add	r3, r2
 8003764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003768:	623b      	str	r3, [r7, #32]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f006 f913 	bl	80099a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 82fc 	beq.w	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	82fb      	strh	r3, [r7, #22]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	8afb      	ldrh	r3, [r7, #22]
 80037b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8013      	strh	r3, [r2, #0]
 80037c8:	e2da      	b.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800380c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800381e:	2b01      	cmp	r3, #1
 8003820:	f040 82ae 	bne.w	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800382c:	441a      	add	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800383a:	441a      	add	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6a1a      	ldr	r2, [r3, #32]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d30b      	bcc.n	8003864 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6a1a      	ldr	r2, [r3, #32]
 8003858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800385c:	1ad2      	subs	r2, r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	621a      	str	r2, [r3, #32]
 8003862:	e017      	b.n	8003894 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800386c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003870:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800387c:	e00a      	b.n	8003894 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d165      	bne.n	8003968 <HAL_PCD_EP_DB_Transmit+0x382>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b0:	4413      	add	r3, r2
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	011a      	lsls	r2, r3, #4
 80038ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038bc:	4413      	add	r3, r2
 80038be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80038da:	d91d      	bls.n	8003918 <HAL_PCD_EP_DB_Transmit+0x332>
 80038dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x310>
 80038f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f2:	3b01      	subs	r3, #1
 80038f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fe:	b29b      	uxth	r3, r3
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	b29b      	uxth	r3, r3
 8003904:	4313      	orrs	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800390c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003910:	b29a      	uxth	r2, r3
 8003912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e044      	b.n	80039a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <HAL_PCD_EP_DB_Transmit+0x350>
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392e:	b29a      	uxth	r2, r3
 8003930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	e035      	b.n	80039a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_PCD_EP_DB_Transmit+0x36a>
 800394a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800394c:	3301      	adds	r3, #1
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b29a      	uxth	r2, r3
 8003956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003958:	b29b      	uxth	r3, r3
 800395a:	029b      	lsls	r3, r3, #10
 800395c:	b29b      	uxth	r3, r3
 800395e:	4313      	orrs	r3, r2
 8003960:	b29a      	uxth	r2, r3
 8003962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003964:	801a      	strh	r2, [r3, #0]
 8003966:	e01c      	b.n	80039a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d118      	bne.n	80039a2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	647b      	str	r3, [r7, #68]	@ 0x44
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800397e:	b29b      	uxth	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003984:	4413      	add	r3, r2
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003990:	4413      	add	r3, r2
 8003992:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003996:	643b      	str	r3, [r7, #64]	@ 0x40
 8003998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800399c:	b29a      	uxth	r2, r3
 800399e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6959      	ldr	r1, [r3, #20]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	891a      	ldrh	r2, [r3, #8]
 80039ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f004 f943 	bl	8007c3e <USB_WritePMA>
 80039b8:	e1e2      	b.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	3306      	adds	r3, #6
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d307      	bcc.n	8003a02 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	619a      	str	r2, [r3, #24]
 8003a00:	e002      	b.n	8003a08 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 80c0 	bne.w	8003b92 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d126      	bne.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x482>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a2e:	4413      	add	r3, r2
 8003a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	011a      	lsls	r2, r3, #4
 8003a38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e01a      	b.n	8003a9e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d116      	bne.n	8003a9e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a84:	4413      	add	r3, r2
 8003a86:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	011a      	lsls	r2, r3, #4
 8003a8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a90:	4413      	add	r3, r2
 8003a92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d12b      	bne.n	8003b04 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac0:	4413      	add	r3, r2
 8003ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	011a      	lsls	r2, r3, #4
 8003aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003acc:	4413      	add	r3, r2
 8003ace:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	e017      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d113      	bne.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b1a:	4413      	add	r3, r2
 8003b1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	011a      	lsls	r2, r3, #4
 8003b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b26:	4413      	add	r3, r2
 8003b28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b30:	2200      	movs	r2, #0
 8003b32:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f005 ff31 	bl	80099a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 811a 	bne.w	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b66:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	8013      	strh	r3, [r2, #0]
 8003b90:	e0f6      	b.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d121      	bne.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	f040 80ca 	bne.w	8003d80 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bf4:	441a      	add	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c02:	441a      	add	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d30b      	bcc.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	e017      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003c34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c44:	e00a      	b.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2200      	movs	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d165      	bne.n	8003d36 <HAL_PCD_EP_DB_Transmit+0x750>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c7e:	4413      	add	r3, r2
 8003c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ca8:	d91d      	bls.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x700>
 8003caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003cbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	e041      	b.n	8003d6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	e032      	b.n	8003d6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <HAL_PCD_EP_DB_Transmit+0x738>
 8003d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d32:	801a      	strh	r2, [r3, #0]
 8003d34:	e019      	b.n	8003d6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d115      	bne.n	8003d6a <HAL_PCD_EP_DB_Transmit+0x784>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4c:	4413      	add	r3, r2
 8003d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	011a      	lsls	r2, r3, #4
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	4413      	add	r3, r2
 8003d5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d68:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6959      	ldr	r1, [r3, #20]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	895a      	ldrh	r2, [r3, #10]
 8003d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f003 ff5f 	bl	8007c3e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9a:	82bb      	strh	r3, [r7, #20]
 8003d9c:	8abb      	ldrh	r3, [r7, #20]
 8003d9e:	f083 0310 	eor.w	r3, r3, #16
 8003da2:	82bb      	strh	r3, [r7, #20]
 8003da4:	8abb      	ldrh	r3, [r7, #20]
 8003da6:	f083 0320 	eor.w	r3, r3, #32
 8003daa:	82bb      	strh	r3, [r7, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	8abb      	ldrh	r3, [r7, #20]
 8003dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3790      	adds	r7, #144	@ 0x90
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	817b      	strh	r3, [r7, #10]
 8003de8:	4613      	mov	r3, r2
 8003dea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	3310      	adds	r3, #16
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e009      	b.n	8003e24 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e10:	897a      	ldrh	r2, [r7, #10]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e24:	893b      	ldrh	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	80da      	strh	r2, [r3, #6]
 8003e38:	e00b      	b.n	8003e52 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e272      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8087 	beq.w	8003f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e80:	4b92      	ldr	r3, [pc, #584]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
 8003e98:	4b8c      	ldr	r3, [pc, #560]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea4:	d10b      	bne.n	8003ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	4b89      	ldr	r3, [pc, #548]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x12c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d168      	bne.n	8003f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e24c      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x76>
 8003ec8:	4b80      	ldr	r3, [pc, #512]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	e02e      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b7b      	ldr	r3, [pc, #492]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b78      	ldr	r3, [pc, #480]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a77      	ldr	r2, [pc, #476]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0xbc>
 8003f02:	4b72      	ldr	r3, [pc, #456]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a71      	ldr	r2, [pc, #452]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6e      	ldr	r2, [pc, #440]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xd4>
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6a      	ldr	r2, [pc, #424]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b68      	ldr	r3, [pc, #416]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd f8e2 	bl	8001104 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd f8de 	bl	8001104 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e200      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xe4>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd f8ce 	bl	8001104 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd f8ca 	bl	8001104 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1ec      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x10c>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
 8003fb2:	4b46      	ldr	r3, [pc, #280]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c0      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4939      	ldr	r1, [pc, #228]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b36      	ldr	r3, [pc, #216]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fd f883 	bl	8001104 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fd f87f 	bl	8001104 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4927      	ldr	r1, [pc, #156]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_RCC_OscConfig+0x270>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd f862 	bl	8001104 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fd f85e 	bl	8001104 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e180      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03a      	beq.n	80040e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407c:	f7fd f842 	bl	8001104 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fd f83e 	bl	8001104 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e160      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0d      	ldr	r3, [pc, #52]	@ (80040cc <HAL_RCC_OscConfig+0x26c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040a2:	2001      	movs	r0, #1
 80040a4:	f000 fa9c 	bl	80045e0 <RCC_Delay>
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_RCC_OscConfig+0x274>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b0:	f7fd f828 	bl	8001104 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fd f824 	bl	8001104 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d908      	bls.n	80040d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e146      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	42420000 	.word	0x42420000
 80040d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	4b92      	ldr	r3, [pc, #584]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e9      	bne.n	80040b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 80a6 	beq.w	800423e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a87      	ldr	r2, [pc, #540]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b85      	ldr	r3, [pc, #532]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fc ffe5 	bl	8001104 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fc ffe1 	bl	8001104 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e103      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x4c8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x312>
 8004164:	4b6f      	ldr	r3, [pc, #444]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	4a6e      	ldr	r2, [pc, #440]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6213      	str	r3, [r2, #32]
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x334>
 800417a:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	4b67      	ldr	r3, [pc, #412]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a66      	ldr	r2, [pc, #408]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x356>
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4a60      	ldr	r2, [pc, #384]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6213      	str	r3, [r2, #32]
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x36e>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6213      	str	r3, [r2, #32]
 80041c2:	4b58      	ldr	r3, [pc, #352]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a57      	ldr	r2, [pc, #348]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fc ff95 	bl	8001104 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fc ff91 	bl	8001104 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0b1      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x37e>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fc ff7f 	bl	8001104 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fc ff7b 	bl	8001104 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e09b      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8087 	beq.w	8004356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d061      	beq.n	8004318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d146      	bne.n	80042ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fc ff4f 	bl	8001104 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fc ff4b 	bl	8001104 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e06d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004292:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4921      	ldr	r1, [pc, #132]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a19      	ldr	r1, [r3, #32]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	430b      	orrs	r3, r1
 80042b6:	491b      	ldr	r1, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fc ff1f 	bl	8001104 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fc ff1b 	bl	8001104 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e03d      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042dc:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x46a>
 80042e8:	e035      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fc ff08 	bl	8001104 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fc ff04 	bl	8001104 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e026      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x498>
 8004316:	e01e      	b.n	8004356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e019      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
 8004324:	40021000 	.word	0x40021000
 8004328:	40007000 	.word	0x40007000
 800432c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_OscConfig+0x500>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0d0      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b6a      	ldr	r3, [pc, #424]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b67      	ldr	r3, [pc, #412]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4965      	ldr	r1, [pc, #404]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a58      	ldr	r2, [pc, #352]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80043ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a52      	ldr	r2, [pc, #328]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80043e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d040      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d115      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e073      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4936      	ldr	r1, [pc, #216]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fc fe56 	bl	8001104 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fc fe52 	bl	8001104 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e053      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d210      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b24      	ldr	r3, [pc, #144]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0207 	bic.w	r2, r3, #7
 800449a:	4922      	ldr	r1, [pc, #136]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044de:	4b12      	ldr	r3, [pc, #72]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 f821 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	@ (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	@ (8004530 <HAL_RCC_ClockConfig+0x1cc>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	@ (8004534 <HAL_RCC_ClockConfig+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc fdb4 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	0800a820 	.word	0x0800a820
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e027      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800456a:	613b      	str	r3, [r7, #16]
      break;
 800456c:	e027      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0c9b      	lsrs	r3, r3, #18
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x94>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	0c5b      	lsrs	r3, r3, #17
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800459a:	fb03 f202 	mul.w	r2, r3, r2
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e004      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	613b      	str	r3, [r7, #16]
      break;
 80045b6:	e002      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80045ba:	613b      	str	r3, [r7, #16]
      break;
 80045bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045be:	693b      	ldr	r3, [r7, #16]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	0800a830 	.word	0x0800a830
 80045d8:	0800a840 	.word	0x0800a840
 80045dc:	003d0900 	.word	0x003d0900

080045e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <RCC_Delay+0x34>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004618 <RCC_Delay+0x38>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0a5b      	lsrs	r3, r3, #9
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045fc:	bf00      	nop
  }
  while (Delay --);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	60fa      	str	r2, [r7, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f9      	bne.n	80045fc <RCC_Delay+0x1c>
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	20000000 	.word	0x20000000
 8004618:	10624dd3 	.word	0x10624dd3

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d07d      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004638:	2300      	movs	r3, #0
 800463a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463c:	4b4f      	ldr	r3, [pc, #316]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10d      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b4c      	ldr	r3, [pc, #304]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	4a4b      	ldr	r2, [pc, #300]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004652:	61d3      	str	r3, [r2, #28]
 8004654:	4b49      	ldr	r3, [pc, #292]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	4b46      	ldr	r3, [pc, #280]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d118      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004670:	4b43      	ldr	r3, [pc, #268]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a42      	ldr	r2, [pc, #264]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800467c:	f7fc fd42 	bl	8001104 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004682:	e008      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004684:	f7fc fd3e 	bl	8001104 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	@ 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e06d      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b3a      	ldr	r3, [pc, #232]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a2:	4b36      	ldr	r3, [pc, #216]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d02e      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d027      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c0:	4b2e      	ldr	r3, [pc, #184]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d6:	4a29      	ldr	r2, [pc, #164]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d014      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fc fd0d 	bl	8001104 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	e00a      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fc fd09 	bl	8001104 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e036      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ee      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004710:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4917      	ldr	r1, [pc, #92]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	4313      	orrs	r3, r2
 8004720:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4a13      	ldr	r2, [pc, #76]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004732:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004740:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	490b      	ldr	r1, [pc, #44]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	4904      	ldr	r1, [pc, #16]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	40007000 	.word	0x40007000
 8004784:	42420440 	.word	0x42420440

08004788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e041      	b.n	800481e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fc fb1e 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f000 fc18 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d001      	beq.n	8004840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e03a      	b.n	80048b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_TIM_Base_Start_IT+0x98>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x58>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486a:	d009      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x58>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x58>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d111      	bne.n	80048a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d010      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	e007      	b.n	80048b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800

080048cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e041      	b.n	8004962 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f839 	bl	800496a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fb76 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_TIM_PWM_Start+0x24>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e022      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d109      	bne.n	80049ba <HAL_TIM_PWM_Start+0x3e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	e015      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x58>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e008      	b.n	80049e6 <HAL_TIM_PWM_Start+0x6a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e05e      	b.n	8004aac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0x82>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049fc:	e013      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x92>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a0c:	e00b      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xa2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a1c:	e003      	b.n	8004a26 <HAL_TIM_PWM_Start+0xaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fd70 	bl	8005514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_TIM_PWM_Start+0x138>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a18      	ldr	r2, [pc, #96]	@ (8004ab4 <HAL_TIM_PWM_Start+0x138>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xfa>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a60:	d009      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xfa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a14      	ldr	r2, [pc, #80]	@ (8004ab8 <HAL_TIM_PWM_Start+0x13c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIM_PWM_Start+0xfa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a12      	ldr	r2, [pc, #72]	@ (8004abc <HAL_TIM_PWM_Start+0x140>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d010      	beq.n	8004aaa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	e007      	b.n	8004aaa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800

08004ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d020      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0202 	mvn.w	r2, #2
 8004af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa5a 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa4d 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa5c 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0204 	mvn.w	r2, #4
 8004b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa34 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa27 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa36 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0208 	mvn.w	r2, #8
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa0e 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa01 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fa10 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0210 	mvn.w	r2, #16
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9e8 	bl	8004fc4 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9db 	bl	8004fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f9ea 	bl	8004fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0201 	mvn.w	r2, #1
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fb fcf6 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fced 	bl	800562a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9ba 	bl	8004fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0220 	mvn.w	r2, #32
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fcc0 	bl	8005618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0ae      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	f200 809f 	bhi.w	8004e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cce:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004e0d 	.word	0x08004e0d
 8004cdc:	08004e0d 	.word	0x08004e0d
 8004ce0:	08004e0d 	.word	0x08004e0d
 8004ce4:	08004d49 	.word	0x08004d49
 8004ce8:	08004e0d 	.word	0x08004e0d
 8004cec:	08004e0d 	.word	0x08004e0d
 8004cf0:	08004e0d 	.word	0x08004e0d
 8004cf4:	08004d8b 	.word	0x08004d8b
 8004cf8:	08004e0d 	.word	0x08004e0d
 8004cfc:	08004e0d 	.word	0x08004e0d
 8004d00:	08004e0d 	.word	0x08004e0d
 8004d04:	08004dcb 	.word	0x08004dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f9e2 	bl	80050d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0204 	bic.w	r2, r2, #4
 8004d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	619a      	str	r2, [r3, #24]
      break;
 8004d46:	e064      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa28 	bl	80051a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]
      break;
 8004d88:	e043      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa71 	bl	8005278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0208 	orr.w	r2, r2, #8
 8004da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0204 	bic.w	r2, r2, #4
 8004db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	61da      	str	r2, [r3, #28]
      break;
 8004dc8:	e023      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fabb 	bl	800534c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69da      	ldr	r2, [r3, #28]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69d9      	ldr	r1, [r3, #28]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	021a      	lsls	r2, r3, #8
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	61da      	str	r2, [r3, #28]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_ConfigClockSource+0x1c>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e0b4      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x186>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e78:	d03e      	beq.n	8004ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7e:	f200 8087 	bhi.w	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e86:	f000 8086 	beq.w	8004f96 <HAL_TIM_ConfigClockSource+0x172>
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8e:	d87f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b70      	cmp	r3, #112	@ 0x70
 8004e92:	d01a      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0xa6>
 8004e94:	2b70      	cmp	r3, #112	@ 0x70
 8004e96:	d87b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b60      	cmp	r3, #96	@ 0x60
 8004e9a:	d050      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x11a>
 8004e9c:	2b60      	cmp	r3, #96	@ 0x60
 8004e9e:	d877      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b50      	cmp	r3, #80	@ 0x50
 8004ea2:	d03c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0xfa>
 8004ea4:	2b50      	cmp	r3, #80	@ 0x50
 8004ea6:	d873      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea8:	2b40      	cmp	r3, #64	@ 0x40
 8004eaa:	d058      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x13a>
 8004eac:	2b40      	cmp	r3, #64	@ 0x40
 8004eae:	d86f      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb0:	2b30      	cmp	r3, #48	@ 0x30
 8004eb2:	d064      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004eb4:	2b30      	cmp	r3, #48	@ 0x30
 8004eb6:	d86b      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d060      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d867      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05c      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d05a      	beq.n	8004f7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ec8:	e062      	b.n	8004f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eda:	f000 fafc 	bl	80054d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	609a      	str	r2, [r3, #8]
      break;
 8004ef6:	e04f      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f08:	f000 fae5 	bl	80054d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f1a:	609a      	str	r2, [r3, #8]
      break;
 8004f1c:	e03c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 fa5c 	bl	80053e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2150      	movs	r1, #80	@ 0x50
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fab3 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e02c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 fa7a 	bl	8005444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2160      	movs	r1, #96	@ 0x60
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 faa3 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e01c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f000 fa3c 	bl	80053e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2140      	movs	r1, #64	@ 0x40
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fa93 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f7c:	e00c      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f000 fa8a 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8004f8e:	e003      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	e000      	b.n	8004f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
	...

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2f      	ldr	r2, [pc, #188]	@ (80050cc <TIM_Base_SetConfig+0xd0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <TIM_Base_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x30>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2b      	ldr	r2, [pc, #172]	@ (80050d4 <TIM_Base_SetConfig+0xd8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a22      	ldr	r2, [pc, #136]	@ (80050cc <TIM_Base_SetConfig+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1f      	ldr	r2, [pc, #124]	@ (80050d0 <TIM_Base_SetConfig+0xd4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x62>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <TIM_Base_SetConfig+0xd8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0d      	ldr	r2, [pc, #52]	@ (80050cc <TIM_Base_SetConfig+0xd0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]
  }
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800

080050d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0201 	bic.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0302 	bic.w	r3, r3, #2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1c      	ldr	r2, [pc, #112]	@ (80051a0 <TIM_OC1_SetConfig+0xc8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10c      	bne.n	800514e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f023 0308 	bic.w	r3, r3, #8
 800513a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a13      	ldr	r2, [pc, #76]	@ (80051a0 <TIM_OC1_SetConfig+0xc8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800515c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00

080051a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f023 0210 	bic.w	r2, r3, #16
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0320 	bic.w	r3, r3, #32
 80051ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005274 <TIM_OC2_SetConfig+0xd0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10d      	bne.n	8005220 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800521e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a14      	ldr	r2, [pc, #80]	@ (8005274 <TIM_OC2_SetConfig+0xd0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d113      	bne.n	8005250 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800522e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00

08005278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <TIM_OC3_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10d      	bne.n	80052f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <TIM_OC3_SetConfig+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d113      	bne.n	8005322 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	621a      	str	r2, [r3, #32]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00

0800534c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	031b      	lsls	r3, r3, #12
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0f      	ldr	r2, [pc, #60]	@ (80053e4 <TIM_OC4_SetConfig+0x98>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d109      	bne.n	80053c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	019b      	lsls	r3, r3, #6
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00

080053e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 030a 	bic.w	r3, r3, #10
 8005424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0210 	bic.w	r2, r3, #16
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800546e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	031b      	lsls	r3, r3, #12
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f043 0307 	orr.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	609a      	str	r2, [r3, #8]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	2201      	movs	r2, #1
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005570:	2302      	movs	r3, #2
 8005572:	e046      	b.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a16      	ldr	r2, [pc, #88]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c0:	d009      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a12      	ldr	r2, [pc, #72]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a10      	ldr	r2, [pc, #64]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10c      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800

08005618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4638      	mov	r0, r7
 8005646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005666:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800566a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	b29a      	uxth	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800568a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800568e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	b29b      	uxth	r3, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4013      	ands	r3, r2
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr

080056b6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	4638      	mov	r0, r7
 80056d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005708:	b480      	push	{r7}
 800570a:	b09d      	sub	sp, #116	@ 0x74
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800572a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800572e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	78db      	ldrb	r3, [r3, #3]
 8005736:	2b03      	cmp	r3, #3
 8005738:	d81f      	bhi.n	800577a <USB_ActivateEndpoint+0x72>
 800573a:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <USB_ActivateEndpoint+0x38>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005751 	.word	0x08005751
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005783 	.word	0x08005783
 800574c:	0800575f 	.word	0x0800575f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005750:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005758:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800575c:	e012      	b.n	8005784 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800575e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005762:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005766:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800576a:	e00b      	b.n	8005784 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800576c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005774:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005778:	e004      	b.n	8005784 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005780:	e000      	b.n	8005784 <USB_ActivateEndpoint+0x7c>
      break;
 8005782:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800579a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800579e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057bc:	b29b      	uxth	r3, r3
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	7b1b      	ldrb	r3, [r3, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f040 8178 	bne.w	8005ae4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	785b      	ldrb	r3, [r3, #1]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8084 	beq.w	8005906 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005808:	b29b      	uxth	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	4413      	add	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	011a      	lsls	r2, r3, #4
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	88db      	ldrh	r3, [r3, #6]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	827b      	strh	r3, [r7, #18]
 8005840:	8a7b      	ldrh	r3, [r7, #18]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01b      	beq.n	8005882 <USB_ActivateEndpoint+0x17a>
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800585c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005860:	823b      	strh	r3, [r7, #16]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	8a3b      	ldrh	r3, [r7, #16]
 800586e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800587a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800587e:	b29b      	uxth	r3, r3
 8005880:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	78db      	ldrb	r3, [r3, #3]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d020      	beq.n	80058cc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a0:	81bb      	strh	r3, [r7, #12]
 80058a2:	89bb      	ldrh	r3, [r7, #12]
 80058a4:	f083 0320 	eor.w	r3, r3, #32
 80058a8:	81bb      	strh	r3, [r7, #12]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	89bb      	ldrh	r3, [r7, #12]
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]
 80058ca:	e2d5      	b.n	8005e78 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e2:	81fb      	strh	r3, [r7, #14]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
 8005904:	e2b8      	b.n	8005e78 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	633b      	str	r3, [r7, #48]	@ 0x30
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005910:	b29b      	uxth	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	4413      	add	r3, r2
 8005918:	633b      	str	r3, [r7, #48]	@ 0x30
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	011a      	lsls	r2, r3, #4
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	4413      	add	r3, r2
 8005924:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	88db      	ldrh	r3, [r3, #6]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005938:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	4413      	add	r3, r2
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	011a      	lsls	r2, r3, #4
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	4413      	add	r3, r2
 8005958:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005968:	b29a      	uxth	r2, r3
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b3e      	cmp	r3, #62	@ 0x3e
 8005974:	d91d      	bls.n	80059b2 <USB_ActivateEndpoint+0x2aa>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <USB_ActivateEndpoint+0x288>
 800598a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800598c:	3b01      	subs	r3, #1
 800598e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29a      	uxth	r2, r3
 8005996:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005998:	b29b      	uxth	r3, r3
 800599a:	029b      	lsls	r3, r3, #10
 800599c:	b29b      	uxth	r3, r3
 800599e:	4313      	orrs	r3, r2
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	e026      	b.n	8005a00 <USB_ActivateEndpoint+0x2f8>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <USB_ActivateEndpoint+0x2c8>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	e017      	b.n	8005a00 <USB_ActivateEndpoint+0x2f8>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <USB_ActivateEndpoint+0x2e2>
 80059e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059e6:	3301      	adds	r3, #1
 80059e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4313      	orrs	r3, r2
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <USB_ActivateEndpoint+0x348>
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a2e:	843b      	strh	r3, [r7, #32]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	8c3b      	ldrh	r3, [r7, #32]
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d124      	bne.n	8005aa2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	83bb      	strh	r3, [r7, #28]
 8005a70:	8bbb      	ldrh	r3, [r7, #28]
 8005a72:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a76:	83bb      	strh	r3, [r7, #28]
 8005a78:	8bbb      	ldrh	r3, [r7, #28]
 8005a7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a7e:	83bb      	strh	r3, [r7, #28]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8bbb      	ldrh	r3, [r7, #28]
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
 8005aa0:	e1ea      	b.n	8005e78 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab8:	83fb      	strh	r3, [r7, #30]
 8005aba:	8bfb      	ldrh	r3, [r7, #30]
 8005abc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ac0:	83fb      	strh	r3, [r7, #30]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	8bfb      	ldrh	r3, [r7, #30]
 8005ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]
 8005ae2:	e1c9      	b.n	8005e78 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d11e      	bne.n	8005b2a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	441a      	add	r2, r3
 8005b10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	8013      	strh	r3, [r2, #0]
 8005b28:	e01d      	b.n	8005b66 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b76:	4413      	add	r3, r2
 8005b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	011a      	lsls	r2, r3, #4
 8005b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	891b      	ldrh	r3, [r3, #8]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005baa:	4413      	add	r3, r2
 8005bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	011a      	lsls	r2, r3, #4
 8005bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005bbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	895b      	ldrh	r3, [r3, #10]
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bcc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 8093 	bne.w	8005cfe <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005be8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <USB_ActivateEndpoint+0x524>
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005c3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01b      	beq.n	8005c7c <USB_ActivateEndpoint+0x574>
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c92:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c96:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c9a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005c9c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ca2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cda:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	441a      	add	r2, r3
 8005ce6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	8013      	strh	r3, [r2, #0]
 8005cfc:	e0bc      	b.n	8005e78 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01d      	beq.n	8005d56 <USB_ActivateEndpoint+0x64e>
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d30:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005d66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01d      	beq.n	8005dae <USB_ActivateEndpoint+0x6a6>
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d88:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	78db      	ldrb	r3, [r3, #3]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d024      	beq.n	8005e00 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dcc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005dd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005dd4:	f083 0320 	eor.w	r3, r3, #32
 8005dd8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005dea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	8013      	strh	r3, [r2, #0]
 8005dfe:	e01d      	b.n	8005e3c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	441a      	add	r2, r3
 8005e60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005e78:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3774      	adds	r7, #116	@ 0x74
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop

08005e88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b08d      	sub	sp, #52	@ 0x34
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	7b1b      	ldrb	r3, [r3, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f040 808e 	bne.w	8005fb8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d044      	beq.n	8005f2e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	81bb      	strh	r3, [r7, #12]
 8005eb2:	89bb      	ldrh	r3, [r7, #12]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <USB_DeactivateEndpoint+0x6c>
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed2:	817b      	strh	r3, [r7, #10]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f0a:	813b      	strh	r3, [r7, #8]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	893b      	ldrh	r3, [r7, #8]
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
 8005f2c:	e192      	b.n	8006254 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	827b      	strh	r3, [r7, #18]
 8005f3c:	8a7b      	ldrh	r3, [r7, #18]
 8005f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01b      	beq.n	8005f7e <USB_DeactivateEndpoint+0xf6>
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5c:	823b      	strh	r3, [r7, #16]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	441a      	add	r2, r3
 8005f68:	8a3b      	ldrh	r3, [r7, #16]
 8005f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f94:	81fb      	strh	r3, [r7, #14]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
 8005fb6:	e14d      	b.n	8006254 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 80a5 	bne.w	800610c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	843b      	strh	r3, [r7, #32]
 8005fd0:	8c3b      	ldrh	r3, [r7, #32]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01b      	beq.n	8006012 <USB_DeactivateEndpoint+0x18a>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff0:	83fb      	strh	r3, [r7, #30]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	8bfb      	ldrh	r3, [r7, #30]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006006:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800600a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	83bb      	strh	r3, [r7, #28]
 8006020:	8bbb      	ldrh	r3, [r7, #28]
 8006022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01b      	beq.n	8006062 <USB_DeactivateEndpoint+0x1da>
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006040:	837b      	strh	r3, [r7, #26]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	441a      	add	r2, r3
 800604c:	8b7b      	ldrh	r3, [r7, #26]
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800605a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006078:	833b      	strh	r3, [r7, #24]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	8b3b      	ldrh	r3, [r7, #24]
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006092:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b0:	82fb      	strh	r3, [r7, #22]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	8afb      	ldrh	r3, [r7, #22]
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e8:	82bb      	strh	r3, [r7, #20]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	8abb      	ldrh	r3, [r7, #20]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
 800610a:	e0a3      	b.n	8006254 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800611a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800611c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01b      	beq.n	800615c <USB_DeactivateEndpoint+0x2d4>
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800614c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800616a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <USB_DeactivateEndpoint+0x324>
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800619c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800620c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006218:	b29b      	uxth	r3, r3
 800621a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800624c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3734      	adds	r7, #52	@ 0x34
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b0c2      	sub	sp, #264	@ 0x108
 8006264:	af00      	add	r7, sp, #0
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800626e:	6018      	str	r0, [r3, #0]
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006278:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b01      	cmp	r3, #1
 8006288:	f040 86b7 	bne.w	8006ffa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800628c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d908      	bls.n	80062ba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062b8:	e007      	b.n	80062ca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	7b1b      	ldrb	r3, [r3, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d13a      	bne.n	8006350 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6959      	ldr	r1, [r3, #20]
 80062e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	88da      	ldrh	r2, [r3, #6]
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80062fc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006300:	6800      	ldr	r0, [r0, #0]
 8006302:	f001 fc9c 	bl	8007c3e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	011a      	lsls	r2, r3, #4
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	f000 be1f 	b.w	8006f8e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	78db      	ldrb	r3, [r3, #3]
 800635c:	2b02      	cmp	r3, #2
 800635e:	f040 8462 	bne.w	8006c26 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	429a      	cmp	r2, r3
 800637c:	f240 83df 	bls.w	8006b3e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80063c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d8:	b29b      	uxth	r3, r3
 80063da:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6a1a      	ldr	r2, [r3, #32]
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	1ad2      	subs	r2, r2, r3
 80063ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 81c7 	beq.w	80067b0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d177      	bne.n	800652e <USB_EPStartXfer+0x2ce>
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800644a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	4413      	add	r3, r2
 8006460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	011a      	lsls	r2, r3, #4
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	4413      	add	r3, r2
 8006474:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006484:	b29a      	uxth	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006490:	d921      	bls.n	80064d6 <USB_EPStartXfer+0x276>
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <USB_EPStartXfer+0x252>
 80064a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064ac:	3b01      	subs	r3, #1
 80064ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e050      	b.n	8006578 <USB_EPStartXfer+0x318>
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <USB_EPStartXfer+0x294>
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	801a      	strh	r2, [r3, #0]
 80064f2:	e041      	b.n	8006578 <USB_EPStartXfer+0x318>
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <USB_EPStartXfer+0x2b4>
 800650a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800650e:	3301      	adds	r3, #1
 8006510:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800651e:	b29b      	uxth	r3, r3
 8006520:	029b      	lsls	r3, r3, #10
 8006522:	b29b      	uxth	r3, r3
 8006524:	4313      	orrs	r3, r2
 8006526:	b29a      	uxth	r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e024      	b.n	8006578 <USB_EPStartXfer+0x318>
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d11c      	bne.n	8006578 <USB_EPStartXfer+0x318>
 800653e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800654c:	b29b      	uxth	r3, r3
 800654e:	461a      	mov	r2, r3
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	4413      	add	r3, r2
 8006554:	633b      	str	r3, [r7, #48]	@ 0x30
 8006556:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	011a      	lsls	r2, r3, #4
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	4413      	add	r3, r2
 8006568:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006572:	b29a      	uxth	r2, r3
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	895b      	ldrh	r3, [r3, #10]
 8006584:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6959      	ldr	r1, [r3, #20]
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	b29b      	uxth	r3, r3
 800659a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800659e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	f001 fb49 	bl	8007c3e <USB_WritePMA>
            ep->xfer_buff += len;
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065bc:	441a      	add	r2, r3
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d90f      	bls.n	8006606 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80065e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	621a      	str	r2, [r3, #32]
 8006604:	e00e      	b.n	8006624 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2200      	movs	r2, #0
 8006622:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d177      	bne.n	8006724 <USB_EPStartXfer+0x4c4>
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	4413      	add	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	4413      	add	r3, r2
 800666a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29b      	uxth	r3, r3
 8006676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667a:	b29a      	uxth	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	2b3e      	cmp	r3, #62	@ 0x3e
 8006686:	d921      	bls.n	80066cc <USB_EPStartXfer+0x46c>
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <USB_EPStartXfer+0x448>
 800669e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a2:	3b01      	subs	r3, #1
 80066a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e056      	b.n	800677a <USB_EPStartXfer+0x51a>
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <USB_EPStartXfer+0x48a>
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	e047      	b.n	800677a <USB_EPStartXfer+0x51a>
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <USB_EPStartXfer+0x4aa>
 8006700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006704:	3301      	adds	r3, #1
 8006706:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29a      	uxth	r2, r3
 8006710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006714:	b29b      	uxth	r3, r3
 8006716:	029b      	lsls	r3, r3, #10
 8006718:	b29b      	uxth	r3, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	b29a      	uxth	r2, r3
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	e02a      	b.n	800677a <USB_EPStartXfer+0x51a>
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	785b      	ldrb	r3, [r3, #1]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d122      	bne.n	800677a <USB_EPStartXfer+0x51a>
 8006734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	623b      	str	r3, [r7, #32]
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	4413      	add	r3, r2
 8006756:	623b      	str	r3, [r7, #32]
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	4413      	add	r3, r2
 800676a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	b29a      	uxth	r2, r3
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	891b      	ldrh	r3, [r3, #8]
 8006786:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800678a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6959      	ldr	r1, [r3, #20]
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	b29b      	uxth	r3, r3
 800679c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067a8:	6800      	ldr	r0, [r0, #0]
 80067aa:	f001 fa48 	bl	8007c3e <USB_WritePMA>
 80067ae:	e3ee      	b.n	8006f8e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d177      	bne.n	80068b0 <USB_EPStartXfer+0x650>
 80067c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067e0:	4413      	add	r3, r2
 80067e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	011a      	lsls	r2, r3, #4
 80067f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80067fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006806:	b29a      	uxth	r2, r3
 8006808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	2b3e      	cmp	r3, #62	@ 0x3e
 8006812:	d921      	bls.n	8006858 <USB_EPStartXfer+0x5f8>
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2b00      	cmp	r3, #0
 8006828:	d104      	bne.n	8006834 <USB_EPStartXfer+0x5d4>
 800682a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800682e:	3b01      	subs	r3, #1
 8006830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800683e:	b29b      	uxth	r3, r3
 8006840:	029b      	lsls	r3, r3, #10
 8006842:	b29b      	uxth	r3, r3
 8006844:	4313      	orrs	r3, r2
 8006846:	b29b      	uxth	r3, r3
 8006848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800684c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006850:	b29a      	uxth	r2, r3
 8006852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e056      	b.n	8006906 <USB_EPStartXfer+0x6a6>
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <USB_EPStartXfer+0x616>
 8006860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e047      	b.n	8006906 <USB_EPStartXfer+0x6a6>
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	085b      	lsrs	r3, r3, #1
 800687c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <USB_EPStartXfer+0x636>
 800688c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006890:	3301      	adds	r3, #1
 8006892:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	029b      	lsls	r3, r3, #10
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	4313      	orrs	r3, r2
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e02a      	b.n	8006906 <USB_EPStartXfer+0x6a6>
 80068b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d122      	bne.n	8006906 <USB_EPStartXfer+0x6a6>
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80068cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068da:	b29b      	uxth	r3, r3
 80068dc:	461a      	mov	r2, r3
 80068de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e0:	4413      	add	r3, r2
 80068e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f4:	4413      	add	r3, r2
 80068f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	b29a      	uxth	r2, r3
 8006902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006904:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	891b      	ldrh	r3, [r3, #8]
 8006912:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6959      	ldr	r1, [r3, #20]
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	b29b      	uxth	r3, r3
 8006928:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800692c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006930:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006934:	6800      	ldr	r0, [r0, #0]
 8006936:	f001 f982 	bl	8007c3e <USB_WritePMA>
            ep->xfer_buff += len;
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694a:	441a      	add	r2, r3
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	429a      	cmp	r2, r3
 8006972:	d90f      	bls.n	8006994 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	621a      	str	r2, [r3, #32]
 8006992:	e00e      	b.n	80069b2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80069be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d177      	bne.n	8006abe <USB_EPStartXfer+0x85e>
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	4413      	add	r3, r2
 80069f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	011a      	lsls	r2, r3, #4
 8006a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a20:	d921      	bls.n	8006a66 <USB_EPStartXfer+0x806>
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <USB_EPStartXfer+0x7e2>
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	029b      	lsls	r3, r3, #10
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	4313      	orrs	r3, r2
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e050      	b.n	8006b08 <USB_EPStartXfer+0x8a8>
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <USB_EPStartXfer+0x824>
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e041      	b.n	8006b08 <USB_EPStartXfer+0x8a8>
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d004      	beq.n	8006aa4 <USB_EPStartXfer+0x844>
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	029b      	lsls	r3, r3, #10
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e024      	b.n	8006b08 <USB_EPStartXfer+0x8a8>
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d11c      	bne.n	8006b08 <USB_EPStartXfer+0x8a8>
 8006ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae2:	4413      	add	r3, r2
 8006ae4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	011a      	lsls	r2, r3, #4
 8006af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006af6:	4413      	add	r3, r2
 8006af8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	895b      	ldrh	r3, [r3, #10]
 8006b14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6959      	ldr	r1, [r3, #20]
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b36:	6800      	ldr	r0, [r0, #0]
 8006b38:	f001 f881 	bl	8007c3e <USB_WritePMA>
 8006b3c:	e227      	b.n	8006f8e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b74:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	441a      	add	r2, r3
 8006b92:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bca:	4413      	add	r3, r2
 8006bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	011a      	lsls	r2, r3, #4
 8006bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bde:	4413      	add	r3, r2
 8006be0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006be4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	891b      	ldrh	r3, [r3, #8]
 8006bfc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6959      	ldr	r1, [r3, #20]
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c1e:	6800      	ldr	r0, [r0, #0]
 8006c20:	f001 f80d 	bl	8007c3e <USB_WritePMA>
 8006c24:	e1b3      	b.n	8006f8e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a1a      	ldr	r2, [r3, #32]
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 80c6 	beq.w	8006df8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d177      	bne.n	8006d78 <USB_EPStartXfer+0xb18>
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ca8:	4413      	add	r3, r2
 8006caa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	011a      	lsls	r2, r3, #4
 8006cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cd2:	801a      	strh	r2, [r3, #0]
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cda:	d921      	bls.n	8006d20 <USB_EPStartXfer+0xac0>
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d104      	bne.n	8006cfc <USB_EPStartXfer+0xa9c>
 8006cf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	029b      	lsls	r3, r3, #10
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d1c:	801a      	strh	r2, [r3, #0]
 8006d1e:	e050      	b.n	8006dc2 <USB_EPStartXfer+0xb62>
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <USB_EPStartXfer+0xade>
 8006d28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e041      	b.n	8006dc2 <USB_EPStartXfer+0xb62>
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d004      	beq.n	8006d5e <USB_EPStartXfer+0xafe>
 8006d54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	e024      	b.n	8006dc2 <USB_EPStartXfer+0xb62>
 8006d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d11c      	bne.n	8006dc2 <USB_EPStartXfer+0xb62>
 8006d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d9c:	4413      	add	r3, r2
 8006d9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	011a      	lsls	r2, r3, #4
 8006dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006db0:	4413      	add	r3, r2
 8006db2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	895b      	ldrh	r3, [r3, #10]
 8006dce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6959      	ldr	r1, [r3, #20]
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006de8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006dec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006df0:	6800      	ldr	r0, [r0, #0]
 8006df2:	f000 ff24 	bl	8007c3e <USB_WritePMA>
 8006df6:	e0ca      	b.n	8006f8e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d177      	bne.n	8006ef8 <USB_EPStartXfer+0xc98>
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e28:	4413      	add	r3, r2
 8006e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	011a      	lsls	r2, r3, #4
 8006e3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e58:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e5a:	d921      	bls.n	8006ea0 <USB_EPStartXfer+0xc40>
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <USB_EPStartXfer+0xc1c>
 8006e72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e76:	3b01      	subs	r3, #1
 8006e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	029b      	lsls	r3, r3, #10
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9c:	801a      	strh	r2, [r3, #0]
 8006e9e:	e05c      	b.n	8006f5a <USB_EPStartXfer+0xcfa>
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <USB_EPStartXfer+0xc5e>
 8006ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e04d      	b.n	8006f5a <USB_EPStartXfer+0xcfa>
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <USB_EPStartXfer+0xc7e>
 8006ed4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ed8:	3301      	adds	r3, #1
 8006eda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e030      	b.n	8006f5a <USB_EPStartXfer+0xcfa>
 8006ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d128      	bne.n	8006f5a <USB_EPStartXfer+0xcfa>
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f44:	4413      	add	r3, r2
 8006f46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	891b      	ldrh	r3, [r3, #8]
 8006f66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6959      	ldr	r1, [r3, #20]
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f88:	6800      	ldr	r0, [r0, #0]
 8006f8a:	f000 fe58 	bl	8007c3e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fb4:	817b      	strh	r3, [r7, #10]
 8006fb6:	897b      	ldrh	r3, [r7, #10]
 8006fb8:	f083 0310 	eor.w	r3, r3, #16
 8006fbc:	817b      	strh	r3, [r7, #10]
 8006fbe:	897b      	ldrh	r3, [r7, #10]
 8006fc0:	f083 0320 	eor.w	r3, r3, #32
 8006fc4:	817b      	strh	r3, [r7, #10]
 8006fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	897b      	ldrh	r3, [r7, #10]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]
 8006ff6:	f000 bcde 	b.w	80079b6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	7b1b      	ldrb	r3, [r3, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 80bb 	bne.w	8007182 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800700c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	429a      	cmp	r2, r3
 8007026:	d917      	bls.n	8007058 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699a      	ldr	r2, [r3, #24]
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	1ad2      	subs	r2, r2, r3
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	619a      	str	r2, [r3, #24]
 8007056:	e00e      	b.n	8007076 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800709a:	4413      	add	r3, r2
 800709c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	011a      	lsls	r2, r3, #4
 80070ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80070bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ce:	801a      	strh	r2, [r3, #0]
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80070d6:	d924      	bls.n	8007122 <USB_EPStartXfer+0xec2>
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <USB_EPStartXfer+0xe98>
 80070ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80070f2:	3b01      	subs	r3, #1
 80070f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29a      	uxth	r2, r3
 8007100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007104:	b29b      	uxth	r3, r3
 8007106:	029b      	lsls	r3, r3, #10
 8007108:	b29b      	uxth	r3, r3
 800710a:	4313      	orrs	r3, r2
 800710c:	b29b      	uxth	r3, r3
 800710e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007116:	b29a      	uxth	r2, r3
 8007118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	f000 bc10 	b.w	8007942 <USB_EPStartXfer+0x16e2>
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <USB_EPStartXfer+0xee4>
 800712a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800713a:	b29a      	uxth	r2, r3
 800713c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007140:	801a      	strh	r2, [r3, #0]
 8007142:	e3fe      	b.n	8007942 <USB_EPStartXfer+0x16e2>
 8007144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007148:	085b      	lsrs	r3, r3, #1
 800714a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <USB_EPStartXfer+0xf04>
 800715a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800715e:	3301      	adds	r3, #1
 8007160:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29a      	uxth	r2, r3
 800716c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007170:	b29b      	uxth	r3, r3
 8007172:	029b      	lsls	r3, r3, #10
 8007174:	b29b      	uxth	r3, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	b29a      	uxth	r2, r3
 800717a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800717e:	801a      	strh	r2, [r3, #0]
 8007180:	e3df      	b.n	8007942 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	78db      	ldrb	r3, [r3, #3]
 800718e:	2b02      	cmp	r3, #2
 8007190:	f040 8218 	bne.w	80075c4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 809d 	bne.w	80072e0 <USB_EPStartXfer+0x1080>
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ca:	4413      	add	r3, r2
 80071cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	011a      	lsls	r2, r3, #4
 80071de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071e2:	4413      	add	r3, r2
 80071e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b3e      	cmp	r3, #62	@ 0x3e
 800720e:	d92b      	bls.n	8007268 <USB_EPStartXfer+0x1008>
 8007210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <USB_EPStartXfer+0xfe0>
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723a:	3b01      	subs	r3, #1
 800723c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724c:	b29b      	uxth	r3, r3
 800724e:	029b      	lsls	r3, r3, #10
 8007250:	b29b      	uxth	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725e:	b29a      	uxth	r2, r3
 8007260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e070      	b.n	800734a <USB_EPStartXfer+0x10ea>
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <USB_EPStartXfer+0x1032>
 8007278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e05b      	b.n	800734a <USB_EPStartXfer+0x10ea>
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <USB_EPStartXfer+0x1062>
 80072b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072bc:	3301      	adds	r3, #1
 80072be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	029b      	lsls	r3, r3, #10
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4313      	orrs	r3, r2
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	e034      	b.n	800734a <USB_EPStartXfer+0x10ea>
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d12c      	bne.n	800734a <USB_EPStartXfer+0x10ea>
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007314:	4413      	add	r3, r2
 8007316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	011a      	lsls	r2, r3, #4
 8007328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800732c:	4413      	add	r3, r2
 800732e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007332:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 809d 	bne.w	80074a4 <USB_EPStartXfer+0x1244>
 800736a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800738e:	4413      	add	r3, r2
 8007390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	011a      	lsls	r2, r3, #4
 80073a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073d2:	d92b      	bls.n	800742c <USB_EPStartXfer+0x11cc>
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80073e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d104      	bne.n	8007404 <USB_EPStartXfer+0x11a4>
 80073fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073fe:	3b01      	subs	r3, #1
 8007400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29a      	uxth	r2, r3
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007410:	b29b      	uxth	r3, r3
 8007412:	029b      	lsls	r3, r3, #10
 8007414:	b29b      	uxth	r3, r3
 8007416:	4313      	orrs	r3, r2
 8007418:	b29b      	uxth	r3, r3
 800741a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800741e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e069      	b.n	8007500 <USB_EPStartXfer+0x12a0>
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10c      	bne.n	8007456 <USB_EPStartXfer+0x11f6>
 800743c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	e054      	b.n	8007500 <USB_EPStartXfer+0x12a0>
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <USB_EPStartXfer+0x1226>
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007480:	3301      	adds	r3, #1
 8007482:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007486:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007492:	b29b      	uxth	r3, r3
 8007494:	029b      	lsls	r3, r3, #10
 8007496:	b29b      	uxth	r3, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	b29a      	uxth	r2, r3
 800749c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	e02d      	b.n	8007500 <USB_EPStartXfer+0x12a0>
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d125      	bne.n	8007500 <USB_EPStartXfer+0x12a0>
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074ca:	4413      	add	r3, r2
 80074cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	011a      	lsls	r2, r3, #4
 80074de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074e2:	4413      	add	r3, r2
 80074e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074fe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8218 	beq.w	8007942 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007532:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <USB_EPStartXfer+0x12ea>
 800753e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10d      	bne.n	8007566 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800754a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800754e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007552:	2b00      	cmp	r3, #0
 8007554:	f040 81f5 	bne.w	8007942 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007558:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 81ee 	bne.w	8007942 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	441a      	add	r2, r3
 80075aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]
 80075c2:	e1be      	b.n	8007942 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	78db      	ldrb	r3, [r3, #3]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 81b4 	bne.w	800793e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80075d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d917      	bls.n	8007622 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80075f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	619a      	str	r2, [r3, #24]
 8007620:	e00e      	b.n	8007640 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2200      	movs	r2, #0
 800763e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8085 	bne.w	800775c <USB_EPStartXfer+0x14fc>
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800768e:	4413      	add	r3, r2
 8007690:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007698:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80076b2:	d923      	bls.n	80076fc <USB_EPStartXfer+0x149c>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x1474>
 80076ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80076d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	4313      	orrs	r3, r2
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e060      	b.n	80077be <USB_EPStartXfer+0x155e>
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10c      	bne.n	800771e <USB_EPStartXfer+0x14be>
 8007704:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	e04f      	b.n	80077be <USB_EPStartXfer+0x155e>
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007722:	085b      	lsrs	r3, r3, #1
 8007724:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <USB_EPStartXfer+0x14de>
 8007734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007738:	3301      	adds	r3, #1
 800773a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800773e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29a      	uxth	r2, r3
 8007746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800774a:	b29b      	uxth	r3, r3
 800774c:	029b      	lsls	r3, r3, #10
 800774e:	b29b      	uxth	r3, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	b29a      	uxth	r2, r3
 8007754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e030      	b.n	80077be <USB_EPStartXfer+0x155e>
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d128      	bne.n	80077be <USB_EPStartXfer+0x155e>
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800777a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007790:	4413      	add	r3, r2
 8007792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	011a      	lsls	r2, r3, #4
 80077a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a8:	4413      	add	r3, r2
 80077aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 8085 	bne.w	80078e8 <USB_EPStartXfer+0x1688>
 80077de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	461a      	mov	r2, r3
 80077fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007802:	4413      	add	r3, r2
 8007804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	011a      	lsls	r2, r3, #4
 8007816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800781a:	4413      	add	r3, r2
 800781c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007830:	b29a      	uxth	r2, r3
 8007832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	2b3e      	cmp	r3, #62	@ 0x3e
 800783e:	d923      	bls.n	8007888 <USB_EPStartXfer+0x1628>
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800784a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <USB_EPStartXfer+0x1600>
 8007856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800785a:	3b01      	subs	r3, #1
 800785c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29a      	uxth	r2, r3
 8007868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800786c:	b29b      	uxth	r3, r3
 800786e:	029b      	lsls	r3, r3, #10
 8007870:	b29b      	uxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800787e:	b29a      	uxth	r2, r3
 8007880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e05c      	b.n	8007942 <USB_EPStartXfer+0x16e2>
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10c      	bne.n	80078aa <USB_EPStartXfer+0x164a>
 8007890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29b      	uxth	r3, r3
 8007898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800789c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e04b      	b.n	8007942 <USB_EPStartXfer+0x16e2>
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d004      	beq.n	80078ca <USB_EPStartXfer+0x166a>
 80078c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078c4:	3301      	adds	r3, #1
 80078c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	029b      	lsls	r3, r3, #10
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4313      	orrs	r3, r2
 80078de:	b29a      	uxth	r2, r3
 80078e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e02c      	b.n	8007942 <USB_EPStartXfer+0x16e2>
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	785b      	ldrb	r3, [r3, #1]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d124      	bne.n	8007942 <USB_EPStartXfer+0x16e2>
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800790e:	4413      	add	r3, r2
 8007910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	011a      	lsls	r2, r3, #4
 8007922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007926:	4413      	add	r3, r2
 8007928:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800792c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800793a:	801a      	strh	r2, [r3, #0]
 800793c:	e001      	b.n	8007942 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e03a      	b.n	80079b8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007968:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800796c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007970:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007974:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007978:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800797c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007980:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	441a      	add	r2, r3
 800799e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d020      	beq.n	8007a16 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ea:	81bb      	strh	r3, [r7, #12]
 80079ec:	89bb      	ldrh	r3, [r7, #12]
 80079ee:	f083 0310 	eor.w	r3, r3, #16
 80079f2:	81bb      	strh	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	89bb      	ldrh	r3, [r7, #12]
 8007a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	8013      	strh	r3, [r2, #0]
 8007a14:	e01f      	b.n	8007a56 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a2c:	81fb      	strh	r3, [r7, #14]
 8007a2e:	89fb      	ldrh	r3, [r7, #14]
 8007a30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a34:	81fb      	strh	r3, [r7, #14]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	441a      	add	r2, r3
 8007a40:	89fb      	ldrh	r3, [r7, #14]
 8007a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	7b1b      	ldrb	r3, [r3, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 809d 	bne.w	8007bb0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d04c      	beq.n	8007b18 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	823b      	strh	r3, [r7, #16]
 8007a8c:	8a3b      	ldrh	r3, [r7, #16]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01b      	beq.n	8007ace <USB_EPClearStall+0x6c>
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aac:	81fb      	strh	r3, [r7, #14]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	441a      	add	r2, r3
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
 8007aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	78db      	ldrb	r3, [r3, #3]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d06c      	beq.n	8007bb0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aec:	81bb      	strh	r3, [r7, #12]
 8007aee:	89bb      	ldrh	r3, [r7, #12]
 8007af0:	f083 0320 	eor.w	r3, r3, #32
 8007af4:	81bb      	strh	r3, [r7, #12]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	441a      	add	r2, r3
 8007b00:	89bb      	ldrh	r3, [r7, #12]
 8007b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	8013      	strh	r3, [r2, #0]
 8007b16:	e04b      	b.n	8007bb0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	82fb      	strh	r3, [r7, #22]
 8007b26:	8afb      	ldrh	r3, [r7, #22]
 8007b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01b      	beq.n	8007b68 <USB_EPClearStall+0x106>
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b46:	82bb      	strh	r3, [r7, #20]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	8abb      	ldrh	r3, [r7, #20]
 8007b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7e:	827b      	strh	r3, [r7, #18]
 8007b80:	8a7b      	ldrh	r3, [r7, #18]
 8007b82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b86:	827b      	strh	r3, [r7, #18]
 8007b88:	8a7b      	ldrh	r3, [r7, #18]
 8007b8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b8e:	827b      	strh	r3, [r7, #18]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	8a7b      	ldrh	r3, [r7, #18]
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr

08007bbc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2280      	movs	r2, #128	@ 0x80
 8007bd2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr

08007be2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr

08007c3e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b08b      	sub	sp, #44	@ 0x2c
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	80fb      	strh	r3, [r7, #6]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c54:	88bb      	ldrh	r3, [r7, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	005a      	lsls	r2, r3, #1
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c76:	e01f      	b.n	8007cb8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	3301      	adds	r3, #1
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b21b      	sxth	r3, r3
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	b21a      	sxth	r2, r3
 8007c8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b21b      	sxth	r3, r3
 8007c92:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	8a7a      	ldrh	r2, [r7, #18]
 8007c98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	3302      	adds	r3, #2
 8007c9e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1dc      	bne.n	8007c78 <USB_WritePMA+0x3a>
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	372c      	adds	r7, #44	@ 0x2c
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b08b      	sub	sp, #44	@ 0x2c
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	460b      	mov	r3, r1
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ce0:	88bb      	ldrh	r3, [r7, #4]
 8007ce2:	085b      	lsrs	r3, r3, #1
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	005a      	lsls	r2, r3, #1
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cfc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d02:	e01b      	b.n	8007d3c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	3302      	adds	r3, #2
 8007d10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	0a1b      	lsrs	r3, r3, #8
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	3302      	adds	r3, #2
 8007d34:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e0      	bne.n	8007d04 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d42:	88bb      	ldrh	r3, [r7, #4]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	701a      	strb	r2, [r3, #0]
  }
}
 8007d5e:	bf00      	nop
 8007d60:	372c      	adds	r7, #44	@ 0x2c
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7c1b      	ldrb	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d115      	bne.n	8007dac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d84:	2202      	movs	r2, #2
 8007d86:	2181      	movs	r1, #129	@ 0x81
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 feee 	bl	8009b6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d98:	2202      	movs	r2, #2
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 fee4 	bl	8009b6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007daa:	e012      	b.n	8007dd2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dac:	2340      	movs	r3, #64	@ 0x40
 8007dae:	2202      	movs	r2, #2
 8007db0:	2181      	movs	r1, #129	@ 0x81
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fed9 	bl	8009b6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007dbe:	2340      	movs	r3, #64	@ 0x40
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 fed0 	bl	8009b6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	2182      	movs	r1, #130	@ 0x82
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fec6 	bl	8009b6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007de4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007de8:	f001 ffe6 	bl	8009db8 <USBD_static_malloc>
 8007dec:	4602      	mov	r2, r0
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
 8007e02:	e026      	b.n	8007e52 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e0a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7c1b      	ldrb	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e38:	2101      	movs	r1, #1
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f001 ff85 	bl	8009d4a <USBD_LL_PrepareReceive>
 8007e40:	e007      	b.n	8007e52 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e48:	2340      	movs	r3, #64	@ 0x40
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 ff7c 	bl	8009d4a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e6c:	2181      	movs	r1, #129	@ 0x81
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fea1 	bl	8009bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fe9a 	bl	8009bb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e8a:	2182      	movs	r1, #130	@ 0x82
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 fe92 	bl	8009bb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00e      	beq.n	8007ec0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 ff8c 	bl	8009dd0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b086      	sub	sp, #24
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eda:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d039      	beq.n	8007f68 <USBD_CDC_Setup+0x9e>
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	d17f      	bne.n	8007ff8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	88db      	ldrh	r3, [r3, #6]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d029      	beq.n	8007f54 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b25b      	sxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da11      	bge.n	8007f2e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007f16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	88d2      	ldrh	r2, [r2, #6]
 8007f1c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f1e:	6939      	ldr	r1, [r7, #16]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	88db      	ldrh	r3, [r3, #6]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fa06 	bl	8009338 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f2c:	e06b      	b.n	8008006 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	785a      	ldrb	r2, [r3, #1]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	88db      	ldrh	r3, [r3, #6]
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f44:	6939      	ldr	r1, [r7, #16]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	88db      	ldrh	r3, [r3, #6]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fa21 	bl	8009394 <USBD_CtlPrepareRx>
      break;
 8007f52:	e058      	b.n	8008006 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	7850      	ldrb	r0, [r2, #1]
 8007f60:	2200      	movs	r2, #0
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	4798      	blx	r3
      break;
 8007f66:	e04e      	b.n	8008006 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b0b      	cmp	r3, #11
 8007f6e:	d02e      	beq.n	8007fce <USBD_CDC_Setup+0x104>
 8007f70:	2b0b      	cmp	r3, #11
 8007f72:	dc38      	bgt.n	8007fe6 <USBD_CDC_Setup+0x11c>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <USBD_CDC_Setup+0xb4>
 8007f78:	2b0a      	cmp	r3, #10
 8007f7a:	d014      	beq.n	8007fa6 <USBD_CDC_Setup+0xdc>
 8007f7c:	e033      	b.n	8007fe6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d107      	bne.n	8007f98 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007f88:	f107 030c 	add.w	r3, r7, #12
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 f9d1 	bl	8009338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f96:	e02e      	b.n	8007ff6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f962 	bl	8009264 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8007fa4:	e027      	b.n	8007ff6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d107      	bne.n	8007fc0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fb0:	f107 030f 	add.w	r3, r7, #15
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f001 f9bd 	bl	8009338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fbe:	e01a      	b.n	8007ff6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 f94e 	bl	8009264 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	75fb      	strb	r3, [r7, #23]
          break;
 8007fcc:	e013      	b.n	8007ff6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d00d      	beq.n	8007ff4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f942 	bl	8009264 <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007fe4:	e006      	b.n	8007ff4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f93b 	bl	8009264 <USBD_CtlError>
          ret = USBD_FAIL;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff2:	e000      	b.n	8007ff6 <USBD_CDC_Setup+0x12c>
          break;
 8007ff4:	bf00      	nop
      }
      break;
 8007ff6:	e006      	b.n	8008006 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f932 	bl	8009264 <USBD_CtlError>
      ret = USBD_FAIL;
 8008000:	2302      	movs	r3, #2
 8008002:	75fb      	strb	r3, [r7, #23]
      break;
 8008004:	bf00      	nop
  }

  return ret;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008022:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800802a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d03a      	beq.n	80080ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008036:	78fa      	ldrb	r2, [r7, #3]
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	331c      	adds	r3, #28
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d029      	beq.n	80080a0 <USBD_CDC_DataIn+0x90>
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	331c      	adds	r3, #28
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	78f9      	ldrb	r1, [r7, #3]
 8008060:	68b8      	ldr	r0, [r7, #8]
 8008062:	460b      	mov	r3, r1
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	4403      	add	r3, r0
 800806c:	3320      	adds	r3, #32
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	fbb2 f1f3 	udiv	r1, r2, r3
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d110      	bne.n	80080a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	331c      	adds	r3, #28
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008092:	78f9      	ldrb	r1, [r7, #3]
 8008094:	2300      	movs	r3, #0
 8008096:	2200      	movs	r2, #0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 fe33 	bl	8009d04 <USBD_LL_Transmit>
 800809e:	e003      	b.n	80080a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	e000      	b.n	80080ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80080ac:	2302      	movs	r3, #2
  }
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fe5e 	bl	8009d90 <USBD_LL_GetRxDataSize>
 80080d4:	4602      	mov	r2, r0
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00d      	beq.n	8008102 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80080fa:	4611      	mov	r1, r2
 80080fc:	4798      	blx	r3

    return USBD_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e000      	b.n	8008104 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008102:	2302      	movs	r3, #2
  }
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800811a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008122:	2b00      	cmp	r3, #0
 8008124:	d014      	beq.n	8008150 <USBD_CDC_EP0_RxReady+0x44>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800812c:	2bff      	cmp	r3, #255	@ 0xff
 800812e:	d00f      	beq.n	8008150 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800813e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008146:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	22ff      	movs	r2, #255	@ 0xff
 800814c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2243      	movs	r2, #67	@ 0x43
 8008168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800816a:	4b03      	ldr	r3, [pc, #12]	@ (8008178 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000094 	.word	0x20000094

0800817c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2243      	movs	r2, #67	@ 0x43
 8008188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800818a:	4b03      	ldr	r3, [pc, #12]	@ (8008198 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000050 	.word	0x20000050

0800819c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2243      	movs	r2, #67	@ 0x43
 80081a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80081aa:	4b03      	ldr	r3, [pc, #12]	@ (80081b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	200000d8 	.word	0x200000d8

080081bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	220a      	movs	r2, #10
 80081c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80081ca:	4b03      	ldr	r3, [pc, #12]	@ (80081d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	2000000c 	.word	0x2000000c

080081dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008226:	88fa      	ldrh	r2, [r7, #6]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01c      	beq.n	80082b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008280:	2b00      	cmp	r3, #0
 8008282:	d115      	bne.n	80082b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2201      	movs	r2, #1
 8008288:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2181      	movs	r1, #129	@ 0x81
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 fd2c 	bl	8009d04 <USBD_LL_Transmit>

      return USBD_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e002      	b.n	80082b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80082b4:	2302      	movs	r3, #2
  }
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d017      	beq.n	8008308 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7c1b      	ldrb	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ea:	2101      	movs	r1, #1
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fd2c 	bl	8009d4a <USBD_LL_PrepareReceive>
 80082f2:	e007      	b.n	8008304 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082fa:	2340      	movs	r3, #64	@ 0x40
 80082fc:	2101      	movs	r1, #1
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fd23 	bl	8009d4a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008308:	2302      	movs	r3, #2
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	4613      	mov	r3, r2
 800831e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008326:	2302      	movs	r3, #2
 8008328:	e01a      	b.n	8008360 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	79fa      	ldrb	r2, [r7, #7]
 8008356:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f001 fb91 	bl	8009a80 <USBD_LL_Init>

  return USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d006      	beq.n	800838a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
 8008388:	e001      	b.n	800838e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800838a:	2302      	movs	r3, #2
 800838c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800838e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr

0800839a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 fbc6 	bl	8009b34 <USBD_LL_Start>

  return USBD_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr

080083c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	460b      	mov	r3, r1
 80083d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083d2:	2302      	movs	r3, #2
 80083d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	78fa      	ldrb	r2, [r7, #3]
 80083ea:	4611      	mov	r1, r2
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	460b      	mov	r3, r1
 800840e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4611      	mov	r1, r2
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	4798      	blx	r3

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fed8 	bl	80091f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008450:	461a      	mov	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800845e:	f003 031f 	and.w	r3, r3, #31
 8008462:	2b02      	cmp	r3, #2
 8008464:	d016      	beq.n	8008494 <USBD_LL_SetupStage+0x6a>
 8008466:	2b02      	cmp	r3, #2
 8008468:	d81c      	bhi.n	80084a4 <USBD_LL_SetupStage+0x7a>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <USBD_LL_SetupStage+0x4a>
 800846e:	2b01      	cmp	r3, #1
 8008470:	d008      	beq.n	8008484 <USBD_LL_SetupStage+0x5a>
 8008472:	e017      	b.n	80084a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9cb 	bl	8008818 <USBD_StdDevReq>
      break;
 8008482:	e01a      	b.n	80084ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa2d 	bl	80088ec <USBD_StdItfReq>
      break;
 8008492:	e012      	b.n	80084ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fa6d 	bl	800897c <USBD_StdEPReq>
      break;
 80084a2:	e00a      	b.n	80084ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80084aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 fb9e 	bl	8009bf4 <USBD_LL_StallEP>
      break;
 80084b8:	bf00      	nop
  }

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	460b      	mov	r3, r1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084d2:	7afb      	ldrb	r3, [r7, #11]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d14b      	bne.n	8008570 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80084de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d134      	bne.n	8008554 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d919      	bls.n	800852a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800850c:	429a      	cmp	r2, r3
 800850e:	d203      	bcs.n	8008518 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008514:	b29b      	uxth	r3, r3
 8008516:	e002      	b.n	800851e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 ff54 	bl	80093d0 <USBD_CtlContinueRx>
 8008528:	e038      	b.n	800859c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800853c:	2b03      	cmp	r3, #3
 800853e:	d105      	bne.n	800854c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 ff51 	bl	80093f4 <USBD_CtlSendStatus>
 8008552:	e023      	b.n	800859c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800855a:	2b05      	cmp	r3, #5
 800855c:	d11e      	bne.n	800859c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008566:	2100      	movs	r1, #0
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f001 fb43 	bl	8009bf4 <USBD_LL_StallEP>
 800856e:	e015      	b.n	800859c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00d      	beq.n	8008598 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008582:	2b03      	cmp	r3, #3
 8008584:	d108      	bne.n	8008598 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	7afa      	ldrb	r2, [r7, #11]
 8008590:	4611      	mov	r1, r2
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	4798      	blx	r3
 8008596:	e001      	b.n	800859c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	e000      	b.n	800859e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	460b      	mov	r3, r1
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d17f      	bne.n	80086ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3314      	adds	r3, #20
 80085be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d15c      	bne.n	8008684 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d915      	bls.n	8008602 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	1ad2      	subs	r2, r2, r3
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	461a      	mov	r2, r3
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 febe 	bl	8009370 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f4:	2300      	movs	r3, #0
 80085f6:	2200      	movs	r2, #0
 80085f8:	2100      	movs	r1, #0
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f001 fba5 	bl	8009d4a <USBD_LL_PrepareReceive>
 8008600:	e04e      	b.n	80086a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	6912      	ldr	r2, [r2, #16]
 800860a:	fbb3 f1f2 	udiv	r1, r3, r2
 800860e:	fb01 f202 	mul.w	r2, r1, r2
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11c      	bne.n	8008652 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008620:	429a      	cmp	r2, r3
 8008622:	d316      	bcc.n	8008652 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800862e:	429a      	cmp	r2, r3
 8008630:	d20f      	bcs.n	8008652 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008632:	2200      	movs	r2, #0
 8008634:	2100      	movs	r1, #0
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fe9a 	bl	8009370 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008644:	2300      	movs	r3, #0
 8008646:	2200      	movs	r2, #0
 8008648:	2100      	movs	r1, #0
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f001 fb7d 	bl	8009d4a <USBD_LL_PrepareReceive>
 8008650:	e026      	b.n	80086a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008664:	2b03      	cmp	r3, #3
 8008666:	d105      	bne.n	8008674 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008674:	2180      	movs	r1, #128	@ 0x80
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f001 fabc 	bl	8009bf4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fecc 	bl	800941a <USBD_CtlReceiveStatus>
 8008682:	e00d      	b.n	80086a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800868a:	2b04      	cmp	r3, #4
 800868c:	d004      	beq.n	8008698 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008698:	2180      	movs	r1, #128	@ 0x80
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f001 faaa 	bl	8009bf4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d11d      	bne.n	80086e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fe81 	bl	80083b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80086b8:	e015      	b.n	80086e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d108      	bne.n	80086e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	7afa      	ldrb	r2, [r7, #11]
 80086da:	4611      	mov	r1, r2
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	4798      	blx	r3
 80086e0:	e001      	b.n	80086e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80086e2:	2302      	movs	r3, #2
 80086e4:	e000      	b.n	80086e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3718      	adds	r7, #24
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fa33 	bl	8009b6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2240      	movs	r2, #64	@ 0x40
 8008710:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008714:	2340      	movs	r3, #64	@ 0x40
 8008716:	2200      	movs	r2, #0
 8008718:	2180      	movs	r1, #128	@ 0x80
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fa25 	bl	8009b6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2240      	movs	r2, #64	@ 0x40
 800872a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d009      	beq.n	8008768 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6852      	ldr	r2, [r2, #4]
 8008760:	b2d2      	uxtb	r2, r2
 8008762:	4611      	mov	r1, r2
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
  }

  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	bc80      	pop	{r7}
 800878e:	4770      	bx	lr

08008790 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2204      	movs	r2, #4
 80087a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d105      	bne.n	80087d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	bc80      	pop	{r7}
 80087e0:	4770      	bx	lr

080087e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d10b      	bne.n	800880c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800882e:	2b40      	cmp	r3, #64	@ 0x40
 8008830:	d005      	beq.n	800883e <USBD_StdDevReq+0x26>
 8008832:	2b40      	cmp	r3, #64	@ 0x40
 8008834:	d84f      	bhi.n	80088d6 <USBD_StdDevReq+0xbe>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <USBD_StdDevReq+0x36>
 800883a:	2b20      	cmp	r3, #32
 800883c:	d14b      	bne.n	80088d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
      break;
 800884c:	e048      	b.n	80088e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b09      	cmp	r3, #9
 8008854:	d839      	bhi.n	80088ca <USBD_StdDevReq+0xb2>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <USBD_StdDevReq+0x44>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	080088ad 	.word	0x080088ad
 8008860:	080088c1 	.word	0x080088c1
 8008864:	080088cb 	.word	0x080088cb
 8008868:	080088b7 	.word	0x080088b7
 800886c:	080088cb 	.word	0x080088cb
 8008870:	0800888f 	.word	0x0800888f
 8008874:	08008885 	.word	0x08008885
 8008878:	080088cb 	.word	0x080088cb
 800887c:	080088a3 	.word	0x080088a3
 8008880:	08008899 	.word	0x08008899
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f9dc 	bl	8008c44 <USBD_GetDescriptor>
          break;
 800888c:	e022      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fb3f 	bl	8008f14 <USBD_SetAddress>
          break;
 8008896:	e01d      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fb7e 	bl	8008f9c <USBD_SetConfig>
          break;
 80088a0:	e018      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fc07 	bl	80090b8 <USBD_GetConfig>
          break;
 80088aa:	e013      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fc37 	bl	8009122 <USBD_GetStatus>
          break;
 80088b4:	e00e      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fc65 	bl	8009188 <USBD_SetFeature>
          break;
 80088be:	e009      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fc74 	bl	80091b0 <USBD_ClrFeature>
          break;
 80088c8:	e004      	b.n	80088d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fcc9 	bl	8009264 <USBD_CtlError>
          break;
 80088d2:	bf00      	nop
      }
      break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fcc3 	bl	8009264 <USBD_CtlError>
      break;
 80088de:	bf00      	nop
  }

  return ret;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008902:	2b40      	cmp	r3, #64	@ 0x40
 8008904:	d005      	beq.n	8008912 <USBD_StdItfReq+0x26>
 8008906:	2b40      	cmp	r3, #64	@ 0x40
 8008908:	d82e      	bhi.n	8008968 <USBD_StdItfReq+0x7c>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <USBD_StdItfReq+0x26>
 800890e:	2b20      	cmp	r3, #32
 8008910:	d12a      	bne.n	8008968 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008918:	3b01      	subs	r3, #1
 800891a:	2b02      	cmp	r3, #2
 800891c:	d81d      	bhi.n	800895a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	889b      	ldrh	r3, [r3, #4]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	d813      	bhi.n	8008950 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	88db      	ldrh	r3, [r3, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d110      	bne.n	8008964 <USBD_StdItfReq+0x78>
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10d      	bne.n	8008964 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fd53 	bl	80093f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800894e:	e009      	b.n	8008964 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fc86 	bl	8009264 <USBD_CtlError>
          break;
 8008958:	e004      	b.n	8008964 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fc81 	bl	8009264 <USBD_CtlError>
          break;
 8008962:	e000      	b.n	8008966 <USBD_StdItfReq+0x7a>
          break;
 8008964:	bf00      	nop
      }
      break;
 8008966:	e004      	b.n	8008972 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fc7a 	bl	8009264 <USBD_CtlError>
      break;
 8008970:	bf00      	nop
  }

  return USBD_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	889b      	ldrh	r3, [r3, #4]
 800898e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	d007      	beq.n	80089ac <USBD_StdEPReq+0x30>
 800899c:	2b40      	cmp	r3, #64	@ 0x40
 800899e:	f200 8146 	bhi.w	8008c2e <USBD_StdEPReq+0x2b2>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <USBD_StdEPReq+0x40>
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	f040 8141 	bne.w	8008c2e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
      break;
 80089ba:	e13d      	b.n	8008c38 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089c4:	2b20      	cmp	r3, #32
 80089c6:	d10a      	bne.n	80089de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	4798      	blx	r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
 80089dc:	e12d      	b.n	8008c3a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d007      	beq.n	80089f6 <USBD_StdEPReq+0x7a>
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	f300 811b 	bgt.w	8008c22 <USBD_StdEPReq+0x2a6>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d072      	beq.n	8008ad6 <USBD_StdEPReq+0x15a>
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d03a      	beq.n	8008a6a <USBD_StdEPReq+0xee>
 80089f4:	e115      	b.n	8008c22 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d002      	beq.n	8008a06 <USBD_StdEPReq+0x8a>
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d015      	beq.n	8008a30 <USBD_StdEPReq+0xb4>
 8008a04:	e02b      	b.n	8008a5e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <USBD_StdEPReq+0xaa>
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	2b80      	cmp	r3, #128	@ 0x80
 8008a10:	d009      	beq.n	8008a26 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 f8ec 	bl	8009bf4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a1c:	2180      	movs	r1, #128	@ 0x80
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f001 f8e8 	bl	8009bf4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a24:	e020      	b.n	8008a68 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fc1b 	bl	8009264 <USBD_CtlError>
              break;
 8008a2e:	e01b      	b.n	8008a68 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	885b      	ldrh	r3, [r3, #2]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10e      	bne.n	8008a56 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <USBD_StdEPReq+0xda>
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	2b80      	cmp	r3, #128	@ 0x80
 8008a42:	d008      	beq.n	8008a56 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f8cf 	bl	8009bf4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fccc 	bl	80093f4 <USBD_CtlSendStatus>

              break;
 8008a5c:	e004      	b.n	8008a68 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fbff 	bl	8009264 <USBD_CtlError>
              break;
 8008a66:	bf00      	nop
          }
          break;
 8008a68:	e0e0      	b.n	8008c2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d002      	beq.n	8008a7a <USBD_StdEPReq+0xfe>
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d015      	beq.n	8008aa4 <USBD_StdEPReq+0x128>
 8008a78:	e026      	b.n	8008ac8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00c      	beq.n	8008a9a <USBD_StdEPReq+0x11e>
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b80      	cmp	r3, #128	@ 0x80
 8008a84:	d009      	beq.n	8008a9a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 f8b2 	bl	8009bf4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a90:	2180      	movs	r1, #128	@ 0x80
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 f8ae 	bl	8009bf4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a98:	e01c      	b.n	8008ad4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fbe1 	bl	8009264 <USBD_CtlError>
              break;
 8008aa2:	e017      	b.n	8008ad4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	885b      	ldrh	r3, [r3, #2]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d112      	bne.n	8008ad2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 f8b9 	bl	8009c32 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fc97 	bl	80093f4 <USBD_CtlSendStatus>
              }
              break;
 8008ac6:	e004      	b.n	8008ad2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fbca 	bl	8009264 <USBD_CtlError>
              break;
 8008ad0:	e000      	b.n	8008ad4 <USBD_StdEPReq+0x158>
              break;
 8008ad2:	bf00      	nop
          }
          break;
 8008ad4:	e0aa      	b.n	8008c2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d002      	beq.n	8008ae6 <USBD_StdEPReq+0x16a>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d032      	beq.n	8008b4a <USBD_StdEPReq+0x1ce>
 8008ae4:	e097      	b.n	8008c16 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d007      	beq.n	8008afc <USBD_StdEPReq+0x180>
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b80      	cmp	r3, #128	@ 0x80
 8008af0:	d004      	beq.n	8008afc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fbb5 	bl	8009264 <USBD_CtlError>
                break;
 8008afa:	e091      	b.n	8008c20 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	da0b      	bge.n	8008b1c <USBD_StdEPReq+0x1a0>
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	3310      	adds	r3, #16
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4413      	add	r3, r2
 8008b18:	3304      	adds	r3, #4
 8008b1a:	e00b      	b.n	8008b34 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	3304      	adds	r3, #4
 8008b34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fbf8 	bl	8009338 <USBD_CtlSendData>
              break;
 8008b48:	e06a      	b.n	8008c20 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da11      	bge.n	8008b76 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	f003 020f 	and.w	r2, r3, #15
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	440b      	add	r3, r1
 8008b64:	3318      	adds	r3, #24
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d117      	bne.n	8008b9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fb78 	bl	8009264 <USBD_CtlError>
                  break;
 8008b74:	e054      	b.n	8008c20 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	f003 020f 	and.w	r2, r3, #15
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d104      	bne.n	8008b9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fb65 	bl	8009264 <USBD_CtlError>
                  break;
 8008b9a:	e041      	b.n	8008c20 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0b      	bge.n	8008bbc <USBD_StdEPReq+0x240>
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	3310      	adds	r3, #16
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	3304      	adds	r3, #4
 8008bba:	e00b      	b.n	8008bd4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <USBD_StdEPReq+0x266>
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	2b80      	cmp	r3, #128	@ 0x80
 8008be0:	d103      	bne.n	8008bea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	e00e      	b.n	8008c08 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 f83e 	bl	8009c70 <USBD_LL_IsStallEP>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e002      	b.n	8008c08 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fb92 	bl	8009338 <USBD_CtlSendData>
              break;
 8008c14:	e004      	b.n	8008c20 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fb23 	bl	8009264 <USBD_CtlError>
              break;
 8008c1e:	bf00      	nop
          }
          break;
 8008c20:	e004      	b.n	8008c2c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fb1d 	bl	8009264 <USBD_CtlError>
          break;
 8008c2a:	bf00      	nop
      }
      break;
 8008c2c:	e004      	b.n	8008c38 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fb17 	bl	8009264 <USBD_CtlError>
      break;
 8008c36:	bf00      	nop
  }

  return ret;
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	2b06      	cmp	r3, #6
 8008c66:	f200 8128 	bhi.w	8008eba <USBD_GetDescriptor+0x276>
 8008c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <USBD_GetDescriptor+0x2c>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	08008ca5 	.word	0x08008ca5
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008ebb 	.word	0x08008ebb
 8008c80:	08008ebb 	.word	0x08008ebb
 8008c84:	08008e5b 	.word	0x08008e5b
 8008c88:	08008e87 	.word	0x08008e87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7c12      	ldrb	r2, [r2, #16]
 8008c98:	f107 0108 	add.w	r1, r7, #8
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
 8008ca0:	60f8      	str	r0, [r7, #12]
      break;
 8008ca2:	e112      	b.n	8008eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7c1b      	ldrb	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10d      	bne.n	8008cc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb4:	f107 0208 	add.w	r2, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cc6:	e100      	b.n	8008eca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	f107 0208 	add.w	r2, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	2202      	movs	r2, #2
 8008ce0:	701a      	strb	r2, [r3, #0]
      break;
 8008ce2:	e0f2      	b.n	8008eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	885b      	ldrh	r3, [r3, #2]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	f200 80ac 	bhi.w	8008e48 <USBD_GetDescriptor+0x204>
 8008cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf8 <USBD_GetDescriptor+0xb4>)
 8008cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf6:	bf00      	nop
 8008cf8:	08008d11 	.word	0x08008d11
 8008cfc:	08008d45 	.word	0x08008d45
 8008d00:	08008d79 	.word	0x08008d79
 8008d04:	08008dad 	.word	0x08008dad
 8008d08:	08008de1 	.word	0x08008de1
 8008d0c:	08008e15 	.word	0x08008e15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	7c12      	ldrb	r2, [r2, #16]
 8008d28:	f107 0108 	add.w	r1, r7, #8
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
 8008d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d32:	e091      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa94 	bl	8009264 <USBD_CtlError>
            err++;
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	72fb      	strb	r3, [r7, #11]
          break;
 8008d42:	e089      	b.n	8008e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7c12      	ldrb	r2, [r2, #16]
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d66:	e077      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa7a 	bl	8009264 <USBD_CtlError>
            err++;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	3301      	adds	r3, #1
 8008d74:	72fb      	strb	r3, [r7, #11]
          break;
 8008d76:	e06f      	b.n	8008e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	7c12      	ldrb	r2, [r2, #16]
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d9a:	e05d      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa60 	bl	8009264 <USBD_CtlError>
            err++;
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	3301      	adds	r3, #1
 8008da8:	72fb      	strb	r3, [r7, #11]
          break;
 8008daa:	e055      	b.n	8008e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	7c12      	ldrb	r2, [r2, #16]
 8008dc4:	f107 0108 	add.w	r1, r7, #8
 8008dc8:	4610      	mov	r0, r2
 8008dca:	4798      	blx	r3
 8008dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dce:	e043      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fa46 	bl	8009264 <USBD_CtlError>
            err++;
 8008dd8:	7afb      	ldrb	r3, [r7, #11]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dde:	e03b      	b.n	8008e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00b      	beq.n	8008e04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	7c12      	ldrb	r2, [r2, #16]
 8008df8:	f107 0108 	add.w	r1, r7, #8
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e02:	e029      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e04:	6839      	ldr	r1, [r7, #0]
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fa2c 	bl	8009264 <USBD_CtlError>
            err++;
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	72fb      	strb	r3, [r7, #11]
          break;
 8008e12:	e021      	b.n	8008e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	7c12      	ldrb	r2, [r2, #16]
 8008e2c:	f107 0108 	add.w	r1, r7, #8
 8008e30:	4610      	mov	r0, r2
 8008e32:	4798      	blx	r3
 8008e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e36:	e00f      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa12 	bl	8009264 <USBD_CtlError>
            err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
          break;
 8008e46:	e007      	b.n	8008e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa0a 	bl	8009264 <USBD_CtlError>
          err++;
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	3301      	adds	r3, #1
 8008e54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e56:	e038      	b.n	8008eca <USBD_GetDescriptor+0x286>
 8008e58:	e037      	b.n	8008eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7c1b      	ldrb	r3, [r3, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e6a:	f107 0208 	add.w	r2, r7, #8
 8008e6e:	4610      	mov	r0, r2
 8008e70:	4798      	blx	r3
 8008e72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e74:	e029      	b.n	8008eca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f9f3 	bl	8009264 <USBD_CtlError>
        err++;
 8008e7e:	7afb      	ldrb	r3, [r7, #11]
 8008e80:	3301      	adds	r3, #1
 8008e82:	72fb      	strb	r3, [r7, #11]
      break;
 8008e84:	e021      	b.n	8008eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	7c1b      	ldrb	r3, [r3, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10d      	bne.n	8008eaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e96:	f107 0208 	add.w	r2, r7, #8
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	4798      	blx	r3
 8008e9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	2207      	movs	r2, #7
 8008ea6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ea8:	e00f      	b.n	8008eca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9d9 	bl	8009264 <USBD_CtlError>
        err++;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb8:	e007      	b.n	8008eca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f9d1 	bl	8009264 <USBD_CtlError>
      err++;
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec8:	bf00      	nop
  }

  if (err != 0U)
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11c      	bne.n	8008f0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ed0:	893b      	ldrh	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d011      	beq.n	8008efa <USBD_GetDescriptor+0x2b6>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	88db      	ldrh	r3, [r3, #6]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00d      	beq.n	8008efa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	88da      	ldrh	r2, [r3, #6]
 8008ee2:	893b      	ldrh	r3, [r7, #8]
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	bf28      	it	cs
 8008ee8:	4613      	movcs	r3, r2
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008eee:	893b      	ldrh	r3, [r7, #8]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa1f 	bl	8009338 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	88db      	ldrh	r3, [r3, #6]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa76 	bl	80093f4 <USBD_CtlSendStatus>
 8008f08:	e000      	b.n	8008f0c <USBD_GetDescriptor+0x2c8>
    return;
 8008f0a:	bf00      	nop
    }
  }
}
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop

08008f14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	889b      	ldrh	r3, [r3, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d130      	bne.n	8008f88 <USBD_SetAddress+0x74>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	88db      	ldrh	r3, [r3, #6]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d12c      	bne.n	8008f88 <USBD_SetAddress+0x74>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	885b      	ldrh	r3, [r3, #2]
 8008f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f34:	d828      	bhi.n	8008f88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	885b      	ldrh	r3, [r3, #2]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d104      	bne.n	8008f56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f988 	bl	8009264 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f54:	e01d      	b.n	8008f92 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 feaf 	bl	8009cc6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fa43 	bl	80093f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7c:	e009      	b.n	8008f92 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	e004      	b.n	8008f92 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f96a 	bl	8009264 <USBD_CtlError>
  }
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	885b      	ldrh	r3, [r3, #2]
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	4b41      	ldr	r3, [pc, #260]	@ (80090b4 <USBD_SetConfig+0x118>)
 8008fae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fb0:	4b40      	ldr	r3, [pc, #256]	@ (80090b4 <USBD_SetConfig+0x118>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d904      	bls.n	8008fc2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f952 	bl	8009264 <USBD_CtlError>
 8008fc0:	e075      	b.n	80090ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d002      	beq.n	8008fd2 <USBD_SetConfig+0x36>
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d023      	beq.n	8009018 <USBD_SetConfig+0x7c>
 8008fd0:	e062      	b.n	8009098 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008fd2:	4b38      	ldr	r3, [pc, #224]	@ (80090b4 <USBD_SetConfig+0x118>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d01a      	beq.n	8009010 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008fda:	4b36      	ldr	r3, [pc, #216]	@ (80090b4 <USBD_SetConfig+0x118>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008fec:	4b31      	ldr	r3, [pc, #196]	@ (80090b4 <USBD_SetConfig+0x118>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff f9e7 	bl	80083c6 <USBD_SetClassConfig>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d104      	bne.n	8009008 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f92f 	bl	8009264 <USBD_CtlError>
            return;
 8009006:	e052      	b.n	80090ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9f3 	bl	80093f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800900e:	e04e      	b.n	80090ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f9ef 	bl	80093f4 <USBD_CtlSendStatus>
        break;
 8009016:	e04a      	b.n	80090ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009018:	4b26      	ldr	r3, [pc, #152]	@ (80090b4 <USBD_SetConfig+0x118>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d112      	bne.n	8009046 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009028:	4b22      	ldr	r3, [pc, #136]	@ (80090b4 <USBD_SetConfig+0x118>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	461a      	mov	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009032:	4b20      	ldr	r3, [pc, #128]	@ (80090b4 <USBD_SetConfig+0x118>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff f9e3 	bl	8008404 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9d8 	bl	80093f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009044:	e033      	b.n	80090ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009046:	4b1b      	ldr	r3, [pc, #108]	@ (80090b4 <USBD_SetConfig+0x118>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d01d      	beq.n	8009090 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	b2db      	uxtb	r3, r3
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff f9d1 	bl	8008404 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009062:	4b14      	ldr	r3, [pc, #80]	@ (80090b4 <USBD_SetConfig+0x118>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800906c:	4b11      	ldr	r3, [pc, #68]	@ (80090b4 <USBD_SetConfig+0x118>)
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff f9a7 	bl	80083c6 <USBD_SetClassConfig>
 8009078:	4603      	mov	r3, r0
 800907a:	2b02      	cmp	r3, #2
 800907c:	d104      	bne.n	8009088 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f8ef 	bl	8009264 <USBD_CtlError>
            return;
 8009086:	e012      	b.n	80090ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f9b3 	bl	80093f4 <USBD_CtlSendStatus>
        break;
 800908e:	e00e      	b.n	80090ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9af 	bl	80093f4 <USBD_CtlSendStatus>
        break;
 8009096:	e00a      	b.n	80090ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f8e2 	bl	8009264 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090a0:	4b04      	ldr	r3, [pc, #16]	@ (80090b4 <USBD_SetConfig+0x118>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff f9ac 	bl	8008404 <USBD_ClrClassConfig>
        break;
 80090ac:	bf00      	nop
    }
  }
}
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000524 	.word	0x20000524

080090b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88db      	ldrh	r3, [r3, #6]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d004      	beq.n	80090d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8c9 	bl	8009264 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090d2:	e022      	b.n	800911a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090da:	2b02      	cmp	r3, #2
 80090dc:	dc02      	bgt.n	80090e4 <USBD_GetConfig+0x2c>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dc03      	bgt.n	80090ea <USBD_GetConfig+0x32>
 80090e2:	e015      	b.n	8009110 <USBD_GetConfig+0x58>
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d00b      	beq.n	8009100 <USBD_GetConfig+0x48>
 80090e8:	e012      	b.n	8009110 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3308      	adds	r3, #8
 80090f4:	2201      	movs	r2, #1
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f91d 	bl	8009338 <USBD_CtlSendData>
        break;
 80090fe:	e00c      	b.n	800911a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3304      	adds	r3, #4
 8009104:	2201      	movs	r2, #1
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f915 	bl	8009338 <USBD_CtlSendData>
        break;
 800910e:	e004      	b.n	800911a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f8a6 	bl	8009264 <USBD_CtlError>
        break;
 8009118:	bf00      	nop
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009132:	3b01      	subs	r3, #1
 8009134:	2b02      	cmp	r3, #2
 8009136:	d81e      	bhi.n	8009176 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	88db      	ldrh	r3, [r3, #6]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d004      	beq.n	800914a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f88e 	bl	8009264 <USBD_CtlError>
        break;
 8009148:	e01a      	b.n	8009180 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f043 0202 	orr.w	r2, r3, #2
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	330c      	adds	r3, #12
 800916a:	2202      	movs	r2, #2
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8e2 	bl	8009338 <USBD_CtlSendData>
      break;
 8009174:	e004      	b.n	8009180 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f873 	bl	8009264 <USBD_CtlError>
      break;
 800917e:	bf00      	nop
  }
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d106      	bne.n	80091a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f926 	bl	80093f4 <USBD_CtlSendStatus>
  }
}
 80091a8:	bf00      	nop
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c0:	3b01      	subs	r3, #1
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d80b      	bhi.n	80091de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d10c      	bne.n	80091e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f90c 	bl	80093f4 <USBD_CtlSendStatus>
      }
      break;
 80091dc:	e004      	b.n	80091e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f83f 	bl	8009264 <USBD_CtlError>
      break;
 80091e6:	e000      	b.n	80091ea <USBD_ClrFeature+0x3a>
      break;
 80091e8:	bf00      	nop
  }
}
 80091ea:	bf00      	nop
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781a      	ldrb	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	785a      	ldrb	r2, [r3, #1]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	3302      	adds	r3, #2
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	3303      	adds	r3, #3
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	b29b      	uxth	r3, r3
 800921e:	4413      	add	r3, r2
 8009220:	b29a      	uxth	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	3304      	adds	r3, #4
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	3305      	adds	r3, #5
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	b29b      	uxth	r3, r3
 8009238:	4413      	add	r3, r2
 800923a:	b29a      	uxth	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	3306      	adds	r3, #6
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	3307      	adds	r3, #7
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	021b      	lsls	r3, r3, #8
 8009250:	b29b      	uxth	r3, r3
 8009252:	4413      	add	r3, r2
 8009254:	b29a      	uxth	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	80da      	strh	r2, [r3, #6]

}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800926e:	2180      	movs	r1, #128	@ 0x80
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fcbf 	bl	8009bf4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009276:	2100      	movs	r1, #0
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fcbb 	bl	8009bf4 <USBD_LL_StallEP>
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d032      	beq.n	8009302 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 f834 	bl	800930a <USBD_GetLen>
 80092a2:	4603      	mov	r3, r0
 80092a4:	3301      	adds	r3, #1
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	75fa      	strb	r2, [r7, #23]
 80092b6:	461a      	mov	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4413      	add	r3, r2
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	7812      	ldrb	r2, [r2, #0]
 80092c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	75fa      	strb	r2, [r7, #23]
 80092c8:	461a      	mov	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	2203      	movs	r2, #3
 80092d0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092d2:	e012      	b.n	80092fa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	60fa      	str	r2, [r7, #12]
 80092da:	7dfa      	ldrb	r2, [r7, #23]
 80092dc:	1c51      	adds	r1, r2, #1
 80092de:	75f9      	strb	r1, [r7, #23]
 80092e0:	4611      	mov	r1, r2
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	440a      	add	r2, r1
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	75fa      	strb	r2, [r7, #23]
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	4413      	add	r3, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e8      	bne.n	80092d4 <USBD_GetString+0x4e>
    }
  }
}
 8009302:	bf00      	nop
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009316:	e005      	b.n	8009324 <USBD_GetLen+0x1a>
  {
    len++;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	3301      	adds	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3301      	adds	r3, #1
 8009322:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f5      	bne.n	8009318 <USBD_GetLen+0xe>
  }

  return len;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr

08009338 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2202      	movs	r2, #2
 800934a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800934e:	88fa      	ldrh	r2, [r7, #6]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009354:	88fa      	ldrh	r2, [r7, #6]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	2100      	movs	r1, #0
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fccf 	bl	8009d04 <USBD_LL_Transmit>

  return USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	68ba      	ldr	r2, [r7, #8]
 8009382:	2100      	movs	r1, #0
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 fcbd 	bl	8009d04 <USBD_LL_Transmit>

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2203      	movs	r2, #3
 80093a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093ba:	88fb      	ldrh	r3, [r7, #6]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	2100      	movs	r1, #0
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fcc2 	bl	8009d4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fcb0 	bl	8009d4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2204      	movs	r2, #4
 8009400:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009404:	2300      	movs	r3, #0
 8009406:	2200      	movs	r2, #0
 8009408:	2100      	movs	r1, #0
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fc7a 	bl	8009d04 <USBD_LL_Transmit>

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2205      	movs	r2, #5
 8009426:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800942a:	2300      	movs	r3, #0
 800942c:	2200      	movs	r2, #0
 800942e:	2100      	movs	r1, #0
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fc8a 	bl	8009d4a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009444:	2200      	movs	r2, #0
 8009446:	4912      	ldr	r1, [pc, #72]	@ (8009490 <MX_USB_DEVICE_Init+0x50>)
 8009448:	4812      	ldr	r0, [pc, #72]	@ (8009494 <MX_USB_DEVICE_Init+0x54>)
 800944a:	f7fe ff62 	bl	8008312 <USBD_Init>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009454:	f7f7 fc24 	bl	8000ca0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009458:	490f      	ldr	r1, [pc, #60]	@ (8009498 <MX_USB_DEVICE_Init+0x58>)
 800945a:	480e      	ldr	r0, [pc, #56]	@ (8009494 <MX_USB_DEVICE_Init+0x54>)
 800945c:	f7fe ff84 	bl	8008368 <USBD_RegisterClass>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009466:	f7f7 fc1b 	bl	8000ca0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800946a:	490c      	ldr	r1, [pc, #48]	@ (800949c <MX_USB_DEVICE_Init+0x5c>)
 800946c:	4809      	ldr	r0, [pc, #36]	@ (8009494 <MX_USB_DEVICE_Init+0x54>)
 800946e:	f7fe feb5 	bl	80081dc <USBD_CDC_RegisterInterface>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009478:	f7f7 fc12 	bl	8000ca0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800947c:	4805      	ldr	r0, [pc, #20]	@ (8009494 <MX_USB_DEVICE_Init+0x54>)
 800947e:	f7fe ff8c 	bl	800839a <USBD_Start>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009488:	f7f7 fc0a 	bl	8000ca0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800948c:	bf00      	nop
 800948e:	bd80      	pop	{r7, pc}
 8009490:	20000134 	.word	0x20000134
 8009494:	20000528 	.word	0x20000528
 8009498:	20000018 	.word	0x20000018
 800949c:	20000124 	.word	0x20000124

080094a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094a4:	2200      	movs	r2, #0
 80094a6:	4905      	ldr	r1, [pc, #20]	@ (80094bc <CDC_Init_FS+0x1c>)
 80094a8:	4805      	ldr	r0, [pc, #20]	@ (80094c0 <CDC_Init_FS+0x20>)
 80094aa:	f7fe fead 	bl	8008208 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094ae:	4905      	ldr	r1, [pc, #20]	@ (80094c4 <CDC_Init_FS+0x24>)
 80094b0:	4803      	ldr	r0, [pc, #12]	@ (80094c0 <CDC_Init_FS+0x20>)
 80094b2:	f7fe fec2 	bl	800823a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000bec 	.word	0x20000bec
 80094c0:	20000528 	.word	0x20000528
 80094c4:	200007ec 	.word	0x200007ec

080094c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094c8:	b480      	push	{r7}
 80094ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bc80      	pop	{r7}
 80094d4:	4770      	bx	lr
	...

080094d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	6039      	str	r1, [r7, #0]
 80094e2:	71fb      	strb	r3, [r7, #7]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b23      	cmp	r3, #35	@ 0x23
 80094ec:	f200 8098 	bhi.w	8009620 <CDC_Control_FS+0x148>
 80094f0:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <CDC_Control_FS+0x20>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	08009621 	.word	0x08009621
 80094fc:	08009621 	.word	0x08009621
 8009500:	08009621 	.word	0x08009621
 8009504:	08009621 	.word	0x08009621
 8009508:	08009621 	.word	0x08009621
 800950c:	08009621 	.word	0x08009621
 8009510:	08009621 	.word	0x08009621
 8009514:	08009621 	.word	0x08009621
 8009518:	08009621 	.word	0x08009621
 800951c:	08009621 	.word	0x08009621
 8009520:	08009621 	.word	0x08009621
 8009524:	08009621 	.word	0x08009621
 8009528:	08009621 	.word	0x08009621
 800952c:	08009621 	.word	0x08009621
 8009530:	08009621 	.word	0x08009621
 8009534:	08009621 	.word	0x08009621
 8009538:	08009621 	.word	0x08009621
 800953c:	08009621 	.word	0x08009621
 8009540:	08009621 	.word	0x08009621
 8009544:	08009621 	.word	0x08009621
 8009548:	08009621 	.word	0x08009621
 800954c:	08009621 	.word	0x08009621
 8009550:	08009621 	.word	0x08009621
 8009554:	08009621 	.word	0x08009621
 8009558:	08009621 	.word	0x08009621
 800955c:	08009621 	.word	0x08009621
 8009560:	08009621 	.word	0x08009621
 8009564:	08009621 	.word	0x08009621
 8009568:	08009621 	.word	0x08009621
 800956c:	08009621 	.word	0x08009621
 8009570:	08009621 	.word	0x08009621
 8009574:	08009621 	.word	0x08009621
 8009578:	08009589 	.word	0x08009589
 800957c:	080095cd 	.word	0x080095cd
 8009580:	08009621 	.word	0x08009621
 8009584:	08009621 	.word	0x08009621
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	431a      	orrs	r2, r3
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	3302      	adds	r3, #2
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	041b      	lsls	r3, r3, #16
 80095a0:	431a      	orrs	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	3303      	adds	r3, #3
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	061b      	lsls	r3, r3, #24
 80095aa:	4313      	orrs	r3, r2
 80095ac:	461a      	mov	r2, r3
 80095ae:	4b20      	ldr	r3, [pc, #128]	@ (8009630 <CDC_Control_FS+0x158>)
 80095b0:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	791a      	ldrb	r2, [r3, #4]
 80095b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <CDC_Control_FS+0x158>)
 80095b8:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	795a      	ldrb	r2, [r3, #5]
 80095be:	4b1c      	ldr	r3, [pc, #112]	@ (8009630 <CDC_Control_FS+0x158>)
 80095c0:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	799a      	ldrb	r2, [r3, #6]
 80095c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009630 <CDC_Control_FS+0x158>)
 80095c8:	719a      	strb	r2, [r3, #6]
    break;
 80095ca:	e02a      	b.n	8009622 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80095cc:	4b18      	ldr	r3, [pc, #96]	@ (8009630 <CDC_Control_FS+0x158>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80095d6:	4b16      	ldr	r3, [pc, #88]	@ (8009630 <CDC_Control_FS+0x158>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	0a1a      	lsrs	r2, r3, #8
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	3301      	adds	r3, #1
 80095e0:	b2d2      	uxtb	r2, r2
 80095e2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80095e4:	4b12      	ldr	r3, [pc, #72]	@ (8009630 <CDC_Control_FS+0x158>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	0c1a      	lsrs	r2, r3, #16
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	3302      	adds	r3, #2
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80095f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009630 <CDC_Control_FS+0x158>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	0e1a      	lsrs	r2, r3, #24
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	3303      	adds	r3, #3
 80095fc:	b2d2      	uxtb	r2, r2
 80095fe:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	3304      	adds	r3, #4
 8009604:	4a0a      	ldr	r2, [pc, #40]	@ (8009630 <CDC_Control_FS+0x158>)
 8009606:	7912      	ldrb	r2, [r2, #4]
 8009608:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	3305      	adds	r3, #5
 800960e:	4a08      	ldr	r2, [pc, #32]	@ (8009630 <CDC_Control_FS+0x158>)
 8009610:	7952      	ldrb	r2, [r2, #5]
 8009612:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	3306      	adds	r3, #6
 8009618:	4a05      	ldr	r2, [pc, #20]	@ (8009630 <CDC_Control_FS+0x158>)
 800961a:	7992      	ldrb	r2, [r2, #6]
 800961c:	701a      	strb	r2, [r3, #0]
    break;
 800961e:	e000      	b.n	8009622 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009620:	bf00      	nop
  }

  return (USBD_OK);
 8009622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	bc80      	pop	{r7}
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	2000011c 	.word	0x2000011c

08009634 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 800963e:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <CDC_Receive_FS+0x3c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d007      	beq.n	8009656 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8009646:	4b0a      	ldr	r3, [pc, #40]	@ (8009670 <CDC_Receive_FS+0x3c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	6812      	ldr	r2, [r2, #0]
 800964e:	b292      	uxth	r2, r2
 8009650:	4611      	mov	r1, r2
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4806      	ldr	r0, [pc, #24]	@ (8009674 <CDC_Receive_FS+0x40>)
 800965a:	f7fe fdee 	bl	800823a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800965e:	4805      	ldr	r0, [pc, #20]	@ (8009674 <CDC_Receive_FS+0x40>)
 8009660:	f7fe fe2d 	bl	80082be <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009664:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000fec 	.word	0x20000fec
 8009674:	20000528 	.word	0x20000528

08009678 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009688:	4b0d      	ldr	r3, [pc, #52]	@ (80096c0 <CDC_Transmit_FS+0x48>)
 800968a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800968e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800969a:	2301      	movs	r3, #1
 800969c:	e00b      	b.n	80096b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800969e:	887b      	ldrh	r3, [r7, #2]
 80096a0:	461a      	mov	r2, r3
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	4806      	ldr	r0, [pc, #24]	@ (80096c0 <CDC_Transmit_FS+0x48>)
 80096a6:	f7fe fdaf 	bl	8008208 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096aa:	4805      	ldr	r0, [pc, #20]	@ (80096c0 <CDC_Transmit_FS+0x48>)
 80096ac:	f7fe fdd8 	bl	8008260 <USBD_CDC_TransmitPacket>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000528 	.word	0x20000528

080096c4 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 80096cc:	4a03      	ldr	r2, [pc, #12]	@ (80096dc <CDC_AttachRxData+0x18>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6013      	str	r3, [r2, #0]
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr
 80096dc:	20000fec 	.word	0x20000fec

080096e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	4603      	mov	r3, r0
 80096e8:	6039      	str	r1, [r7, #0]
 80096ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2212      	movs	r2, #18
 80096f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096f2:	4b03      	ldr	r3, [pc, #12]	@ (8009700 <USBD_FS_DeviceDescriptor+0x20>)
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20000150 	.word	0x20000150

08009704 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	6039      	str	r1, [r7, #0]
 800970e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2204      	movs	r2, #4
 8009714:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009716:	4b03      	ldr	r3, [pc, #12]	@ (8009724 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000164 	.word	0x20000164

08009728 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d105      	bne.n	8009746 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	4907      	ldr	r1, [pc, #28]	@ (800975c <USBD_FS_ProductStrDescriptor+0x34>)
 800973e:	4808      	ldr	r0, [pc, #32]	@ (8009760 <USBD_FS_ProductStrDescriptor+0x38>)
 8009740:	f7ff fda1 	bl	8009286 <USBD_GetString>
 8009744:	e004      	b.n	8009750 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	4904      	ldr	r1, [pc, #16]	@ (800975c <USBD_FS_ProductStrDescriptor+0x34>)
 800974a:	4805      	ldr	r0, [pc, #20]	@ (8009760 <USBD_FS_ProductStrDescriptor+0x38>)
 800974c:	f7ff fd9b 	bl	8009286 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009750:	4b02      	ldr	r3, [pc, #8]	@ (800975c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000ff0 	.word	0x20000ff0
 8009760:	0800a7d8 	.word	0x0800a7d8

08009764 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009770:	683a      	ldr	r2, [r7, #0]
 8009772:	4904      	ldr	r1, [pc, #16]	@ (8009784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009774:	4804      	ldr	r0, [pc, #16]	@ (8009788 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009776:	f7ff fd86 	bl	8009286 <USBD_GetString>
  return USBD_StrDesc;
 800977a:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20000ff0 	.word	0x20000ff0
 8009788:	0800a7f0 	.word	0x0800a7f0

0800978c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	6039      	str	r1, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	221a      	movs	r2, #26
 800979c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800979e:	f000 f843 	bl	8009828 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097a2:	4b02      	ldr	r3, [pc, #8]	@ (80097ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000168 	.word	0x20000168

080097b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	6039      	str	r1, [r7, #0]
 80097ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d105      	bne.n	80097ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4907      	ldr	r1, [pc, #28]	@ (80097e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097c6:	4808      	ldr	r0, [pc, #32]	@ (80097e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097c8:	f7ff fd5d 	bl	8009286 <USBD_GetString>
 80097cc:	e004      	b.n	80097d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	4904      	ldr	r1, [pc, #16]	@ (80097e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097d2:	4805      	ldr	r0, [pc, #20]	@ (80097e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097d4:	f7ff fd57 	bl	8009286 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097d8:	4b02      	ldr	r3, [pc, #8]	@ (80097e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000ff0 	.word	0x20000ff0
 80097e8:	0800a804 	.word	0x0800a804

080097ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	6039      	str	r1, [r7, #0]
 80097f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d105      	bne.n	800980a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	4907      	ldr	r1, [pc, #28]	@ (8009820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009802:	4808      	ldr	r0, [pc, #32]	@ (8009824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009804:	f7ff fd3f 	bl	8009286 <USBD_GetString>
 8009808:	e004      	b.n	8009814 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4904      	ldr	r1, [pc, #16]	@ (8009820 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800980e:	4805      	ldr	r0, [pc, #20]	@ (8009824 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009810:	f7ff fd39 	bl	8009286 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009814:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000ff0 	.word	0x20000ff0
 8009824:	0800a810 	.word	0x0800a810

08009828 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800982e:	4b0f      	ldr	r3, [pc, #60]	@ (800986c <Get_SerialNum+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009834:	4b0e      	ldr	r3, [pc, #56]	@ (8009870 <Get_SerialNum+0x48>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800983a:	4b0e      	ldr	r3, [pc, #56]	@ (8009874 <Get_SerialNum+0x4c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4413      	add	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800984e:	2208      	movs	r2, #8
 8009850:	4909      	ldr	r1, [pc, #36]	@ (8009878 <Get_SerialNum+0x50>)
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 f814 	bl	8009880 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009858:	2204      	movs	r2, #4
 800985a:	4908      	ldr	r1, [pc, #32]	@ (800987c <Get_SerialNum+0x54>)
 800985c:	68b8      	ldr	r0, [r7, #8]
 800985e:	f000 f80f 	bl	8009880 <IntToUnicode>
  }
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	1ffff7e8 	.word	0x1ffff7e8
 8009870:	1ffff7ec 	.word	0x1ffff7ec
 8009874:	1ffff7f0 	.word	0x1ffff7f0
 8009878:	2000016a 	.word	0x2000016a
 800987c:	2000017a 	.word	0x2000017a

08009880 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	4613      	mov	r3, r2
 800988c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]
 8009896:	e027      	b.n	80098e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	0f1b      	lsrs	r3, r3, #28
 800989c:	2b09      	cmp	r3, #9
 800989e:	d80b      	bhi.n	80098b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	0f1b      	lsrs	r3, r3, #28
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	005b      	lsls	r3, r3, #1
 80098aa:	4619      	mov	r1, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	440b      	add	r3, r1
 80098b0:	3230      	adds	r2, #48	@ 0x30
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e00a      	b.n	80098ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	0f1b      	lsrs	r3, r3, #28
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	4619      	mov	r1, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	440b      	add	r3, r1
 80098c8:	3237      	adds	r2, #55	@ 0x37
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	3301      	adds	r3, #1
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	4413      	add	r3, r2
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	3301      	adds	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]
 80098e8:	7dfa      	ldrb	r2, [r7, #23]
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d3d3      	bcc.n	8009898 <IntToUnicode+0x18>
  }
}
 80098f0:	bf00      	nop
 80098f2:	bf00      	nop
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a0d      	ldr	r2, [pc, #52]	@ (8009940 <HAL_PCD_MspInit+0x44>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d113      	bne.n	8009936 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <HAL_PCD_MspInit+0x48>)
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	4a0c      	ldr	r2, [pc, #48]	@ (8009944 <HAL_PCD_MspInit+0x48>)
 8009914:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009918:	61d3      	str	r3, [r2, #28]
 800991a:	4b0a      	ldr	r3, [pc, #40]	@ (8009944 <HAL_PCD_MspInit+0x48>)
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009926:	2200      	movs	r2, #0
 8009928:	2100      	movs	r1, #0
 800992a:	2014      	movs	r0, #20
 800992c:	f7f8 f95d 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009930:	2014      	movs	r0, #20
 8009932:	f7f8 f976 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	40005c00 	.word	0x40005c00
 8009944:	40021000 	.word	0x40021000

08009948 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800995c:	4619      	mov	r1, r3
 800995e:	4610      	mov	r0, r2
 8009960:	f7fe fd63 	bl	800842a <USBD_LL_SetupStage>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	440b      	add	r3, r1
 800998c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	4619      	mov	r1, r3
 8009996:	f7fe fd95 	bl	80084c4 <USBD_LL_DataOutStage>
}
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80099b4:	78fa      	ldrb	r2, [r7, #3]
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	3324      	adds	r3, #36	@ 0x24
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	4619      	mov	r1, r3
 80099ca:	f7fe fdec 	bl	80085a6 <USBD_LL_DataInStage>
}
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7fe fefc 	bl	80087e2 <USBD_LL_SOF>
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099fa:	2301      	movs	r3, #1
 80099fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	799b      	ldrb	r3, [r3, #6]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d001      	beq.n	8009a0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a06:	f7f7 f94b 	bl	8000ca0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a10:	7bfa      	ldrb	r2, [r7, #15]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe feac 	bl	8008772 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fe65 	bl	80086f0 <USBD_LL_Reset>
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fea6 	bl	8008790 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7a9b      	ldrb	r3, [r3, #10]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a4c:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <HAL_PCD_SuspendCallback+0x30>)
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	4a03      	ldr	r2, [pc, #12]	@ (8009a60 <HAL_PCD_SuspendCallback+0x30>)
 8009a52:	f043 0306 	orr.w	r3, r3, #6
 8009a56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fea0 	bl	80087b8 <USBD_LL_Resume>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a88:	4a28      	ldr	r2, [pc, #160]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a26      	ldr	r2, [pc, #152]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009a94:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009a98:	4b24      	ldr	r3, [pc, #144]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009a9a:	4a25      	ldr	r2, [pc, #148]	@ (8009b30 <USBD_LL_Init+0xb0>)
 8009a9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a9e:	4b23      	ldr	r3, [pc, #140]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009aa4:	4b21      	ldr	r3, [pc, #132]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009aaa:	4b20      	ldr	r3, [pc, #128]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009abc:	481b      	ldr	r0, [pc, #108]	@ (8009b2c <USBD_LL_Init+0xac>)
 8009abe:	f7f8 fc6e 	bl	800239e <HAL_PCD_Init>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ac8:	f7f7 f8ea 	bl	8000ca0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ad2:	2318      	movs	r3, #24
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	f7fa f97f 	bl	8003dda <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ae2:	2358      	movs	r3, #88	@ 0x58
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2180      	movs	r1, #128	@ 0x80
 8009ae8:	f7fa f977 	bl	8003dda <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009af2:	23c0      	movs	r3, #192	@ 0xc0
 8009af4:	2200      	movs	r2, #0
 8009af6:	2181      	movs	r1, #129	@ 0x81
 8009af8:	f7fa f96f 	bl	8003dda <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b02:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009b06:	2200      	movs	r2, #0
 8009b08:	2101      	movs	r1, #1
 8009b0a:	f7fa f966 	bl	8003dda <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2182      	movs	r1, #130	@ 0x82
 8009b1c:	f7fa f95d 	bl	8003dda <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	200011f0 	.word	0x200011f0
 8009b30:	40005c00 	.word	0x40005c00

08009b34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f8 fd1d 	bl	800258a <HAL_PCD_Start>
 8009b50:	4603      	mov	r3, r0
 8009b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 f94e 	bl	8009df8 <USBD_Get_USB_Status>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	461a      	mov	r2, r3
 8009b78:	4603      	mov	r3, r0
 8009b7a:	70fb      	strb	r3, [r7, #3]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70bb      	strb	r3, [r7, #2]
 8009b80:	4613      	mov	r3, r2
 8009b82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b92:	78bb      	ldrb	r3, [r7, #2]
 8009b94:	883a      	ldrh	r2, [r7, #0]
 8009b96:	78f9      	ldrb	r1, [r7, #3]
 8009b98:	f7f8 fe71 	bl	800287e <HAL_PCD_EP_Open>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 f928 	bl	8009df8 <USBD_Get_USB_Status>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7f8 feaf 	bl	8002938 <HAL_PCD_EP_Close>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bde:	7bfb      	ldrb	r3, [r7, #15]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 f909 	bl	8009df8 <USBD_Get_USB_Status>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c0e:	78fa      	ldrb	r2, [r7, #3]
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7f8 ff57 	bl	8002ac6 <HAL_PCD_EP_SetStall>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 f8ea 	bl	8009df8 <USBD_Get_USB_Status>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c4c:	78fa      	ldrb	r2, [r7, #3]
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7f8 ff98 	bl	8002b86 <HAL_PCD_EP_ClrStall>
 8009c56:	4603      	mov	r3, r0
 8009c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 f8cb 	bl	8009df8 <USBD_Get_USB_Status>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	460b      	mov	r3, r1
 8009c7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	da0b      	bge.n	8009ca4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3312      	adds	r3, #18
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	e00b      	b.n	8009cbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ca4:	78fb      	ldrb	r3, [r7, #3]
 8009ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009caa:	68f9      	ldr	r1, [r7, #12]
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	440b      	add	r3, r1
 8009cb6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009cba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bc80      	pop	{r7}
 8009cc4:	4770      	bx	lr

08009cc6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7f8 fda6 	bl	8002836 <HAL_PCD_SetAddress>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f881 	bl	8009df8 <USBD_Get_USB_Status>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	460b      	mov	r3, r1
 8009d12:	72fb      	strb	r3, [r7, #11]
 8009d14:	4613      	mov	r3, r2
 8009d16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d26:	893b      	ldrh	r3, [r7, #8]
 8009d28:	7af9      	ldrb	r1, [r7, #11]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	f7f8 fe94 	bl	8002a58 <HAL_PCD_EP_Transmit>
 8009d30:	4603      	mov	r3, r0
 8009d32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f85e 	bl	8009df8 <USBD_Get_USB_Status>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d40:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	461a      	mov	r2, r3
 8009d56:	460b      	mov	r3, r1
 8009d58:	72fb      	strb	r3, [r7, #11]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d6c:	893b      	ldrh	r3, [r7, #8]
 8009d6e:	7af9      	ldrb	r1, [r7, #11]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	f7f8 fe29 	bl	80029c8 <HAL_PCD_EP_Receive>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 f83b 	bl	8009df8 <USBD_Get_USB_Status>
 8009d82:	4603      	mov	r3, r0
 8009d84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d86:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	460b      	mov	r3, r1
 8009d9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	4611      	mov	r1, r2
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f8 fe3f 	bl	8002a2a <HAL_PCD_EP_GetRxCount>
 8009dac:	4603      	mov	r3, r0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dc0:	4b02      	ldr	r3, [pc, #8]	@ (8009dcc <USBD_static_malloc+0x14>)
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bc80      	pop	{r7}
 8009dca:	4770      	bx	lr
 8009dcc:	200014c8 	.word	0x200014c8

08009dd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]

}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bc80      	pop	{r7}
 8009de0:	4770      	bx	lr

08009de2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	460b      	mov	r3, r1
 8009dec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009dee:	bf00      	nop
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr

08009df8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d817      	bhi.n	8009e3c <USBD_Get_USB_Status+0x44>
 8009e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e14 <USBD_Get_USB_Status+0x1c>)
 8009e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e12:	bf00      	nop
 8009e14:	08009e25 	.word	0x08009e25
 8009e18:	08009e2b 	.word	0x08009e2b
 8009e1c:	08009e31 	.word	0x08009e31
 8009e20:	08009e37 	.word	0x08009e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]
    break;
 8009e28:	e00b      	b.n	8009e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e2a:	2302      	movs	r3, #2
 8009e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2e:	e008      	b.n	8009e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e30:	2301      	movs	r3, #1
 8009e32:	73fb      	strb	r3, [r7, #15]
    break;
 8009e34:	e005      	b.n	8009e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e36:	2302      	movs	r3, #2
 8009e38:	73fb      	strb	r3, [r7, #15]
    break;
 8009e3a:	e002      	b.n	8009e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	bf00      	nop
  }
  return usb_status;
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop

08009e50 <siprintf>:
 8009e50:	b40e      	push	{r1, r2, r3}
 8009e52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e56:	b510      	push	{r4, lr}
 8009e58:	2400      	movs	r4, #0
 8009e5a:	b09d      	sub	sp, #116	@ 0x74
 8009e5c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009e5e:	9002      	str	r0, [sp, #8]
 8009e60:	9006      	str	r0, [sp, #24]
 8009e62:	9107      	str	r1, [sp, #28]
 8009e64:	9104      	str	r1, [sp, #16]
 8009e66:	4809      	ldr	r0, [pc, #36]	@ (8009e8c <siprintf+0x3c>)
 8009e68:	4909      	ldr	r1, [pc, #36]	@ (8009e90 <siprintf+0x40>)
 8009e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e6e:	9105      	str	r1, [sp, #20]
 8009e70:	6800      	ldr	r0, [r0, #0]
 8009e72:	a902      	add	r1, sp, #8
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009e78:	f000 f992 	bl	800a1a0 <_svfiprintf_r>
 8009e7c:	9b02      	ldr	r3, [sp, #8]
 8009e7e:	701c      	strb	r4, [r3, #0]
 8009e80:	b01d      	add	sp, #116	@ 0x74
 8009e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e86:	b003      	add	sp, #12
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	20000184 	.word	0x20000184
 8009e90:	ffff0208 	.word	0xffff0208

08009e94 <memset>:
 8009e94:	4603      	mov	r3, r0
 8009e96:	4402      	add	r2, r0
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d100      	bne.n	8009e9e <memset+0xa>
 8009e9c:	4770      	bx	lr
 8009e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea2:	e7f9      	b.n	8009e98 <memset+0x4>

08009ea4 <__errno>:
 8009ea4:	4b01      	ldr	r3, [pc, #4]	@ (8009eac <__errno+0x8>)
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	20000184 	.word	0x20000184

08009eb0 <__libc_init_array>:
 8009eb0:	b570      	push	{r4, r5, r6, lr}
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	4d0c      	ldr	r5, [pc, #48]	@ (8009ee8 <__libc_init_array+0x38>)
 8009eb6:	4c0d      	ldr	r4, [pc, #52]	@ (8009eec <__libc_init_array+0x3c>)
 8009eb8:	1b64      	subs	r4, r4, r5
 8009eba:	10a4      	asrs	r4, r4, #2
 8009ebc:	42a6      	cmp	r6, r4
 8009ebe:	d109      	bne.n	8009ed4 <__libc_init_array+0x24>
 8009ec0:	f000 fc76 	bl	800a7b0 <_init>
 8009ec4:	2600      	movs	r6, #0
 8009ec6:	4d0a      	ldr	r5, [pc, #40]	@ (8009ef0 <__libc_init_array+0x40>)
 8009ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8009ef4 <__libc_init_array+0x44>)
 8009eca:	1b64      	subs	r4, r4, r5
 8009ecc:	10a4      	asrs	r4, r4, #2
 8009ece:	42a6      	cmp	r6, r4
 8009ed0:	d105      	bne.n	8009ede <__libc_init_array+0x2e>
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ed8:	4798      	blx	r3
 8009eda:	3601      	adds	r6, #1
 8009edc:	e7ee      	b.n	8009ebc <__libc_init_array+0xc>
 8009ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee2:	4798      	blx	r3
 8009ee4:	3601      	adds	r6, #1
 8009ee6:	e7f2      	b.n	8009ece <__libc_init_array+0x1e>
 8009ee8:	0800a878 	.word	0x0800a878
 8009eec:	0800a878 	.word	0x0800a878
 8009ef0:	0800a878 	.word	0x0800a878
 8009ef4:	0800a87c 	.word	0x0800a87c

08009ef8 <__retarget_lock_acquire_recursive>:
 8009ef8:	4770      	bx	lr

08009efa <__retarget_lock_release_recursive>:
 8009efa:	4770      	bx	lr

08009efc <_free_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4605      	mov	r5, r0
 8009f00:	2900      	cmp	r1, #0
 8009f02:	d040      	beq.n	8009f86 <_free_r+0x8a>
 8009f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f08:	1f0c      	subs	r4, r1, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bfb8      	it	lt
 8009f0e:	18e4      	addlt	r4, r4, r3
 8009f10:	f000 f8de 	bl	800a0d0 <__malloc_lock>
 8009f14:	4a1c      	ldr	r2, [pc, #112]	@ (8009f88 <_free_r+0x8c>)
 8009f16:	6813      	ldr	r3, [r2, #0]
 8009f18:	b933      	cbnz	r3, 8009f28 <_free_r+0x2c>
 8009f1a:	6063      	str	r3, [r4, #4]
 8009f1c:	6014      	str	r4, [r2, #0]
 8009f1e:	4628      	mov	r0, r5
 8009f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f24:	f000 b8da 	b.w	800a0dc <__malloc_unlock>
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d908      	bls.n	8009f3e <_free_r+0x42>
 8009f2c:	6820      	ldr	r0, [r4, #0]
 8009f2e:	1821      	adds	r1, r4, r0
 8009f30:	428b      	cmp	r3, r1
 8009f32:	bf01      	itttt	eq
 8009f34:	6819      	ldreq	r1, [r3, #0]
 8009f36:	685b      	ldreq	r3, [r3, #4]
 8009f38:	1809      	addeq	r1, r1, r0
 8009f3a:	6021      	streq	r1, [r4, #0]
 8009f3c:	e7ed      	b.n	8009f1a <_free_r+0x1e>
 8009f3e:	461a      	mov	r2, r3
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	b10b      	cbz	r3, 8009f48 <_free_r+0x4c>
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d9fa      	bls.n	8009f3e <_free_r+0x42>
 8009f48:	6811      	ldr	r1, [r2, #0]
 8009f4a:	1850      	adds	r0, r2, r1
 8009f4c:	42a0      	cmp	r0, r4
 8009f4e:	d10b      	bne.n	8009f68 <_free_r+0x6c>
 8009f50:	6820      	ldr	r0, [r4, #0]
 8009f52:	4401      	add	r1, r0
 8009f54:	1850      	adds	r0, r2, r1
 8009f56:	4283      	cmp	r3, r0
 8009f58:	6011      	str	r1, [r2, #0]
 8009f5a:	d1e0      	bne.n	8009f1e <_free_r+0x22>
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	4408      	add	r0, r1
 8009f62:	6010      	str	r0, [r2, #0]
 8009f64:	6053      	str	r3, [r2, #4]
 8009f66:	e7da      	b.n	8009f1e <_free_r+0x22>
 8009f68:	d902      	bls.n	8009f70 <_free_r+0x74>
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	e7d6      	b.n	8009f1e <_free_r+0x22>
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	1821      	adds	r1, r4, r0
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf01      	itttt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	1809      	addeq	r1, r1, r0
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	6063      	str	r3, [r4, #4]
 8009f82:	6054      	str	r4, [r2, #4]
 8009f84:	e7cb      	b.n	8009f1e <_free_r+0x22>
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	2000182c 	.word	0x2000182c

08009f8c <sbrk_aligned>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fcc <sbrk_aligned+0x40>)
 8009f90:	460c      	mov	r4, r1
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	4605      	mov	r5, r0
 8009f96:	b911      	cbnz	r1, 8009f9e <sbrk_aligned+0x12>
 8009f98:	f000 fba8 	bl	800a6ec <_sbrk_r>
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 fba3 	bl	800a6ec <_sbrk_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d103      	bne.n	8009fb2 <sbrk_aligned+0x26>
 8009faa:	f04f 34ff 	mov.w	r4, #4294967295
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d0f8      	beq.n	8009fae <sbrk_aligned+0x22>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 fb94 	bl	800a6ec <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d1f2      	bne.n	8009fae <sbrk_aligned+0x22>
 8009fc8:	e7ef      	b.n	8009faa <sbrk_aligned+0x1e>
 8009fca:	bf00      	nop
 8009fcc:	20001828 	.word	0x20001828

08009fd0 <_malloc_r>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	1ccd      	adds	r5, r1, #3
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	db01      	blt.n	8009fec <_malloc_r+0x1c>
 8009fe8:	42a9      	cmp	r1, r5
 8009fea:	d904      	bls.n	8009ff6 <_malloc_r+0x26>
 8009fec:	230c      	movs	r3, #12
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0cc <_malloc_r+0xfc>
 8009ffa:	f000 f869 	bl	800a0d0 <__malloc_lock>
 8009ffe:	f8d8 3000 	ldr.w	r3, [r8]
 800a002:	461c      	mov	r4, r3
 800a004:	bb44      	cbnz	r4, 800a058 <_malloc_r+0x88>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbf 	bl	8009f8c <sbrk_aligned>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	4604      	mov	r4, r0
 800a012:	d158      	bne.n	800a0c6 <_malloc_r+0xf6>
 800a014:	f8d8 4000 	ldr.w	r4, [r8]
 800a018:	4627      	mov	r7, r4
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	d143      	bne.n	800a0a6 <_malloc_r+0xd6>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d04b      	beq.n	800a0ba <_malloc_r+0xea>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4639      	mov	r1, r7
 800a026:	4630      	mov	r0, r6
 800a028:	eb04 0903 	add.w	r9, r4, r3
 800a02c:	f000 fb5e 	bl	800a6ec <_sbrk_r>
 800a030:	4581      	cmp	r9, r0
 800a032:	d142      	bne.n	800a0ba <_malloc_r+0xea>
 800a034:	6821      	ldr	r1, [r4, #0]
 800a036:	4630      	mov	r0, r6
 800a038:	1a6d      	subs	r5, r5, r1
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7ff ffa6 	bl	8009f8c <sbrk_aligned>
 800a040:	3001      	adds	r0, #1
 800a042:	d03a      	beq.n	800a0ba <_malloc_r+0xea>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	442b      	add	r3, r5
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	f8d8 3000 	ldr.w	r3, [r8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	bb62      	cbnz	r2, 800a0ac <_malloc_r+0xdc>
 800a052:	f8c8 7000 	str.w	r7, [r8]
 800a056:	e00f      	b.n	800a078 <_malloc_r+0xa8>
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	1b52      	subs	r2, r2, r5
 800a05c:	d420      	bmi.n	800a0a0 <_malloc_r+0xd0>
 800a05e:	2a0b      	cmp	r2, #11
 800a060:	d917      	bls.n	800a092 <_malloc_r+0xc2>
 800a062:	1961      	adds	r1, r4, r5
 800a064:	42a3      	cmp	r3, r4
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	bf18      	it	ne
 800a06a:	6059      	strne	r1, [r3, #4]
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	bf08      	it	eq
 800a070:	f8c8 1000 	streq.w	r1, [r8]
 800a074:	5162      	str	r2, [r4, r5]
 800a076:	604b      	str	r3, [r1, #4]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f82f 	bl	800a0dc <__malloc_unlock>
 800a07e:	f104 000b 	add.w	r0, r4, #11
 800a082:	1d23      	adds	r3, r4, #4
 800a084:	f020 0007 	bic.w	r0, r0, #7
 800a088:	1ac2      	subs	r2, r0, r3
 800a08a:	bf1c      	itt	ne
 800a08c:	1a1b      	subne	r3, r3, r0
 800a08e:	50a3      	strne	r3, [r4, r2]
 800a090:	e7af      	b.n	8009ff2 <_malloc_r+0x22>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	42a3      	cmp	r3, r4
 800a096:	bf0c      	ite	eq
 800a098:	f8c8 2000 	streq.w	r2, [r8]
 800a09c:	605a      	strne	r2, [r3, #4]
 800a09e:	e7eb      	b.n	800a078 <_malloc_r+0xa8>
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	6864      	ldr	r4, [r4, #4]
 800a0a4:	e7ae      	b.n	800a004 <_malloc_r+0x34>
 800a0a6:	463c      	mov	r4, r7
 800a0a8:	687f      	ldr	r7, [r7, #4]
 800a0aa:	e7b6      	b.n	800a01a <_malloc_r+0x4a>
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	d1fb      	bne.n	800a0ac <_malloc_r+0xdc>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6053      	str	r3, [r2, #4]
 800a0b8:	e7de      	b.n	800a078 <_malloc_r+0xa8>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	4630      	mov	r0, r6
 800a0be:	6033      	str	r3, [r6, #0]
 800a0c0:	f000 f80c 	bl	800a0dc <__malloc_unlock>
 800a0c4:	e794      	b.n	8009ff0 <_malloc_r+0x20>
 800a0c6:	6005      	str	r5, [r0, #0]
 800a0c8:	e7d6      	b.n	800a078 <_malloc_r+0xa8>
 800a0ca:	bf00      	nop
 800a0cc:	2000182c 	.word	0x2000182c

0800a0d0 <__malloc_lock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__malloc_lock+0x8>)
 800a0d2:	f7ff bf11 	b.w	8009ef8 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20001824 	.word	0x20001824

0800a0dc <__malloc_unlock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_unlock+0x8>)
 800a0de:	f7ff bf0c 	b.w	8009efa <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20001824 	.word	0x20001824

0800a0e8 <__ssputs_r>:
 800a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	461f      	mov	r7, r3
 800a0ee:	688e      	ldr	r6, [r1, #8]
 800a0f0:	4682      	mov	sl, r0
 800a0f2:	42be      	cmp	r6, r7
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	4690      	mov	r8, r2
 800a0f8:	680b      	ldr	r3, [r1, #0]
 800a0fa:	d82d      	bhi.n	800a158 <__ssputs_r+0x70>
 800a0fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a104:	d026      	beq.n	800a154 <__ssputs_r+0x6c>
 800a106:	6965      	ldr	r5, [r4, #20]
 800a108:	6909      	ldr	r1, [r1, #16]
 800a10a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a10e:	eba3 0901 	sub.w	r9, r3, r1
 800a112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a116:	1c7b      	adds	r3, r7, #1
 800a118:	444b      	add	r3, r9
 800a11a:	106d      	asrs	r5, r5, #1
 800a11c:	429d      	cmp	r5, r3
 800a11e:	bf38      	it	cc
 800a120:	461d      	movcc	r5, r3
 800a122:	0553      	lsls	r3, r2, #21
 800a124:	d527      	bpl.n	800a176 <__ssputs_r+0x8e>
 800a126:	4629      	mov	r1, r5
 800a128:	f7ff ff52 	bl	8009fd0 <_malloc_r>
 800a12c:	4606      	mov	r6, r0
 800a12e:	b360      	cbz	r0, 800a18a <__ssputs_r+0xa2>
 800a130:	464a      	mov	r2, r9
 800a132:	6921      	ldr	r1, [r4, #16]
 800a134:	f000 faf8 	bl	800a728 <memcpy>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	6126      	str	r6, [r4, #16]
 800a146:	444e      	add	r6, r9
 800a148:	6026      	str	r6, [r4, #0]
 800a14a:	463e      	mov	r6, r7
 800a14c:	6165      	str	r5, [r4, #20]
 800a14e:	eba5 0509 	sub.w	r5, r5, r9
 800a152:	60a5      	str	r5, [r4, #8]
 800a154:	42be      	cmp	r6, r7
 800a156:	d900      	bls.n	800a15a <__ssputs_r+0x72>
 800a158:	463e      	mov	r6, r7
 800a15a:	4632      	mov	r2, r6
 800a15c:	4641      	mov	r1, r8
 800a15e:	6820      	ldr	r0, [r4, #0]
 800a160:	f000 faaa 	bl	800a6b8 <memmove>
 800a164:	2000      	movs	r0, #0
 800a166:	68a3      	ldr	r3, [r4, #8]
 800a168:	1b9b      	subs	r3, r3, r6
 800a16a:	60a3      	str	r3, [r4, #8]
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	4433      	add	r3, r6
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	462a      	mov	r2, r5
 800a178:	f000 fae4 	bl	800a744 <_realloc_r>
 800a17c:	4606      	mov	r6, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	d1e0      	bne.n	800a144 <__ssputs_r+0x5c>
 800a182:	4650      	mov	r0, sl
 800a184:	6921      	ldr	r1, [r4, #16]
 800a186:	f7ff feb9 	bl	8009efc <_free_r>
 800a18a:	230c      	movs	r3, #12
 800a18c:	f8ca 3000 	str.w	r3, [sl]
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f04f 30ff 	mov.w	r0, #4294967295
 800a196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	e7e9      	b.n	800a172 <__ssputs_r+0x8a>
	...

0800a1a0 <_svfiprintf_r>:
 800a1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a4:	4698      	mov	r8, r3
 800a1a6:	898b      	ldrh	r3, [r1, #12]
 800a1a8:	4607      	mov	r7, r0
 800a1aa:	061b      	lsls	r3, r3, #24
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	4614      	mov	r4, r2
 800a1b0:	b09d      	sub	sp, #116	@ 0x74
 800a1b2:	d510      	bpl.n	800a1d6 <_svfiprintf_r+0x36>
 800a1b4:	690b      	ldr	r3, [r1, #16]
 800a1b6:	b973      	cbnz	r3, 800a1d6 <_svfiprintf_r+0x36>
 800a1b8:	2140      	movs	r1, #64	@ 0x40
 800a1ba:	f7ff ff09 	bl	8009fd0 <_malloc_r>
 800a1be:	6028      	str	r0, [r5, #0]
 800a1c0:	6128      	str	r0, [r5, #16]
 800a1c2:	b930      	cbnz	r0, 800a1d2 <_svfiprintf_r+0x32>
 800a1c4:	230c      	movs	r3, #12
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	b01d      	add	sp, #116	@ 0x74
 800a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d2:	2340      	movs	r3, #64	@ 0x40
 800a1d4:	616b      	str	r3, [r5, #20]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1da:	2320      	movs	r3, #32
 800a1dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1e0:	2330      	movs	r3, #48	@ 0x30
 800a1e2:	f04f 0901 	mov.w	r9, #1
 800a1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a384 <_svfiprintf_r+0x1e4>
 800a1ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	469a      	mov	sl, r3
 800a1f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fa:	b10a      	cbz	r2, 800a200 <_svfiprintf_r+0x60>
 800a1fc:	2a25      	cmp	r2, #37	@ 0x25
 800a1fe:	d1f9      	bne.n	800a1f4 <_svfiprintf_r+0x54>
 800a200:	ebba 0b04 	subs.w	fp, sl, r4
 800a204:	d00b      	beq.n	800a21e <_svfiprintf_r+0x7e>
 800a206:	465b      	mov	r3, fp
 800a208:	4622      	mov	r2, r4
 800a20a:	4629      	mov	r1, r5
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7ff ff6b 	bl	800a0e8 <__ssputs_r>
 800a212:	3001      	adds	r0, #1
 800a214:	f000 80a7 	beq.w	800a366 <_svfiprintf_r+0x1c6>
 800a218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a21a:	445a      	add	r2, fp
 800a21c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a21e:	f89a 3000 	ldrb.w	r3, [sl]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 809f 	beq.w	800a366 <_svfiprintf_r+0x1c6>
 800a228:	2300      	movs	r3, #0
 800a22a:	f04f 32ff 	mov.w	r2, #4294967295
 800a22e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a232:	f10a 0a01 	add.w	sl, sl, #1
 800a236:	9304      	str	r3, [sp, #16]
 800a238:	9307      	str	r3, [sp, #28]
 800a23a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a23e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a240:	4654      	mov	r4, sl
 800a242:	2205      	movs	r2, #5
 800a244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a248:	484e      	ldr	r0, [pc, #312]	@ (800a384 <_svfiprintf_r+0x1e4>)
 800a24a:	f000 fa5f 	bl	800a70c <memchr>
 800a24e:	9a04      	ldr	r2, [sp, #16]
 800a250:	b9d8      	cbnz	r0, 800a28a <_svfiprintf_r+0xea>
 800a252:	06d0      	lsls	r0, r2, #27
 800a254:	bf44      	itt	mi
 800a256:	2320      	movmi	r3, #32
 800a258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a25c:	0711      	lsls	r1, r2, #28
 800a25e:	bf44      	itt	mi
 800a260:	232b      	movmi	r3, #43	@ 0x2b
 800a262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a266:	f89a 3000 	ldrb.w	r3, [sl]
 800a26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a26c:	d015      	beq.n	800a29a <_svfiprintf_r+0xfa>
 800a26e:	4654      	mov	r4, sl
 800a270:	2000      	movs	r0, #0
 800a272:	f04f 0c0a 	mov.w	ip, #10
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	4621      	mov	r1, r4
 800a27a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a27e:	3b30      	subs	r3, #48	@ 0x30
 800a280:	2b09      	cmp	r3, #9
 800a282:	d94b      	bls.n	800a31c <_svfiprintf_r+0x17c>
 800a284:	b1b0      	cbz	r0, 800a2b4 <_svfiprintf_r+0x114>
 800a286:	9207      	str	r2, [sp, #28]
 800a288:	e014      	b.n	800a2b4 <_svfiprintf_r+0x114>
 800a28a:	eba0 0308 	sub.w	r3, r0, r8
 800a28e:	fa09 f303 	lsl.w	r3, r9, r3
 800a292:	4313      	orrs	r3, r2
 800a294:	46a2      	mov	sl, r4
 800a296:	9304      	str	r3, [sp, #16]
 800a298:	e7d2      	b.n	800a240 <_svfiprintf_r+0xa0>
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	1d19      	adds	r1, r3, #4
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	9103      	str	r1, [sp, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	bfbb      	ittet	lt
 800a2a6:	425b      	neglt	r3, r3
 800a2a8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ac:	9307      	strge	r3, [sp, #28]
 800a2ae:	9307      	strlt	r3, [sp, #28]
 800a2b0:	bfb8      	it	lt
 800a2b2:	9204      	strlt	r2, [sp, #16]
 800a2b4:	7823      	ldrb	r3, [r4, #0]
 800a2b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2b8:	d10a      	bne.n	800a2d0 <_svfiprintf_r+0x130>
 800a2ba:	7863      	ldrb	r3, [r4, #1]
 800a2bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2be:	d132      	bne.n	800a326 <_svfiprintf_r+0x186>
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	3402      	adds	r4, #2
 800a2c4:	1d1a      	adds	r2, r3, #4
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	9203      	str	r2, [sp, #12]
 800a2ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2ce:	9305      	str	r3, [sp, #20]
 800a2d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a388 <_svfiprintf_r+0x1e8>
 800a2d4:	2203      	movs	r2, #3
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	7821      	ldrb	r1, [r4, #0]
 800a2da:	f000 fa17 	bl	800a70c <memchr>
 800a2de:	b138      	cbz	r0, 800a2f0 <_svfiprintf_r+0x150>
 800a2e0:	2240      	movs	r2, #64	@ 0x40
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	eba0 000a 	sub.w	r0, r0, sl
 800a2e8:	4082      	lsls	r2, r0
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	3401      	adds	r4, #1
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	2206      	movs	r2, #6
 800a2f6:	4825      	ldr	r0, [pc, #148]	@ (800a38c <_svfiprintf_r+0x1ec>)
 800a2f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2fc:	f000 fa06 	bl	800a70c <memchr>
 800a300:	2800      	cmp	r0, #0
 800a302:	d036      	beq.n	800a372 <_svfiprintf_r+0x1d2>
 800a304:	4b22      	ldr	r3, [pc, #136]	@ (800a390 <_svfiprintf_r+0x1f0>)
 800a306:	bb1b      	cbnz	r3, 800a350 <_svfiprintf_r+0x1b0>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	3307      	adds	r3, #7
 800a30c:	f023 0307 	bic.w	r3, r3, #7
 800a310:	3308      	adds	r3, #8
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a316:	4433      	add	r3, r6
 800a318:	9309      	str	r3, [sp, #36]	@ 0x24
 800a31a:	e76a      	b.n	800a1f2 <_svfiprintf_r+0x52>
 800a31c:	460c      	mov	r4, r1
 800a31e:	2001      	movs	r0, #1
 800a320:	fb0c 3202 	mla	r2, ip, r2, r3
 800a324:	e7a8      	b.n	800a278 <_svfiprintf_r+0xd8>
 800a326:	2300      	movs	r3, #0
 800a328:	f04f 0c0a 	mov.w	ip, #10
 800a32c:	4619      	mov	r1, r3
 800a32e:	3401      	adds	r4, #1
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	4620      	mov	r0, r4
 800a334:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a338:	3a30      	subs	r2, #48	@ 0x30
 800a33a:	2a09      	cmp	r2, #9
 800a33c:	d903      	bls.n	800a346 <_svfiprintf_r+0x1a6>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0c6      	beq.n	800a2d0 <_svfiprintf_r+0x130>
 800a342:	9105      	str	r1, [sp, #20]
 800a344:	e7c4      	b.n	800a2d0 <_svfiprintf_r+0x130>
 800a346:	4604      	mov	r4, r0
 800a348:	2301      	movs	r3, #1
 800a34a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a34e:	e7f0      	b.n	800a332 <_svfiprintf_r+0x192>
 800a350:	ab03      	add	r3, sp, #12
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	462a      	mov	r2, r5
 800a356:	4638      	mov	r0, r7
 800a358:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <_svfiprintf_r+0x1f4>)
 800a35a:	a904      	add	r1, sp, #16
 800a35c:	f3af 8000 	nop.w
 800a360:	1c42      	adds	r2, r0, #1
 800a362:	4606      	mov	r6, r0
 800a364:	d1d6      	bne.n	800a314 <_svfiprintf_r+0x174>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	065b      	lsls	r3, r3, #25
 800a36a:	f53f af2d 	bmi.w	800a1c8 <_svfiprintf_r+0x28>
 800a36e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a370:	e72c      	b.n	800a1cc <_svfiprintf_r+0x2c>
 800a372:	ab03      	add	r3, sp, #12
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	462a      	mov	r2, r5
 800a378:	4638      	mov	r0, r7
 800a37a:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <_svfiprintf_r+0x1f4>)
 800a37c:	a904      	add	r1, sp, #16
 800a37e:	f000 f87d 	bl	800a47c <_printf_i>
 800a382:	e7ed      	b.n	800a360 <_svfiprintf_r+0x1c0>
 800a384:	0800a842 	.word	0x0800a842
 800a388:	0800a848 	.word	0x0800a848
 800a38c:	0800a84c 	.word	0x0800a84c
 800a390:	00000000 	.word	0x00000000
 800a394:	0800a0e9 	.word	0x0800a0e9

0800a398 <_printf_common>:
 800a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a39c:	4616      	mov	r6, r2
 800a39e:	4698      	mov	r8, r3
 800a3a0:	688a      	ldr	r2, [r1, #8]
 800a3a2:	690b      	ldr	r3, [r1, #16]
 800a3a4:	4607      	mov	r7, r0
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	bfb8      	it	lt
 800a3aa:	4613      	movlt	r3, r2
 800a3ac:	6033      	str	r3, [r6, #0]
 800a3ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3b8:	b10a      	cbz	r2, 800a3be <_printf_common+0x26>
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	6033      	str	r3, [r6, #0]
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	0699      	lsls	r1, r3, #26
 800a3c2:	bf42      	ittt	mi
 800a3c4:	6833      	ldrmi	r3, [r6, #0]
 800a3c6:	3302      	addmi	r3, #2
 800a3c8:	6033      	strmi	r3, [r6, #0]
 800a3ca:	6825      	ldr	r5, [r4, #0]
 800a3cc:	f015 0506 	ands.w	r5, r5, #6
 800a3d0:	d106      	bne.n	800a3e0 <_printf_common+0x48>
 800a3d2:	f104 0a19 	add.w	sl, r4, #25
 800a3d6:	68e3      	ldr	r3, [r4, #12]
 800a3d8:	6832      	ldr	r2, [r6, #0]
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	42ab      	cmp	r3, r5
 800a3de:	dc2b      	bgt.n	800a438 <_printf_common+0xa0>
 800a3e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3e4:	6822      	ldr	r2, [r4, #0]
 800a3e6:	3b00      	subs	r3, #0
 800a3e8:	bf18      	it	ne
 800a3ea:	2301      	movne	r3, #1
 800a3ec:	0692      	lsls	r2, r2, #26
 800a3ee:	d430      	bmi.n	800a452 <_printf_common+0xba>
 800a3f0:	4641      	mov	r1, r8
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3f8:	47c8      	blx	r9
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d023      	beq.n	800a446 <_printf_common+0xae>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	6922      	ldr	r2, [r4, #16]
 800a402:	f003 0306 	and.w	r3, r3, #6
 800a406:	2b04      	cmp	r3, #4
 800a408:	bf14      	ite	ne
 800a40a:	2500      	movne	r5, #0
 800a40c:	6833      	ldreq	r3, [r6, #0]
 800a40e:	f04f 0600 	mov.w	r6, #0
 800a412:	bf08      	it	eq
 800a414:	68e5      	ldreq	r5, [r4, #12]
 800a416:	f104 041a 	add.w	r4, r4, #26
 800a41a:	bf08      	it	eq
 800a41c:	1aed      	subeq	r5, r5, r3
 800a41e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a422:	bf08      	it	eq
 800a424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a428:	4293      	cmp	r3, r2
 800a42a:	bfc4      	itt	gt
 800a42c:	1a9b      	subgt	r3, r3, r2
 800a42e:	18ed      	addgt	r5, r5, r3
 800a430:	42b5      	cmp	r5, r6
 800a432:	d11a      	bne.n	800a46a <_printf_common+0xd2>
 800a434:	2000      	movs	r0, #0
 800a436:	e008      	b.n	800a44a <_printf_common+0xb2>
 800a438:	2301      	movs	r3, #1
 800a43a:	4652      	mov	r2, sl
 800a43c:	4641      	mov	r1, r8
 800a43e:	4638      	mov	r0, r7
 800a440:	47c8      	blx	r9
 800a442:	3001      	adds	r0, #1
 800a444:	d103      	bne.n	800a44e <_printf_common+0xb6>
 800a446:	f04f 30ff 	mov.w	r0, #4294967295
 800a44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44e:	3501      	adds	r5, #1
 800a450:	e7c1      	b.n	800a3d6 <_printf_common+0x3e>
 800a452:	2030      	movs	r0, #48	@ 0x30
 800a454:	18e1      	adds	r1, r4, r3
 800a456:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a460:	4422      	add	r2, r4
 800a462:	3302      	adds	r3, #2
 800a464:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a468:	e7c2      	b.n	800a3f0 <_printf_common+0x58>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4622      	mov	r2, r4
 800a46e:	4641      	mov	r1, r8
 800a470:	4638      	mov	r0, r7
 800a472:	47c8      	blx	r9
 800a474:	3001      	adds	r0, #1
 800a476:	d0e6      	beq.n	800a446 <_printf_common+0xae>
 800a478:	3601      	adds	r6, #1
 800a47a:	e7d9      	b.n	800a430 <_printf_common+0x98>

0800a47c <_printf_i>:
 800a47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	7e0f      	ldrb	r7, [r1, #24]
 800a482:	4691      	mov	r9, r2
 800a484:	2f78      	cmp	r7, #120	@ 0x78
 800a486:	4680      	mov	r8, r0
 800a488:	460c      	mov	r4, r1
 800a48a:	469a      	mov	sl, r3
 800a48c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a48e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a492:	d807      	bhi.n	800a4a4 <_printf_i+0x28>
 800a494:	2f62      	cmp	r7, #98	@ 0x62
 800a496:	d80a      	bhi.n	800a4ae <_printf_i+0x32>
 800a498:	2f00      	cmp	r7, #0
 800a49a:	f000 80d1 	beq.w	800a640 <_printf_i+0x1c4>
 800a49e:	2f58      	cmp	r7, #88	@ 0x58
 800a4a0:	f000 80b8 	beq.w	800a614 <_printf_i+0x198>
 800a4a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4ac:	e03a      	b.n	800a524 <_printf_i+0xa8>
 800a4ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4b2:	2b15      	cmp	r3, #21
 800a4b4:	d8f6      	bhi.n	800a4a4 <_printf_i+0x28>
 800a4b6:	a101      	add	r1, pc, #4	@ (adr r1, 800a4bc <_printf_i+0x40>)
 800a4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4bc:	0800a515 	.word	0x0800a515
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a4a5 	.word	0x0800a4a5
 800a4c8:	0800a4a5 	.word	0x0800a4a5
 800a4cc:	0800a4a5 	.word	0x0800a4a5
 800a4d0:	0800a4a5 	.word	0x0800a4a5
 800a4d4:	0800a529 	.word	0x0800a529
 800a4d8:	0800a4a5 	.word	0x0800a4a5
 800a4dc:	0800a4a5 	.word	0x0800a4a5
 800a4e0:	0800a4a5 	.word	0x0800a4a5
 800a4e4:	0800a4a5 	.word	0x0800a4a5
 800a4e8:	0800a627 	.word	0x0800a627
 800a4ec:	0800a553 	.word	0x0800a553
 800a4f0:	0800a5e1 	.word	0x0800a5e1
 800a4f4:	0800a4a5 	.word	0x0800a4a5
 800a4f8:	0800a4a5 	.word	0x0800a4a5
 800a4fc:	0800a649 	.word	0x0800a649
 800a500:	0800a4a5 	.word	0x0800a4a5
 800a504:	0800a553 	.word	0x0800a553
 800a508:	0800a4a5 	.word	0x0800a4a5
 800a50c:	0800a4a5 	.word	0x0800a4a5
 800a510:	0800a5e9 	.word	0x0800a5e9
 800a514:	6833      	ldr	r3, [r6, #0]
 800a516:	1d1a      	adds	r2, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6032      	str	r2, [r6, #0]
 800a51c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a520:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a524:	2301      	movs	r3, #1
 800a526:	e09c      	b.n	800a662 <_printf_i+0x1e6>
 800a528:	6833      	ldr	r3, [r6, #0]
 800a52a:	6820      	ldr	r0, [r4, #0]
 800a52c:	1d19      	adds	r1, r3, #4
 800a52e:	6031      	str	r1, [r6, #0]
 800a530:	0606      	lsls	r6, r0, #24
 800a532:	d501      	bpl.n	800a538 <_printf_i+0xbc>
 800a534:	681d      	ldr	r5, [r3, #0]
 800a536:	e003      	b.n	800a540 <_printf_i+0xc4>
 800a538:	0645      	lsls	r5, r0, #25
 800a53a:	d5fb      	bpl.n	800a534 <_printf_i+0xb8>
 800a53c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a540:	2d00      	cmp	r5, #0
 800a542:	da03      	bge.n	800a54c <_printf_i+0xd0>
 800a544:	232d      	movs	r3, #45	@ 0x2d
 800a546:	426d      	negs	r5, r5
 800a548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a54c:	230a      	movs	r3, #10
 800a54e:	4858      	ldr	r0, [pc, #352]	@ (800a6b0 <_printf_i+0x234>)
 800a550:	e011      	b.n	800a576 <_printf_i+0xfa>
 800a552:	6821      	ldr	r1, [r4, #0]
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	0608      	lsls	r0, r1, #24
 800a558:	f853 5b04 	ldr.w	r5, [r3], #4
 800a55c:	d402      	bmi.n	800a564 <_printf_i+0xe8>
 800a55e:	0649      	lsls	r1, r1, #25
 800a560:	bf48      	it	mi
 800a562:	b2ad      	uxthmi	r5, r5
 800a564:	2f6f      	cmp	r7, #111	@ 0x6f
 800a566:	6033      	str	r3, [r6, #0]
 800a568:	bf14      	ite	ne
 800a56a:	230a      	movne	r3, #10
 800a56c:	2308      	moveq	r3, #8
 800a56e:	4850      	ldr	r0, [pc, #320]	@ (800a6b0 <_printf_i+0x234>)
 800a570:	2100      	movs	r1, #0
 800a572:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a576:	6866      	ldr	r6, [r4, #4]
 800a578:	2e00      	cmp	r6, #0
 800a57a:	60a6      	str	r6, [r4, #8]
 800a57c:	db05      	blt.n	800a58a <_printf_i+0x10e>
 800a57e:	6821      	ldr	r1, [r4, #0]
 800a580:	432e      	orrs	r6, r5
 800a582:	f021 0104 	bic.w	r1, r1, #4
 800a586:	6021      	str	r1, [r4, #0]
 800a588:	d04b      	beq.n	800a622 <_printf_i+0x1a6>
 800a58a:	4616      	mov	r6, r2
 800a58c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a590:	fb03 5711 	mls	r7, r3, r1, r5
 800a594:	5dc7      	ldrb	r7, [r0, r7]
 800a596:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a59a:	462f      	mov	r7, r5
 800a59c:	42bb      	cmp	r3, r7
 800a59e:	460d      	mov	r5, r1
 800a5a0:	d9f4      	bls.n	800a58c <_printf_i+0x110>
 800a5a2:	2b08      	cmp	r3, #8
 800a5a4:	d10b      	bne.n	800a5be <_printf_i+0x142>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	07df      	lsls	r7, r3, #31
 800a5aa:	d508      	bpl.n	800a5be <_printf_i+0x142>
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	6861      	ldr	r1, [r4, #4]
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	bfde      	ittt	le
 800a5b4:	2330      	movle	r3, #48	@ 0x30
 800a5b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5be:	1b92      	subs	r2, r2, r6
 800a5c0:	6122      	str	r2, [r4, #16]
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	f8cd a000 	str.w	sl, [sp]
 800a5cc:	aa03      	add	r2, sp, #12
 800a5ce:	f7ff fee3 	bl	800a398 <_printf_common>
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	d14a      	bne.n	800a66c <_printf_i+0x1f0>
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5da:	b004      	add	sp, #16
 800a5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	f043 0320 	orr.w	r3, r3, #32
 800a5e6:	6023      	str	r3, [r4, #0]
 800a5e8:	2778      	movs	r7, #120	@ 0x78
 800a5ea:	4832      	ldr	r0, [pc, #200]	@ (800a6b4 <_printf_i+0x238>)
 800a5ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	6831      	ldr	r1, [r6, #0]
 800a5f4:	061f      	lsls	r7, r3, #24
 800a5f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5fa:	d402      	bmi.n	800a602 <_printf_i+0x186>
 800a5fc:	065f      	lsls	r7, r3, #25
 800a5fe:	bf48      	it	mi
 800a600:	b2ad      	uxthmi	r5, r5
 800a602:	6031      	str	r1, [r6, #0]
 800a604:	07d9      	lsls	r1, r3, #31
 800a606:	bf44      	itt	mi
 800a608:	f043 0320 	orrmi.w	r3, r3, #32
 800a60c:	6023      	strmi	r3, [r4, #0]
 800a60e:	b11d      	cbz	r5, 800a618 <_printf_i+0x19c>
 800a610:	2310      	movs	r3, #16
 800a612:	e7ad      	b.n	800a570 <_printf_i+0xf4>
 800a614:	4826      	ldr	r0, [pc, #152]	@ (800a6b0 <_printf_i+0x234>)
 800a616:	e7e9      	b.n	800a5ec <_printf_i+0x170>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	f023 0320 	bic.w	r3, r3, #32
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	e7f6      	b.n	800a610 <_printf_i+0x194>
 800a622:	4616      	mov	r6, r2
 800a624:	e7bd      	b.n	800a5a2 <_printf_i+0x126>
 800a626:	6833      	ldr	r3, [r6, #0]
 800a628:	6825      	ldr	r5, [r4, #0]
 800a62a:	1d18      	adds	r0, r3, #4
 800a62c:	6961      	ldr	r1, [r4, #20]
 800a62e:	6030      	str	r0, [r6, #0]
 800a630:	062e      	lsls	r6, r5, #24
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	d501      	bpl.n	800a63a <_printf_i+0x1be>
 800a636:	6019      	str	r1, [r3, #0]
 800a638:	e002      	b.n	800a640 <_printf_i+0x1c4>
 800a63a:	0668      	lsls	r0, r5, #25
 800a63c:	d5fb      	bpl.n	800a636 <_printf_i+0x1ba>
 800a63e:	8019      	strh	r1, [r3, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	4616      	mov	r6, r2
 800a644:	6123      	str	r3, [r4, #16]
 800a646:	e7bc      	b.n	800a5c2 <_printf_i+0x146>
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	2100      	movs	r1, #0
 800a64c:	1d1a      	adds	r2, r3, #4
 800a64e:	6032      	str	r2, [r6, #0]
 800a650:	681e      	ldr	r6, [r3, #0]
 800a652:	6862      	ldr	r2, [r4, #4]
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f859 	bl	800a70c <memchr>
 800a65a:	b108      	cbz	r0, 800a660 <_printf_i+0x1e4>
 800a65c:	1b80      	subs	r0, r0, r6
 800a65e:	6060      	str	r0, [r4, #4]
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	2300      	movs	r3, #0
 800a666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a66a:	e7aa      	b.n	800a5c2 <_printf_i+0x146>
 800a66c:	4632      	mov	r2, r6
 800a66e:	4649      	mov	r1, r9
 800a670:	4640      	mov	r0, r8
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	47d0      	blx	sl
 800a676:	3001      	adds	r0, #1
 800a678:	d0ad      	beq.n	800a5d6 <_printf_i+0x15a>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	079b      	lsls	r3, r3, #30
 800a67e:	d413      	bmi.n	800a6a8 <_printf_i+0x22c>
 800a680:	68e0      	ldr	r0, [r4, #12]
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	4298      	cmp	r0, r3
 800a686:	bfb8      	it	lt
 800a688:	4618      	movlt	r0, r3
 800a68a:	e7a6      	b.n	800a5da <_printf_i+0x15e>
 800a68c:	2301      	movs	r3, #1
 800a68e:	4632      	mov	r2, r6
 800a690:	4649      	mov	r1, r9
 800a692:	4640      	mov	r0, r8
 800a694:	47d0      	blx	sl
 800a696:	3001      	adds	r0, #1
 800a698:	d09d      	beq.n	800a5d6 <_printf_i+0x15a>
 800a69a:	3501      	adds	r5, #1
 800a69c:	68e3      	ldr	r3, [r4, #12]
 800a69e:	9903      	ldr	r1, [sp, #12]
 800a6a0:	1a5b      	subs	r3, r3, r1
 800a6a2:	42ab      	cmp	r3, r5
 800a6a4:	dcf2      	bgt.n	800a68c <_printf_i+0x210>
 800a6a6:	e7eb      	b.n	800a680 <_printf_i+0x204>
 800a6a8:	2500      	movs	r5, #0
 800a6aa:	f104 0619 	add.w	r6, r4, #25
 800a6ae:	e7f5      	b.n	800a69c <_printf_i+0x220>
 800a6b0:	0800a853 	.word	0x0800a853
 800a6b4:	0800a864 	.word	0x0800a864

0800a6b8 <memmove>:
 800a6b8:	4288      	cmp	r0, r1
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	eb01 0402 	add.w	r4, r1, r2
 800a6c0:	d902      	bls.n	800a6c8 <memmove+0x10>
 800a6c2:	4284      	cmp	r4, r0
 800a6c4:	4623      	mov	r3, r4
 800a6c6:	d807      	bhi.n	800a6d8 <memmove+0x20>
 800a6c8:	1e43      	subs	r3, r0, #1
 800a6ca:	42a1      	cmp	r1, r4
 800a6cc:	d008      	beq.n	800a6e0 <memmove+0x28>
 800a6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6d6:	e7f8      	b.n	800a6ca <memmove+0x12>
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4402      	add	r2, r0
 800a6dc:	428a      	cmp	r2, r1
 800a6de:	d100      	bne.n	800a6e2 <memmove+0x2a>
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ea:	e7f7      	b.n	800a6dc <memmove+0x24>

0800a6ec <_sbrk_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4d05      	ldr	r5, [pc, #20]	@ (800a708 <_sbrk_r+0x1c>)
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	f7f6 fc4a 	bl	8000f90 <_sbrk>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_sbrk_r+0x1a>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_sbrk_r+0x1a>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20001820 	.word	0x20001820

0800a70c <memchr>:
 800a70c:	4603      	mov	r3, r0
 800a70e:	b510      	push	{r4, lr}
 800a710:	b2c9      	uxtb	r1, r1
 800a712:	4402      	add	r2, r0
 800a714:	4293      	cmp	r3, r2
 800a716:	4618      	mov	r0, r3
 800a718:	d101      	bne.n	800a71e <memchr+0x12>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e003      	b.n	800a726 <memchr+0x1a>
 800a71e:	7804      	ldrb	r4, [r0, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	428c      	cmp	r4, r1
 800a724:	d1f6      	bne.n	800a714 <memchr+0x8>
 800a726:	bd10      	pop	{r4, pc}

0800a728 <memcpy>:
 800a728:	440a      	add	r2, r1
 800a72a:	4291      	cmp	r1, r2
 800a72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a730:	d100      	bne.n	800a734 <memcpy+0xc>
 800a732:	4770      	bx	lr
 800a734:	b510      	push	{r4, lr}
 800a736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a73a:	4291      	cmp	r1, r2
 800a73c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a740:	d1f9      	bne.n	800a736 <memcpy+0xe>
 800a742:	bd10      	pop	{r4, pc}

0800a744 <_realloc_r>:
 800a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a748:	4607      	mov	r7, r0
 800a74a:	4614      	mov	r4, r2
 800a74c:	460d      	mov	r5, r1
 800a74e:	b921      	cbnz	r1, 800a75a <_realloc_r+0x16>
 800a750:	4611      	mov	r1, r2
 800a752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a756:	f7ff bc3b 	b.w	8009fd0 <_malloc_r>
 800a75a:	b92a      	cbnz	r2, 800a768 <_realloc_r+0x24>
 800a75c:	f7ff fbce 	bl	8009efc <_free_r>
 800a760:	4625      	mov	r5, r4
 800a762:	4628      	mov	r0, r5
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	f000 f81a 	bl	800a7a0 <_malloc_usable_size_r>
 800a76c:	4284      	cmp	r4, r0
 800a76e:	4606      	mov	r6, r0
 800a770:	d802      	bhi.n	800a778 <_realloc_r+0x34>
 800a772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a776:	d8f4      	bhi.n	800a762 <_realloc_r+0x1e>
 800a778:	4621      	mov	r1, r4
 800a77a:	4638      	mov	r0, r7
 800a77c:	f7ff fc28 	bl	8009fd0 <_malloc_r>
 800a780:	4680      	mov	r8, r0
 800a782:	b908      	cbnz	r0, 800a788 <_realloc_r+0x44>
 800a784:	4645      	mov	r5, r8
 800a786:	e7ec      	b.n	800a762 <_realloc_r+0x1e>
 800a788:	42b4      	cmp	r4, r6
 800a78a:	4622      	mov	r2, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	bf28      	it	cs
 800a790:	4632      	movcs	r2, r6
 800a792:	f7ff ffc9 	bl	800a728 <memcpy>
 800a796:	4629      	mov	r1, r5
 800a798:	4638      	mov	r0, r7
 800a79a:	f7ff fbaf 	bl	8009efc <_free_r>
 800a79e:	e7f1      	b.n	800a784 <_realloc_r+0x40>

0800a7a0 <_malloc_usable_size_r>:
 800a7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a4:	1f18      	subs	r0, r3, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfbc      	itt	lt
 800a7aa:	580b      	ldrlt	r3, [r1, r0]
 800a7ac:	18c0      	addlt	r0, r0, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
