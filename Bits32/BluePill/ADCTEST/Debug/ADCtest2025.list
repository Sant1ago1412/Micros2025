
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e18  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009f24  08009f24  0000af24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd4  08009fd4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009fd4  08009fd4  0000b1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009fd4  08009fd4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fd8  08009fd8  0000afd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009fdc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001610  200001d4  0800a1b0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  0800a1b0  0000b7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ed5  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038be  00000000  00000000  0001f0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00022990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de3  00000000  00000000  00023bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afd9  00000000  00000000  000249bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171e7  00000000  00000000  0003f994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927b4  00000000  00000000  00056b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e932f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  000e9374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000ee370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009f0c 	.word	0x08009f0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	08009f0c 	.word	0x08009f0c

0800014c <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint8_t u=0;
 8000154:	2300      	movs	r3, #0
 8000156:	77fb      	strb	r3, [r7, #31]
	char palabra[18];
	for(u=0;u<NUM_CHANNELS;u++){
 8000158:	2300      	movs	r3, #0
 800015a:	77fb      	strb	r3, [r7, #31]
 800015c:	e019      	b.n	8000192 <HAL_ADC_ConvCpltCallback+0x46>
		casts.u16[0]=adcBuffer[u];
 800015e:	7ffb      	ldrb	r3, [r7, #31]
 8000160:	4a12      	ldr	r2, [pc, #72]	@ (80001ac <HAL_ADC_ConvCpltCallback+0x60>)
 8000162:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000166:	4b12      	ldr	r3, [pc, #72]	@ (80001b0 <HAL_ADC_ConvCpltCallback+0x64>)
 8000168:	801a      	strh	r2, [r3, #0]
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 800016a:	7ffa      	ldrb	r2, [r7, #31]
 800016c:	7ffb      	ldrb	r3, [r7, #31]
 800016e:	490f      	ldr	r1, [pc, #60]	@ (80001ac <HAL_ADC_ConvCpltCallback+0x60>)
 8000170:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000174:	f107 000c 	add.w	r0, r7, #12
 8000178:	490e      	ldr	r1, [pc, #56]	@ (80001b4 <HAL_ADC_ConvCpltCallback+0x68>)
 800017a:	f009 fa17 	bl	80095ac <siprintf>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
		SendInfo((uint8_t*)&palabra, 18,TEXT);
 800017e:	f107 030c 	add.w	r3, r7, #12
 8000182:	22f2      	movs	r2, #242	@ 0xf2
 8000184:	2112      	movs	r1, #18
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fb38 	bl	80007fc <SendInfo>
	for(u=0;u<NUM_CHANNELS;u++){
 800018c:	7ffb      	ldrb	r3, [r7, #31]
 800018e:	3301      	adds	r3, #1
 8000190:	77fb      	strb	r3, [r7, #31]
 8000192:	7ffb      	ldrb	r3, [r7, #31]
 8000194:	2b07      	cmp	r3, #7
 8000196:	d9e2      	bls.n	800015e <HAL_ADC_ConvCpltCallback+0x12>
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000198:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800019c:	4806      	ldr	r0, [pc, #24]	@ (80001b8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800019e:	f001 fffb 	bl	8002198 <HAL_GPIO_TogglePin>
}
 80001a2:	bf00      	nop
 80001a4:	3720      	adds	r7, #32
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200004b4 	.word	0x200004b4
 80001b0:	200004c8 	.word	0x200004c8
 80001b4:	08009f24 	.word	0x08009f24
 80001b8:	40011000 	.word	0x40011000

080001bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	IS10MS=TRUE;
 80001c4:	4a04      	ldr	r2, [pc, #16]	@ (80001d8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80001c6:	7813      	ldrb	r3, [r2, #0]
 80001c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80001cc:	7013      	strb	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200004c4 	.word	0x200004c4

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter=0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	71fb      	strb	r3, [r7, #7]
	uint8_t DMAcounter=0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fe49 	bl	8000e80 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(&datafromUSB);
 80001ee:	4825      	ldr	r0, [pc, #148]	@ (8000284 <main+0xa8>)
 80001f0:	f008 fe16 	bl	8008e20 <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 80001f4:	4b24      	ldr	r3, [pc, #144]	@ (8000288 <main+0xac>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 80001fa:	4b23      	ldr	r3, [pc, #140]	@ (8000288 <main+0xac>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags=0;
 8000200:	4b22      	ldr	r3, [pc, #136]	@ (800028c <main+0xb0>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f849 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f9b1 	bl	8000570 <MX_GPIO_Init>
  MX_DMA_Init();
 800020e:	f000 f991 	bl	8000534 <MX_DMA_Init>
  MX_ADC1_Init();
 8000212:	f000 f8a1 	bl	8000358 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000216:	f000 f941 	bl	800049c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800021a:	f008 fcbf 	bl	8008b9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800021e:	481c      	ldr	r0, [pc, #112]	@ (8000290 <main+0xb4>)
 8000220:	f004 fa18 	bl	8004654 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	if(IS10MS){
 8000224:	4b19      	ldr	r3, [pc, #100]	@ (800028c <main+0xb0>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800022c:	b2db      	uxtb	r3, r3
 800022e:	2b00      	cmp	r3, #0
 8000230:	d0f8      	beq.n	8000224 <main+0x48>
		if(counter>10){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b0a      	cmp	r3, #10
 8000236:	d904      	bls.n	8000242 <main+0x66>
			comunicationsTask(&datosComSerie);
 8000238:	4813      	ldr	r0, [pc, #76]	@ (8000288 <main+0xac>)
 800023a:	f000 fc4f 	bl	8000adc <comunicationsTask>
			counter=0;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
		}
		if(DMAcounter>100){
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	2b64      	cmp	r3, #100	@ 0x64
 8000246:	d906      	bls.n	8000256 <main+0x7a>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 8000248:	2208      	movs	r2, #8
 800024a:	4912      	ldr	r1, [pc, #72]	@ (8000294 <main+0xb8>)
 800024c:	4812      	ldr	r0, [pc, #72]	@ (8000298 <main+0xbc>)
 800024e:	f000 ff51 	bl	80010f4 <HAL_ADC_Start_DMA>
			DMAcounter=0;
 8000252:	2300      	movs	r3, #0
 8000254:	71bb      	strb	r3, [r7, #6]
		}
		IS10MS=!IS10MS;
 8000256:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <main+0xb0>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	bf0c      	ite	eq
 8000264:	2301      	moveq	r3, #1
 8000266:	2300      	movne	r3, #0
 8000268:	b2d9      	uxtb	r1, r3
 800026a:	4a08      	ldr	r2, [pc, #32]	@ (800028c <main+0xb0>)
 800026c:	7813      	ldrb	r3, [r2, #0]
 800026e:	f361 1386 	bfi	r3, r1, #6, #1
 8000272:	7013      	strb	r3, [r2, #0]
		counter++;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	3301      	adds	r3, #1
 8000278:	71fb      	strb	r3, [r7, #7]
		DMAcounter++;
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	3301      	adds	r3, #1
 800027e:	71bb      	strb	r3, [r7, #6]
	if(IS10MS){
 8000280:	e7d0      	b.n	8000224 <main+0x48>
 8000282:	bf00      	nop
 8000284:	08000b2d 	.word	0x08000b2d
 8000288:	200002ac 	.word	0x200002ac
 800028c:	200004c4 	.word	0x200004c4
 8000290:	20000264 	.word	0x20000264
 8000294:	200004b4 	.word	0x200004b4
 8000298:	200001f0 	.word	0x200001f0

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	@ 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a6:	2228      	movs	r2, #40	@ 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f009 f9a0 	bl	80095f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 fcca 	bl	8003c8c <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002fe:	f000 fc3d 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000312:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f003 ff36 	bl	8004190 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800032a:	f000 fc27 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800032e:	2312      	movs	r3, #18
 8000330:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000336:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f004 f882 	bl	8004448 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800034a:	f000 fc17 	bl	8000b7c <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3750      	adds	r7, #80	@ 0x50
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000368:	4b4a      	ldr	r3, [pc, #296]	@ (8000494 <MX_ADC1_Init+0x13c>)
 800036a:	4a4b      	ldr	r2, [pc, #300]	@ (8000498 <MX_ADC1_Init+0x140>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800036e:	4b49      	ldr	r3, [pc, #292]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000370:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000374:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000376:	4b47      	ldr	r3, [pc, #284]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000378:	2200      	movs	r2, #0
 800037a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037c:	4b45      	ldr	r3, [pc, #276]	@ (8000494 <MX_ADC1_Init+0x13c>)
 800037e:	2200      	movs	r2, #0
 8000380:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000382:	4b44      	ldr	r3, [pc, #272]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000384:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000388:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800038a:	4b42      	ldr	r3, [pc, #264]	@ (8000494 <MX_ADC1_Init+0x13c>)
 800038c:	2200      	movs	r2, #0
 800038e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000390:	4b40      	ldr	r3, [pc, #256]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000392:	2208      	movs	r2, #8
 8000394:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000396:	483f      	ldr	r0, [pc, #252]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000398:	f000 fdd4 	bl	8000f44 <HAL_ADC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003a2:	f000 fbeb 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003ae:	2307      	movs	r3, #7
 80003b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4837      	ldr	r0, [pc, #220]	@ (8000494 <MX_ADC1_Init+0x13c>)
 80003b8:	f001 f854 	bl	8001464 <HAL_ADC_ConfigChannel>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003c2:	f000 fbdb 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ca:	2302      	movs	r3, #2
 80003cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	4830      	ldr	r0, [pc, #192]	@ (8000494 <MX_ADC1_Init+0x13c>)
 80003d4:	f001 f846 	bl	8001464 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003de:	f000 fbcd 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003e6:	2303      	movs	r3, #3
 80003e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4829      	ldr	r0, [pc, #164]	@ (8000494 <MX_ADC1_Init+0x13c>)
 80003f0:	f001 f838 	bl	8001464 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003fa:	f000 fbbf 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003fe:	2303      	movs	r3, #3
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000402:	2304      	movs	r3, #4
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	4619      	mov	r1, r3
 800040a:	4822      	ldr	r0, [pc, #136]	@ (8000494 <MX_ADC1_Init+0x13c>)
 800040c:	f001 f82a 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000416:	f000 fbb1 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800041a:	2304      	movs	r3, #4
 800041c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800041e:	2305      	movs	r3, #5
 8000420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	481b      	ldr	r0, [pc, #108]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000428:	f001 f81c 	bl	8001464 <HAL_ADC_ConfigChannel>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000432:	f000 fba3 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000436:	2305      	movs	r3, #5
 8000438:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800043a:	2306      	movs	r3, #6
 800043c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	4814      	ldr	r0, [pc, #80]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000444:	f001 f80e 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800044e:	f000 fb95 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000452:	2306      	movs	r3, #6
 8000454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000456:	2307      	movs	r3, #7
 8000458:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4619      	mov	r1, r3
 800045e:	480d      	ldr	r0, [pc, #52]	@ (8000494 <MX_ADC1_Init+0x13c>)
 8000460:	f001 f800 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800046a:	f000 fb87 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800046e:	2307      	movs	r3, #7
 8000470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000472:	2308      	movs	r3, #8
 8000474:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4806      	ldr	r0, [pc, #24]	@ (8000494 <MX_ADC1_Init+0x13c>)
 800047c:	f000 fff2 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000486:	f000 fb79 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200001f0 	.word	0x200001f0
 8000498:	40012400 	.word	0x40012400

0800049c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	463b      	mov	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004c2:	2247      	movs	r2, #71	@ 0x47
 80004c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d4:	4b16      	ldr	r3, [pc, #88]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004e0:	4813      	ldr	r0, [pc, #76]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004e2:	f004 f867 	bl	80045b4 <HAL_TIM_Base_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004ec:	f000 fb46 	bl	8000b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	4619      	mov	r1, r3
 80004fc:	480c      	ldr	r0, [pc, #48]	@ (8000530 <MX_TIM2_Init+0x94>)
 80004fe:	f004 f9eb 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000508:	f000 fb38 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	4619      	mov	r1, r3
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_TIM2_Init+0x94>)
 800051a:	f004 fbcd 	bl	8004cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000524:	f000 fb2a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000264 	.word	0x20000264

08000534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_DMA_Init+0x38>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <MX_DMA_Init+0x38>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_DMA_Init+0x38>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	200b      	movs	r0, #11
 8000558:	f001 fa5d 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055c:	200b      	movs	r0, #11
 800055e:	f001 fa76 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000584:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_GPIO_Init+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1d      	ldr	r2, [pc, #116]	@ (8000600 <MX_GPIO_Init+0x90>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_GPIO_Init+0x90>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0310 	and.w	r3, r3, #16
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059c:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <MX_GPIO_Init+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0320 	and.w	r3, r3, #32
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005d4:	f001 fdc8 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005f2:	f001 fc35 	bl	8001e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40011000 	.word	0x40011000

08000608 <DecodeHeader>:

/* USER CODE BEGIN 4 */
void DecodeHeader(_sDato *datosCom){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	78db      	ldrb	r3, [r3, #3]
 8000614:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000616:	e0e2      	b.n	80007de <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 8000618:	4b76      	ldr	r3, [pc, #472]	@ (80007f4 <DecodeHeader+0x1ec>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 80d7 	bhi.w	80007d0 <DecodeHeader+0x1c8>
 8000622:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <DecodeHeader+0x20>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	0800066d 	.word	0x0800066d
 8000630:	080006a1 	.word	0x080006a1
 8000634:	080006d5 	.word	0x080006d5
 8000638:	08000709 	.word	0x08000709
 800063c:	08000731 	.word	0x08000731
 8000640:	08000773 	.word	0x08000773
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	b2d1      	uxtb	r1, r2
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7111      	strb	r1, [r2, #4]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	79db      	ldrb	r3, [r3, #7]
 8000658:	2b55      	cmp	r3, #85	@ 0x55
 800065a:	f040 80bd 	bne.w	80007d8 <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800065e:	4b65      	ldr	r3, [pc, #404]	@ (80007f4 <DecodeHeader+0x1ec>)
 8000660:	2201      	movs	r2, #1
 8000662:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	709a      	strb	r2, [r3, #2]
                }
                break;
 800066a:	e0b5      	b.n	80007d8 <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7111      	strb	r1, [r2, #4]
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	79db      	ldrb	r3, [r3, #7]
 8000680:	2b4e      	cmp	r3, #78	@ 0x4e
 8000682:	d103      	bne.n	800068c <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000684:	4b5b      	ldr	r3, [pc, #364]	@ (80007f4 <DecodeHeader+0x1ec>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800068a:	e0a8      	b.n	80007de <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	3b01      	subs	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000698:	4b56      	ldr	r3, [pc, #344]	@ (80007f4 <DecodeHeader+0x1ec>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
                break;
 800069e:	e09e      	b.n	80007de <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	b2d1      	uxtb	r1, r2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7111      	strb	r1, [r2, #4]
 80006ac:	461a      	mov	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	79db      	ldrb	r3, [r3, #7]
 80006b4:	2b45      	cmp	r3, #69	@ 0x45
 80006b6:	d103      	bne.n	80006c0 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80006b8:	4b4e      	ldr	r3, [pc, #312]	@ (80007f4 <DecodeHeader+0x1ec>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 80006be:	e08e      	b.n	80007de <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80006cc:	4b49      	ldr	r3, [pc, #292]	@ (80007f4 <DecodeHeader+0x1ec>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
                break;
 80006d2:	e084      	b.n	80007de <DecodeHeader+0x1d6>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	b2d1      	uxtb	r1, r2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7111      	strb	r1, [r2, #4]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	79db      	ldrb	r3, [r3, #7]
 80006e8:	2b52      	cmp	r3, #82	@ 0x52
 80006ea:	d103      	bne.n	80006f4 <DecodeHeader+0xec>
                estadoProtocolo=NBYTES;
 80006ec:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <DecodeHeader+0x1ec>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	701a      	strb	r2, [r3, #0]
            else{
                datosCom->indexReadRx--;
               estadoProtocolo=START;
            }
            break;
 80006f2:	e074      	b.n	80007de <DecodeHeader+0x1d6>
                datosCom->indexReadRx--;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	711a      	strb	r2, [r3, #4]
               estadoProtocolo=START;
 8000700:	4b3c      	ldr	r3, [pc, #240]	@ (80007f4 <DecodeHeader+0x1ec>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
            break;
 8000706:	e06a      	b.n	80007de <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791a      	ldrb	r2, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	b2d1      	uxtb	r1, r2
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7111      	strb	r1, [r2, #4]
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	79da      	ldrb	r2, [r3, #7]
 8000724:	4b34      	ldr	r3, [pc, #208]	@ (80007f8 <DecodeHeader+0x1f0>)
 8000726:	701a      	strb	r2, [r3, #0]
               estadoProtocolo=TOKEN;
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <DecodeHeader+0x1ec>)
 800072a:	2205      	movs	r2, #5
 800072c:	701a      	strb	r2, [r3, #0]
                break;
 800072e:	e056      	b.n	80007de <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	b2d1      	uxtb	r1, r2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7111      	strb	r1, [r2, #4]
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	2b3a      	cmp	r3, #58	@ 0x3a
 8000746:	d10a      	bne.n	800075e <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <DecodeHeader+0x1ec>)
 800074a:	2206      	movs	r2, #6
 800074c:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800074e:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <DecodeHeader+0x1f0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000756:	b2da      	uxtb	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800075c:	e03f      	b.n	80007de <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <DecodeHeader+0x1ec>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
                break;
 8000770:	e035      	b.n	80007de <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <DecodeHeader+0x1f0>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d90f      	bls.n	800079a <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	b2d1      	uxtb	r1, r2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7111      	strb	r1, [r2, #4]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	79da      	ldrb	r2, [r3, #7]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	789b      	ldrb	r3, [r3, #2]
 8000792:	4053      	eors	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <DecodeHeader+0x1f0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <DecodeHeader+0x1f0>)
 80007a4:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <DecodeHeader+0x1f0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d116      	bne.n	80007dc <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <DecodeHeader+0x1ec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	789a      	ldrb	r2, [r3, #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	440b      	add	r3, r1
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d109      	bne.n	80007dc <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f8dd 	bl	8000988 <decodeData>
                    }
                }

                break;
 80007ce:	e005      	b.n	80007dc <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <DecodeHeader+0x1ec>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
                break;
 80007d6:	e002      	b.n	80007de <DecodeHeader+0x1d6>
                break;
 80007d8:	bf00      	nop
 80007da:	e000      	b.n	80007de <DecodeHeader+0x1d6>
                break;
 80007dc:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	f47f af17 	bne.w	8000618 <DecodeHeader+0x10>
        }
    }
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200004b3 	.word	0x200004b3
 80007f8:	200004cc 	.word	0x200004cc

080007fc <SendInfo>:

void SendInfo(uint8_t bufferAux[], uint8_t bytes,_eEstadoMEFcmd cmd){
 80007fc:	b480      	push	{r7}
 80007fe:	b08d      	sub	sp, #52	@ 0x34
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
 8000808:	4613      	mov	r3, r2
 800080a:	70bb      	strb	r3, [r7, #2]

    uint8_t bufAux[30], indiceAux=0,cks=0,num_bytes=0;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000812:	2300      	movs	r3, #0
 8000814:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000818:	2300      	movs	r3, #0
 800081a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    bufAux[indiceAux++]='U';
 800081e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000828:	3330      	adds	r3, #48	@ 0x30
 800082a:	443b      	add	r3, r7
 800082c:	2255      	movs	r2, #85	@ 0x55
 800082e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 8000832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800083c:	3330      	adds	r3, #48	@ 0x30
 800083e:	443b      	add	r3, r7
 8000840:	224e      	movs	r2, #78	@ 0x4e
 8000842:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000850:	3330      	adds	r3, #48	@ 0x30
 8000852:	443b      	add	r3, r7
 8000854:	2245      	movs	r2, #69	@ 0x45
 8000856:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 800085a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000864:	3330      	adds	r3, #48	@ 0x30
 8000866:	443b      	add	r3, r7
 8000868:	2252      	movs	r2, #82	@ 0x52
 800086a:	f803 2c24 	strb.w	r2, [r3, #-36]

    num_bytes = indiceAux; //aca guardo la ubicacion de la cantidad de bytes a enviar
 800086e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    bufAux[indiceAux++]=0;
 8000876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000880:	3330      	adds	r3, #48	@ 0x30
 8000882:	443b      	add	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 800088a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000894:	3330      	adds	r3, #48	@ 0x30
 8000896:	443b      	add	r3, r7
 8000898:	223a      	movs	r2, #58	@ 0x3a
 800089a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++] = cmd;
 800089e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80008a8:	3330      	adds	r3, #48	@ 0x30
 80008aa:	443b      	add	r3, r7
 80008ac:	78ba      	ldrb	r2, [r7, #2]
 80008ae:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(uint8_t i=0; i<bytes-1; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80008b8:	e012      	b.n	80008e0 <SendInfo+0xe4>
        bufAux[indiceAux++] = bufferAux[i];
 80008ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	441a      	add	r2, r3
 80008c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008c6:	1c59      	adds	r1, r3, #1
 80008c8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	3330      	adds	r3, #48	@ 0x30
 80008d0:	443b      	add	r3, r7
 80008d2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(uint8_t i=0; i<bytes-1; i++)
 80008d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80008da:	3301      	adds	r3, #1
 80008dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80008e0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbe6      	blt.n	80008ba <SendInfo+0xbe>

    if(cmd==TEXT)
 80008ec:	78bb      	ldrb	r3, [r7, #2]
 80008ee:	2bf2      	cmp	r3, #242	@ 0xf2
 80008f0:	d106      	bne.n	8000900 <SendInfo+0x104>
		bufAux[num_bytes] = bytes; // aca le doy el numero de bytes que voy a pasar
 80008f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80008f6:	3330      	adds	r3, #48	@ 0x30
 80008f8:	443b      	add	r3, r7
 80008fa:	78fa      	ldrb	r2, [r7, #3]
 80008fc:	f803 2c24 	strb.w	r2, [r3, #-36]

    cks=0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000906:	2300      	movs	r3, #0
 8000908:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800090c:	e021      	b.n	8000952 <SendInfo+0x156>
        cks^= bufAux[i];
 800090e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000912:	3330      	adds	r3, #48	@ 0x30
 8000914:	443b      	add	r3, r7
 8000916:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800091a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800091e:	4053      	eors	r3, r2
 8000920:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 8000924:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <SendInfo+0x188>)
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	1c59      	adds	r1, r3, #1
 800092e:	b2c8      	uxtb	r0, r1
 8000930:	4914      	ldr	r1, [pc, #80]	@ (8000984 <SendInfo+0x188>)
 8000932:	7148      	strb	r0, [r1, #5]
 8000934:	4619      	mov	r1, r3
 8000936:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 800093a:	443b      	add	r3, r7
 800093c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000940:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <SendInfo+0x188>)
 8000942:	440b      	add	r3, r1
 8000944:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000948:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800094c:	3301      	adds	r3, #1
 800094e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000952:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095a:	429a      	cmp	r2, r3
 800095c:	d3d7      	bcc.n	800090e <SendInfo+0x112>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <SendInfo+0x188>)
 8000960:	795b      	ldrb	r3, [r3, #5]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	b2d1      	uxtb	r1, r2
 8000966:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <SendInfo+0x188>)
 8000968:	7151      	strb	r1, [r2, #5]
 800096a:	461a      	mov	r2, r3
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <SendInfo+0x188>)
 800096e:	4413      	add	r3, r2
 8000970:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000974:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

//     CDC_Transmit_FS((uint8_t*)datosComSerie.bufferTx, sizeof(bufAux));
}
 8000978:	bf00      	nop
 800097a:	3734      	adds	r7, #52	@ 0x34
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200002ac 	.word	0x200002ac

08000988 <decodeData>:

void decodeData(_sDato *datosCom){
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,cks=0;
 8000990:	2300      	movs	r3, #0
 8000992:	77fb      	strb	r3, [r7, #31]
 8000994:	2300      	movs	r3, #0
 8000996:	77bb      	strb	r3, [r7, #30]

    bufAux[indiceAux++]='U';
 8000998:	7ffb      	ldrb	r3, [r7, #31]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	77fa      	strb	r2, [r7, #31]
 800099e:	3320      	adds	r3, #32
 80009a0:	443b      	add	r3, r7
 80009a2:	2255      	movs	r2, #85	@ 0x55
 80009a4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	77fa      	strb	r2, [r7, #31]
 80009ae:	3320      	adds	r3, #32
 80009b0:	443b      	add	r3, r7
 80009b2:	224e      	movs	r2, #78	@ 0x4e
 80009b4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	77fa      	strb	r2, [r7, #31]
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	2245      	movs	r2, #69	@ 0x45
 80009c4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 80009c8:	7ffb      	ldrb	r3, [r7, #31]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	77fa      	strb	r2, [r7, #31]
 80009ce:	3320      	adds	r3, #32
 80009d0:	443b      	add	r3, r7
 80009d2:	2252      	movs	r2, #82	@ 0x52
 80009d4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 80009d8:	7ffb      	ldrb	r3, [r7, #31]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	77fa      	strb	r2, [r7, #31]
 80009de:	3320      	adds	r3, #32
 80009e0:	443b      	add	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 80009e8:	7ffb      	ldrb	r3, [r7, #31]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	77fa      	strb	r2, [r7, #31]
 80009ee:	3320      	adds	r3, #32
 80009f0:	443b      	add	r3, r7
 80009f2:	223a      	movs	r2, #58	@ 0x3a
 80009f4:	f803 2c18 	strb.w	r2, [r3, #-24]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//ID EN LA POSICION 2
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	3302      	adds	r3, #2
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	79db      	ldrb	r3, [r3, #7]
 8000a04:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a06:	d002      	beq.n	8000a0e <decodeData+0x86>
 8000a08:	2bf1      	cmp	r3, #241	@ 0xf1
 8000a0a:	d013      	beq.n	8000a34 <decodeData+0xac>
 8000a0c:	e025      	b.n	8000a5a <decodeData+0xd2>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000a0e:	7ffb      	ldrb	r3, [r7, #31]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	77fa      	strb	r2, [r7, #31]
 8000a14:	3320      	adds	r3, #32
 8000a16:	443b      	add	r3, r7
 8000a18:	22f0      	movs	r2, #240	@ 0xf0
 8000a1a:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0x0D;
 8000a1e:	7ffb      	ldrb	r3, [r7, #31]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	77fa      	strb	r2, [r7, #31]
 8000a24:	3320      	adds	r3, #32
 8000a26:	443b      	add	r3, r7
 8000a28:	220d      	movs	r2, #13
 8000a2a:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	733b      	strb	r3, [r7, #12]

    break;
 8000a32:	e01d      	b.n	8000a70 <decodeData+0xe8>
    case FIRMWARE:

        bufAux[indiceAux++]=FIRMWARE;
 8000a34:	7ffb      	ldrb	r3, [r7, #31]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	77fa      	strb	r2, [r7, #31]
 8000a3a:	3320      	adds	r3, #32
 8000a3c:	443b      	add	r3, r7
 8000a3e:	22f1      	movs	r2, #241	@ 0xf1
 8000a40:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0xF1;
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	77fa      	strb	r2, [r7, #31]
 8000a4a:	3320      	adds	r3, #32
 8000a4c:	443b      	add	r3, r7
 8000a4e:	22f1      	movs	r2, #241	@ 0xf1
 8000a50:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000a54:	2303      	movs	r3, #3
 8000a56:	733b      	strb	r3, [r7, #12]

    break;
 8000a58:	e00a      	b.n	8000a70 <decodeData+0xe8>

    default:

        bufAux[indiceAux++]=0xFF;
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	77fa      	strb	r2, [r7, #31]
 8000a60:	3320      	adds	r3, #32
 8000a62:	443b      	add	r3, r7
 8000a64:	22ff      	movs	r2, #255	@ 0xff
 8000a66:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x02;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	733b      	strb	r3, [r7, #12]

        break;
 8000a6e:	bf00      	nop
    }
    cks=0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000a74:	2300      	movs	r3, #0
 8000a76:	777b      	strb	r3, [r7, #29]
 8000a78:	e01b      	b.n	8000ab2 <decodeData+0x12a>

        cks^= bufAux[i];
 8000a7a:	7f7b      	ldrb	r3, [r7, #29]
 8000a7c:	3320      	adds	r3, #32
 8000a7e:	443b      	add	r3, r7
 8000a80:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000a84:	7fbb      	ldrb	r3, [r7, #30]
 8000a86:	4053      	eors	r3, r2
 8000a88:	77bb      	strb	r3, [r7, #30]
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
 8000a8a:	7f7a      	ldrb	r2, [r7, #29]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	1c59      	adds	r1, r3, #1
 8000a92:	b2c8      	uxtb	r0, r1
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	7148      	strb	r0, [r1, #5]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f102 0320 	add.w	r3, r2, #32
 8000a9e:	443b      	add	r3, r7
 8000aa0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000aac:	7f7b      	ldrb	r3, [r7, #29]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	777b      	strb	r3, [r7, #29]
 8000ab2:	7f7a      	ldrb	r2, [r7, #29]
 8000ab4:	7ffb      	ldrb	r3, [r7, #31]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d3df      	bcc.n	8000a7a <decodeData+0xf2>

    }

     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	795b      	ldrb	r3, [r3, #5]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	b2d1      	uxtb	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	7151      	strb	r1, [r2, #5]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	7fba      	ldrb	r2, [r7, #30]
 8000ace:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
}
 8000ad2:	bf00      	nop
 8000ad4:	3724      	adds	r7, #36	@ 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	791a      	ldrb	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	78db      	ldrb	r3, [r3, #3]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d006      	beq.n	8000afe <comunicationsTask+0x22>
		DecodeHeader(datosCom);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fd89 	bl	8000608 <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <comunicationsTask+0x48>)
 8000af8:	78da      	ldrb	r2, [r3, #3]
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <comunicationsTask+0x48>)
 8000afc:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	799a      	ldrb	r2, [r3, #6]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d008      	beq.n	8000b1c <comunicationsTask+0x40>
		CDC_Transmit_FS(&datosComSerie.bufferTx[0], sizeof(datosComSerie.bufferTx));
 8000b0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <comunicationsTask+0x4c>)
 8000b10:	f008 f960 	bl	8008dd4 <CDC_Transmit_FS>
		datosComSerie.indexReadTx=datosComSerie.indexWriteTx;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <comunicationsTask+0x48>)
 8000b16:	795a      	ldrb	r2, [r3, #5]
 8000b18:	4b02      	ldr	r3, [pc, #8]	@ (8000b24 <comunicationsTask+0x48>)
 8000b1a:	719a      	strb	r2, [r3, #6]
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200002ac 	.word	0x200002ac
 8000b28:	200003b3 	.word	0x200003b3

08000b2c <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	81fb      	strh	r3, [r7, #14]
 8000b3c:	e012      	b.n	8000b64 <datafromUSB+0x38>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <datafromUSB+0x4c>)
 8000b46:	78d2      	ldrb	r2, [r2, #3]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <datafromUSB+0x4c>)
 8000b4e:	440b      	add	r3, r1
 8000b50:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <datafromUSB+0x4c>)
 8000b54:	78db      	ldrb	r3, [r3, #3]
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <datafromUSB+0x4c>)
 8000b5c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	3301      	adds	r3, #1
 8000b62:	81fb      	strh	r3, [r7, #14]
 8000b64:	89fa      	ldrh	r2, [r7, #14]
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3e8      	bcc.n	8000b3e <datafromUSB+0x12>
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	200002ac 	.word	0x200002ac

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_MspInit+0x5c>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <HAL_MspInit+0x5c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_MspInit+0x5c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_MspInit+0x5c>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <HAL_MspInit+0x5c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	61d3      	str	r3, [r2, #28]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <HAL_MspInit+0x5c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_MspInit+0x60>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_MspInit+0x60>)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000

08000bec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb8 <HAL_ADC_MspInit+0xcc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d151      	bne.n	8000cb0 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <HAL_ADC_MspInit+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a2a      	ldr	r2, [pc, #168]	@ (8000cbc <HAL_ADC_MspInit+0xd0>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <HAL_ADC_MspInit+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <HAL_ADC_MspInit+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a24      	ldr	r2, [pc, #144]	@ (8000cbc <HAL_ADC_MspInit+0xd0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <HAL_ADC_MspInit+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c3c:	23ff      	movs	r3, #255	@ 0xff
 8000c3e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c40:	2303      	movs	r3, #3
 8000c42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481d      	ldr	r0, [pc, #116]	@ (8000cc0 <HAL_ADC_MspInit+0xd4>)
 8000c4c:	f001 f908 	bl	8001e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c52:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc8 <HAL_ADC_MspInit+0xdc>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c84:	480f      	ldr	r0, [pc, #60]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c86:	f000 fefd 	bl	8001a84 <HAL_DMA_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c90:	f7ff ff74 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c98:	621a      	str	r2, [r3, #32]
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_ADC_MspInit+0xd8>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2012      	movs	r0, #18
 8000ca6:	f000 feb6 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000caa:	2012      	movs	r0, #18
 8000cac:	f000 fecf 	bl	8001a4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	20000220 	.word	0x20000220
 8000cc8:	40020008 	.word	0x40020008

08000ccc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cdc:	d113      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_TIM_Base_MspInit+0x44>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	201c      	movs	r0, #28
 8000cfc:	f000 fe8b 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d00:	201c      	movs	r0, #28
 8000d02:	f000 fea4 	bl	8001a4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f8d2 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <DMA1_Channel1_IRQHandler+0x10>)
 8000d72:	f000 ff41 	bl	8001bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000220 	.word	0x20000220

08000d80 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <ADC1_2_IRQHandler+0x10>)
 8000d86:	f000 fa93 	bl	80012b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001f0 	.word	0x200001f0

08000d94 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d9a:	f001 fb32 	bl	8002402 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200011a4 	.word	0x200011a4

08000da8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM2_IRQHandler+0x10>)
 8000dae:	f003 fca3 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000264 	.word	0x20000264

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f008 fc08 	bl	8009600 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20005000 	.word	0x20005000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200004d0 	.word	0x200004d0
 8000e24:	200017e8 	.word	0x200017e8

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff fff8 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3a:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e50:	4c09      	ldr	r4, [pc, #36]	@ (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f008 fbd5 	bl	800960c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff f9bb 	bl	80001dc <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000e70:	08009fdc 	.word	0x08009fdc
  ldr r2, =_sbss
 8000e74:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000e78:	200017e4 	.word	0x200017e4

08000e7c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <CAN1_RX1_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 fdb5 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe74 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fdcd 	bl	8001a6a <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 fd95 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200004d4 	.word	0x200004d4

08000f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	@ (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	200004d4 	.word	0x200004d4

08000f44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0be      	b.n	80010e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fe32 	bl	8000bec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fbbd 	bl	8001708 <ADC_ConversionStop_Disable>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8099 	bne.w	80010d2 <HAL_ADC_Init+0x18e>
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8095 	bne.w	80010d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fb0:	f023 0302 	bic.w	r3, r3, #2
 8000fb4:	f043 0202 	orr.w	r2, r3, #2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b1b      	ldrb	r3, [r3, #12]
 8000fca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fdc:	d003      	beq.n	8000fe6 <HAL_ADC_Init+0xa2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_ADC_Init+0xa8>
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	e000      	b.n	8000fee <HAL_ADC_Init+0xaa>
 8000fec:	2300      	movs	r3, #0
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7d1b      	ldrb	r3, [r3, #20]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d119      	bne.n	8001030 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7b1b      	ldrb	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	3b01      	subs	r3, #1
 800100a:	035a      	lsls	r2, r3, #13
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	e00b      	b.n	8001030 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101c:	f043 0220 	orr.w	r2, r3, #32
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	430a      	orrs	r2, r1
 8001042:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <HAL_ADC_Init+0x1a8>)
 800104c:	4013      	ands	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	430b      	orrs	r3, r1
 8001056:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001060:	d003      	beq.n	800106a <HAL_ADC_Init+0x126>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d104      	bne.n	8001074 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	3b01      	subs	r3, #1
 8001070:	051b      	lsls	r3, r3, #20
 8001072:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	430a      	orrs	r2, r1
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <HAL_ADC_Init+0x1ac>)
 8001090:	4013      	ands	r3, r2
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	429a      	cmp	r2, r3
 8001096:	d10b      	bne.n	80010b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010ae:	e018      	b.n	80010e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b4:	f023 0312 	bic.w	r3, r3, #18
 80010b8:	f043 0210 	orr.w	r2, r3, #16
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010d0:	e007      	b.n	80010e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d6:	f043 0210 	orr.w	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	ffe1f7fd 	.word	0xffe1f7fd
 80010f0:	ff1f0efe 	.word	0xff1f0efe

080010f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a64      	ldr	r2, [pc, #400]	@ (800129c <HAL_ADC_Start_DMA+0x1a8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d004      	beq.n	8001118 <HAL_ADC_Start_DMA+0x24>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a63      	ldr	r2, [pc, #396]	@ (80012a0 <HAL_ADC_Start_DMA+0x1ac>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d106      	bne.n	8001126 <HAL_ADC_Start_DMA+0x32>
 8001118:	4b60      	ldr	r3, [pc, #384]	@ (800129c <HAL_ADC_Start_DMA+0x1a8>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f040 80b3 	bne.w	800128c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_ADC_Start_DMA+0x40>
 8001130:	2302      	movs	r3, #2
 8001132:	e0ae      	b.n	8001292 <HAL_ADC_Start_DMA+0x19e>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 fa89 	bl	8001654 <ADC_Enable>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	2b00      	cmp	r3, #0
 800114a:	f040 809a 	bne.w	8001282 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001152:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a4e      	ldr	r2, [pc, #312]	@ (80012a0 <HAL_ADC_Start_DMA+0x1ac>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d105      	bne.n	8001178 <HAL_ADC_Start_DMA+0x84>
 800116c:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <HAL_ADC_Start_DMA+0x1a8>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d115      	bne.n	80011a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800118e:	2b00      	cmp	r3, #0
 8001190:	d026      	beq.n	80011e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001196:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800119a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011a2:	e01d      	b.n	80011e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a39      	ldr	r2, [pc, #228]	@ (800129c <HAL_ADC_Start_DMA+0x1a8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d004      	beq.n	80011c4 <HAL_ADC_Start_DMA+0xd0>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a38      	ldr	r2, [pc, #224]	@ (80012a0 <HAL_ADC_Start_DMA+0x1ac>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d10d      	bne.n	80011e0 <HAL_ADC_Start_DMA+0xec>
 80011c4:	4b35      	ldr	r3, [pc, #212]	@ (800129c <HAL_ADC_Start_DMA+0x1a8>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f0:	f023 0206 	bic.w	r2, r3, #6
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011f8:	e002      	b.n	8001200 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a25      	ldr	r2, [pc, #148]	@ (80012a4 <HAL_ADC_Start_DMA+0x1b0>)
 800120e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a24      	ldr	r2, [pc, #144]	@ (80012a8 <HAL_ADC_Start_DMA+0x1b4>)
 8001216:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <HAL_ADC_Start_DMA+0x1b8>)
 800121e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0202 	mvn.w	r2, #2
 8001228:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001238:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6a18      	ldr	r0, [r3, #32]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	334c      	adds	r3, #76	@ 0x4c
 8001244:	4619      	mov	r1, r3
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f000 fc75 	bl	8001b38 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001258:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800125c:	d108      	bne.n	8001270 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800126c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800126e:	e00f      	b.n	8001290 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800127e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001280:	e006      	b.n	8001290 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800128a:	e001      	b.n	8001290 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001290:	7dfb      	ldrb	r3, [r7, #23]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40012400 	.word	0x40012400
 80012a0:	40012800 	.word	0x40012800
 80012a4:	0800178b 	.word	0x0800178b
 80012a8:	08001807 	.word	0x08001807
 80012ac:	08001823 	.word	0x08001823

080012b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d03e      	beq.n	8001350 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d039      	beq.n	8001350 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001302:	d11d      	bne.n	8001340 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001308:	2b00      	cmp	r3, #0
 800130a:	d119      	bne.n	8001340 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0220 	bic.w	r2, r2, #32
 800131a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001320:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	f043 0201 	orr.w	r2, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7fe ff03 	bl	800014c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0212 	mvn.w	r2, #18
 800134e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001356:	2b00      	cmp	r3, #0
 8001358:	d04d      	beq.n	80013f6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d048      	beq.n	80013f6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001374:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001386:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800138a:	d012      	beq.n	80013b2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001396:	2b00      	cmp	r3, #0
 8001398:	d125      	bne.n	80013e6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013a8:	d11d      	bne.n	80013e6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d119      	bne.n	80013e6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d105      	bne.n	80013e6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa35 	bl	8001856 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 020c 	mvn.w	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d012      	beq.n	8001426 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00d      	beq.n	8001426 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f812 	bl	8001440 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f06f 0201 	mvn.w	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e0dc      	b.n	800163e <HAL_ADC_ConfigChannel+0x1da>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b06      	cmp	r3, #6
 8001492:	d81c      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b05      	subs	r3, #5
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b05      	subs	r3, #5
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80014cc:	e03c      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d81c      	bhi.n	8001510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b23      	subs	r3, #35	@ 0x23
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4019      	ands	r1, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b23      	subs	r3, #35	@ 0x23
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	@ 0x30
 800150e:	e01b      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b41      	subs	r3, #65	@ 0x41
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	@ 0x41
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d91c      	bls.n	800158a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68d9      	ldr	r1, [r3, #12]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6898      	ldr	r0, [r3, #8]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	3b1e      	subs	r3, #30
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e019      	b.n	80015be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6919      	ldr	r1, [r3, #16]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4019      	ands	r1, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6898      	ldr	r0, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d132      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <HAL_ADC_ConfigChannel+0x1e4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d125      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d126      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d11a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_ADC_ConfigChannel+0x1e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_ADC_ConfigChannel+0x1ec>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9a      	lsrs	r2, r3, #18
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x1b2>
 8001622:	e007      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f043 0220 	orr.w	r2, r3, #32
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40012400 	.word	0x40012400
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d040      	beq.n	80016f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <ADC_Enable+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <ADC_Enable+0xb0>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001690:	e002      	b.n	8001698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800169e:	f7ff fc47 	bl	8000f30 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	e01f      	b.n	80016e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a6:	f7ff fc43 	bl	8000f30 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d918      	bls.n	80016e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d011      	beq.n	80016e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d1d8      	bne.n	80016a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d12e      	bne.n	8001780 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001732:	f7ff fbfd 	bl	8000f30 <HAL_GetTick>
 8001736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001738:	e01b      	b.n	8001772 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800173a:	f7ff fbf9 	bl	8000f30 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d914      	bls.n	8001772 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10d      	bne.n	8001772 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e007      	b.n	8001782 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d0dc      	beq.n	800173a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d127      	bne.n	80017f4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017ba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017be:	d115      	bne.n	80017ec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d111      	bne.n	80017ec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f7fe fcad 	bl	800014c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80017f2:	e004      	b.n	80017fe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	4798      	blx	r3
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fe0a 	bl	800142e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	f043 0204 	orr.w	r2, r3, #4
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fe02 	bl	8001452 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4906      	ldr	r1, [pc, #24]	@ (8001900 <__NVIC_EnableIRQ+0x34>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	@ (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	@ (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	@ 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff90 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff2d 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff42 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff90 	bl	8001958 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5f 	bl	8001904 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff35 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e043      	b.n	8001b22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <HAL_DMA_Init+0xa8>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a22      	ldr	r2, [pc, #136]	@ (8001b30 <HAL_DMA_Init+0xac>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	009a      	lsls	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b34 <HAL_DMA_Init+0xb0>)
 8001ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ace:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ad2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	bffdfff8 	.word	0xbffdfff8
 8001b30:	cccccccd 	.word	0xcccccccd
 8001b34:	40020000 	.word	0x40020000

08001b38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_DMA_Start_IT+0x20>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e04b      	b.n	8001bf0 <HAL_DMA_Start_IT+0xb8>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d13a      	bne.n	8001be2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f937 	bl	8001e04 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 020e 	orr.w	r2, r2, #14
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e00f      	b.n	8001bd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 020a 	orr.w	r2, r2, #10
 8001bce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e005      	b.n	8001bee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
 8001bec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	2204      	movs	r2, #4
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d04f      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xc8>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d04a      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0204 	bic.w	r2, r2, #4
 8001c46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a66      	ldr	r2, [pc, #408]	@ (8001de8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d029      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0xae>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a65      	ldr	r2, [pc, #404]	@ (8001dec <HAL_DMA_IRQHandler+0x1f4>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d022      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xaa>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a63      	ldr	r2, [pc, #396]	@ (8001df0 <HAL_DMA_IRQHandler+0x1f8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xa4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a62      	ldr	r2, [pc, #392]	@ (8001df4 <HAL_DMA_IRQHandler+0x1fc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d012      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x9e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a60      	ldr	r2, [pc, #384]	@ (8001df8 <HAL_DMA_IRQHandler+0x200>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00a      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x98>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dfc <HAL_DMA_IRQHandler+0x204>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d102      	bne.n	8001c8a <HAL_DMA_IRQHandler+0x92>
 8001c84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c88:	e00e      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c8e:	e00b      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c94:	e008      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c9a:	e005      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001c9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca0:	e002      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001ca2:	2340      	movs	r3, #64	@ 0x40
 8001ca4:	e000      	b.n	8001ca8 <HAL_DMA_IRQHandler+0xb0>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	4a55      	ldr	r2, [pc, #340]	@ (8001e00 <HAL_DMA_IRQHandler+0x208>)
 8001caa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8094 	beq.w	8001dde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001cbe:	e08e      	b.n	8001dde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d056      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x186>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d051      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10b      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020a 	bic.w	r2, r2, #10
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a38      	ldr	r2, [pc, #224]	@ (8001de8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d029      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x166>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a37      	ldr	r2, [pc, #220]	@ (8001dec <HAL_DMA_IRQHandler+0x1f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x162>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a35      	ldr	r2, [pc, #212]	@ (8001df0 <HAL_DMA_IRQHandler+0x1f8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x15c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <HAL_DMA_IRQHandler+0x1fc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x156>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <HAL_DMA_IRQHandler+0x200>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x150>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <HAL_DMA_IRQHandler+0x204>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x14a>
 8001d3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d40:	e00e      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d46:	e00b      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d4c:	e008      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d52:	e005      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d58:	e002      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e000      	b.n	8001d60 <HAL_DMA_IRQHandler+0x168>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	4a27      	ldr	r2, [pc, #156]	@ (8001e00 <HAL_DMA_IRQHandler+0x208>)
 8001d62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d034      	beq.n	8001dde <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d7c:	e02f      	b.n	8001dde <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d028      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x1e8>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d023      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020e 	bic.w	r2, r2, #14
 8001da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f202 	lsl.w	r2, r1, r2
 8001db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
    }
  }
  return;
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
}
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40020008 	.word	0x40020008
 8001dec:	4002001c 	.word	0x4002001c
 8001df0:	40020030 	.word	0x40020030
 8001df4:	40020044 	.word	0x40020044
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	4002006c 	.word	0x4002006c
 8001e00:	40020000 	.word	0x40020000

08001e04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d108      	bne.n	8001e44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e42:	e007      	b.n	8001e54 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	60da      	str	r2, [r3, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b08b      	sub	sp, #44	@ 0x2c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e169      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e74:	2201      	movs	r2, #1
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8158 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a9a      	ldr	r2, [pc, #616]	@ (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d05e      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001e9c:	4a98      	ldr	r2, [pc, #608]	@ (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d875      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ea2:	4a98      	ldr	r2, [pc, #608]	@ (8002104 <HAL_GPIO_Init+0x2a4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d058      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ea8:	4a96      	ldr	r2, [pc, #600]	@ (8002104 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d86f      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eae:	4a96      	ldr	r2, [pc, #600]	@ (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d052      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001eb4:	4a94      	ldr	r2, [pc, #592]	@ (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d869      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eba:	4a94      	ldr	r2, [pc, #592]	@ (800210c <HAL_GPIO_Init+0x2ac>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04c      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ec0:	4a92      	ldr	r2, [pc, #584]	@ (800210c <HAL_GPIO_Init+0x2ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d863      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ec6:	4a92      	ldr	r2, [pc, #584]	@ (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d046      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ecc:	4a90      	ldr	r2, [pc, #576]	@ (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d85d      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d82a      	bhi.n	8001f2c <HAL_GPIO_Init+0xcc>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d859      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <HAL_GPIO_Init+0x80>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f5b 	.word	0x08001f5b
 8001ee4:	08001f35 	.word	0x08001f35
 8001ee8:	08001f47 	.word	0x08001f47
 8001eec:	08001f89 	.word	0x08001f89
 8001ef0:	08001f8f 	.word	0x08001f8f
 8001ef4:	08001f8f 	.word	0x08001f8f
 8001ef8:	08001f8f 	.word	0x08001f8f
 8001efc:	08001f8f 	.word	0x08001f8f
 8001f00:	08001f8f 	.word	0x08001f8f
 8001f04:	08001f8f 	.word	0x08001f8f
 8001f08:	08001f8f 	.word	0x08001f8f
 8001f0c:	08001f8f 	.word	0x08001f8f
 8001f10:	08001f8f 	.word	0x08001f8f
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f8f 	.word	0x08001f8f
 8001f1c:	08001f8f 	.word	0x08001f8f
 8001f20:	08001f8f 	.word	0x08001f8f
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f51 	.word	0x08001f51
 8001f2c:	4a79      	ldr	r2, [pc, #484]	@ (8002114 <HAL_GPIO_Init+0x2b4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f32:	e02c      	b.n	8001f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e029      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	3304      	adds	r3, #4
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e024      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e01f      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	330c      	adds	r3, #12
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e01a      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f62:	2304      	movs	r3, #4
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e013      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	611a      	str	r2, [r3, #16]
          break;
 8001f7a:	e009      	b.n	8001f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	615a      	str	r2, [r3, #20]
          break;
 8001f86:	e003      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          break;
 8001f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2bff      	cmp	r3, #255	@ 0xff
 8001f94:	d801      	bhi.n	8001f9a <HAL_GPIO_Init+0x13a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_Init+0x13e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2bff      	cmp	r3, #255	@ 0xff
 8001fa4:	d802      	bhi.n	8001fac <HAL_GPIO_Init+0x14c>
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x152>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	3b08      	subs	r3, #8
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	210f      	movs	r1, #15
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b1 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b4a      	ldr	r3, [pc, #296]	@ (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff8:	4a48      	ldr	r2, [pc, #288]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	@ (8002120 <HAL_GPIO_Init+0x2c0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_GPIO_Init+0x1ec>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3f      	ldr	r2, [pc, #252]	@ (8002124 <HAL_GPIO_Init+0x2c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1e8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3e      	ldr	r2, [pc, #248]	@ (8002128 <HAL_GPIO_Init+0x2c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	@ (800212c <HAL_GPIO_Init+0x2cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1e0>
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002040:	2304      	movs	r3, #4
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 800204c:	2300      	movs	r3, #0
 800204e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205e:	492f      	ldr	r1, [pc, #188]	@ (800211c <HAL_GPIO_Init+0x2bc>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002078:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	492c      	ldr	r1, [pc, #176]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	608b      	str	r3, [r1, #8]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002086:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4928      	ldr	r1, [pc, #160]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4922      	ldr	r1, [pc, #136]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60cb      	str	r3, [r1, #12]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ae:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	491e      	ldr	r1, [pc, #120]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4918      	ldr	r1, [pc, #96]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d6:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	4914      	ldr	r1, [pc, #80]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d021      	beq.n	8002134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	490e      	ldr	r1, [pc, #56]	@ (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e021      	b.n	8002142 <HAL_GPIO_Init+0x2e2>
 80020fe:	bf00      	nop
 8002100:	10320000 	.word	0x10320000
 8002104:	10310000 	.word	0x10310000
 8002108:	10220000 	.word	0x10220000
 800210c:	10210000 	.word	0x10210000
 8002110:	10120000 	.word	0x10120000
 8002114:	10110000 	.word	0x10110000
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	40010800 	.word	0x40010800
 8002124:	40010c00 	.word	0x40010c00
 8002128:	40011000 	.word	0x40011000
 800212c:	40011400 	.word	0x40011400
 8002130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <HAL_GPIO_Init+0x304>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	43db      	mvns	r3, r3
 800213c:	4909      	ldr	r1, [pc, #36]	@ (8002164 <HAL_GPIO_Init+0x304>)
 800213e:	4013      	ands	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	3301      	adds	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f47f ae8e 	bne.w	8001e74 <HAL_GPIO_Init+0x14>
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	372c      	adds	r7, #44	@ 0x2c
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43d9      	mvns	r1, r3
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	400b      	ands	r3, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0e8      	b.n	80023ae <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f006 ff31 	bl	8009058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f002 fde8 	bl	8004dde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002218:	f002 fdbe 	bl	8004d98 <USB_CoreInit>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2202      	movs	r2, #2
 8002226:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0bf      	b.n	80023ae <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fdec 	bl	8004e12 <USB_SetCurrentMode>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b0      	b.n	80023ae <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224c:	2300      	movs	r3, #0
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e03e      	b.n	80022d0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3311      	adds	r3, #17
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3310      	adds	r3, #16
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	3313      	adds	r3, #19
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3320      	adds	r3, #32
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3324      	adds	r3, #36	@ 0x24
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	3301      	adds	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3bb      	bcc.n	8002252 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e044      	b.n	800236a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	3301      	adds	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	429a      	cmp	r2, r3
 8002372:	d3b5      	bcc.n	80022e0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237e:	f002 fd54 	bl	8004e2a <USB_DevInit>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e00c      	b.n	80023ae <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 ffd3 	bl	8007352 <USB_DevDisconnect>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_PCD_Start+0x16>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e016      	b.n	80023fa <HAL_PCD_Start+0x44>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fcea 	bl	8004db2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80023de:	2101      	movs	r1, #1
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f007 f8ac 	bl	800953e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 ffa7 	bl	800733e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b088      	sub	sp, #32
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f004 ffa9 	bl	8007366 <USB_ReadInterrupts>
 8002414:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fb1a 	bl	8002a5a <PCD_EP_ISR_Handler>

    return;
 8002426:	e119      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800242e:	2b00      	cmp	r3, #0
 8002430:	d013      	beq.n	800245a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002444:	b292      	uxth	r2, r2
 8002446:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f006 fe7f 	bl	800914e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002450:	2100      	movs	r1, #0
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f905 	bl	8002662 <HAL_PCD_SetAddress>

    return;
 8002458:	e100      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800247c:	e0ee      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800249a:	b292      	uxth	r2, r2
 800249c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024a0:	e0dc      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d027      	beq.n	80024fc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	b292      	uxth	r2, r2
 80024c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0208 	bic.w	r2, r2, #8
 80024d6:	b292      	uxth	r2, r2
 80024d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f006 fe6f 	bl	80091c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024f4:	b292      	uxth	r2, r2
 80024f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024fa:	e0af      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8083 	beq.w	800260e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]
 800250c:	e010      	b.n	8002530 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	7ffb      	ldrb	r3, [r7, #31]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	8812      	ldrh	r2, [r2, #0]
 800251e:	b292      	uxth	r2, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	3320      	adds	r3, #32
 8002524:	443b      	add	r3, r7
 8002526:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	3301      	adds	r3, #1
 800252e:	77fb      	strb	r3, [r7, #31]
 8002530:	7ffb      	ldrb	r3, [r7, #31]
 8002532:	2b07      	cmp	r3, #7
 8002534:	d9eb      	bls.n	800250e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	b292      	uxth	r2, r2
 800254a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	b292      	uxth	r2, r2
 8002562:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002566:	bf00      	nop
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002570:	b29b      	uxth	r3, r3
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f6      	beq.n	8002568 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002582:	b29a      	uxth	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800258c:	b292      	uxth	r2, r2
 800258e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	77fb      	strb	r3, [r7, #31]
 8002596:	e00f      	b.n	80025b8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4611      	mov	r1, r2
 80025a0:	7ffa      	ldrb	r2, [r7, #31]
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	440a      	add	r2, r1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	3320      	adds	r3, #32
 80025aa:	443b      	add	r3, r7
 80025ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80025b0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80025b2:	7ffb      	ldrb	r3, [r7, #31]
 80025b4:	3301      	adds	r3, #1
 80025b6:	77fb      	strb	r3, [r7, #31]
 80025b8:	7ffb      	ldrb	r3, [r7, #31]
 80025ba:	2b07      	cmp	r3, #7
 80025bc:	d9ec      	bls.n	8002598 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0208 	orr.w	r2, r2, #8
 80025d0:	b292      	uxth	r2, r2
 80025d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025de:	b29a      	uxth	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e8:	b292      	uxth	r2, r2
 80025ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0204 	orr.w	r2, r2, #4
 8002600:	b292      	uxth	r2, r2
 8002602:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f006 fdc0 	bl	800918c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800260c:	e026      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00f      	beq.n	8002638 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800262a:	b292      	uxth	r2, r2
 800262c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f006 fd7e 	bl	8009132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002636:	e011      	b.n	800265c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002654:	b292      	uxth	r2, r2
 8002656:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800265a:	bf00      	nop
  }
}
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_PCD_SetAddress+0x1a>
 8002678:	2302      	movs	r3, #2
 800267a:	e012      	b.n	80026a2 <HAL_PCD_SetAddress+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f004 fe40 	bl	8007318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	4608      	mov	r0, r1
 80026b4:	4611      	mov	r1, r2
 80026b6:	461a      	mov	r2, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	70fb      	strb	r3, [r7, #3]
 80026bc:	460b      	mov	r3, r1
 80026be:	803b      	strh	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da0e      	bge.n	80026ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 0207 	and.w	r2, r3, #7
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	3310      	adds	r3, #16
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	705a      	strb	r2, [r3, #1]
 80026ec:	e00e      	b.n	800270c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	f003 0207 	and.w	r2, r3, #7
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002718:	883a      	ldrh	r2, [r7, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	78ba      	ldrb	r2, [r7, #2]
 8002722:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002724:	78bb      	ldrb	r3, [r7, #2]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d102      	bne.n	8002730 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_EP_Open+0x94>
 800273a:	2302      	movs	r3, #2
 800273c:	e00e      	b.n	800275c <HAL_PCD_EP_Open+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fb89 	bl	8004e64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800275a:	7afb      	ldrb	r3, [r7, #11]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0e      	bge.n	8002796 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 0207 	and.w	r2, r3, #7
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	3310      	adds	r3, #16
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	705a      	strb	r2, [r3, #1]
 8002794:	e00e      	b.n	80027b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f003 0207 	and.w	r2, r3, #7
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_PCD_EP_Close+0x6a>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00e      	b.n	80027ec <HAL_PCD_EP_Close+0x88>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 ff01 	bl	80055e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	460b      	mov	r3, r1
 8002802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	f003 0207 	and.w	r2, r3, #7
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	b2da      	uxtb	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6979      	ldr	r1, [r7, #20]
 8002846:	4618      	mov	r0, r3
 8002848:	f003 f8b8 	bl	80059bc <USB_EPStartXfer>

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	f003 0207 	and.w	r2, r3, #7
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002878:	681b      	ldr	r3, [r3, #0]
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	460b      	mov	r3, r1
 8002892:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	3310      	adds	r3, #16
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6979      	ldr	r1, [r7, #20]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 f86a 	bl	80059bc <USB_EPStartXfer>

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	7912      	ldrb	r2, [r2, #4]
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e04c      	b.n	80029aa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da0e      	bge.n	8002936 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 0207 	and.w	r2, r3, #7
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	3310      	adds	r3, #16
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	705a      	strb	r2, [r3, #1]
 8002934:	e00c      	b.n	8002950 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_PCD_EP_SetStall+0x7e>
 800296c:	2302      	movs	r3, #2
 800296e:	e01c      	b.n	80029aa <HAL_PCD_EP_SetStall+0xb8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 fbcd 	bl	800711e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	2b00      	cmp	r3, #0
 800298c:	d108      	bne.n	80029a0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f004 fcf2 	bl	8007384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	7912      	ldrb	r2, [r2, #4]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e040      	b.n	8002a52 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da0e      	bge.n	80029f6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 0207 	and.w	r2, r3, #7
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	3310      	adds	r3, #16
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	705a      	strb	r2, [r3, #1]
 80029f4:	e00e      	b.n	8002a14 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	f003 0207 	and.w	r2, r3, #7
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_PCD_EP_ClrStall+0x82>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e00e      	b.n	8002a52 <HAL_PCD_EP_ClrStall+0xa0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fbbb 	bl	80071be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b096      	sub	sp, #88	@ 0x58
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a62:	e3bb      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 8175 	bne.w	8002d72 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d14e      	bne.n	8002b32 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa4:	81fb      	strh	r3, [r7, #14]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3310      	adds	r3, #16
 8002abc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	441a      	add	r2, r3
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002af8:	2100      	movs	r1, #0
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f006 faff 	bl	80090fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b5b      	ldrb	r3, [r3, #13]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8368 	beq.w	80031dc <PCD_EP_ISR_Handler+0x782>
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 8363 	bne.w	80031dc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7b5b      	ldrb	r3, [r3, #13]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	735a      	strb	r2, [r3, #13]
 8002b30:	e354      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b38:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d034      	beq.n	8002bba <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	3306      	adds	r3, #6
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b88:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f004 fc49 	bl	8007426 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	823b      	strh	r3, [r7, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	8a3a      	ldrh	r2, [r7, #16]
 8002baa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f006 fa76 	bl	80090a4 <HAL_PCD_SetupStageCallback>
 8002bb8:	e310      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bba:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f280 830c 	bge.w	80031dc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	83fb      	strh	r3, [r7, #30]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	8bfa      	ldrh	r2, [r7, #30]
 8002bda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bde:	b292      	uxth	r2, r2
 8002be0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3306      	adds	r3, #6
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6812      	ldr	r2, [r2, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d019      	beq.n	8002c4a <PCD_EP_ISR_Handler+0x1f0>
 8002c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c24:	6959      	ldr	r1, [r3, #20]
 8002c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c28:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c2c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f004 fbf9 	bl	8007426 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	441a      	add	r2, r3
 8002c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c40:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c42:	2100      	movs	r1, #0
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f006 fa3f 	bl	80090c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 82bd 	bne.w	80031dc <PCD_EP_ISR_Handler+0x782>
 8002c62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c6e:	f000 82b5 	beq.w	80031dc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ca8:	d91d      	bls.n	8002ce6 <PCD_EP_ISR_Handler+0x28c>
 8002caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <PCD_EP_ISR_Handler+0x26a>
 8002cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	029b      	lsls	r3, r3, #10
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	e026      	b.n	8002d34 <PCD_EP_ISR_Handler+0x2da>
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <PCD_EP_ISR_Handler+0x2aa>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e017      	b.n	8002d34 <PCD_EP_ISR_Handler+0x2da>
 8002d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <PCD_EP_ISR_Handler+0x2c4>
 8002d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	029b      	lsls	r3, r3, #10
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d44:	827b      	strh	r3, [r7, #18]
 8002d46:	8a7b      	ldrh	r3, [r7, #18]
 8002d48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d4c:	827b      	strh	r3, [r7, #18]
 8002d4e:	8a7b      	ldrh	r3, [r7, #18]
 8002d50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d54:	827b      	strh	r3, [r7, #18]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	8a7b      	ldrh	r3, [r7, #18]
 8002d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8013      	strh	r3, [r2, #0]
 8002d70:	e234      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d86:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f280 80fc 	bge.w	8002f88 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002da6:	4013      	ands	r3, r2
 8002da8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002dbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002dc6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dde:	7b1b      	ldrb	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d125      	bne.n	8002e30 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	3306      	adds	r3, #6
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002e10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8092 	beq.w	8002f3e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e20:	6959      	ldr	r1, [r3, #20]
 8002e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e24:	88da      	ldrh	r2, [r3, #6]
 8002e26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e2a:	f004 fafc 	bl	8007426 <USB_ReadPMA>
 8002e2e:	e086      	b.n	8002f3e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d10a      	bne.n	8002e4e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f9d9 	bl	80031f8 <HAL_PCD_EP_DB_Receive>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002e4c:	e077      	b.n	8002f3e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e68:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d024      	beq.n	8002ef6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002ed8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02e      	beq.n	8002f3e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee6:	6959      	ldr	r1, [r3, #20]
 8002ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eea:	891a      	ldrh	r2, [r3, #8]
 8002eec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ef0:	f004 fa99 	bl	8007426 <USB_ReadPMA>
 8002ef4:	e023      	b.n	8002f3e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3306      	adds	r3, #6
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f30:	6959      	ldr	r1, [r3, #20]
 8002f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f34:	895a      	ldrh	r2, [r3, #10]
 8002f36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f3a:	f004 fa74 	bl	8007426 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f46:	441a      	add	r2, r3
 8002f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f54:	441a      	add	r2, r3
 8002f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f58:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <PCD_EP_ISR_Handler+0x514>
 8002f62:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d206      	bcs.n	8002f7c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f006 f8a7 	bl	80090c8 <HAL_PCD_DataOutStageCallback>
 8002f7a:	e005      	b.n	8002f88 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fd1a 	bl	80059bc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8123 	beq.w	80031dc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f96:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe8:	78db      	ldrb	r3, [r3, #3]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	f040 80a2 	bne.w	8003134 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	7b1b      	ldrb	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8093 	beq.w	8003126 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003000:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d046      	beq.n	800309a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800300c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d126      	bne.n	8003062 <PCD_EP_ISR_Handler+0x608>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	4413      	add	r3, r2
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	011a      	lsls	r2, r3, #4
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	4413      	add	r3, r2
 8003036:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800303a:	623b      	str	r3, [r7, #32]
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003046:	b29a      	uxth	r2, r3
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305a:	b29a      	uxth	r2, r3
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e061      	b.n	8003126 <PCD_EP_ISR_Handler+0x6cc>
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d15d      	bne.n	8003126 <PCD_EP_ISR_Handler+0x6cc>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307e:	4413      	add	r3, r2
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	011a      	lsls	r2, r3, #4
 8003088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308a:	4413      	add	r3, r2
 800308c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	2200      	movs	r2, #0
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	e045      	b.n	8003126 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	785b      	ldrb	r3, [r3, #1]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d126      	bne.n	80030f6 <PCD_EP_ISR_Handler+0x69c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030bc:	4413      	add	r3, r2
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
 80030c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	011a      	lsls	r2, r3, #4
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	4413      	add	r3, r2
 80030ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80030d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030da:	b29a      	uxth	r2, r3
 80030dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	801a      	strh	r2, [r3, #0]
 80030f4:	e017      	b.n	8003126 <PCD_EP_ISR_Handler+0x6cc>
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d113      	bne.n	8003126 <PCD_EP_ISR_Handler+0x6cc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800310c:	4413      	add	r3, r2
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	011a      	lsls	r2, r3, #4
 8003116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003118:	4413      	add	r3, r2
 800311a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800311e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003122:	2200      	movs	r2, #0
 8003124:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f005 ffe6 	bl	80090fe <HAL_PCD_DataInStageCallback>
 8003132:	e053      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003134:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d146      	bne.n	80031ce <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003148:	b29b      	uxth	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	3302      	adds	r3, #2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003174:	429a      	cmp	r2, r3
 8003176:	d907      	bls.n	8003188 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003180:	1ad2      	subs	r2, r2, r3
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	619a      	str	r2, [r3, #24]
 8003186:	e002      	b.n	800318e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f005 ffae 	bl	80090fe <HAL_PCD_DataInStageCallback>
 80031a2:	e01b      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80031a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031ac:	441a      	add	r2, r3
 80031ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80031b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031ba:	441a      	add	r2, r3
 80031bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031be:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031c6:	4618      	mov	r0, r3
 80031c8:	f002 fbf8 	bl	80059bc <USB_EPStartXfer>
 80031cc:	e006      	b.n	80031dc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031d2:	461a      	mov	r2, r3
 80031d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f91b 	bl	8003412 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	b21b      	sxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f6ff ac3b 	blt.w	8002a64 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3758      	adds	r7, #88	@ 0x58
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d07e      	beq.n	800330e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003218:	b29b      	uxth	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	3302      	adds	r3, #2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003238:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	8b7b      	ldrh	r3, [r7, #26]
 8003240:	429a      	cmp	r2, r3
 8003242:	d306      	bcc.n	8003252 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	699a      	ldr	r2, [r3, #24]
 8003248:	8b7b      	ldrh	r3, [r7, #26]
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	619a      	str	r2, [r3, #24]
 8003250:	e002      	b.n	8003258 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d123      	bne.n	80032a8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327a:	833b      	strh	r3, [r7, #24]
 800327c:	8b3b      	ldrh	r3, [r7, #24]
 800327e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003282:	833b      	strh	r3, [r7, #24]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	8b3b      	ldrh	r3, [r7, #24]
 8003294:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003298:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800329c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01f      	beq.n	80032f2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032cc:	82fb      	strh	r3, [r7, #22]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	8afb      	ldrh	r3, [r7, #22]
 80032de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032f2:	8b7b      	ldrh	r3, [r7, #26]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8087 	beq.w	8003408 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6959      	ldr	r1, [r3, #20]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	891a      	ldrh	r2, [r3, #8]
 8003306:	8b7b      	ldrh	r3, [r7, #26]
 8003308:	f004 f88d 	bl	8007426 <USB_ReadPMA>
 800330c:	e07c      	b.n	8003408 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	3306      	adds	r3, #6
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003336:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	8b7b      	ldrh	r3, [r7, #26]
 800333e:	429a      	cmp	r2, r3
 8003340:	d306      	bcc.n	8003350 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	8b7b      	ldrh	r3, [r7, #26]
 8003348:	1ad2      	subs	r2, r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	619a      	str	r2, [r3, #24]
 800334e:	e002      	b.n	8003356 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d123      	bne.n	80033a6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003378:	83fb      	strh	r3, [r7, #30]
 800337a:	8bfb      	ldrh	r3, [r7, #30]
 800337c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003380:	83fb      	strh	r3, [r7, #30]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	441a      	add	r2, r3
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800339a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800339e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11f      	bne.n	80033f0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ca:	83bb      	strh	r3, [r7, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	8bbb      	ldrh	r3, [r7, #28]
 80033dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033f0:	8b7b      	ldrh	r3, [r7, #26]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	895a      	ldrh	r2, [r3, #10]
 8003402:	8b7b      	ldrh	r3, [r7, #26]
 8003404:	f004 f80f 	bl	8007426 <USB_ReadPMA>
    }
  }

  return count;
 8003408:	8b7b      	ldrh	r3, [r7, #26]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b0a4      	sub	sp, #144	@ 0x90
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 81dd 	beq.w	80037e6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	3302      	adds	r3, #2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003454:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003460:	429a      	cmp	r2, r3
 8003462:	d907      	bls.n	8003474 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800346c:	1ad2      	subs	r2, r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	619a      	str	r2, [r3, #24]
 8003472:	e002      	b.n	800347a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80b9 	bne.w	80035f6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d126      	bne.n	80034da <HAL_PCD_EP_DB_Transmit+0xc8>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349a:	b29b      	uxth	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a0:	4413      	add	r3, r2
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	011a      	lsls	r2, r3, #4
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	b29a      	uxth	r2, r3
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	801a      	strh	r2, [r3, #0]
 80034d8:	e01a      	b.n	8003510 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	785b      	ldrb	r3, [r3, #1]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d116      	bne.n	8003510 <HAL_PCD_EP_DB_Transmit+0xfe>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f6:	4413      	add	r3, r2
 80034f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	011a      	lsls	r2, r3, #4
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	4413      	add	r3, r2
 8003504:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003508:	633b      	str	r3, [r7, #48]	@ 0x30
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	2200      	movs	r2, #0
 800350e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d126      	bne.n	800356c <HAL_PCD_EP_DB_Transmit+0x15a>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	011a      	lsls	r2, r3, #4
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003550:	b29a      	uxth	r2, r3
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003564:	b29a      	uxth	r2, r3
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e017      	b.n	800359c <HAL_PCD_EP_DB_Transmit+0x18a>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d113      	bne.n	800359c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003582:	4413      	add	r3, r2
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	011a      	lsls	r2, r3, #4
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	4413      	add	r3, r2
 8003590:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	2200      	movs	r2, #0
 800359a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f005 fdab 	bl	80090fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 82fc 	beq.w	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ce:	82fb      	strh	r3, [r7, #22]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	441a      	add	r2, r3
 80035de:	8afb      	ldrh	r3, [r7, #22]
 80035e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]
 80035f4:	e2da      	b.n	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d021      	beq.n	8003644 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	441a      	add	r2, r3
 800362c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800363c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003640:	b29b      	uxth	r3, r3
 8003642:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800364a:	2b01      	cmp	r3, #1
 800364c:	f040 82ae 	bne.w	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003658:	441a      	add	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	69da      	ldr	r2, [r3, #28]
 8003662:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003666:	441a      	add	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d30b      	bcc.n	8003690 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003688:	1ad2      	subs	r2, r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	621a      	str	r2, [r3, #32]
 800368e:	e017      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003698:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800369c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036a8:	e00a      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2200      	movs	r2, #0
 80036be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d165      	bne.n	8003794 <HAL_PCD_EP_DB_Transmit+0x382>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036dc:	4413      	add	r3, r2
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	011a      	lsls	r2, r3, #4
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	4413      	add	r3, r2
 80036ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	801a      	strh	r2, [r3, #0]
 8003700:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003704:	2b3e      	cmp	r3, #62	@ 0x3e
 8003706:	d91d      	bls.n	8003744 <HAL_PCD_EP_DB_Transmit+0x332>
 8003708:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_PCD_EP_DB_Transmit+0x310>
 800371c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371e:	3b01      	subs	r3, #1
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29a      	uxth	r2, r3
 8003728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800372a:	b29b      	uxth	r3, r3
 800372c:	029b      	lsls	r3, r3, #10
 800372e:	b29b      	uxth	r3, r3
 8003730:	4313      	orrs	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800373c:	b29a      	uxth	r2, r3
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e044      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_PCD_EP_DB_Transmit+0x350>
 800374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	b29b      	uxth	r3, r3
 8003752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375a:	b29a      	uxth	r2, r3
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	e035      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003762:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800376a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003778:	3301      	adds	r3, #1
 800377a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29a      	uxth	r2, r3
 8003782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003784:	b29b      	uxth	r3, r3
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	b29b      	uxth	r3, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	b29a      	uxth	r2, r3
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	801a      	strh	r2, [r3, #0]
 8003792:	e01c      	b.n	80037ce <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d118      	bne.n	80037ce <HAL_PCD_EP_DB_Transmit+0x3bc>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b0:	4413      	add	r3, r2
 80037b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	011a      	lsls	r2, r3, #4
 80037ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037bc:	4413      	add	r3, r2
 80037be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6959      	ldr	r1, [r3, #20]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	891a      	ldrh	r2, [r3, #8]
 80037da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f003 fddb 	bl	800739a <USB_WritePMA>
 80037e4:	e1e2      	b.n	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	3306      	adds	r3, #6
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800381a:	429a      	cmp	r2, r3
 800381c:	d307      	bcc.n	800382e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	619a      	str	r2, [r3, #24]
 800382c:	e002      	b.n	8003834 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 80c0 	bne.w	80039be <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d126      	bne.n	8003894 <HAL_PCD_EP_DB_Transmit+0x482>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800385a:	4413      	add	r3, r2
 800385c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	011a      	lsls	r2, r3, #4
 8003864:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003866:	4413      	add	r3, r2
 8003868:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800386c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800386e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003878:	b29a      	uxth	r2, r3
 800387a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800388c:	b29a      	uxth	r2, r3
 800388e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	e01a      	b.n	80038ca <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	785b      	ldrb	r3, [r3, #1]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d116      	bne.n	80038ca <HAL_PCD_EP_DB_Transmit+0x4b8>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038b0:	4413      	add	r3, r2
 80038b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	011a      	lsls	r2, r3, #4
 80038ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038bc:	4413      	add	r3, r2
 80038be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038c6:	2200      	movs	r2, #0
 80038c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d12b      	bne.n	8003930 <HAL_PCD_EP_DB_Transmit+0x51e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ec:	4413      	add	r3, r2
 80038ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	011a      	lsls	r2, r3, #4
 80038f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f8:	4413      	add	r3, r2
 80038fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003902:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390e:	b29a      	uxth	r2, r3
 8003910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003926:	b29a      	uxth	r2, r3
 8003928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e017      	b.n	8003960 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d113      	bne.n	8003960 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003940:	b29b      	uxth	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003946:	4413      	add	r3, r2
 8003948:	677b      	str	r3, [r7, #116]	@ 0x74
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	011a      	lsls	r2, r3, #4
 8003950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003952:	4413      	add	r3, r2
 8003954:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003958:	673b      	str	r3, [r7, #112]	@ 0x70
 800395a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f005 fbc9 	bl	80090fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	2b00      	cmp	r3, #0
 8003974:	f040 811a 	bne.w	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	441a      	add	r2, r3
 80039a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80039a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8013      	strh	r3, [r2, #0]
 80039bc:	e0f6      	b.n	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d121      	bne.n	8003a0c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	441a      	add	r2, r3
 80039f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	f040 80ca 	bne.w	8003bac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a20:	441a      	add	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a2e:	441a      	add	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d30b      	bcc.n	8003a58 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a50:	1ad2      	subs	r2, r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	621a      	str	r2, [r3, #32]
 8003a56:	e017      	b.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d108      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a70:	e00a      	b.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d165      	bne.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x750>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aaa:	4413      	add	r3, r2
 8003aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	011a      	lsls	r2, r3, #4
 8003ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003abc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003abe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad2:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ad4:	d91d      	bls.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x700>
 8003ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aec:	3b01      	subs	r3, #1
 8003aee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	029b      	lsls	r3, r3, #10
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e041      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003b1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e032      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x738>
 8003b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b46:	3301      	adds	r3, #1
 8003b48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	e019      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d115      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x784>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b78:	4413      	add	r3, r2
 8003b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	011a      	lsls	r2, r3, #4
 8003b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b94:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6959      	ldr	r1, [r3, #20]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	895a      	ldrh	r2, [r3, #10]
 8003ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f003 fbf7 	bl	800739a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc6:	82bb      	strh	r3, [r7, #20]
 8003bc8:	8abb      	ldrh	r3, [r7, #20]
 8003bca:	f083 0310 	eor.w	r3, r3, #16
 8003bce:	82bb      	strh	r3, [r7, #20]
 8003bd0:	8abb      	ldrh	r3, [r7, #20]
 8003bd2:	f083 0320 	eor.w	r3, r3, #32
 8003bd6:	82bb      	strh	r3, [r7, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	8abb      	ldrh	r3, [r7, #20]
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3790      	adds	r7, #144	@ 0x90
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	817b      	strh	r3, [r7, #10]
 8003c14:	4613      	mov	r3, r2
 8003c16:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c18:	897b      	ldrh	r3, [r7, #10]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	f003 0207 	and.w	r2, r3, #7
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	3310      	adds	r3, #16
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e009      	b.n	8003c50 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c3c:	897a      	ldrh	r2, [r7, #10]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	80da      	strh	r2, [r3, #6]
 8003c64:	e00b      	b.n	8003c7e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e272      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8087 	beq.w	8003dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cac:	4b92      	ldr	r3, [pc, #584]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d112      	bne.n	8003cea <HAL_RCC_OscConfig+0x5e>
 8003cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd2:	4b89      	ldr	r3, [pc, #548]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x12c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d168      	bne.n	8003db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e24c      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x76>
 8003cf4:	4b80      	ldr	r3, [pc, #512]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	e02e      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x98>
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b78      	ldr	r3, [pc, #480]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a77      	ldr	r2, [pc, #476]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e01d      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCC_OscConfig+0xbc>
 8003d2e:	4b72      	ldr	r3, [pc, #456]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a71      	ldr	r2, [pc, #452]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e00b      	b.n	8003d60 <HAL_RCC_OscConfig+0xd4>
 8003d48:	4b6b      	ldr	r3, [pc, #428]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b68      	ldr	r3, [pc, #416]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a67      	ldr	r2, [pc, #412]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd f8e2 	bl	8000f30 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fd f8de 	bl	8000f30 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	@ 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e200      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0xe4>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd f8ce 	bl	8000f30 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fd f8ca 	bl	8000f30 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	@ 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1ec      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x10c>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dd2:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d11c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x18c>
 8003dde:	4b46      	ldr	r3, [pc, #280]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	4b43      	ldr	r3, [pc, #268]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x176>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e1c0      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4939      	ldr	r1, [pc, #228]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	e03a      	b.n	8003e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e20:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fd f883 	bl	8000f30 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e2e:	f7fd f87f 	bl	8000f30 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1a1      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4927      	ldr	r1, [pc, #156]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
 8003e60:	e015      	b.n	8003e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e62:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <HAL_RCC_OscConfig+0x270>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd f862 	bl	8000f30 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fd f85e 	bl	8000f30 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e180      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d03a      	beq.n	8003f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d019      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea2:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea8:	f7fd f842 	bl	8000f30 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb0:	f7fd f83e 	bl	8000f30 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e160      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f000 fa9c 	bl	800440c <RCC_Delay>
 8003ed4:	e01c      	b.n	8003f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fd f828 	bl	8000f30 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee2:	e00f      	b.n	8003f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fd f824 	bl	8000f30 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d908      	bls.n	8003f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e146      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	42420000 	.word	0x42420000
 8003f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f04:	4b92      	ldr	r3, [pc, #584]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e9      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80a6 	beq.w	800406a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f22:	4b8b      	ldr	r3, [pc, #556]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	4b88      	ldr	r3, [pc, #544]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4a87      	ldr	r2, [pc, #540]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f38:	61d3      	str	r3, [r2, #28]
 8003f3a:	4b85      	ldr	r3, [pc, #532]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b82      	ldr	r3, [pc, #520]	@ (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b7f      	ldr	r3, [pc, #508]	@ (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fc ffe5 	bl	8000f30 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fc ffe1 	bl	8000f30 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b64      	cmp	r3, #100	@ 0x64
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e103      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b75      	ldr	r3, [pc, #468]	@ (8004154 <HAL_RCC_OscConfig+0x4c8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x312>
 8003f90:	4b6f      	ldr	r3, [pc, #444]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a6e      	ldr	r2, [pc, #440]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6213      	str	r3, [r2, #32]
 8003f9c:	e02d      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x334>
 8003fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4a69      	ldr	r2, [pc, #420]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	6213      	str	r3, [r2, #32]
 8003fb2:	4b67      	ldr	r3, [pc, #412]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4a66      	ldr	r2, [pc, #408]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fb8:	f023 0304 	bic.w	r3, r3, #4
 8003fbc:	6213      	str	r3, [r2, #32]
 8003fbe:	e01c      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	d10c      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x356>
 8003fc8:	4b61      	ldr	r3, [pc, #388]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4a60      	ldr	r2, [pc, #384]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6213      	str	r3, [r2, #32]
 8003fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6213      	str	r3, [r2, #32]
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCC_OscConfig+0x36e>
 8003fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6213      	str	r3, [r2, #32]
 8003fee:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4a57      	ldr	r2, [pc, #348]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d015      	beq.n	800402e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fc ff95 	bl	8000f30 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fc ff91 	bl	8000f30 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0b1      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	4b4b      	ldr	r3, [pc, #300]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCC_OscConfig+0x37e>
 800402c:	e014      	b.n	8004058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fc ff7f 	bl	8000f30 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fc ff7b 	bl	8000f30 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e09b      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	4b40      	ldr	r3, [pc, #256]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1ee      	bne.n	8004036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4b3c      	ldr	r3, [pc, #240]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4a3b      	ldr	r2, [pc, #236]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8087 	beq.w	8004182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004074:	4b36      	ldr	r3, [pc, #216]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 030c 	and.w	r3, r3, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d061      	beq.n	8004144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d146      	bne.n	8004116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004088:	4b33      	ldr	r3, [pc, #204]	@ (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fc ff4f 	bl	8000f30 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7fc ff4b 	bl	8000f30 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e06d      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040bc:	d108      	bne.n	80040d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040be:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	4921      	ldr	r1, [pc, #132]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a19      	ldr	r1, [r3, #32]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	430b      	orrs	r3, r1
 80040e2:	491b      	ldr	r1, [pc, #108]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <HAL_RCC_OscConfig+0x4cc>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fc ff1f 	bl	8000f30 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f6:	f7fc ff1b 	bl	8000f30 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e03d      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004108:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x46a>
 8004114:	e035      	b.n	8004182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fc ff08 	bl	8000f30 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fc ff04 	bl	8000f30 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e026      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x498>
 8004142:	e01e      	b.n	8004182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e019      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
 8004150:	40021000 	.word	0x40021000
 8004154:	40007000 	.word	0x40007000
 8004158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_OscConfig+0x500>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	429a      	cmp	r2, r3
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000

08004190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0d0      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b67      	ldr	r3, [pc, #412]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0207 	bic.w	r2, r3, #7
 80041ba:	4965      	ldr	r1, [pc, #404]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b63      	ldr	r3, [pc, #396]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b8      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ec:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a58      	ldr	r2, [pc, #352]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80041f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004204:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a52      	ldr	r2, [pc, #328]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800420e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b50      	ldr	r3, [pc, #320]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	494d      	ldr	r1, [pc, #308]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d040      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d115      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424e:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e073      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425e:	4b3d      	ldr	r3, [pc, #244]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e06b      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426e:	4b39      	ldr	r3, [pc, #228]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f023 0203 	bic.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4936      	ldr	r1, [pc, #216]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004280:	f7fc fe56 	bl	8000f30 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004286:	e00a      	b.n	800429e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004288:	f7fc fe52 	bl	8000f30 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e053      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	4b2d      	ldr	r3, [pc, #180]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 020c 	and.w	r2, r3, #12
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d1eb      	bne.n	8004288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b0:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d210      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4922      	ldr	r1, [pc, #136]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e032      	b.n	8004346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4916      	ldr	r1, [pc, #88]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490e      	ldr	r1, [pc, #56]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800431e:	f000 f821 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490a      	ldr	r1, [pc, #40]	@ (8004358 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	4a09      	ldr	r2, [pc, #36]	@ (800435c <HAL_RCC_ClockConfig+0x1cc>)
 8004338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800433a:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_RCC_ClockConfig+0x1d0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fdb4 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40022000 	.word	0x40022000
 8004354:	40021000 	.word	0x40021000
 8004358:	08009f7c 	.word	0x08009f7c
 800435c:	20000000 	.word	0x20000000
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800437e:	4b1e      	ldr	r3, [pc, #120]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b04      	cmp	r3, #4
 800438c:	d002      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x30>
 800438e:	2b08      	cmp	r3, #8
 8004390:	d003      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x36>
 8004392:	e027      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004396:	613b      	str	r3, [r7, #16]
      break;
 8004398:	e027      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	0c9b      	lsrs	r3, r3, #18
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	4a17      	ldr	r2, [pc, #92]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043a4:	5cd3      	ldrb	r3, [r2, r3]
 80043a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043b2:	4b11      	ldr	r3, [pc, #68]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	0c5b      	lsrs	r3, r3, #17
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	4a11      	ldr	r2, [pc, #68]	@ (8004404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043be:	5cd3      	ldrb	r3, [r2, r3]
 80043c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a0d      	ldr	r2, [pc, #52]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x98>)
 80043c6:	fb03 f202 	mul.w	r2, r3, r2
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e004      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	613b      	str	r3, [r7, #16]
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x98>)
 80043e6:	613b      	str	r3, [r7, #16]
      break;
 80043e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ea:	693b      	ldr	r3, [r7, #16]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	007a1200 	.word	0x007a1200
 8004400:	08009f8c 	.word	0x08009f8c
 8004404:	08009f9c 	.word	0x08009f9c
 8004408:	003d0900 	.word	0x003d0900

0800440c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <RCC_Delay+0x34>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <RCC_Delay+0x38>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0a5b      	lsrs	r3, r3, #9
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004428:	bf00      	nop
  }
  while (Delay --);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	60fa      	str	r2, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f9      	bne.n	8004428 <RCC_Delay+0x1c>
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	20000000 	.word	0x20000000
 8004444:	10624dd3 	.word	0x10624dd3

08004448 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d07d      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004464:	2300      	movs	r3, #0
 8004466:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004468:	4b4f      	ldr	r3, [pc, #316]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10d      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	4a4b      	ldr	r2, [pc, #300]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447e:	61d3      	str	r3, [r2, #28]
 8004480:	4b49      	ldr	r3, [pc, #292]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004490:	4b46      	ldr	r3, [pc, #280]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d118      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449c:	4b43      	ldr	r3, [pc, #268]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a42      	ldr	r2, [pc, #264]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a8:	f7fc fd42 	bl	8000f30 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	e008      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fc fd3e 	bl	8000f30 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e06d      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b3a      	ldr	r3, [pc, #232]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ce:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d027      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ec:	4b2e      	ldr	r3, [pc, #184]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b2e      	ldr	r3, [pc, #184]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fc:	4b2c      	ldr	r3, [pc, #176]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004502:	4a29      	ldr	r2, [pc, #164]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d014      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fc fd0d 	bl	8000f30 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fc fd09 	bl	8000f30 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e036      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453c:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4917      	ldr	r1, [pc, #92]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454a:	4313      	orrs	r3, r2
 800454c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4a13      	ldr	r2, [pc, #76]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800455e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	490b      	ldr	r1, [pc, #44]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458a:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	4904      	ldr	r1, [pc, #16]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42420440 	.word	0x42420440

080045b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e041      	b.n	800464a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fb76 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fa5c 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e03a      	b.n	80046e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_TIM_Base_Start_IT+0x98>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x58>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d009      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x58>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIM_Base_Start_IT+0x58>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a13      	ldr	r2, [pc, #76]	@ (80046f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d010      	beq.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	e007      	b.n	80046e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d020      	beq.n	800475c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01b      	beq.n	800475c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0202 	mvn.w	r2, #2
 800472c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f998 	bl	8004a78 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f98b 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f99a 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d020      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01b      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f972 	bl	8004a78 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f965 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f974 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d020      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0208 	mvn.w	r2, #8
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2204      	movs	r2, #4
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f94c 	bl	8004a78 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f93f 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f94e 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d020      	beq.n	8004840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0210 	mvn.w	r2, #16
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2208      	movs	r2, #8
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f926 	bl	8004a78 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f919 	bl	8004a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f928 	bl	8004a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0201 	mvn.w	r2, #1
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fb fcac 	bl	80001bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa7f 	bl	8004d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8f8 	bl	8004a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0220 	mvn.w	r2, #32
 80048c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa52 	bl	8004d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_ConfigClockSource+0x1c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e0b4      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x186>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800491a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800492c:	d03e      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0xd4>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004932:	f200 8087 	bhi.w	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493a:	f000 8086 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x172>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004942:	d87f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004944:	2b70      	cmp	r3, #112	@ 0x70
 8004946:	d01a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0xa6>
 8004948:	2b70      	cmp	r3, #112	@ 0x70
 800494a:	d87b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b60      	cmp	r3, #96	@ 0x60
 800494e:	d050      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004950:	2b60      	cmp	r3, #96	@ 0x60
 8004952:	d877      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b50      	cmp	r3, #80	@ 0x50
 8004956:	d03c      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004958:	2b50      	cmp	r3, #80	@ 0x50
 800495a:	d873      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b40      	cmp	r3, #64	@ 0x40
 800495e:	d058      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x13a>
 8004960:	2b40      	cmp	r3, #64	@ 0x40
 8004962:	d86f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b30      	cmp	r3, #48	@ 0x30
 8004966:	d064      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	2b30      	cmp	r3, #48	@ 0x30
 800496a:	d86b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d060      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d867      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d05a      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	e062      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800498e:	f000 f974 	bl	8004c7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
      break;
 80049aa:	e04f      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049bc:	f000 f95d 	bl	8004c7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ce:	609a      	str	r2, [r3, #8]
      break;
 80049d0:	e03c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 f8d4 	bl	8004b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2150      	movs	r1, #80	@ 0x50
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f92b 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 80049f0:	e02c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 f8f2 	bl	8004be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2160      	movs	r1, #96	@ 0x60
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f91b 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 8004a10:	e01c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 f8b4 	bl	8004b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2140      	movs	r1, #64	@ 0x40
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f90b 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 f902 	bl	8004c46 <TIM_ITRx_SetConfig>
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr
	...

08004ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8004b80 <TIM_Base_SetConfig+0xd0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00b      	beq.n	8004ae0 <TIM_Base_SetConfig+0x30>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ace:	d007      	beq.n	8004ae0 <TIM_Base_SetConfig+0x30>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b84 <TIM_Base_SetConfig+0xd4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0x30>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a2b      	ldr	r2, [pc, #172]	@ (8004b88 <TIM_Base_SetConfig+0xd8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d108      	bne.n	8004af2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a22      	ldr	r2, [pc, #136]	@ (8004b80 <TIM_Base_SetConfig+0xd0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0x62>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0x62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1f      	ldr	r2, [pc, #124]	@ (8004b84 <TIM_Base_SetConfig+0xd4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x62>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004b88 <TIM_Base_SetConfig+0xd8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b80 <TIM_Base_SetConfig+0xd0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d103      	bne.n	8004b58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	611a      	str	r2, [r3, #16]
  }
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800

08004b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 030a 	bic.w	r3, r3, #10
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0210 	bic.w	r2, r3, #16
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	031b      	lsls	r3, r3, #12
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f043 0307 	orr.w	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	021a      	lsls	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	609a      	str	r2, [r3, #8]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bc80      	pop	{r7}
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e046      	b.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a16      	ldr	r2, [pc, #88]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a10      	ldr	r2, [pc, #64]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10c      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800

08004d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4638      	mov	r0, r7
 8004da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004dc2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004dc6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004de6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004dea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr

08004e12 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	4638      	mov	r0, r7
 8004e34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b09d      	sub	sp, #116	@ 0x74
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	78db      	ldrb	r3, [r3, #3]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d81f      	bhi.n	8004ed6 <USB_ActivateEndpoint+0x72>
 8004e96:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <USB_ActivateEndpoint+0x38>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004edf 	.word	0x08004edf
 8004ea8:	08004ebb 	.word	0x08004ebb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004eac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004eb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004eb8:	e012      	b.n	8004ee0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004eba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ebe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004ec2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ec6:	e00b      	b.n	8004ee0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ec8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ecc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ed0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ed4:	e004      	b.n	8004ee0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004edc:	e000      	b.n	8004ee0 <USB_ActivateEndpoint+0x7c>
      break;
 8004ede:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	7b1b      	ldrb	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 8178 	bne.w	8005240 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8084 	beq.w	8005062 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	011a      	lsls	r2, r3, #4
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	88db      	ldrh	r3, [r3, #6]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	827b      	strh	r3, [r7, #18]
 8004f9c:	8a7b      	ldrh	r3, [r7, #18]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01b      	beq.n	8004fde <USB_ActivateEndpoint+0x17a>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbc:	823b      	strh	r3, [r7, #16]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	8a3b      	ldrh	r3, [r7, #16]
 8004fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	78db      	ldrb	r3, [r3, #3]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d020      	beq.n	8005028 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffc:	81bb      	strh	r3, [r7, #12]
 8004ffe:	89bb      	ldrh	r3, [r7, #12]
 8005000:	f083 0320 	eor.w	r3, r3, #32
 8005004:	81bb      	strh	r3, [r7, #12]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	89bb      	ldrh	r3, [r7, #12]
 8005012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800501a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800501e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005022:	b29b      	uxth	r3, r3
 8005024:	8013      	strh	r3, [r2, #0]
 8005026:	e2d5      	b.n	80055d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503e:	81fb      	strh	r3, [r7, #14]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	441a      	add	r2, r3
 800504a:	89fb      	ldrh	r3, [r7, #14]
 800504c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800505c:	b29b      	uxth	r3, r3
 800505e:	8013      	strh	r3, [r2, #0]
 8005060:	e2b8      	b.n	80055d4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	633b      	str	r3, [r7, #48]	@ 0x30
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800506c:	b29b      	uxth	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	4413      	add	r3, r2
 8005074:	633b      	str	r3, [r7, #48]	@ 0x30
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	011a      	lsls	r2, r3, #4
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	4413      	add	r3, r2
 8005080:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	88db      	ldrh	r3, [r3, #6]
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	b29b      	uxth	r3, r3
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	4413      	add	r3, r2
 80050a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	011a      	lsls	r2, r3, #4
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	4413      	add	r3, r2
 80050b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80050d0:	d91d      	bls.n	800510e <USB_ActivateEndpoint+0x2aa>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <USB_ActivateEndpoint+0x288>
 80050e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050e8:	3b01      	subs	r3, #1
 80050ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4313      	orrs	r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005106:	b29a      	uxth	r2, r3
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e026      	b.n	800515c <USB_ActivateEndpoint+0x2f8>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <USB_ActivateEndpoint+0x2c8>
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005124:	b29a      	uxth	r2, r3
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	e017      	b.n	800515c <USB_ActivateEndpoint+0x2f8>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <USB_ActivateEndpoint+0x2e2>
 8005140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005142:	3301      	adds	r3, #1
 8005144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29a      	uxth	r2, r3
 800514c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800514e:	b29b      	uxth	r3, r3
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	b29b      	uxth	r3, r3
 8005154:	4313      	orrs	r3, r2
 8005156:	b29a      	uxth	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	847b      	strh	r3, [r7, #34]	@ 0x22
 800516a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800516c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01b      	beq.n	80051ac <USB_ActivateEndpoint+0x348>
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	843b      	strh	r3, [r7, #32]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	8c3b      	ldrh	r3, [r7, #32]
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d124      	bne.n	80051fe <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	83bb      	strh	r3, [r7, #28]
 80051cc:	8bbb      	ldrh	r3, [r7, #28]
 80051ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051d2:	83bb      	strh	r3, [r7, #28]
 80051d4:	8bbb      	ldrh	r3, [r7, #28]
 80051d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051da:	83bb      	strh	r3, [r7, #28]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	8bbb      	ldrh	r3, [r7, #28]
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]
 80051fc:	e1ea      	b.n	80055d4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005214:	83fb      	strh	r3, [r7, #30]
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800521c:	83fb      	strh	r3, [r7, #30]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	8bfb      	ldrh	r3, [r7, #30]
 800522a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800522e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800523a:	b29b      	uxth	r3, r3
 800523c:	8013      	strh	r3, [r2, #0]
 800523e:	e1c9      	b.n	80055d4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d11e      	bne.n	8005286 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005278:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800527c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]
 8005284:	e01d      	b.n	80052c2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052d2:	4413      	add	r3, r2
 80052d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	011a      	lsls	r2, r3, #4
 80052dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	891b      	ldrh	r3, [r3, #8]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005306:	4413      	add	r3, r2
 8005308:	657b      	str	r3, [r7, #84]	@ 0x54
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	011a      	lsls	r2, r3, #4
 8005310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005312:	4413      	add	r3, r2
 8005314:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005318:	653b      	str	r3, [r7, #80]	@ 0x50
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	895b      	ldrh	r3, [r3, #10]
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	b29b      	uxth	r3, r3
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005328:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 8093 	bne.w	800545a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005344:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01b      	beq.n	8005388 <USB_ActivateEndpoint+0x524>
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800537c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005396:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <USB_ActivateEndpoint+0x574>
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80053f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80053f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80053f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80053fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	441a      	add	r2, r3
 800540a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005436:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	441a      	add	r2, r3
 8005442:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800544c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	e0bc      	b.n	80055d4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800546a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800546e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01d      	beq.n	80054b2 <USB_ActivateEndpoint+0x64e>
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80054c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01d      	beq.n	800550a <USB_ActivateEndpoint+0x6a6>
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	441a      	add	r2, r3
 80054f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80054f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005502:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005506:	b29b      	uxth	r3, r3
 8005508:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	78db      	ldrb	r3, [r3, #3]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d024      	beq.n	800555c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800552c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005530:	f083 0320 	eor.w	r3, r3, #32
 8005534:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	441a      	add	r2, r3
 8005542:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800554a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]
 800555a:	e01d      	b.n	8005598 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800556e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005572:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800558c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80055c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80055d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3774      	adds	r7, #116	@ 0x74
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop

080055e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b08d      	sub	sp, #52	@ 0x34
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 808e 	bne.w	8005714 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d044      	beq.n	800568a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	81bb      	strh	r3, [r7, #12]
 800560e:	89bb      	ldrh	r3, [r7, #12]
 8005610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <USB_DeactivateEndpoint+0x6c>
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800562a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562e:	817b      	strh	r3, [r7, #10]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	441a      	add	r2, r3
 800563a:	897b      	ldrh	r3, [r7, #10]
 800563c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800564c:	b29b      	uxth	r3, r3
 800564e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005666:	813b      	strh	r3, [r7, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	441a      	add	r2, r3
 8005672:	893b      	ldrh	r3, [r7, #8]
 8005674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800567c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005684:	b29b      	uxth	r3, r3
 8005686:	8013      	strh	r3, [r2, #0]
 8005688:	e192      	b.n	80059b0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	827b      	strh	r3, [r7, #18]
 8005698:	8a7b      	ldrh	r3, [r7, #18]
 800569a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01b      	beq.n	80056da <USB_DeactivateEndpoint+0xf6>
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b8:	823b      	strh	r3, [r7, #16]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	8a3b      	ldrh	r3, [r7, #16]
 80056c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f0:	81fb      	strh	r3, [r7, #14]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	441a      	add	r2, r3
 80056fc:	89fb      	ldrh	r3, [r7, #14]
 80056fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800570a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800570e:	b29b      	uxth	r3, r3
 8005710:	8013      	strh	r3, [r2, #0]
 8005712:	e14d      	b.n	80059b0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 80a5 	bne.w	8005868 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	843b      	strh	r3, [r7, #32]
 800572c:	8c3b      	ldrh	r3, [r7, #32]
 800572e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01b      	beq.n	800576e <USB_DeactivateEndpoint+0x18a>
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574c:	83fb      	strh	r3, [r7, #30]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	8bfb      	ldrh	r3, [r7, #30]
 800575a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	83bb      	strh	r3, [r7, #28]
 800577c:	8bbb      	ldrh	r3, [r7, #28]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01b      	beq.n	80057be <USB_DeactivateEndpoint+0x1da>
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579c:	837b      	strh	r3, [r7, #26]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	8b7b      	ldrh	r3, [r7, #26]
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d4:	833b      	strh	r3, [r7, #24]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	8b3b      	ldrh	r3, [r7, #24]
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580c:	82fb      	strh	r3, [r7, #22]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	8afb      	ldrh	r3, [r7, #22]
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005844:	82bb      	strh	r3, [r7, #20]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	8abb      	ldrh	r3, [r7, #20]
 8005852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800585a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800585e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]
 8005866:	e0a3      	b.n	80059b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005876:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <USB_DeactivateEndpoint+0x2d4>
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005896:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80058a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80058c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <USB_DeactivateEndpoint+0x324>
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005900:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005956:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800598a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	441a      	add	r2, r3
 800599a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3734      	adds	r7, #52	@ 0x34
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b0c2      	sub	sp, #264	@ 0x108
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ca:	6018      	str	r0, [r3, #0]
 80059cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	f040 86b7 	bne.w	8006756 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d908      	bls.n	8005a16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a14:	e007      	b.n	8005a26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	7b1b      	ldrb	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d13a      	bne.n	8005aac <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6959      	ldr	r1, [r3, #20]
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	88da      	ldrh	r2, [r3, #6]
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a5c:	6800      	ldr	r0, [r0, #0]
 8005a5e:	f001 fc9c 	bl	800739a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	f000 be1f 	b.w	80066ea <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	f040 8462 	bne.w	8006382 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f240 83df 	bls.w	800629a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 81c7 	beq.w	8005f0c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d177      	bne.n	8005c8a <USB_EPStartXfer+0x2ce>
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	4413      	add	r3, r2
 8005bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	011a      	lsls	r2, r3, #4
 8005bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bec:	d921      	bls.n	8005c32 <USB_EPStartXfer+0x276>
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <USB_EPStartXfer+0x252>
 8005c04:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	e050      	b.n	8005cd4 <USB_EPStartXfer+0x318>
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <USB_EPStartXfer+0x294>
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e041      	b.n	8005cd4 <USB_EPStartXfer+0x318>
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <USB_EPStartXfer+0x2b4>
 8005c66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	e024      	b.n	8005cd4 <USB_EPStartXfer+0x318>
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d11c      	bne.n	8005cd4 <USB_EPStartXfer+0x318>
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	4413      	add	r3, r2
 8005cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	895b      	ldrh	r3, [r3, #10]
 8005ce0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6959      	ldr	r1, [r3, #20]
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cfa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cfe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d02:	6800      	ldr	r0, [r0, #0]
 8005d04:	f001 fb49 	bl	800739a <USB_WritePMA>
            ep->xfer_buff += len;
 8005d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d18:	441a      	add	r2, r3
 8005d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d90f      	bls.n	8005d62 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	621a      	str	r2, [r3, #32]
 8005d60:	e00e      	b.n	8005d80 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d177      	bne.n	8005e80 <USB_EPStartXfer+0x4c4>
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	4413      	add	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	011a      	lsls	r2, r3, #4
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	801a      	strh	r2, [r3, #0]
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005de2:	d921      	bls.n	8005e28 <USB_EPStartXfer+0x46c>
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <USB_EPStartXfer+0x448>
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e056      	b.n	8005ed6 <USB_EPStartXfer+0x51a>
 8005e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <USB_EPStartXfer+0x48a>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e047      	b.n	8005ed6 <USB_EPStartXfer+0x51a>
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <USB_EPStartXfer+0x4aa>
 8005e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e60:	3301      	adds	r3, #1
 8005e62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e02a      	b.n	8005ed6 <USB_EPStartXfer+0x51a>
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d122      	bne.n	8005ed6 <USB_EPStartXfer+0x51a>
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	011a      	lsls	r2, r3, #4
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	891b      	ldrh	r3, [r3, #8]
 8005ee2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6959      	ldr	r1, [r3, #20]
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005efc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f04:	6800      	ldr	r0, [r0, #0]
 8005f06:	f001 fa48 	bl	800739a <USB_WritePMA>
 8005f0a:	e3ee      	b.n	80066ea <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d177      	bne.n	800600c <USB_EPStartXfer+0x650>
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f3c:	4413      	add	r3, r2
 8005f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	011a      	lsls	r2, r3, #4
 8005f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f6e:	d921      	bls.n	8005fb4 <USB_EPStartXfer+0x5f8>
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <USB_EPStartXfer+0x5d4>
 8005f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	029b      	lsls	r3, r3, #10
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e056      	b.n	8006062 <USB_EPStartXfer+0x6a6>
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <USB_EPStartXfer+0x616>
 8005fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e047      	b.n	8006062 <USB_EPStartXfer+0x6a6>
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <USB_EPStartXfer+0x636>
 8005fe8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fec:	3301      	adds	r3, #1
 8005fee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	b29b      	uxth	r3, r3
 8006002:	4313      	orrs	r3, r2
 8006004:	b29a      	uxth	r2, r3
 8006006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e02a      	b.n	8006062 <USB_EPStartXfer+0x6a6>
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d122      	bne.n	8006062 <USB_EPStartXfer+0x6a6>
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	653b      	str	r3, [r7, #80]	@ 0x50
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006036:	b29b      	uxth	r3, r3
 8006038:	461a      	mov	r2, r3
 800603a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603c:	4413      	add	r3, r2
 800603e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	011a      	lsls	r2, r3, #4
 800604e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006050:	4413      	add	r3, r2
 8006052:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	b29a      	uxth	r2, r3
 800605e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006060:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	891b      	ldrh	r3, [r3, #8]
 800606e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6959      	ldr	r1, [r3, #20]
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006082:	b29b      	uxth	r3, r3
 8006084:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006088:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800608c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006090:	6800      	ldr	r0, [r0, #0]
 8006092:	f001 f982 	bl	800739a <USB_WritePMA>
            ep->xfer_buff += len;
 8006096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a6:	441a      	add	r2, r3
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d90f      	bls.n	80060f0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a1a      	ldr	r2, [r3, #32]
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	1ad2      	subs	r2, r2, r3
 80060e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	621a      	str	r2, [r3, #32]
 80060ee:	e00e      	b.n	800610e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	643b      	str	r3, [r7, #64]	@ 0x40
 800611a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d177      	bne.n	800621a <USB_EPStartXfer+0x85e>
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	4413      	add	r3, r2
 800614c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	011a      	lsls	r2, r3, #4
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	4413      	add	r3, r2
 8006160:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006170:	b29a      	uxth	r2, r3
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	2b3e      	cmp	r3, #62	@ 0x3e
 800617c:	d921      	bls.n	80061c2 <USB_EPStartXfer+0x806>
 800617e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006182:	095b      	lsrs	r3, r3, #5
 8006184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <USB_EPStartXfer+0x7e2>
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006198:	3b01      	subs	r3, #1
 800619a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800619e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	029b      	lsls	r3, r3, #10
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e050      	b.n	8006264 <USB_EPStartXfer+0x8a8>
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <USB_EPStartXfer+0x824>
 80061ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e041      	b.n	8006264 <USB_EPStartXfer+0x8a8>
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <USB_EPStartXfer+0x844>
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	3301      	adds	r3, #1
 80061fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29a      	uxth	r2, r3
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620a:	b29b      	uxth	r3, r3
 800620c:	029b      	lsls	r3, r3, #10
 800620e:	b29b      	uxth	r3, r3
 8006210:	4313      	orrs	r3, r2
 8006212:	b29a      	uxth	r2, r3
 8006214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e024      	b.n	8006264 <USB_EPStartXfer+0x8a8>
 800621a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d11c      	bne.n	8006264 <USB_EPStartXfer+0x8a8>
 800622a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800623e:	4413      	add	r3, r2
 8006240:	643b      	str	r3, [r7, #64]	@ 0x40
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	011a      	lsls	r2, r3, #4
 8006250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006252:	4413      	add	r3, r2
 8006254:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625e:	b29a      	uxth	r2, r3
 8006260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006262:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	895b      	ldrh	r3, [r3, #10]
 8006270:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6959      	ldr	r1, [r3, #20]
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	b29b      	uxth	r3, r3
 8006286:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800628a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800628e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	f001 f881 	bl	800739a <USB_WritePMA>
 8006298:	e227      	b.n	80066ea <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80062d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006326:	4413      	add	r3, r2
 8006328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	011a      	lsls	r2, r3, #4
 8006338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800633a:	4413      	add	r3, r2
 800633c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	b29a      	uxth	r2, r3
 8006348:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800634a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800634c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	891b      	ldrh	r3, [r3, #8]
 8006358:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6959      	ldr	r1, [r3, #20]
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636c:	b29b      	uxth	r3, r3
 800636e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006372:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006376:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	f001 f80d 	bl	800739a <USB_WritePMA>
 8006380:	e1b3      	b.n	80066ea <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	1ad2      	subs	r2, r2, r3
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80c6 	beq.w	8006554 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80063d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d177      	bne.n	80064d4 <USB_EPStartXfer+0xb18>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006404:	4413      	add	r3, r2
 8006406:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	011a      	lsls	r2, r3, #4
 8006416:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006418:	4413      	add	r3, r2
 800641a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800641e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006422:	881b      	ldrh	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800642a:	b29a      	uxth	r2, r3
 800642c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800642e:	801a      	strh	r2, [r3, #0]
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	2b3e      	cmp	r3, #62	@ 0x3e
 8006436:	d921      	bls.n	800647c <USB_EPStartXfer+0xac0>
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <USB_EPStartXfer+0xa9c>
 800644e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006452:	3b01      	subs	r3, #1
 8006454:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006458:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006462:	b29b      	uxth	r3, r3
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	b29b      	uxth	r3, r3
 8006468:	4313      	orrs	r3, r2
 800646a:	b29b      	uxth	r3, r3
 800646c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006474:	b29a      	uxth	r2, r3
 8006476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	e050      	b.n	800651e <USB_EPStartXfer+0xb62>
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <USB_EPStartXfer+0xade>
 8006484:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006492:	b29a      	uxth	r2, r3
 8006494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	e041      	b.n	800651e <USB_EPStartXfer+0xb62>
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <USB_EPStartXfer+0xafe>
 80064b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064b4:	3301      	adds	r3, #1
 80064b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	029b      	lsls	r3, r3, #10
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4313      	orrs	r3, r2
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e024      	b.n	800651e <USB_EPStartXfer+0xb62>
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	785b      	ldrb	r3, [r3, #1]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d11c      	bne.n	800651e <USB_EPStartXfer+0xb62>
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064f8:	4413      	add	r3, r2
 80064fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	011a      	lsls	r2, r3, #4
 800650a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800650c:	4413      	add	r3, r2
 800650e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006512:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006518:	b29a      	uxth	r2, r3
 800651a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800651c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800651e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	895b      	ldrh	r3, [r3, #10]
 800652a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800652e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6959      	ldr	r1, [r3, #20]
 800653a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653e:	b29b      	uxth	r3, r3
 8006540:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006544:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006548:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f000 ff24 	bl	800739a <USB_WritePMA>
 8006552:	e0ca      	b.n	80066ea <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d177      	bne.n	8006654 <USB_EPStartXfer+0xc98>
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006584:	4413      	add	r3, r2
 8006586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	011a      	lsls	r2, r3, #4
 8006596:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006598:	4413      	add	r3, r2
 800659a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800659e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ae:	801a      	strh	r2, [r3, #0]
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80065b6:	d921      	bls.n	80065fc <USB_EPStartXfer+0xc40>
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <USB_EPStartXfer+0xc1c>
 80065ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065d2:	3b01      	subs	r3, #1
 80065d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	029b      	lsls	r3, r3, #10
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e05c      	b.n	80066b6 <USB_EPStartXfer+0xcfa>
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <USB_EPStartXfer+0xc5e>
 8006604:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006612:	b29a      	uxth	r2, r3
 8006614:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e04d      	b.n	80066b6 <USB_EPStartXfer+0xcfa>
 800661a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USB_EPStartXfer+0xc7e>
 8006630:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800663a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29b      	uxth	r3, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	e030      	b.n	80066b6 <USB_EPStartXfer+0xcfa>
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d128      	bne.n	80066b6 <USB_EPStartXfer+0xcfa>
 8006664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006688:	4413      	add	r3, r2
 800668a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	011a      	lsls	r2, r3, #4
 800669c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	891b      	ldrh	r3, [r3, #8]
 80066c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066e4:	6800      	ldr	r0, [r0, #0]
 80066e6:	f000 fe58 	bl	800739a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006710:	817b      	strh	r3, [r7, #10]
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	f083 0310 	eor.w	r3, r3, #16
 8006718:	817b      	strh	r3, [r7, #10]
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	f083 0320 	eor.w	r3, r3, #32
 8006720:	817b      	strh	r3, [r7, #10]
 8006722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	897b      	ldrh	r3, [r7, #10]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]
 8006752:	f000 bcde 	b.w	8007112 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	7b1b      	ldrb	r3, [r3, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 80bb 	bne.w	80068de <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	429a      	cmp	r2, r3
 8006782:	d917      	bls.n	80067b4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	619a      	str	r2, [r3, #24]
 80067b2:	e00e      	b.n	80067d2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80067b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067f6:	4413      	add	r3, r2
 80067f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800680e:	4413      	add	r3, r2
 8006810:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006824:	b29a      	uxth	r2, r3
 8006826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	2b3e      	cmp	r3, #62	@ 0x3e
 8006832:	d924      	bls.n	800687e <USB_EPStartXfer+0xec2>
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2b00      	cmp	r3, #0
 8006848:	d104      	bne.n	8006854 <USB_EPStartXfer+0xe98>
 800684a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800684e:	3b01      	subs	r3, #1
 8006850:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006860:	b29b      	uxth	r3, r3
 8006862:	029b      	lsls	r3, r3, #10
 8006864:	b29b      	uxth	r3, r3
 8006866:	4313      	orrs	r3, r2
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	f000 bc10 	b.w	800709e <USB_EPStartXfer+0x16e2>
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10c      	bne.n	80068a0 <USB_EPStartXfer+0xee4>
 8006886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e3fe      	b.n	800709e <USB_EPStartXfer+0x16e2>
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d004      	beq.n	80068c0 <USB_EPStartXfer+0xf04>
 80068b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068ba:	3301      	adds	r3, #1
 80068bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	029b      	lsls	r3, r3, #10
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e3df      	b.n	800709e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	f040 8218 	bne.w	8006d20 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 809d 	bne.w	8006a3c <USB_EPStartXfer+0x1080>
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006926:	4413      	add	r3, r2
 8006928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	011a      	lsls	r2, r3, #4
 800693a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800693e:	4413      	add	r3, r2
 8006940:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006954:	b29a      	uxth	r2, r3
 8006956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b3e      	cmp	r3, #62	@ 0x3e
 800696a:	d92b      	bls.n	80069c4 <USB_EPStartXfer+0x1008>
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800697e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <USB_EPStartXfer+0xfe0>
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006996:	3b01      	subs	r3, #1
 8006998:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800699c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	029b      	lsls	r3, r3, #10
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	4313      	orrs	r3, r2
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e070      	b.n	8006aa6 <USB_EPStartXfer+0x10ea>
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10c      	bne.n	80069ee <USB_EPStartXfer+0x1032>
 80069d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e05b      	b.n	8006aa6 <USB_EPStartXfer+0x10ea>
 80069ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <USB_EPStartXfer+0x1062>
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a18:	3301      	adds	r3, #1
 8006a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	029b      	lsls	r3, r3, #10
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	e034      	b.n	8006aa6 <USB_EPStartXfer+0x10ea>
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d12c      	bne.n	8006aa6 <USB_EPStartXfer+0x10ea>
 8006a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a70:	4413      	add	r3, r2
 8006a72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	011a      	lsls	r2, r3, #4
 8006a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006aa4:	801a      	strh	r2, [r3, #0]
 8006aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f040 809d 	bne.w	8006c00 <USB_EPStartXfer+0x1244>
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006aea:	4413      	add	r3, r2
 8006aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	011a      	lsls	r2, r3, #4
 8006afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b1e:	801a      	strh	r2, [r3, #0]
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b2e:	d92b      	bls.n	8006b88 <USB_EPStartXfer+0x11cc>
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <USB_EPStartXfer+0x11a4>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	029b      	lsls	r3, r3, #10
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	e069      	b.n	8006c5c <USB_EPStartXfer+0x12a0>
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <USB_EPStartXfer+0x11f6>
 8006b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e054      	b.n	8006c5c <USB_EPStartXfer+0x12a0>
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	085b      	lsrs	r3, r3, #1
 8006bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <USB_EPStartXfer+0x1226>
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006be2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	e02d      	b.n	8006c5c <USB_EPStartXfer+0x12a0>
 8006c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d125      	bne.n	8006c5c <USB_EPStartXfer+0x12a0>
 8006c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c26:	4413      	add	r3, r2
 8006c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	011a      	lsls	r2, r3, #4
 8006c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c3e:	4413      	add	r3, r2
 8006c40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8218 	beq.w	800709e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d005      	beq.n	8006ca6 <USB_EPStartXfer+0x12ea>
 8006c9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10d      	bne.n	8006cc2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ca6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f040 81f5 	bne.w	800709e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 81ee 	bne.w	800709e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	8013      	strh	r3, [r2, #0]
 8006d1e:	e1be      	b.n	800709e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	f040 81b4 	bne.w	800709a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d917      	bls.n	8006d7e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	619a      	str	r2, [r3, #24]
 8006d7c:	e00e      	b.n	8006d9c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 8085 	bne.w	8006eb8 <USB_EPStartXfer+0x14fc>
 8006dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	011a      	lsls	r2, r3, #4
 8006de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dea:	4413      	add	r3, r2
 8006dec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006df4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e0e:	d923      	bls.n	8006e58 <USB_EPStartXfer+0x149c>
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <USB_EPStartXfer+0x1474>
 8006e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	029b      	lsls	r3, r3, #10
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e060      	b.n	8006f1a <USB_EPStartXfer+0x155e>
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10c      	bne.n	8006e7a <USB_EPStartXfer+0x14be>
 8006e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e04f      	b.n	8006f1a <USB_EPStartXfer+0x155e>
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <USB_EPStartXfer+0x14de>
 8006e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	029b      	lsls	r3, r3, #10
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	4313      	orrs	r3, r2
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e030      	b.n	8006f1a <USB_EPStartXfer+0x155e>
 8006eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d128      	bne.n	8006f1a <USB_EPStartXfer+0x155e>
 8006ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eec:	4413      	add	r3, r2
 8006eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	011a      	lsls	r2, r3, #4
 8006f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f18:	801a      	strh	r2, [r3, #0]
 8006f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f040 8085 	bne.w	8007044 <USB_EPStartXfer+0x1688>
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f5e:	4413      	add	r3, r2
 8006f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	011a      	lsls	r2, r3, #4
 8006f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f9a:	d923      	bls.n	8006fe4 <USB_EPStartXfer+0x1628>
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <USB_EPStartXfer+0x1600>
 8006fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	e05c      	b.n	800709e <USB_EPStartXfer+0x16e2>
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <USB_EPStartXfer+0x164a>
 8006fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007002:	801a      	strh	r2, [r3, #0]
 8007004:	e04b      	b.n	800709e <USB_EPStartXfer+0x16e2>
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <USB_EPStartXfer+0x166a>
 800701c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007020:	3301      	adds	r3, #1
 8007022:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29a      	uxth	r2, r3
 800702e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007032:	b29b      	uxth	r3, r3
 8007034:	029b      	lsls	r3, r3, #10
 8007036:	b29b      	uxth	r3, r3
 8007038:	4313      	orrs	r3, r2
 800703a:	b29a      	uxth	r2, r3
 800703c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	e02c      	b.n	800709e <USB_EPStartXfer+0x16e2>
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d124      	bne.n	800709e <USB_EPStartXfer+0x16e2>
 8007054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007062:	b29b      	uxth	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800706a:	4413      	add	r3, r2
 800706c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	011a      	lsls	r2, r3, #4
 800707e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007082:	4413      	add	r3, r2
 8007084:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	b29a      	uxth	r2, r3
 8007092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	e001      	b.n	800709e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e03a      	b.n	8007114 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800710a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710e:	b29b      	uxth	r3, r3
 8007110:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d020      	beq.n	8007172 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007146:	81bb      	strh	r3, [r7, #12]
 8007148:	89bb      	ldrh	r3, [r7, #12]
 800714a:	f083 0310 	eor.w	r3, r3, #16
 800714e:	81bb      	strh	r3, [r7, #12]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	441a      	add	r2, r3
 800715a:	89bb      	ldrh	r3, [r7, #12]
 800715c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
 8007170:	e01f      	b.n	80071b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007188:	81fb      	strh	r3, [r7, #14]
 800718a:	89fb      	ldrh	r3, [r7, #14]
 800718c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007190:	81fb      	strh	r3, [r7, #14]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	89fb      	ldrh	r3, [r7, #14]
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr

080071be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071be:	b480      	push	{r7}
 80071c0:	b087      	sub	sp, #28
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	7b1b      	ldrb	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 809d 	bne.w	800730c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d04c      	beq.n	8007274 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	823b      	strh	r3, [r7, #16]
 80071e8:	8a3b      	ldrh	r3, [r7, #16]
 80071ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01b      	beq.n	800722a <USB_EPClearStall+0x6c>
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007208:	81fb      	strh	r3, [r7, #14]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	441a      	add	r2, r3
 8007214:	89fb      	ldrh	r3, [r7, #14]
 8007216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800721a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800721e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007222:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007226:	b29b      	uxth	r3, r3
 8007228:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	78db      	ldrb	r3, [r3, #3]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d06c      	beq.n	800730c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007248:	81bb      	strh	r3, [r7, #12]
 800724a:	89bb      	ldrh	r3, [r7, #12]
 800724c:	f083 0320 	eor.w	r3, r3, #32
 8007250:	81bb      	strh	r3, [r7, #12]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	441a      	add	r2, r3
 800725c:	89bb      	ldrh	r3, [r7, #12]
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]
 8007272:	e04b      	b.n	800730c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	82fb      	strh	r3, [r7, #22]
 8007282:	8afb      	ldrh	r3, [r7, #22]
 8007284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01b      	beq.n	80072c4 <USB_EPClearStall+0x106>
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800729e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a2:	82bb      	strh	r3, [r7, #20]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	8abb      	ldrh	r3, [r7, #20]
 80072b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072da:	827b      	strh	r3, [r7, #18]
 80072dc:	8a7b      	ldrh	r3, [r7, #18]
 80072de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80072e2:	827b      	strh	r3, [r7, #18]
 80072e4:	8a7b      	ldrh	r3, [r7, #18]
 80072e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80072ea:	827b      	strh	r3, [r7, #18]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	441a      	add	r2, r3
 80072f6:	8a7b      	ldrh	r3, [r7, #18]
 80072f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007308:	b29b      	uxth	r3, r3
 800730a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2280      	movs	r2, #128	@ 0x80
 800732e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007374:	b29b      	uxth	r3, r3
 8007376:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007378:	68fb      	ldr	r3, [r7, #12]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800739a:	b480      	push	{r7}
 800739c:	b08b      	sub	sp, #44	@ 0x2c
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	4611      	mov	r1, r2
 80073a6:	461a      	mov	r2, r3
 80073a8:	460b      	mov	r3, r1
 80073aa:	80fb      	strh	r3, [r7, #6]
 80073ac:	4613      	mov	r3, r2
 80073ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073b0:	88bb      	ldrh	r3, [r7, #4]
 80073b2:	3301      	adds	r3, #1
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	005a      	lsls	r2, r3, #1
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d2:	e01f      	b.n	8007414 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	3301      	adds	r3, #1
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	b21a      	sxth	r2, r3
 80073e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	b21b      	sxth	r3, r3
 80073ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	8a7a      	ldrh	r2, [r7, #18]
 80073f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	3302      	adds	r3, #2
 80073fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	3302      	adds	r3, #2
 8007400:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3301      	adds	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	3b01      	subs	r3, #1
 8007412:	627b      	str	r3, [r7, #36]	@ 0x24
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1dc      	bne.n	80073d4 <USB_WritePMA+0x3a>
  }
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	372c      	adds	r7, #44	@ 0x2c
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr

08007426 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007426:	b480      	push	{r7}
 8007428:	b08b      	sub	sp, #44	@ 0x2c
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	4611      	mov	r1, r2
 8007432:	461a      	mov	r2, r3
 8007434:	460b      	mov	r3, r1
 8007436:	80fb      	strh	r3, [r7, #6]
 8007438:	4613      	mov	r3, r2
 800743a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800743c:	88bb      	ldrh	r3, [r7, #4]
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	b29b      	uxth	r3, r3
 8007442:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	005a      	lsls	r2, r3, #1
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007458:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
 800745e:	e01b      	b.n	8007498 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	3302      	adds	r3, #2
 800746c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	b2da      	uxtb	r2, r3
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	3301      	adds	r3, #1
 800747a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	b2da      	uxtb	r2, r3
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3301      	adds	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	3302      	adds	r3, #2
 8007490:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	3b01      	subs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e0      	bne.n	8007460 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800749e:	88bb      	ldrh	r3, [r7, #4]
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	701a      	strb	r2, [r3, #0]
  }
}
 80074ba:	bf00      	nop
 80074bc:	372c      	adds	r7, #44	@ 0x2c
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	7c1b      	ldrb	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d115      	bne.n	8007508 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074e0:	2202      	movs	r2, #2
 80074e2:	2181      	movs	r1, #129	@ 0x81
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f001 feee 	bl	80092c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074f4:	2202      	movs	r2, #2
 80074f6:	2101      	movs	r1, #1
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fee4 	bl	80092c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007506:	e012      	b.n	800752e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007508:	2340      	movs	r3, #64	@ 0x40
 800750a:	2202      	movs	r2, #2
 800750c:	2181      	movs	r1, #129	@ 0x81
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fed9 	bl	80092c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800751a:	2340      	movs	r3, #64	@ 0x40
 800751c:	2202      	movs	r2, #2
 800751e:	2101      	movs	r1, #1
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fed0 	bl	80092c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800752e:	2308      	movs	r3, #8
 8007530:	2203      	movs	r2, #3
 8007532:	2182      	movs	r1, #130	@ 0x82
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 fec6 	bl	80092c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007540:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007544:	f001 ffe6 	bl	8009514 <USBD_static_malloc>
 8007548:	4602      	mov	r2, r0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800755a:	2301      	movs	r3, #1
 800755c:	73fb      	strb	r3, [r7, #15]
 800755e:	e026      	b.n	80075ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007566:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7c1b      	ldrb	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007594:	2101      	movs	r1, #1
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 ff85 	bl	80094a6 <USBD_LL_PrepareReceive>
 800759c:	e007      	b.n	80075ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075a4:	2340      	movs	r3, #64	@ 0x40
 80075a6:	2101      	movs	r1, #1
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 ff7c 	bl	80094a6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075c8:	2181      	movs	r1, #129	@ 0x81
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fea1 	bl	8009312 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075d6:	2101      	movs	r1, #1
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 fe9a 	bl	8009312 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80075e6:	2182      	movs	r1, #130	@ 0x82
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fe92 	bl	8009312 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00e      	beq.n	800761c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800760e:	4618      	mov	r0, r3
 8007610:	f001 ff8c 	bl	800952c <USBD_static_free>
    pdev->pClassData = NULL;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b086      	sub	sp, #24
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007636:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800764c:	2b00      	cmp	r3, #0
 800764e:	d039      	beq.n	80076c4 <USBD_CDC_Setup+0x9e>
 8007650:	2b20      	cmp	r3, #32
 8007652:	d17f      	bne.n	8007754 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	88db      	ldrh	r3, [r3, #6]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d029      	beq.n	80076b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b25b      	sxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	da11      	bge.n	800768a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007672:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	88d2      	ldrh	r2, [r2, #6]
 8007678:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800767a:	6939      	ldr	r1, [r7, #16]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	461a      	mov	r2, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fa06 	bl	8008a94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007688:	e06b      	b.n	8007762 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	785a      	ldrb	r2, [r3, #1]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	88db      	ldrh	r3, [r3, #6]
 8007698:	b2da      	uxtb	r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076a0:	6939      	ldr	r1, [r7, #16]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	461a      	mov	r2, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fa21 	bl	8008af0 <USBD_CtlPrepareRx>
      break;
 80076ae:	e058      	b.n	8007762 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	7850      	ldrb	r0, [r2, #1]
 80076bc:	2200      	movs	r2, #0
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	4798      	blx	r3
      break;
 80076c2:	e04e      	b.n	8007762 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b0b      	cmp	r3, #11
 80076ca:	d02e      	beq.n	800772a <USBD_CDC_Setup+0x104>
 80076cc:	2b0b      	cmp	r3, #11
 80076ce:	dc38      	bgt.n	8007742 <USBD_CDC_Setup+0x11c>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <USBD_CDC_Setup+0xb4>
 80076d4:	2b0a      	cmp	r3, #10
 80076d6:	d014      	beq.n	8007702 <USBD_CDC_Setup+0xdc>
 80076d8:	e033      	b.n	8007742 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d107      	bne.n	80076f4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80076e4:	f107 030c 	add.w	r3, r7, #12
 80076e8:	2202      	movs	r2, #2
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 f9d1 	bl	8008a94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076f2:	e02e      	b.n	8007752 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 f962 	bl	80089c0 <USBD_CtlError>
            ret = USBD_FAIL;
 80076fc:	2302      	movs	r3, #2
 80076fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007700:	e027      	b.n	8007752 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007708:	2b03      	cmp	r3, #3
 800770a:	d107      	bne.n	800771c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800770c:	f107 030f 	add.w	r3, r7, #15
 8007710:	2201      	movs	r2, #1
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f9bd 	bl	8008a94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800771a:	e01a      	b.n	8007752 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 f94e 	bl	80089c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007724:	2302      	movs	r3, #2
 8007726:	75fb      	strb	r3, [r7, #23]
          break;
 8007728:	e013      	b.n	8007752 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007730:	2b03      	cmp	r3, #3
 8007732:	d00d      	beq.n	8007750 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 f942 	bl	80089c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800773c:	2302      	movs	r3, #2
 800773e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007740:	e006      	b.n	8007750 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f001 f93b 	bl	80089c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800774a:	2302      	movs	r3, #2
 800774c:	75fb      	strb	r3, [r7, #23]
          break;
 800774e:	e000      	b.n	8007752 <USBD_CDC_Setup+0x12c>
          break;
 8007750:	bf00      	nop
      }
      break;
 8007752:	e006      	b.n	8007762 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f001 f932 	bl	80089c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	75fb      	strb	r3, [r7, #23]
      break;
 8007760:	bf00      	nop
  }

  return ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007786:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d03a      	beq.n	8007808 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	331c      	adds	r3, #28
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d029      	beq.n	80077fc <USBD_CDC_DataIn+0x90>
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	331c      	adds	r3, #28
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	78f9      	ldrb	r1, [r7, #3]
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	460b      	mov	r3, r1
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	4403      	add	r3, r0
 80077c8:	3320      	adds	r3, #32
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d110      	bne.n	80077fc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	331c      	adds	r3, #28
 80077ea:	2200      	movs	r2, #0
 80077ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077ee:	78f9      	ldrb	r1, [r7, #3]
 80077f0:	2300      	movs	r3, #0
 80077f2:	2200      	movs	r2, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fe33 	bl	8009460 <USBD_LL_Transmit>
 80077fa:	e003      	b.n	8007804 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	e000      	b.n	800780a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007808:	2302      	movs	r3, #2
  }
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007824:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007826:	78fb      	ldrb	r3, [r7, #3]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fe5e 	bl	80094ec <USBD_LL_GetRxDataSize>
 8007830:	4602      	mov	r2, r0
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00d      	beq.n	800785e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007856:	4611      	mov	r1, r2
 8007858:	4798      	blx	r3

    return USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	e000      	b.n	8007860 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800785e:	2302      	movs	r3, #2
  }
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007876:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800787e:	2b00      	cmp	r3, #0
 8007880:	d014      	beq.n	80078ac <USBD_CDC_EP0_RxReady+0x44>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007888:	2bff      	cmp	r3, #255	@ 0xff
 800788a:	d00f      	beq.n	80078ac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800789a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	22ff      	movs	r2, #255	@ 0xff
 80078a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2243      	movs	r2, #67	@ 0x43
 80078c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80078c6:	4b03      	ldr	r3, [pc, #12]	@ (80078d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bc80      	pop	{r7}
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20000094 	.word	0x20000094

080078d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2243      	movs	r2, #67	@ 0x43
 80078e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80078e6:	4b03      	ldr	r3, [pc, #12]	@ (80078f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000050 	.word	0x20000050

080078f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2243      	movs	r2, #67	@ 0x43
 8007904:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007906:	4b03      	ldr	r3, [pc, #12]	@ (8007914 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	200000d8 	.word	0x200000d8

08007918 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	220a      	movs	r2, #10
 8007924:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007926:	4b03      	ldr	r3, [pc, #12]	@ (8007934 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	bc80      	pop	{r7}
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	2000000c 	.word	0x2000000c

08007938 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007942:	2302      	movs	r3, #2
 8007944:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr

08007964 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007978:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d01c      	beq.n	8007a10 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d115      	bne.n	8007a0c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2181      	movs	r1, #129	@ 0x81
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fd2c 	bl	8009460 <USBD_LL_Transmit>

      return USBD_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e002      	b.n	8007a12 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e000      	b.n	8007a12 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a10:	2302      	movs	r3, #2
  }
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d017      	beq.n	8007a64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7c1b      	ldrb	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a46:	2101      	movs	r1, #1
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fd2c 	bl	80094a6 <USBD_LL_PrepareReceive>
 8007a4e:	e007      	b.n	8007a60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a56:	2340      	movs	r3, #64	@ 0x40
 8007a58:	2101      	movs	r1, #1
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fd23 	bl	80094a6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e000      	b.n	8007a66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a64:	2302      	movs	r3, #2
  }
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	e01a      	b.n	8007abc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	79fa      	ldrb	r2, [r7, #7]
 8007ab2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f001 fb91 	bl	80091dc <USBD_LL_Init>

  return USBD_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d006      	beq.n	8007ae6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
 8007ae4:	e001      	b.n	8007aea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr

08007af6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fbc6 	bl	8009290 <USBD_LL_Start>

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	4611      	mov	r1, r2
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	4798      	blx	r3
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	4611      	mov	r1, r2
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3

  return USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fed8 	bl	800894e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d016      	beq.n	8007bf0 <USBD_LL_SetupStage+0x6a>
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d81c      	bhi.n	8007c00 <USBD_LL_SetupStage+0x7a>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <USBD_LL_SetupStage+0x4a>
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d008      	beq.n	8007be0 <USBD_LL_SetupStage+0x5a>
 8007bce:	e017      	b.n	8007c00 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f9cb 	bl	8007f74 <USBD_StdDevReq>
      break;
 8007bde:	e01a      	b.n	8007c16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa2d 	bl	8008048 <USBD_StdItfReq>
      break;
 8007bee:	e012      	b.n	8007c16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa6d 	bl	80080d8 <USBD_StdEPReq>
      break;
 8007bfe:	e00a      	b.n	8007c16 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f001 fb9e 	bl	8009350 <USBD_LL_StallEP>
      break;
 8007c14:	bf00      	nop
  }

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d14b      	bne.n	8007ccc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d134      	bne.n	8007cb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d919      	bls.n	8007c86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	1ad2      	subs	r2, r2, r3
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d203      	bcs.n	8007c74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	e002      	b.n	8007c7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 ff54 	bl	8008b2c <USBD_CtlContinueRx>
 8007c84:	e038      	b.n	8007cf8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00a      	beq.n	8007ca8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d105      	bne.n	8007ca8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 ff51 	bl	8008b50 <USBD_CtlSendStatus>
 8007cae:	e023      	b.n	8007cf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cb6:	2b05      	cmp	r3, #5
 8007cb8:	d11e      	bne.n	8007cf8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f001 fb43 	bl	8009350 <USBD_LL_StallEP>
 8007cca:	e015      	b.n	8007cf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d108      	bne.n	8007cf4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	7afa      	ldrb	r2, [r7, #11]
 8007cec:	4611      	mov	r1, r2
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	4798      	blx	r3
 8007cf2:	e001      	b.n	8007cf8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e000      	b.n	8007cfa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d17f      	bne.n	8007e16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d15c      	bne.n	8007de0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d915      	bls.n	8007d5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 febe 	bl	8008acc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d50:	2300      	movs	r3, #0
 8007d52:	2200      	movs	r2, #0
 8007d54:	2100      	movs	r1, #0
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f001 fba5 	bl	80094a6 <USBD_LL_PrepareReceive>
 8007d5c:	e04e      	b.n	8007dfc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	6912      	ldr	r2, [r2, #16]
 8007d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d6a:	fb01 f202 	mul.w	r2, r1, r2
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11c      	bne.n	8007dae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d316      	bcc.n	8007dae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d20f      	bcs.n	8007dae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fe9a 	bl	8008acc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da0:	2300      	movs	r3, #0
 8007da2:	2200      	movs	r2, #0
 8007da4:	2100      	movs	r1, #0
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f001 fb7d 	bl	80094a6 <USBD_LL_PrepareReceive>
 8007dac:	e026      	b.n	8007dfc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d105      	bne.n	8007dd0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007dd0:	2180      	movs	r1, #128	@ 0x80
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f001 fabc 	bl	8009350 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fecc 	bl	8008b76 <USBD_CtlReceiveStatus>
 8007dde:	e00d      	b.n	8007dfc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d004      	beq.n	8007df4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007df4:	2180      	movs	r1, #128	@ 0x80
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f001 faaa 	bl	8009350 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d11d      	bne.n	8007e42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff fe81 	bl	8007b0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e14:	e015      	b.n	8007e42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00d      	beq.n	8007e3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e28:	2b03      	cmp	r3, #3
 8007e2a:	d108      	bne.n	8007e3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	7afa      	ldrb	r2, [r7, #11]
 8007e36:	4611      	mov	r1, r2
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	4798      	blx	r3
 8007e3c:	e001      	b.n	8007e42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e000      	b.n	8007e44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e54:	2340      	movs	r3, #64	@ 0x40
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fa33 	bl	80092c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2240      	movs	r2, #64	@ 0x40
 8007e6c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e70:	2340      	movs	r3, #64	@ 0x40
 8007e72:	2200      	movs	r2, #0
 8007e74:	2180      	movs	r1, #128	@ 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 fa25 	bl	80092c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2240      	movs	r2, #64	@ 0x40
 8007e86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6852      	ldr	r2, [r2, #4]
 8007ebc:	b2d2      	uxtb	r2, r2
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
  }

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2204      	movs	r2, #4
 8007f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr

08007f14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d105      	bne.n	8007f32 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d10b      	bne.n	8007f68 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f8a:	2b40      	cmp	r3, #64	@ 0x40
 8007f8c:	d005      	beq.n	8007f9a <USBD_StdDevReq+0x26>
 8007f8e:	2b40      	cmp	r3, #64	@ 0x40
 8007f90:	d84f      	bhi.n	8008032 <USBD_StdDevReq+0xbe>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <USBD_StdDevReq+0x36>
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d14b      	bne.n	8008032 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      break;
 8007fa8:	e048      	b.n	800803c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d839      	bhi.n	8008026 <USBD_StdDevReq+0xb2>
 8007fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb8 <USBD_StdDevReq+0x44>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	0800801d 	.word	0x0800801d
 8007fc0:	08008027 	.word	0x08008027
 8007fc4:	08008013 	.word	0x08008013
 8007fc8:	08008027 	.word	0x08008027
 8007fcc:	08007feb 	.word	0x08007feb
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	08008027 	.word	0x08008027
 8007fd8:	08007fff 	.word	0x08007fff
 8007fdc:	08007ff5 	.word	0x08007ff5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f9dc 	bl	80083a0 <USBD_GetDescriptor>
          break;
 8007fe8:	e022      	b.n	8008030 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb3f 	bl	8008670 <USBD_SetAddress>
          break;
 8007ff2:	e01d      	b.n	8008030 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fb7e 	bl	80086f8 <USBD_SetConfig>
          break;
 8007ffc:	e018      	b.n	8008030 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fc07 	bl	8008814 <USBD_GetConfig>
          break;
 8008006:	e013      	b.n	8008030 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fc37 	bl	800887e <USBD_GetStatus>
          break;
 8008010:	e00e      	b.n	8008030 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fc65 	bl	80088e4 <USBD_SetFeature>
          break;
 800801a:	e009      	b.n	8008030 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fc74 	bl	800890c <USBD_ClrFeature>
          break;
 8008024:	e004      	b.n	8008030 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fcc9 	bl	80089c0 <USBD_CtlError>
          break;
 800802e:	bf00      	nop
      }
      break;
 8008030:	e004      	b.n	800803c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fcc3 	bl	80089c0 <USBD_CtlError>
      break;
 800803a:	bf00      	nop
  }

  return ret;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop

08008048 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800805e:	2b40      	cmp	r3, #64	@ 0x40
 8008060:	d005      	beq.n	800806e <USBD_StdItfReq+0x26>
 8008062:	2b40      	cmp	r3, #64	@ 0x40
 8008064:	d82e      	bhi.n	80080c4 <USBD_StdItfReq+0x7c>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <USBD_StdItfReq+0x26>
 800806a:	2b20      	cmp	r3, #32
 800806c:	d12a      	bne.n	80080c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008074:	3b01      	subs	r3, #1
 8008076:	2b02      	cmp	r3, #2
 8008078:	d81d      	bhi.n	80080b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	889b      	ldrh	r3, [r3, #4]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b01      	cmp	r3, #1
 8008082:	d813      	bhi.n	80080ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	88db      	ldrh	r3, [r3, #6]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d110      	bne.n	80080c0 <USBD_StdItfReq+0x78>
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10d      	bne.n	80080c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fd53 	bl	8008b50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080aa:	e009      	b.n	80080c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fc86 	bl	80089c0 <USBD_CtlError>
          break;
 80080b4:	e004      	b.n	80080c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fc81 	bl	80089c0 <USBD_CtlError>
          break;
 80080be:	e000      	b.n	80080c2 <USBD_StdItfReq+0x7a>
          break;
 80080c0:	bf00      	nop
      }
      break;
 80080c2:	e004      	b.n	80080ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fc7a 	bl	80089c0 <USBD_CtlError>
      break;
 80080cc:	bf00      	nop
  }

  return USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	889b      	ldrh	r3, [r3, #4]
 80080ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080f4:	2b40      	cmp	r3, #64	@ 0x40
 80080f6:	d007      	beq.n	8008108 <USBD_StdEPReq+0x30>
 80080f8:	2b40      	cmp	r3, #64	@ 0x40
 80080fa:	f200 8146 	bhi.w	800838a <USBD_StdEPReq+0x2b2>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <USBD_StdEPReq+0x40>
 8008102:	2b20      	cmp	r3, #32
 8008104:	f040 8141 	bne.w	800838a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
      break;
 8008116:	e13d      	b.n	8008394 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008120:	2b20      	cmp	r3, #32
 8008122:	d10a      	bne.n	800813a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	e12d      	b.n	8008396 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d007      	beq.n	8008152 <USBD_StdEPReq+0x7a>
 8008142:	2b03      	cmp	r3, #3
 8008144:	f300 811b 	bgt.w	800837e <USBD_StdEPReq+0x2a6>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d072      	beq.n	8008232 <USBD_StdEPReq+0x15a>
 800814c:	2b01      	cmp	r3, #1
 800814e:	d03a      	beq.n	80081c6 <USBD_StdEPReq+0xee>
 8008150:	e115      	b.n	800837e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008158:	2b02      	cmp	r3, #2
 800815a:	d002      	beq.n	8008162 <USBD_StdEPReq+0x8a>
 800815c:	2b03      	cmp	r3, #3
 800815e:	d015      	beq.n	800818c <USBD_StdEPReq+0xb4>
 8008160:	e02b      	b.n	80081ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00c      	beq.n	8008182 <USBD_StdEPReq+0xaa>
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b80      	cmp	r3, #128	@ 0x80
 800816c:	d009      	beq.n	8008182 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 f8ec 	bl	8009350 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008178:	2180      	movs	r1, #128	@ 0x80
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 f8e8 	bl	8009350 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008180:	e020      	b.n	80081c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fc1b 	bl	80089c0 <USBD_CtlError>
              break;
 800818a:	e01b      	b.n	80081c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10e      	bne.n	80081b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00b      	beq.n	80081b2 <USBD_StdEPReq+0xda>
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b80      	cmp	r3, #128	@ 0x80
 800819e:	d008      	beq.n	80081b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	88db      	ldrh	r3, [r3, #6]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 f8cf 	bl	8009350 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fccc 	bl	8008b50 <USBD_CtlSendStatus>

              break;
 80081b8:	e004      	b.n	80081c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fbff 	bl	80089c0 <USBD_CtlError>
              break;
 80081c2:	bf00      	nop
          }
          break;
 80081c4:	e0e0      	b.n	8008388 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d002      	beq.n	80081d6 <USBD_StdEPReq+0xfe>
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d015      	beq.n	8008200 <USBD_StdEPReq+0x128>
 80081d4:	e026      	b.n	8008224 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00c      	beq.n	80081f6 <USBD_StdEPReq+0x11e>
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b80      	cmp	r3, #128	@ 0x80
 80081e0:	d009      	beq.n	80081f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f8b2 	bl	8009350 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081ec:	2180      	movs	r1, #128	@ 0x80
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 f8ae 	bl	8009350 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081f4:	e01c      	b.n	8008230 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fbe1 	bl	80089c0 <USBD_CtlError>
              break;
 80081fe:	e017      	b.n	8008230 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	885b      	ldrh	r3, [r3, #2]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d112      	bne.n	800822e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 f8b9 	bl	800938e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fc97 	bl	8008b50 <USBD_CtlSendStatus>
              }
              break;
 8008222:	e004      	b.n	800822e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fbca 	bl	80089c0 <USBD_CtlError>
              break;
 800822c:	e000      	b.n	8008230 <USBD_StdEPReq+0x158>
              break;
 800822e:	bf00      	nop
          }
          break;
 8008230:	e0aa      	b.n	8008388 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008238:	2b02      	cmp	r3, #2
 800823a:	d002      	beq.n	8008242 <USBD_StdEPReq+0x16a>
 800823c:	2b03      	cmp	r3, #3
 800823e:	d032      	beq.n	80082a6 <USBD_StdEPReq+0x1ce>
 8008240:	e097      	b.n	8008372 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <USBD_StdEPReq+0x180>
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b80      	cmp	r3, #128	@ 0x80
 800824c:	d004      	beq.n	8008258 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fbb5 	bl	80089c0 <USBD_CtlError>
                break;
 8008256:	e091      	b.n	800837c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	da0b      	bge.n	8008278 <USBD_StdEPReq+0x1a0>
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	3310      	adds	r3, #16
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	3304      	adds	r3, #4
 8008276:	e00b      	b.n	8008290 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	3304      	adds	r3, #4
 8008290:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2202      	movs	r2, #2
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fbf8 	bl	8008a94 <USBD_CtlSendData>
              break;
 80082a4:	e06a      	b.n	800837c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	da11      	bge.n	80082d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	f003 020f 	and.w	r2, r3, #15
 80082b4:	6879      	ldr	r1, [r7, #4]
 80082b6:	4613      	mov	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	3318      	adds	r3, #24
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d117      	bne.n	80082f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb78 	bl	80089c0 <USBD_CtlError>
                  break;
 80082d0:	e054      	b.n	800837c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	f003 020f 	and.w	r2, r3, #15
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fb65 	bl	80089c0 <USBD_CtlError>
                  break;
 80082f6:	e041      	b.n	800837c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da0b      	bge.n	8008318 <USBD_StdEPReq+0x240>
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	3310      	adds	r3, #16
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	4413      	add	r3, r2
 8008314:	3304      	adds	r3, #4
 8008316:	e00b      	b.n	8008330 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	3304      	adds	r3, #4
 8008330:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <USBD_StdEPReq+0x266>
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b80      	cmp	r3, #128	@ 0x80
 800833c:	d103      	bne.n	8008346 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e00e      	b.n	8008364 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 f83e 	bl	80093cc <USBD_LL_IsStallEP>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2201      	movs	r2, #1
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	e002      	b.n	8008364 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2200      	movs	r2, #0
 8008362:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2202      	movs	r2, #2
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb92 	bl	8008a94 <USBD_CtlSendData>
              break;
 8008370:	e004      	b.n	800837c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fb23 	bl	80089c0 <USBD_CtlError>
              break;
 800837a:	bf00      	nop
          }
          break;
 800837c:	e004      	b.n	8008388 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fb1d 	bl	80089c0 <USBD_CtlError>
          break;
 8008386:	bf00      	nop
      }
      break;
 8008388:	e004      	b.n	8008394 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fb17 	bl	80089c0 <USBD_CtlError>
      break;
 8008392:	bf00      	nop
  }

  return ret;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	885b      	ldrh	r3, [r3, #2]
 80083ba:	0a1b      	lsrs	r3, r3, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b06      	cmp	r3, #6
 80083c2:	f200 8128 	bhi.w	8008616 <USBD_GetDescriptor+0x276>
 80083c6:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <USBD_GetDescriptor+0x2c>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	08008401 	.word	0x08008401
 80083d4:	08008441 	.word	0x08008441
 80083d8:	08008617 	.word	0x08008617
 80083dc:	08008617 	.word	0x08008617
 80083e0:	080085b7 	.word	0x080085b7
 80083e4:	080085e3 	.word	0x080085e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
      break;
 80083fe:	e112      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7c1b      	ldrb	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	f107 0208 	add.w	r2, r7, #8
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	2202      	movs	r2, #2
 8008420:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008422:	e100      	b.n	8008626 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842c:	f107 0208 	add.w	r2, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	2202      	movs	r2, #2
 800843c:	701a      	strb	r2, [r3, #0]
      break;
 800843e:	e0f2      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	885b      	ldrh	r3, [r3, #2]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b05      	cmp	r3, #5
 8008448:	f200 80ac 	bhi.w	80085a4 <USBD_GetDescriptor+0x204>
 800844c:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <USBD_GetDescriptor+0xb4>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	0800846d 	.word	0x0800846d
 8008458:	080084a1 	.word	0x080084a1
 800845c:	080084d5 	.word	0x080084d5
 8008460:	08008509 	.word	0x08008509
 8008464:	0800853d 	.word	0x0800853d
 8008468:	08008571 	.word	0x08008571
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	7c12      	ldrb	r2, [r2, #16]
 8008484:	f107 0108 	add.w	r1, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848e:	e091      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fa94 	bl	80089c0 <USBD_CtlError>
            err++;
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	3301      	adds	r3, #1
 800849c:	72fb      	strb	r3, [r7, #11]
          break;
 800849e:	e089      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	7c12      	ldrb	r2, [r2, #16]
 80084b8:	f107 0108 	add.w	r1, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c2:	e077      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa7a 	bl	80089c0 <USBD_CtlError>
            err++;
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	3301      	adds	r3, #1
 80084d0:	72fb      	strb	r3, [r7, #11]
          break;
 80084d2:	e06f      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	7c12      	ldrb	r2, [r2, #16]
 80084ec:	f107 0108 	add.w	r1, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f6:	e05d      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa60 	bl	80089c0 <USBD_CtlError>
            err++;
 8008500:	7afb      	ldrb	r3, [r7, #11]
 8008502:	3301      	adds	r3, #1
 8008504:	72fb      	strb	r3, [r7, #11]
          break;
 8008506:	e055      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7c12      	ldrb	r2, [r2, #16]
 8008520:	f107 0108 	add.w	r1, r7, #8
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
 8008528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852a:	e043      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa46 	bl	80089c0 <USBD_CtlError>
            err++;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	3301      	adds	r3, #1
 8008538:	72fb      	strb	r3, [r7, #11]
          break;
 800853a:	e03b      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7c12      	ldrb	r2, [r2, #16]
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855e:	e029      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa2c 	bl	80089c0 <USBD_CtlError>
            err++;
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	3301      	adds	r3, #1
 800856c:	72fb      	strb	r3, [r7, #11]
          break;
 800856e:	e021      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7c12      	ldrb	r2, [r2, #16]
 8008588:	f107 0108 	add.w	r1, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008592:	e00f      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa12 	bl	80089c0 <USBD_CtlError>
            err++;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	3301      	adds	r3, #1
 80085a0:	72fb      	strb	r3, [r7, #11]
          break;
 80085a2:	e007      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa0a 	bl	80089c0 <USBD_CtlError>
          err++;
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	3301      	adds	r3, #1
 80085b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80085b2:	e038      	b.n	8008626 <USBD_GetDescriptor+0x286>
 80085b4:	e037      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7c1b      	ldrb	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c6:	f107 0208 	add.w	r2, r7, #8
 80085ca:	4610      	mov	r0, r2
 80085cc:	4798      	blx	r3
 80085ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085d0:	e029      	b.n	8008626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f9f3 	bl	80089c0 <USBD_CtlError>
        err++;
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	3301      	adds	r3, #1
 80085de:	72fb      	strb	r3, [r7, #11]
      break;
 80085e0:	e021      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7c1b      	ldrb	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f2:	f107 0208 	add.w	r2, r7, #8
 80085f6:	4610      	mov	r0, r2
 80085f8:	4798      	blx	r3
 80085fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	2207      	movs	r2, #7
 8008602:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008604:	e00f      	b.n	8008626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f9d9 	bl	80089c0 <USBD_CtlError>
        err++;
 800860e:	7afb      	ldrb	r3, [r7, #11]
 8008610:	3301      	adds	r3, #1
 8008612:	72fb      	strb	r3, [r7, #11]
      break;
 8008614:	e007      	b.n	8008626 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f9d1 	bl	80089c0 <USBD_CtlError>
      err++;
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	3301      	adds	r3, #1
 8008622:	72fb      	strb	r3, [r7, #11]
      break;
 8008624:	bf00      	nop
  }

  if (err != 0U)
 8008626:	7afb      	ldrb	r3, [r7, #11]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11c      	bne.n	8008666 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800862c:	893b      	ldrh	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d011      	beq.n	8008656 <USBD_GetDescriptor+0x2b6>
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00d      	beq.n	8008656 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	88da      	ldrh	r2, [r3, #6]
 800863e:	893b      	ldrh	r3, [r7, #8]
 8008640:	4293      	cmp	r3, r2
 8008642:	bf28      	it	cs
 8008644:	4613      	movcs	r3, r2
 8008646:	b29b      	uxth	r3, r3
 8008648:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800864a:	893b      	ldrh	r3, [r7, #8]
 800864c:	461a      	mov	r2, r3
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa1f 	bl	8008a94 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	88db      	ldrh	r3, [r3, #6]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa76 	bl	8008b50 <USBD_CtlSendStatus>
 8008664:	e000      	b.n	8008668 <USBD_GetDescriptor+0x2c8>
    return;
 8008666:	bf00      	nop
    }
  }
}
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop

08008670 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	889b      	ldrh	r3, [r3, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d130      	bne.n	80086e4 <USBD_SetAddress+0x74>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	88db      	ldrh	r3, [r3, #6]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d12c      	bne.n	80086e4 <USBD_SetAddress+0x74>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008690:	d828      	bhi.n	80086e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800869c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d104      	bne.n	80086b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f988 	bl	80089c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086b0:	e01d      	b.n	80086ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7bfa      	ldrb	r2, [r7, #15]
 80086b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 feaf 	bl	8009422 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fa43 	bl	8008b50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d8:	e009      	b.n	80086ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e2:	e004      	b.n	80086ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f96a 	bl	80089c0 <USBD_CtlError>
  }
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	4b41      	ldr	r3, [pc, #260]	@ (8008810 <USBD_SetConfig+0x118>)
 800870a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800870c:	4b40      	ldr	r3, [pc, #256]	@ (8008810 <USBD_SetConfig+0x118>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d904      	bls.n	800871e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f952 	bl	80089c0 <USBD_CtlError>
 800871c:	e075      	b.n	800880a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008724:	2b02      	cmp	r3, #2
 8008726:	d002      	beq.n	800872e <USBD_SetConfig+0x36>
 8008728:	2b03      	cmp	r3, #3
 800872a:	d023      	beq.n	8008774 <USBD_SetConfig+0x7c>
 800872c:	e062      	b.n	80087f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800872e:	4b38      	ldr	r3, [pc, #224]	@ (8008810 <USBD_SetConfig+0x118>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d01a      	beq.n	800876c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008736:	4b36      	ldr	r3, [pc, #216]	@ (8008810 <USBD_SetConfig+0x118>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2203      	movs	r2, #3
 8008744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008748:	4b31      	ldr	r3, [pc, #196]	@ (8008810 <USBD_SetConfig+0x118>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff f9e7 	bl	8007b22 <USBD_SetClassConfig>
 8008754:	4603      	mov	r3, r0
 8008756:	2b02      	cmp	r3, #2
 8008758:	d104      	bne.n	8008764 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f92f 	bl	80089c0 <USBD_CtlError>
            return;
 8008762:	e052      	b.n	800880a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f9f3 	bl	8008b50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800876a:	e04e      	b.n	800880a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9ef 	bl	8008b50 <USBD_CtlSendStatus>
        break;
 8008772:	e04a      	b.n	800880a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008774:	4b26      	ldr	r3, [pc, #152]	@ (8008810 <USBD_SetConfig+0x118>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d112      	bne.n	80087a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008784:	4b22      	ldr	r3, [pc, #136]	@ (8008810 <USBD_SetConfig+0x118>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	461a      	mov	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800878e:	4b20      	ldr	r3, [pc, #128]	@ (8008810 <USBD_SetConfig+0x118>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff f9e3 	bl	8007b60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f9d8 	bl	8008b50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087a0:	e033      	b.n	800880a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008810 <USBD_SetConfig+0x118>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d01d      	beq.n	80087ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff f9d1 	bl	8007b60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80087be:	4b14      	ldr	r3, [pc, #80]	@ (8008810 <USBD_SetConfig+0x118>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087c8:	4b11      	ldr	r3, [pc, #68]	@ (8008810 <USBD_SetConfig+0x118>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff f9a7 	bl	8007b22 <USBD_SetClassConfig>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d104      	bne.n	80087e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f8ef 	bl	80089c0 <USBD_CtlError>
            return;
 80087e2:	e012      	b.n	800880a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f9b3 	bl	8008b50 <USBD_CtlSendStatus>
        break;
 80087ea:	e00e      	b.n	800880a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f9af 	bl	8008b50 <USBD_CtlSendStatus>
        break;
 80087f2:	e00a      	b.n	800880a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f8e2 	bl	80089c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80087fc:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <USBD_SetConfig+0x118>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff f9ac 	bl	8007b60 <USBD_ClrClassConfig>
        break;
 8008808:	bf00      	nop
    }
  }
}
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200004d8 	.word	0x200004d8

08008814 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	88db      	ldrh	r3, [r3, #6]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d004      	beq.n	8008830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f8c9 	bl	80089c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800882e:	e022      	b.n	8008876 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008836:	2b02      	cmp	r3, #2
 8008838:	dc02      	bgt.n	8008840 <USBD_GetConfig+0x2c>
 800883a:	2b00      	cmp	r3, #0
 800883c:	dc03      	bgt.n	8008846 <USBD_GetConfig+0x32>
 800883e:	e015      	b.n	800886c <USBD_GetConfig+0x58>
 8008840:	2b03      	cmp	r3, #3
 8008842:	d00b      	beq.n	800885c <USBD_GetConfig+0x48>
 8008844:	e012      	b.n	800886c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3308      	adds	r3, #8
 8008850:	2201      	movs	r2, #1
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f91d 	bl	8008a94 <USBD_CtlSendData>
        break;
 800885a:	e00c      	b.n	8008876 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	2201      	movs	r2, #1
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f915 	bl	8008a94 <USBD_CtlSendData>
        break;
 800886a:	e004      	b.n	8008876 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8a6 	bl	80089c0 <USBD_CtlError>
        break;
 8008874:	bf00      	nop
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888e:	3b01      	subs	r3, #1
 8008890:	2b02      	cmp	r3, #2
 8008892:	d81e      	bhi.n	80088d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	88db      	ldrh	r3, [r3, #6]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d004      	beq.n	80088a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f88e 	bl	80089c0 <USBD_CtlError>
        break;
 80088a4:	e01a      	b.n	80088dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f043 0202 	orr.w	r2, r3, #2
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	330c      	adds	r3, #12
 80088c6:	2202      	movs	r2, #2
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8e2 	bl	8008a94 <USBD_CtlSendData>
      break;
 80088d0:	e004      	b.n	80088dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f873 	bl	80089c0 <USBD_CtlError>
      break;
 80088da:	bf00      	nop
  }
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	885b      	ldrh	r3, [r3, #2]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d106      	bne.n	8008904 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f926 	bl	8008b50 <USBD_CtlSendStatus>
  }
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891c:	3b01      	subs	r3, #1
 800891e:	2b02      	cmp	r3, #2
 8008920:	d80b      	bhi.n	800893a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	885b      	ldrh	r3, [r3, #2]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d10c      	bne.n	8008944 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f90c 	bl	8008b50 <USBD_CtlSendStatus>
      }
      break;
 8008938:	e004      	b.n	8008944 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f83f 	bl	80089c0 <USBD_CtlError>
      break;
 8008942:	e000      	b.n	8008946 <USBD_ClrFeature+0x3a>
      break;
 8008944:	bf00      	nop
  }
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	785a      	ldrb	r2, [r3, #1]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3302      	adds	r3, #2
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	3303      	adds	r3, #3
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	b29b      	uxth	r3, r3
 800897a:	4413      	add	r3, r2
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	3304      	adds	r3, #4
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	3305      	adds	r3, #5
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	b29b      	uxth	r3, r3
 8008994:	4413      	add	r3, r2
 8008996:	b29a      	uxth	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	3306      	adds	r3, #6
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	3307      	adds	r3, #7
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	4413      	add	r3, r2
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	80da      	strh	r2, [r3, #6]

}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr

080089c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80089ca:	2180      	movs	r1, #128	@ 0x80
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fcbf 	bl	8009350 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089d2:	2100      	movs	r1, #0
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fcbb 	bl	8009350 <USBD_LL_StallEP>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d032      	beq.n	8008a5e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f834 	bl	8008a66 <USBD_GetLen>
 80089fe:	4603      	mov	r3, r0
 8008a00:	3301      	adds	r3, #1
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	75fa      	strb	r2, [r7, #23]
 8008a12:	461a      	mov	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4413      	add	r3, r2
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	7812      	ldrb	r2, [r2, #0]
 8008a1c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	75fa      	strb	r2, [r7, #23]
 8008a24:	461a      	mov	r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	4413      	add	r3, r2
 8008a2a:	2203      	movs	r2, #3
 8008a2c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a2e:	e012      	b.n	8008a56 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	60fa      	str	r2, [r7, #12]
 8008a36:	7dfa      	ldrb	r2, [r7, #23]
 8008a38:	1c51      	adds	r1, r2, #1
 8008a3a:	75f9      	strb	r1, [r7, #23]
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	440a      	add	r2, r1
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	75fa      	strb	r2, [r7, #23]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	2200      	movs	r2, #0
 8008a54:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e8      	bne.n	8008a30 <USBD_GetString+0x4e>
    }
  }
}
 8008a5e:	bf00      	nop
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a72:	e005      	b.n	8008a80 <USBD_GetLen+0x1a>
  {
    len++;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	3301      	adds	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1f5      	bne.n	8008a74 <USBD_GetLen+0xe>
  }

  return len;
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr

08008a94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008aaa:	88fa      	ldrh	r2, [r7, #6]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ab0:	88fa      	ldrh	r2, [r7, #6]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	2100      	movs	r1, #0
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fccf 	bl	8009460 <USBD_LL_Transmit>

  return USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	2100      	movs	r1, #0
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 fcbd 	bl	8009460 <USBD_LL_Transmit>

  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2203      	movs	r2, #3
 8008b02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b0e:	88fa      	ldrh	r2, [r7, #6]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 fcc2 	bl	80094a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	2100      	movs	r1, #0
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f000 fcb0 	bl	80094a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b60:	2300      	movs	r3, #0
 8008b62:	2200      	movs	r2, #0
 8008b64:	2100      	movs	r1, #0
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fc7a 	bl	8009460 <USBD_LL_Transmit>

  return USBD_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2205      	movs	r2, #5
 8008b82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b86:	2300      	movs	r3, #0
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fc8a 	bl	80094a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4912      	ldr	r1, [pc, #72]	@ (8008bec <MX_USB_DEVICE_Init+0x50>)
 8008ba4:	4812      	ldr	r0, [pc, #72]	@ (8008bf0 <MX_USB_DEVICE_Init+0x54>)
 8008ba6:	f7fe ff62 	bl	8007a6e <USBD_Init>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bb0:	f7f7 ffe4 	bl	8000b7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bb4:	490f      	ldr	r1, [pc, #60]	@ (8008bf4 <MX_USB_DEVICE_Init+0x58>)
 8008bb6:	480e      	ldr	r0, [pc, #56]	@ (8008bf0 <MX_USB_DEVICE_Init+0x54>)
 8008bb8:	f7fe ff84 	bl	8007ac4 <USBD_RegisterClass>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bc2:	f7f7 ffdb 	bl	8000b7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bc6:	490c      	ldr	r1, [pc, #48]	@ (8008bf8 <MX_USB_DEVICE_Init+0x5c>)
 8008bc8:	4809      	ldr	r0, [pc, #36]	@ (8008bf0 <MX_USB_DEVICE_Init+0x54>)
 8008bca:	f7fe feb5 	bl	8007938 <USBD_CDC_RegisterInterface>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bd4:	f7f7 ffd2 	bl	8000b7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bd8:	4805      	ldr	r0, [pc, #20]	@ (8008bf0 <MX_USB_DEVICE_Init+0x54>)
 8008bda:	f7fe ff8c 	bl	8007af6 <USBD_Start>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008be4:	f7f7 ffca 	bl	8000b7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008be8:	bf00      	nop
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20000134 	.word	0x20000134
 8008bf0:	200004dc 	.word	0x200004dc
 8008bf4:	20000018 	.word	0x20000018
 8008bf8:	20000124 	.word	0x20000124

08008bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c00:	2200      	movs	r2, #0
 8008c02:	4905      	ldr	r1, [pc, #20]	@ (8008c18 <CDC_Init_FS+0x1c>)
 8008c04:	4805      	ldr	r0, [pc, #20]	@ (8008c1c <CDC_Init_FS+0x20>)
 8008c06:	f7fe fead 	bl	8007964 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c0a:	4905      	ldr	r1, [pc, #20]	@ (8008c20 <CDC_Init_FS+0x24>)
 8008c0c:	4803      	ldr	r0, [pc, #12]	@ (8008c1c <CDC_Init_FS+0x20>)
 8008c0e:	f7fe fec2 	bl	8007996 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20000ba0 	.word	0x20000ba0
 8008c1c:	200004dc 	.word	0x200004dc
 8008c20:	200007a0 	.word	0x200007a0

08008c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr
	...

08008c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	6039      	str	r1, [r7, #0]
 8008c3e:	71fb      	strb	r3, [r7, #7]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	2b23      	cmp	r3, #35	@ 0x23
 8008c48:	f200 8098 	bhi.w	8008d7c <CDC_Control_FS+0x148>
 8008c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <CDC_Control_FS+0x20>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008d7d 	.word	0x08008d7d
 8008c58:	08008d7d 	.word	0x08008d7d
 8008c5c:	08008d7d 	.word	0x08008d7d
 8008c60:	08008d7d 	.word	0x08008d7d
 8008c64:	08008d7d 	.word	0x08008d7d
 8008c68:	08008d7d 	.word	0x08008d7d
 8008c6c:	08008d7d 	.word	0x08008d7d
 8008c70:	08008d7d 	.word	0x08008d7d
 8008c74:	08008d7d 	.word	0x08008d7d
 8008c78:	08008d7d 	.word	0x08008d7d
 8008c7c:	08008d7d 	.word	0x08008d7d
 8008c80:	08008d7d 	.word	0x08008d7d
 8008c84:	08008d7d 	.word	0x08008d7d
 8008c88:	08008d7d 	.word	0x08008d7d
 8008c8c:	08008d7d 	.word	0x08008d7d
 8008c90:	08008d7d 	.word	0x08008d7d
 8008c94:	08008d7d 	.word	0x08008d7d
 8008c98:	08008d7d 	.word	0x08008d7d
 8008c9c:	08008d7d 	.word	0x08008d7d
 8008ca0:	08008d7d 	.word	0x08008d7d
 8008ca4:	08008d7d 	.word	0x08008d7d
 8008ca8:	08008d7d 	.word	0x08008d7d
 8008cac:	08008d7d 	.word	0x08008d7d
 8008cb0:	08008d7d 	.word	0x08008d7d
 8008cb4:	08008d7d 	.word	0x08008d7d
 8008cb8:	08008d7d 	.word	0x08008d7d
 8008cbc:	08008d7d 	.word	0x08008d7d
 8008cc0:	08008d7d 	.word	0x08008d7d
 8008cc4:	08008d7d 	.word	0x08008d7d
 8008cc8:	08008d7d 	.word	0x08008d7d
 8008ccc:	08008d7d 	.word	0x08008d7d
 8008cd0:	08008d7d 	.word	0x08008d7d
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008d29 	.word	0x08008d29
 8008cdc:	08008d7d 	.word	0x08008d7d
 8008ce0:	08008d7d 	.word	0x08008d7d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	041b      	lsls	r3, r3, #16
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	3303      	adds	r3, #3
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	061b      	lsls	r3, r3, #24
 8008d06:	4313      	orrs	r3, r2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4b20      	ldr	r3, [pc, #128]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d0c:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	791a      	ldrb	r2, [r3, #4]
 8008d12:	4b1e      	ldr	r3, [pc, #120]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d14:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	795a      	ldrb	r2, [r3, #5]
 8008d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d1c:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	799a      	ldrb	r2, [r3, #6]
 8008d22:	4b1a      	ldr	r3, [pc, #104]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d24:	719a      	strb	r2, [r3, #6]
    break;
 8008d26:	e02a      	b.n	8008d7e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008d28:	4b18      	ldr	r3, [pc, #96]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008d32:	4b16      	ldr	r3, [pc, #88]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	0a1a      	lsrs	r2, r3, #8
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008d40:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0c1a      	lsrs	r2, r3, #16
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	3302      	adds	r3, #2
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0e1a      	lsrs	r2, r3, #24
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	3303      	adds	r3, #3
 8008d58:	b2d2      	uxtb	r2, r2
 8008d5a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4a0a      	ldr	r2, [pc, #40]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d62:	7912      	ldrb	r2, [r2, #4]
 8008d64:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	3305      	adds	r3, #5
 8008d6a:	4a08      	ldr	r2, [pc, #32]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d6c:	7952      	ldrb	r2, [r2, #5]
 8008d6e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	3306      	adds	r3, #6
 8008d74:	4a05      	ldr	r2, [pc, #20]	@ (8008d8c <CDC_Control_FS+0x158>)
 8008d76:	7992      	ldrb	r2, [r2, #6]
 8008d78:	701a      	strb	r2, [r3, #0]
    break;
 8008d7a:	e000      	b.n	8008d7e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d7c:	bf00      	nop
  }

  return (USBD_OK);
 8008d7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bc80      	pop	{r7}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	2000011c 	.word	0x2000011c

08008d90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008dcc <CDC_Receive_FS+0x3c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d007      	beq.n	8008db2 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8008da2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <CDC_Receive_FS+0x3c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	b292      	uxth	r2, r2
 8008dac:	4611      	mov	r1, r2
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4806      	ldr	r0, [pc, #24]	@ (8008dd0 <CDC_Receive_FS+0x40>)
 8008db6:	f7fe fdee 	bl	8007996 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dba:	4805      	ldr	r0, [pc, #20]	@ (8008dd0 <CDC_Receive_FS+0x40>)
 8008dbc:	f7fe fe2d 	bl	8007a1a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008dc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000fa0 	.word	0x20000fa0
 8008dd0:	200004dc 	.word	0x200004dc

08008dd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008de4:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <CDC_Transmit_FS+0x48>)
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e00b      	b.n	8008e12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dfa:	887b      	ldrh	r3, [r7, #2]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4806      	ldr	r0, [pc, #24]	@ (8008e1c <CDC_Transmit_FS+0x48>)
 8008e02:	f7fe fdaf 	bl	8007964 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e06:	4805      	ldr	r0, [pc, #20]	@ (8008e1c <CDC_Transmit_FS+0x48>)
 8008e08:	f7fe fdd8 	bl	80079bc <USBD_CDC_TransmitPacket>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200004dc 	.word	0x200004dc

08008e20 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8008e28:	4a03      	ldr	r2, [pc, #12]	@ (8008e38 <CDC_AttachRxData+0x18>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6013      	str	r3, [r2, #0]
}
 8008e2e:	bf00      	nop
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bc80      	pop	{r7}
 8008e36:	4770      	bx	lr
 8008e38:	20000fa0 	.word	0x20000fa0

08008e3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2212      	movs	r2, #18
 8008e4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e4e:	4b03      	ldr	r3, [pc, #12]	@ (8008e5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	20000150 	.word	0x20000150

08008e60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2204      	movs	r2, #4
 8008e70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e72:	4b03      	ldr	r3, [pc, #12]	@ (8008e80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000164 	.word	0x20000164

08008e84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6039      	str	r1, [r7, #0]
 8008e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d105      	bne.n	8008ea2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4907      	ldr	r1, [pc, #28]	@ (8008eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e9a:	4808      	ldr	r0, [pc, #32]	@ (8008ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8008e9c:	f7ff fda1 	bl	80089e2 <USBD_GetString>
 8008ea0:	e004      	b.n	8008eac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	4904      	ldr	r1, [pc, #16]	@ (8008eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ea6:	4805      	ldr	r0, [pc, #20]	@ (8008ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8008ea8:	f7ff fd9b 	bl	80089e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008eac:	4b02      	ldr	r3, [pc, #8]	@ (8008eb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000fa4 	.word	0x20000fa4
 8008ebc:	08009f34 	.word	0x08009f34

08008ec0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	4904      	ldr	r1, [pc, #16]	@ (8008ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ed0:	4804      	ldr	r0, [pc, #16]	@ (8008ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ed2:	f7ff fd86 	bl	80089e2 <USBD_GetString>
  return USBD_StrDesc;
 8008ed6:	4b02      	ldr	r3, [pc, #8]	@ (8008ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000fa4 	.word	0x20000fa4
 8008ee4:	08009f4c 	.word	0x08009f4c

08008ee8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	221a      	movs	r2, #26
 8008ef8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008efa:	f000 f843 	bl	8008f84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008efe:	4b02      	ldr	r3, [pc, #8]	@ (8008f08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000168 	.word	0x20000168

08008f0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4907      	ldr	r1, [pc, #28]	@ (8008f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f22:	4808      	ldr	r0, [pc, #32]	@ (8008f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f24:	f7ff fd5d 	bl	80089e2 <USBD_GetString>
 8008f28:	e004      	b.n	8008f34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	4904      	ldr	r1, [pc, #16]	@ (8008f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f2e:	4805      	ldr	r0, [pc, #20]	@ (8008f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f30:	f7ff fd57 	bl	80089e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f34:	4b02      	ldr	r3, [pc, #8]	@ (8008f40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000fa4 	.word	0x20000fa4
 8008f44:	08009f60 	.word	0x08009f60

08008f48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	4907      	ldr	r1, [pc, #28]	@ (8008f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f5e:	4808      	ldr	r0, [pc, #32]	@ (8008f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f60:	f7ff fd3f 	bl	80089e2 <USBD_GetString>
 8008f64:	e004      	b.n	8008f70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	4904      	ldr	r1, [pc, #16]	@ (8008f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f6a:	4805      	ldr	r0, [pc, #20]	@ (8008f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f6c:	f7ff fd39 	bl	80089e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f70:	4b02      	ldr	r3, [pc, #8]	@ (8008f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000fa4 	.word	0x20000fa4
 8008f80:	08009f6c 	.word	0x08009f6c

08008f84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <Get_SerialNum+0x44>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f90:	4b0e      	ldr	r3, [pc, #56]	@ (8008fcc <Get_SerialNum+0x48>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f96:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd0 <Get_SerialNum+0x4c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008faa:	2208      	movs	r2, #8
 8008fac:	4909      	ldr	r1, [pc, #36]	@ (8008fd4 <Get_SerialNum+0x50>)
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 f814 	bl	8008fdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fb4:	2204      	movs	r2, #4
 8008fb6:	4908      	ldr	r1, [pc, #32]	@ (8008fd8 <Get_SerialNum+0x54>)
 8008fb8:	68b8      	ldr	r0, [r7, #8]
 8008fba:	f000 f80f 	bl	8008fdc <IntToUnicode>
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	1ffff7e8 	.word	0x1ffff7e8
 8008fcc:	1ffff7ec 	.word	0x1ffff7ec
 8008fd0:	1ffff7f0 	.word	0x1ffff7f0
 8008fd4:	2000016a 	.word	0x2000016a
 8008fd8:	2000017a 	.word	0x2000017a

08008fdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fee:	2300      	movs	r3, #0
 8008ff0:	75fb      	strb	r3, [r7, #23]
 8008ff2:	e027      	b.n	8009044 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	0f1b      	lsrs	r3, r3, #28
 8008ff8:	2b09      	cmp	r3, #9
 8008ffa:	d80b      	bhi.n	8009014 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0f1b      	lsrs	r3, r3, #28
 8009000:	b2da      	uxtb	r2, r3
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4619      	mov	r1, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	440b      	add	r3, r1
 800900c:	3230      	adds	r2, #48	@ 0x30
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e00a      	b.n	800902a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	0f1b      	lsrs	r3, r3, #28
 8009018:	b2da      	uxtb	r2, r3
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	4619      	mov	r1, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	440b      	add	r3, r1
 8009024:	3237      	adds	r2, #55	@ 0x37
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	011b      	lsls	r3, r3, #4
 800902e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	3301      	adds	r3, #1
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	2200      	movs	r2, #0
 800903c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	3301      	adds	r3, #1
 8009042:	75fb      	strb	r3, [r7, #23]
 8009044:	7dfa      	ldrb	r2, [r7, #23]
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	429a      	cmp	r2, r3
 800904a:	d3d3      	bcc.n	8008ff4 <IntToUnicode+0x18>
  }
}
 800904c:	bf00      	nop
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	bc80      	pop	{r7}
 8009056:	4770      	bx	lr

08009058 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a0d      	ldr	r2, [pc, #52]	@ (800909c <HAL_PCD_MspInit+0x44>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d113      	bne.n	8009092 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800906a:	4b0d      	ldr	r3, [pc, #52]	@ (80090a0 <HAL_PCD_MspInit+0x48>)
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	4a0c      	ldr	r2, [pc, #48]	@ (80090a0 <HAL_PCD_MspInit+0x48>)
 8009070:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009074:	61d3      	str	r3, [r2, #28]
 8009076:	4b0a      	ldr	r3, [pc, #40]	@ (80090a0 <HAL_PCD_MspInit+0x48>)
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	2014      	movs	r0, #20
 8009088:	f7f8 fcc5 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800908c:	2014      	movs	r0, #20
 800908e:	f7f8 fcde 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	40005c00 	.word	0x40005c00
 80090a0:	40021000 	.word	0x40021000

080090a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7fe fd63 	bl	8007b86 <USBD_LL_SetupStage>
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	6879      	ldr	r1, [r7, #4]
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	440b      	add	r3, r1
 80090e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7fe fd95 	bl	8007c20 <USBD_LL_DataOutStage>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009110:	78fa      	ldrb	r2, [r7, #3]
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	440b      	add	r3, r1
 800911e:	3324      	adds	r3, #36	@ 0x24
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	4619      	mov	r1, r3
 8009126:	f7fe fdec 	bl	8007d02 <USBD_LL_DataInStage>
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fefc 	bl	8007f3e <USBD_LL_SOF>
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009156:	2301      	movs	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	799b      	ldrb	r3, [r3, #6]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d001      	beq.n	8009166 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009162:	f7f7 fd0b 	bl	8000b7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800916c:	7bfa      	ldrb	r2, [r7, #15]
 800916e:	4611      	mov	r1, r2
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe feac 	bl	8007ece <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fe65 	bl	8007e4c <USBD_LL_Reset>
}
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fea6 	bl	8007eec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	7a9b      	ldrb	r3, [r3, #10]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091a8:	4b04      	ldr	r3, [pc, #16]	@ (80091bc <HAL_PCD_SuspendCallback+0x30>)
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	4a03      	ldr	r2, [pc, #12]	@ (80091bc <HAL_PCD_SuspendCallback+0x30>)
 80091ae:	f043 0306 	orr.w	r3, r3, #6
 80091b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	e000ed00 	.word	0xe000ed00

080091c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fea0 	bl	8007f14 <USBD_LL_Resume>
}
 80091d4:	bf00      	nop
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091e4:	4a28      	ldr	r2, [pc, #160]	@ (8009288 <USBD_LL_Init+0xac>)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a26      	ldr	r2, [pc, #152]	@ (8009288 <USBD_LL_Init+0xac>)
 80091f0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091f4:	4b24      	ldr	r3, [pc, #144]	@ (8009288 <USBD_LL_Init+0xac>)
 80091f6:	4a25      	ldr	r2, [pc, #148]	@ (800928c <USBD_LL_Init+0xb0>)
 80091f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091fa:	4b23      	ldr	r3, [pc, #140]	@ (8009288 <USBD_LL_Init+0xac>)
 80091fc:	2208      	movs	r2, #8
 80091fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009200:	4b21      	ldr	r3, [pc, #132]	@ (8009288 <USBD_LL_Init+0xac>)
 8009202:	2202      	movs	r2, #2
 8009204:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009206:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <USBD_LL_Init+0xac>)
 8009208:	2200      	movs	r2, #0
 800920a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800920c:	4b1e      	ldr	r3, [pc, #120]	@ (8009288 <USBD_LL_Init+0xac>)
 800920e:	2200      	movs	r2, #0
 8009210:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009212:	4b1d      	ldr	r3, [pc, #116]	@ (8009288 <USBD_LL_Init+0xac>)
 8009214:	2200      	movs	r2, #0
 8009216:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009218:	481b      	ldr	r0, [pc, #108]	@ (8009288 <USBD_LL_Init+0xac>)
 800921a:	f7f8 ffd6 	bl	80021ca <HAL_PCD_Init>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009224:	f7f7 fcaa 	bl	8000b7c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800922e:	2318      	movs	r3, #24
 8009230:	2200      	movs	r2, #0
 8009232:	2100      	movs	r1, #0
 8009234:	f7fa fce7 	bl	8003c06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800923e:	2358      	movs	r3, #88	@ 0x58
 8009240:	2200      	movs	r2, #0
 8009242:	2180      	movs	r1, #128	@ 0x80
 8009244:	f7fa fcdf 	bl	8003c06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800924e:	23c0      	movs	r3, #192	@ 0xc0
 8009250:	2200      	movs	r2, #0
 8009252:	2181      	movs	r1, #129	@ 0x81
 8009254:	f7fa fcd7 	bl	8003c06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800925e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009262:	2200      	movs	r2, #0
 8009264:	2101      	movs	r1, #1
 8009266:	f7fa fcce 	bl	8003c06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009274:	2200      	movs	r2, #0
 8009276:	2182      	movs	r1, #130	@ 0x82
 8009278:	f7fa fcc5 	bl	8003c06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200011a4 	.word	0x200011a4
 800928c:	40005c00 	.word	0x40005c00

08009290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7f9 f885 	bl	80023b6 <HAL_PCD_Start>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f94e 	bl	8009554 <USBD_Get_USB_Status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	4608      	mov	r0, r1
 80092d0:	4611      	mov	r1, r2
 80092d2:	461a      	mov	r2, r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	70fb      	strb	r3, [r7, #3]
 80092d8:	460b      	mov	r3, r1
 80092da:	70bb      	strb	r3, [r7, #2]
 80092dc:	4613      	mov	r3, r2
 80092de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092ee:	78bb      	ldrb	r3, [r7, #2]
 80092f0:	883a      	ldrh	r2, [r7, #0]
 80092f2:	78f9      	ldrb	r1, [r7, #3]
 80092f4:	f7f9 f9d9 	bl	80026aa <HAL_PCD_EP_Open>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f928 	bl	8009554 <USBD_Get_USB_Status>
 8009304:	4603      	mov	r3, r0
 8009306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009308:	7bbb      	ldrb	r3, [r7, #14]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	460b      	mov	r3, r1
 800931c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f7f9 fa17 	bl	8002764 <HAL_PCD_EP_Close>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f909 	bl	8009554 <USBD_Get_USB_Status>
 8009342:	4603      	mov	r3, r0
 8009344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009346:	7bbb      	ldrb	r3, [r7, #14]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f7f9 fabf 	bl	80028f2 <HAL_PCD_EP_SetStall>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f8ea 	bl	8009554 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f9 fb00 	bl	80029b2 <HAL_PCD_EP_ClrStall>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f8cb 	bl	8009554 <USBD_Get_USB_Status>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	da0b      	bge.n	8009400 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	440b      	add	r3, r1
 80093fa:	3312      	adds	r3, #18
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	e00b      	b.n	8009418 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	440b      	add	r3, r1
 8009412:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009416:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009418:	4618      	mov	r0, r3
 800941a:	3714      	adds	r7, #20
 800941c:	46bd      	mov	sp, r7
 800941e:	bc80      	pop	{r7}
 8009420:	4770      	bx	lr

08009422 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	4611      	mov	r1, r2
 8009440:	4618      	mov	r0, r3
 8009442:	f7f9 f90e 	bl	8002662 <HAL_PCD_SetAddress>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f881 	bl	8009554 <USBD_Get_USB_Status>
 8009452:	4603      	mov	r3, r0
 8009454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009456:	7bbb      	ldrb	r3, [r7, #14]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	607a      	str	r2, [r7, #4]
 800946a:	461a      	mov	r2, r3
 800946c:	460b      	mov	r3, r1
 800946e:	72fb      	strb	r3, [r7, #11]
 8009470:	4613      	mov	r3, r2
 8009472:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009482:	893b      	ldrh	r3, [r7, #8]
 8009484:	7af9      	ldrb	r1, [r7, #11]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	f7f9 f9fc 	bl	8002884 <HAL_PCD_EP_Transmit>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f85e 	bl	8009554 <USBD_Get_USB_Status>
 8009498:	4603      	mov	r3, r0
 800949a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800949c:	7dbb      	ldrb	r3, [r7, #22]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b086      	sub	sp, #24
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	461a      	mov	r2, r3
 80094b2:	460b      	mov	r3, r1
 80094b4:	72fb      	strb	r3, [r7, #11]
 80094b6:	4613      	mov	r3, r2
 80094b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80094c8:	893b      	ldrh	r3, [r7, #8]
 80094ca:	7af9      	ldrb	r1, [r7, #11]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	f7f9 f991 	bl	80027f4 <HAL_PCD_EP_Receive>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 f83b 	bl	8009554 <USBD_Get_USB_Status>
 80094de:	4603      	mov	r3, r0
 80094e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	4611      	mov	r1, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f7f9 f9a7 	bl	8002856 <HAL_PCD_EP_GetRxCount>
 8009508:	4603      	mov	r3, r0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800951c:	4b02      	ldr	r3, [pc, #8]	@ (8009528 <USBD_static_malloc+0x14>)
}
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr
 8009528:	2000147c 	.word	0x2000147c

0800952c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]

}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr

0800953e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	bc80      	pop	{r7}
 8009552:	4770      	bx	lr

08009554 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009562:	79fb      	ldrb	r3, [r7, #7]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d817      	bhi.n	8009598 <USBD_Get_USB_Status+0x44>
 8009568:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <USBD_Get_USB_Status+0x1c>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009581 	.word	0x08009581
 8009574:	08009587 	.word	0x08009587
 8009578:	0800958d 	.word	0x0800958d
 800957c:	08009593 	.word	0x08009593
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
    break;
 8009584:	e00b      	b.n	800959e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	73fb      	strb	r3, [r7, #15]
    break;
 800958a:	e008      	b.n	800959e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800958c:	2301      	movs	r3, #1
 800958e:	73fb      	strb	r3, [r7, #15]
    break;
 8009590:	e005      	b.n	800959e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009592:	2302      	movs	r3, #2
 8009594:	73fb      	strb	r3, [r7, #15]
    break;
 8009596:	e002      	b.n	800959e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009598:	2302      	movs	r3, #2
 800959a:	73fb      	strb	r3, [r7, #15]
    break;
 800959c:	bf00      	nop
  }
  return usb_status;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <siprintf>:
 80095ac:	b40e      	push	{r1, r2, r3}
 80095ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80095b2:	b510      	push	{r4, lr}
 80095b4:	2400      	movs	r4, #0
 80095b6:	b09d      	sub	sp, #116	@ 0x74
 80095b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80095ba:	9002      	str	r0, [sp, #8]
 80095bc:	9006      	str	r0, [sp, #24]
 80095be:	9107      	str	r1, [sp, #28]
 80095c0:	9104      	str	r1, [sp, #16]
 80095c2:	4809      	ldr	r0, [pc, #36]	@ (80095e8 <siprintf+0x3c>)
 80095c4:	4909      	ldr	r1, [pc, #36]	@ (80095ec <siprintf+0x40>)
 80095c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80095ca:	9105      	str	r1, [sp, #20]
 80095cc:	6800      	ldr	r0, [r0, #0]
 80095ce:	a902      	add	r1, sp, #8
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80095d4:	f000 f992 	bl	80098fc <_svfiprintf_r>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	701c      	strb	r4, [r3, #0]
 80095dc:	b01d      	add	sp, #116	@ 0x74
 80095de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e2:	b003      	add	sp, #12
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000184 	.word	0x20000184
 80095ec:	ffff0208 	.word	0xffff0208

080095f0 <memset>:
 80095f0:	4603      	mov	r3, r0
 80095f2:	4402      	add	r2, r0
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d100      	bne.n	80095fa <memset+0xa>
 80095f8:	4770      	bx	lr
 80095fa:	f803 1b01 	strb.w	r1, [r3], #1
 80095fe:	e7f9      	b.n	80095f4 <memset+0x4>

08009600 <__errno>:
 8009600:	4b01      	ldr	r3, [pc, #4]	@ (8009608 <__errno+0x8>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	20000184 	.word	0x20000184

0800960c <__libc_init_array>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	2600      	movs	r6, #0
 8009610:	4d0c      	ldr	r5, [pc, #48]	@ (8009644 <__libc_init_array+0x38>)
 8009612:	4c0d      	ldr	r4, [pc, #52]	@ (8009648 <__libc_init_array+0x3c>)
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	42a6      	cmp	r6, r4
 800961a:	d109      	bne.n	8009630 <__libc_init_array+0x24>
 800961c:	f000 fc76 	bl	8009f0c <_init>
 8009620:	2600      	movs	r6, #0
 8009622:	4d0a      	ldr	r5, [pc, #40]	@ (800964c <__libc_init_array+0x40>)
 8009624:	4c0a      	ldr	r4, [pc, #40]	@ (8009650 <__libc_init_array+0x44>)
 8009626:	1b64      	subs	r4, r4, r5
 8009628:	10a4      	asrs	r4, r4, #2
 800962a:	42a6      	cmp	r6, r4
 800962c:	d105      	bne.n	800963a <__libc_init_array+0x2e>
 800962e:	bd70      	pop	{r4, r5, r6, pc}
 8009630:	f855 3b04 	ldr.w	r3, [r5], #4
 8009634:	4798      	blx	r3
 8009636:	3601      	adds	r6, #1
 8009638:	e7ee      	b.n	8009618 <__libc_init_array+0xc>
 800963a:	f855 3b04 	ldr.w	r3, [r5], #4
 800963e:	4798      	blx	r3
 8009640:	3601      	adds	r6, #1
 8009642:	e7f2      	b.n	800962a <__libc_init_array+0x1e>
 8009644:	08009fd4 	.word	0x08009fd4
 8009648:	08009fd4 	.word	0x08009fd4
 800964c:	08009fd4 	.word	0x08009fd4
 8009650:	08009fd8 	.word	0x08009fd8

08009654 <__retarget_lock_acquire_recursive>:
 8009654:	4770      	bx	lr

08009656 <__retarget_lock_release_recursive>:
 8009656:	4770      	bx	lr

08009658 <_free_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4605      	mov	r5, r0
 800965c:	2900      	cmp	r1, #0
 800965e:	d040      	beq.n	80096e2 <_free_r+0x8a>
 8009660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009664:	1f0c      	subs	r4, r1, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	bfb8      	it	lt
 800966a:	18e4      	addlt	r4, r4, r3
 800966c:	f000 f8de 	bl	800982c <__malloc_lock>
 8009670:	4a1c      	ldr	r2, [pc, #112]	@ (80096e4 <_free_r+0x8c>)
 8009672:	6813      	ldr	r3, [r2, #0]
 8009674:	b933      	cbnz	r3, 8009684 <_free_r+0x2c>
 8009676:	6063      	str	r3, [r4, #4]
 8009678:	6014      	str	r4, [r2, #0]
 800967a:	4628      	mov	r0, r5
 800967c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009680:	f000 b8da 	b.w	8009838 <__malloc_unlock>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d908      	bls.n	800969a <_free_r+0x42>
 8009688:	6820      	ldr	r0, [r4, #0]
 800968a:	1821      	adds	r1, r4, r0
 800968c:	428b      	cmp	r3, r1
 800968e:	bf01      	itttt	eq
 8009690:	6819      	ldreq	r1, [r3, #0]
 8009692:	685b      	ldreq	r3, [r3, #4]
 8009694:	1809      	addeq	r1, r1, r0
 8009696:	6021      	streq	r1, [r4, #0]
 8009698:	e7ed      	b.n	8009676 <_free_r+0x1e>
 800969a:	461a      	mov	r2, r3
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	b10b      	cbz	r3, 80096a4 <_free_r+0x4c>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d9fa      	bls.n	800969a <_free_r+0x42>
 80096a4:	6811      	ldr	r1, [r2, #0]
 80096a6:	1850      	adds	r0, r2, r1
 80096a8:	42a0      	cmp	r0, r4
 80096aa:	d10b      	bne.n	80096c4 <_free_r+0x6c>
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	4401      	add	r1, r0
 80096b0:	1850      	adds	r0, r2, r1
 80096b2:	4283      	cmp	r3, r0
 80096b4:	6011      	str	r1, [r2, #0]
 80096b6:	d1e0      	bne.n	800967a <_free_r+0x22>
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4408      	add	r0, r1
 80096be:	6010      	str	r0, [r2, #0]
 80096c0:	6053      	str	r3, [r2, #4]
 80096c2:	e7da      	b.n	800967a <_free_r+0x22>
 80096c4:	d902      	bls.n	80096cc <_free_r+0x74>
 80096c6:	230c      	movs	r3, #12
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	e7d6      	b.n	800967a <_free_r+0x22>
 80096cc:	6820      	ldr	r0, [r4, #0]
 80096ce:	1821      	adds	r1, r4, r0
 80096d0:	428b      	cmp	r3, r1
 80096d2:	bf01      	itttt	eq
 80096d4:	6819      	ldreq	r1, [r3, #0]
 80096d6:	685b      	ldreq	r3, [r3, #4]
 80096d8:	1809      	addeq	r1, r1, r0
 80096da:	6021      	streq	r1, [r4, #0]
 80096dc:	6063      	str	r3, [r4, #4]
 80096de:	6054      	str	r4, [r2, #4]
 80096e0:	e7cb      	b.n	800967a <_free_r+0x22>
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	200017e0 	.word	0x200017e0

080096e8 <sbrk_aligned>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	4e0f      	ldr	r6, [pc, #60]	@ (8009728 <sbrk_aligned+0x40>)
 80096ec:	460c      	mov	r4, r1
 80096ee:	6831      	ldr	r1, [r6, #0]
 80096f0:	4605      	mov	r5, r0
 80096f2:	b911      	cbnz	r1, 80096fa <sbrk_aligned+0x12>
 80096f4:	f000 fba8 	bl	8009e48 <_sbrk_r>
 80096f8:	6030      	str	r0, [r6, #0]
 80096fa:	4621      	mov	r1, r4
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 fba3 	bl	8009e48 <_sbrk_r>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d103      	bne.n	800970e <sbrk_aligned+0x26>
 8009706:	f04f 34ff 	mov.w	r4, #4294967295
 800970a:	4620      	mov	r0, r4
 800970c:	bd70      	pop	{r4, r5, r6, pc}
 800970e:	1cc4      	adds	r4, r0, #3
 8009710:	f024 0403 	bic.w	r4, r4, #3
 8009714:	42a0      	cmp	r0, r4
 8009716:	d0f8      	beq.n	800970a <sbrk_aligned+0x22>
 8009718:	1a21      	subs	r1, r4, r0
 800971a:	4628      	mov	r0, r5
 800971c:	f000 fb94 	bl	8009e48 <_sbrk_r>
 8009720:	3001      	adds	r0, #1
 8009722:	d1f2      	bne.n	800970a <sbrk_aligned+0x22>
 8009724:	e7ef      	b.n	8009706 <sbrk_aligned+0x1e>
 8009726:	bf00      	nop
 8009728:	200017dc 	.word	0x200017dc

0800972c <_malloc_r>:
 800972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009730:	1ccd      	adds	r5, r1, #3
 8009732:	f025 0503 	bic.w	r5, r5, #3
 8009736:	3508      	adds	r5, #8
 8009738:	2d0c      	cmp	r5, #12
 800973a:	bf38      	it	cc
 800973c:	250c      	movcc	r5, #12
 800973e:	2d00      	cmp	r5, #0
 8009740:	4606      	mov	r6, r0
 8009742:	db01      	blt.n	8009748 <_malloc_r+0x1c>
 8009744:	42a9      	cmp	r1, r5
 8009746:	d904      	bls.n	8009752 <_malloc_r+0x26>
 8009748:	230c      	movs	r3, #12
 800974a:	6033      	str	r3, [r6, #0]
 800974c:	2000      	movs	r0, #0
 800974e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009828 <_malloc_r+0xfc>
 8009756:	f000 f869 	bl	800982c <__malloc_lock>
 800975a:	f8d8 3000 	ldr.w	r3, [r8]
 800975e:	461c      	mov	r4, r3
 8009760:	bb44      	cbnz	r4, 80097b4 <_malloc_r+0x88>
 8009762:	4629      	mov	r1, r5
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff ffbf 	bl	80096e8 <sbrk_aligned>
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	4604      	mov	r4, r0
 800976e:	d158      	bne.n	8009822 <_malloc_r+0xf6>
 8009770:	f8d8 4000 	ldr.w	r4, [r8]
 8009774:	4627      	mov	r7, r4
 8009776:	2f00      	cmp	r7, #0
 8009778:	d143      	bne.n	8009802 <_malloc_r+0xd6>
 800977a:	2c00      	cmp	r4, #0
 800977c:	d04b      	beq.n	8009816 <_malloc_r+0xea>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	4639      	mov	r1, r7
 8009782:	4630      	mov	r0, r6
 8009784:	eb04 0903 	add.w	r9, r4, r3
 8009788:	f000 fb5e 	bl	8009e48 <_sbrk_r>
 800978c:	4581      	cmp	r9, r0
 800978e:	d142      	bne.n	8009816 <_malloc_r+0xea>
 8009790:	6821      	ldr	r1, [r4, #0]
 8009792:	4630      	mov	r0, r6
 8009794:	1a6d      	subs	r5, r5, r1
 8009796:	4629      	mov	r1, r5
 8009798:	f7ff ffa6 	bl	80096e8 <sbrk_aligned>
 800979c:	3001      	adds	r0, #1
 800979e:	d03a      	beq.n	8009816 <_malloc_r+0xea>
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	442b      	add	r3, r5
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	f8d8 3000 	ldr.w	r3, [r8]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	bb62      	cbnz	r2, 8009808 <_malloc_r+0xdc>
 80097ae:	f8c8 7000 	str.w	r7, [r8]
 80097b2:	e00f      	b.n	80097d4 <_malloc_r+0xa8>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	1b52      	subs	r2, r2, r5
 80097b8:	d420      	bmi.n	80097fc <_malloc_r+0xd0>
 80097ba:	2a0b      	cmp	r2, #11
 80097bc:	d917      	bls.n	80097ee <_malloc_r+0xc2>
 80097be:	1961      	adds	r1, r4, r5
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	6025      	str	r5, [r4, #0]
 80097c4:	bf18      	it	ne
 80097c6:	6059      	strne	r1, [r3, #4]
 80097c8:	6863      	ldr	r3, [r4, #4]
 80097ca:	bf08      	it	eq
 80097cc:	f8c8 1000 	streq.w	r1, [r8]
 80097d0:	5162      	str	r2, [r4, r5]
 80097d2:	604b      	str	r3, [r1, #4]
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 f82f 	bl	8009838 <__malloc_unlock>
 80097da:	f104 000b 	add.w	r0, r4, #11
 80097de:	1d23      	adds	r3, r4, #4
 80097e0:	f020 0007 	bic.w	r0, r0, #7
 80097e4:	1ac2      	subs	r2, r0, r3
 80097e6:	bf1c      	itt	ne
 80097e8:	1a1b      	subne	r3, r3, r0
 80097ea:	50a3      	strne	r3, [r4, r2]
 80097ec:	e7af      	b.n	800974e <_malloc_r+0x22>
 80097ee:	6862      	ldr	r2, [r4, #4]
 80097f0:	42a3      	cmp	r3, r4
 80097f2:	bf0c      	ite	eq
 80097f4:	f8c8 2000 	streq.w	r2, [r8]
 80097f8:	605a      	strne	r2, [r3, #4]
 80097fa:	e7eb      	b.n	80097d4 <_malloc_r+0xa8>
 80097fc:	4623      	mov	r3, r4
 80097fe:	6864      	ldr	r4, [r4, #4]
 8009800:	e7ae      	b.n	8009760 <_malloc_r+0x34>
 8009802:	463c      	mov	r4, r7
 8009804:	687f      	ldr	r7, [r7, #4]
 8009806:	e7b6      	b.n	8009776 <_malloc_r+0x4a>
 8009808:	461a      	mov	r2, r3
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	42a3      	cmp	r3, r4
 800980e:	d1fb      	bne.n	8009808 <_malloc_r+0xdc>
 8009810:	2300      	movs	r3, #0
 8009812:	6053      	str	r3, [r2, #4]
 8009814:	e7de      	b.n	80097d4 <_malloc_r+0xa8>
 8009816:	230c      	movs	r3, #12
 8009818:	4630      	mov	r0, r6
 800981a:	6033      	str	r3, [r6, #0]
 800981c:	f000 f80c 	bl	8009838 <__malloc_unlock>
 8009820:	e794      	b.n	800974c <_malloc_r+0x20>
 8009822:	6005      	str	r5, [r0, #0]
 8009824:	e7d6      	b.n	80097d4 <_malloc_r+0xa8>
 8009826:	bf00      	nop
 8009828:	200017e0 	.word	0x200017e0

0800982c <__malloc_lock>:
 800982c:	4801      	ldr	r0, [pc, #4]	@ (8009834 <__malloc_lock+0x8>)
 800982e:	f7ff bf11 	b.w	8009654 <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	200017d8 	.word	0x200017d8

08009838 <__malloc_unlock>:
 8009838:	4801      	ldr	r0, [pc, #4]	@ (8009840 <__malloc_unlock+0x8>)
 800983a:	f7ff bf0c 	b.w	8009656 <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	200017d8 	.word	0x200017d8

08009844 <__ssputs_r>:
 8009844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009848:	461f      	mov	r7, r3
 800984a:	688e      	ldr	r6, [r1, #8]
 800984c:	4682      	mov	sl, r0
 800984e:	42be      	cmp	r6, r7
 8009850:	460c      	mov	r4, r1
 8009852:	4690      	mov	r8, r2
 8009854:	680b      	ldr	r3, [r1, #0]
 8009856:	d82d      	bhi.n	80098b4 <__ssputs_r+0x70>
 8009858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800985c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009860:	d026      	beq.n	80098b0 <__ssputs_r+0x6c>
 8009862:	6965      	ldr	r5, [r4, #20]
 8009864:	6909      	ldr	r1, [r1, #16]
 8009866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800986a:	eba3 0901 	sub.w	r9, r3, r1
 800986e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009872:	1c7b      	adds	r3, r7, #1
 8009874:	444b      	add	r3, r9
 8009876:	106d      	asrs	r5, r5, #1
 8009878:	429d      	cmp	r5, r3
 800987a:	bf38      	it	cc
 800987c:	461d      	movcc	r5, r3
 800987e:	0553      	lsls	r3, r2, #21
 8009880:	d527      	bpl.n	80098d2 <__ssputs_r+0x8e>
 8009882:	4629      	mov	r1, r5
 8009884:	f7ff ff52 	bl	800972c <_malloc_r>
 8009888:	4606      	mov	r6, r0
 800988a:	b360      	cbz	r0, 80098e6 <__ssputs_r+0xa2>
 800988c:	464a      	mov	r2, r9
 800988e:	6921      	ldr	r1, [r4, #16]
 8009890:	f000 faf8 	bl	8009e84 <memcpy>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800989a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	6126      	str	r6, [r4, #16]
 80098a2:	444e      	add	r6, r9
 80098a4:	6026      	str	r6, [r4, #0]
 80098a6:	463e      	mov	r6, r7
 80098a8:	6165      	str	r5, [r4, #20]
 80098aa:	eba5 0509 	sub.w	r5, r5, r9
 80098ae:	60a5      	str	r5, [r4, #8]
 80098b0:	42be      	cmp	r6, r7
 80098b2:	d900      	bls.n	80098b6 <__ssputs_r+0x72>
 80098b4:	463e      	mov	r6, r7
 80098b6:	4632      	mov	r2, r6
 80098b8:	4641      	mov	r1, r8
 80098ba:	6820      	ldr	r0, [r4, #0]
 80098bc:	f000 faaa 	bl	8009e14 <memmove>
 80098c0:	2000      	movs	r0, #0
 80098c2:	68a3      	ldr	r3, [r4, #8]
 80098c4:	1b9b      	subs	r3, r3, r6
 80098c6:	60a3      	str	r3, [r4, #8]
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	4433      	add	r3, r6
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d2:	462a      	mov	r2, r5
 80098d4:	f000 fae4 	bl	8009ea0 <_realloc_r>
 80098d8:	4606      	mov	r6, r0
 80098da:	2800      	cmp	r0, #0
 80098dc:	d1e0      	bne.n	80098a0 <__ssputs_r+0x5c>
 80098de:	4650      	mov	r0, sl
 80098e0:	6921      	ldr	r1, [r4, #16]
 80098e2:	f7ff feb9 	bl	8009658 <_free_r>
 80098e6:	230c      	movs	r3, #12
 80098e8:	f8ca 3000 	str.w	r3, [sl]
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f04f 30ff 	mov.w	r0, #4294967295
 80098f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f6:	81a3      	strh	r3, [r4, #12]
 80098f8:	e7e9      	b.n	80098ce <__ssputs_r+0x8a>
	...

080098fc <_svfiprintf_r>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	4698      	mov	r8, r3
 8009902:	898b      	ldrh	r3, [r1, #12]
 8009904:	4607      	mov	r7, r0
 8009906:	061b      	lsls	r3, r3, #24
 8009908:	460d      	mov	r5, r1
 800990a:	4614      	mov	r4, r2
 800990c:	b09d      	sub	sp, #116	@ 0x74
 800990e:	d510      	bpl.n	8009932 <_svfiprintf_r+0x36>
 8009910:	690b      	ldr	r3, [r1, #16]
 8009912:	b973      	cbnz	r3, 8009932 <_svfiprintf_r+0x36>
 8009914:	2140      	movs	r1, #64	@ 0x40
 8009916:	f7ff ff09 	bl	800972c <_malloc_r>
 800991a:	6028      	str	r0, [r5, #0]
 800991c:	6128      	str	r0, [r5, #16]
 800991e:	b930      	cbnz	r0, 800992e <_svfiprintf_r+0x32>
 8009920:	230c      	movs	r3, #12
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	f04f 30ff 	mov.w	r0, #4294967295
 8009928:	b01d      	add	sp, #116	@ 0x74
 800992a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992e:	2340      	movs	r3, #64	@ 0x40
 8009930:	616b      	str	r3, [r5, #20]
 8009932:	2300      	movs	r3, #0
 8009934:	9309      	str	r3, [sp, #36]	@ 0x24
 8009936:	2320      	movs	r3, #32
 8009938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800993c:	2330      	movs	r3, #48	@ 0x30
 800993e:	f04f 0901 	mov.w	r9, #1
 8009942:	f8cd 800c 	str.w	r8, [sp, #12]
 8009946:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009ae0 <_svfiprintf_r+0x1e4>
 800994a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800994e:	4623      	mov	r3, r4
 8009950:	469a      	mov	sl, r3
 8009952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009956:	b10a      	cbz	r2, 800995c <_svfiprintf_r+0x60>
 8009958:	2a25      	cmp	r2, #37	@ 0x25
 800995a:	d1f9      	bne.n	8009950 <_svfiprintf_r+0x54>
 800995c:	ebba 0b04 	subs.w	fp, sl, r4
 8009960:	d00b      	beq.n	800997a <_svfiprintf_r+0x7e>
 8009962:	465b      	mov	r3, fp
 8009964:	4622      	mov	r2, r4
 8009966:	4629      	mov	r1, r5
 8009968:	4638      	mov	r0, r7
 800996a:	f7ff ff6b 	bl	8009844 <__ssputs_r>
 800996e:	3001      	adds	r0, #1
 8009970:	f000 80a7 	beq.w	8009ac2 <_svfiprintf_r+0x1c6>
 8009974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009976:	445a      	add	r2, fp
 8009978:	9209      	str	r2, [sp, #36]	@ 0x24
 800997a:	f89a 3000 	ldrb.w	r3, [sl]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 809f 	beq.w	8009ac2 <_svfiprintf_r+0x1c6>
 8009984:	2300      	movs	r3, #0
 8009986:	f04f 32ff 	mov.w	r2, #4294967295
 800998a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800998e:	f10a 0a01 	add.w	sl, sl, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	9307      	str	r3, [sp, #28]
 8009996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800999a:	931a      	str	r3, [sp, #104]	@ 0x68
 800999c:	4654      	mov	r4, sl
 800999e:	2205      	movs	r2, #5
 80099a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a4:	484e      	ldr	r0, [pc, #312]	@ (8009ae0 <_svfiprintf_r+0x1e4>)
 80099a6:	f000 fa5f 	bl	8009e68 <memchr>
 80099aa:	9a04      	ldr	r2, [sp, #16]
 80099ac:	b9d8      	cbnz	r0, 80099e6 <_svfiprintf_r+0xea>
 80099ae:	06d0      	lsls	r0, r2, #27
 80099b0:	bf44      	itt	mi
 80099b2:	2320      	movmi	r3, #32
 80099b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099b8:	0711      	lsls	r1, r2, #28
 80099ba:	bf44      	itt	mi
 80099bc:	232b      	movmi	r3, #43	@ 0x2b
 80099be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099c2:	f89a 3000 	ldrb.w	r3, [sl]
 80099c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80099c8:	d015      	beq.n	80099f6 <_svfiprintf_r+0xfa>
 80099ca:	4654      	mov	r4, sl
 80099cc:	2000      	movs	r0, #0
 80099ce:	f04f 0c0a 	mov.w	ip, #10
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	4621      	mov	r1, r4
 80099d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099da:	3b30      	subs	r3, #48	@ 0x30
 80099dc:	2b09      	cmp	r3, #9
 80099de:	d94b      	bls.n	8009a78 <_svfiprintf_r+0x17c>
 80099e0:	b1b0      	cbz	r0, 8009a10 <_svfiprintf_r+0x114>
 80099e2:	9207      	str	r2, [sp, #28]
 80099e4:	e014      	b.n	8009a10 <_svfiprintf_r+0x114>
 80099e6:	eba0 0308 	sub.w	r3, r0, r8
 80099ea:	fa09 f303 	lsl.w	r3, r9, r3
 80099ee:	4313      	orrs	r3, r2
 80099f0:	46a2      	mov	sl, r4
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	e7d2      	b.n	800999c <_svfiprintf_r+0xa0>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	1d19      	adds	r1, r3, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	9103      	str	r1, [sp, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfbb      	ittet	lt
 8009a02:	425b      	neglt	r3, r3
 8009a04:	f042 0202 	orrlt.w	r2, r2, #2
 8009a08:	9307      	strge	r3, [sp, #28]
 8009a0a:	9307      	strlt	r3, [sp, #28]
 8009a0c:	bfb8      	it	lt
 8009a0e:	9204      	strlt	r2, [sp, #16]
 8009a10:	7823      	ldrb	r3, [r4, #0]
 8009a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a14:	d10a      	bne.n	8009a2c <_svfiprintf_r+0x130>
 8009a16:	7863      	ldrb	r3, [r4, #1]
 8009a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1a:	d132      	bne.n	8009a82 <_svfiprintf_r+0x186>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	3402      	adds	r4, #2
 8009a20:	1d1a      	adds	r2, r3, #4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	9203      	str	r2, [sp, #12]
 8009a26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009ae4 <_svfiprintf_r+0x1e8>
 8009a30:	2203      	movs	r2, #3
 8009a32:	4650      	mov	r0, sl
 8009a34:	7821      	ldrb	r1, [r4, #0]
 8009a36:	f000 fa17 	bl	8009e68 <memchr>
 8009a3a:	b138      	cbz	r0, 8009a4c <_svfiprintf_r+0x150>
 8009a3c:	2240      	movs	r2, #64	@ 0x40
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	eba0 000a 	sub.w	r0, r0, sl
 8009a44:	4082      	lsls	r2, r0
 8009a46:	4313      	orrs	r3, r2
 8009a48:	3401      	adds	r4, #1
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a50:	2206      	movs	r2, #6
 8009a52:	4825      	ldr	r0, [pc, #148]	@ (8009ae8 <_svfiprintf_r+0x1ec>)
 8009a54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a58:	f000 fa06 	bl	8009e68 <memchr>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d036      	beq.n	8009ace <_svfiprintf_r+0x1d2>
 8009a60:	4b22      	ldr	r3, [pc, #136]	@ (8009aec <_svfiprintf_r+0x1f0>)
 8009a62:	bb1b      	cbnz	r3, 8009aac <_svfiprintf_r+0x1b0>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	3307      	adds	r3, #7
 8009a68:	f023 0307 	bic.w	r3, r3, #7
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	9303      	str	r3, [sp, #12]
 8009a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a72:	4433      	add	r3, r6
 8009a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a76:	e76a      	b.n	800994e <_svfiprintf_r+0x52>
 8009a78:	460c      	mov	r4, r1
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a80:	e7a8      	b.n	80099d4 <_svfiprintf_r+0xd8>
 8009a82:	2300      	movs	r3, #0
 8009a84:	f04f 0c0a 	mov.w	ip, #10
 8009a88:	4619      	mov	r1, r3
 8009a8a:	3401      	adds	r4, #1
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a94:	3a30      	subs	r2, #48	@ 0x30
 8009a96:	2a09      	cmp	r2, #9
 8009a98:	d903      	bls.n	8009aa2 <_svfiprintf_r+0x1a6>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0c6      	beq.n	8009a2c <_svfiprintf_r+0x130>
 8009a9e:	9105      	str	r1, [sp, #20]
 8009aa0:	e7c4      	b.n	8009a2c <_svfiprintf_r+0x130>
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aaa:	e7f0      	b.n	8009a8e <_svfiprintf_r+0x192>
 8009aac:	ab03      	add	r3, sp, #12
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8009af0 <_svfiprintf_r+0x1f4>)
 8009ab6:	a904      	add	r1, sp, #16
 8009ab8:	f3af 8000 	nop.w
 8009abc:	1c42      	adds	r2, r0, #1
 8009abe:	4606      	mov	r6, r0
 8009ac0:	d1d6      	bne.n	8009a70 <_svfiprintf_r+0x174>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	065b      	lsls	r3, r3, #25
 8009ac6:	f53f af2d 	bmi.w	8009924 <_svfiprintf_r+0x28>
 8009aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009acc:	e72c      	b.n	8009928 <_svfiprintf_r+0x2c>
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	4b06      	ldr	r3, [pc, #24]	@ (8009af0 <_svfiprintf_r+0x1f4>)
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	f000 f87d 	bl	8009bd8 <_printf_i>
 8009ade:	e7ed      	b.n	8009abc <_svfiprintf_r+0x1c0>
 8009ae0:	08009f9e 	.word	0x08009f9e
 8009ae4:	08009fa4 	.word	0x08009fa4
 8009ae8:	08009fa8 	.word	0x08009fa8
 8009aec:	00000000 	.word	0x00000000
 8009af0:	08009845 	.word	0x08009845

08009af4 <_printf_common>:
 8009af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af8:	4616      	mov	r6, r2
 8009afa:	4698      	mov	r8, r3
 8009afc:	688a      	ldr	r2, [r1, #8]
 8009afe:	690b      	ldr	r3, [r1, #16]
 8009b00:	4607      	mov	r7, r0
 8009b02:	4293      	cmp	r3, r2
 8009b04:	bfb8      	it	lt
 8009b06:	4613      	movlt	r3, r2
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b0e:	460c      	mov	r4, r1
 8009b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b14:	b10a      	cbz	r2, 8009b1a <_printf_common+0x26>
 8009b16:	3301      	adds	r3, #1
 8009b18:	6033      	str	r3, [r6, #0]
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	0699      	lsls	r1, r3, #26
 8009b1e:	bf42      	ittt	mi
 8009b20:	6833      	ldrmi	r3, [r6, #0]
 8009b22:	3302      	addmi	r3, #2
 8009b24:	6033      	strmi	r3, [r6, #0]
 8009b26:	6825      	ldr	r5, [r4, #0]
 8009b28:	f015 0506 	ands.w	r5, r5, #6
 8009b2c:	d106      	bne.n	8009b3c <_printf_common+0x48>
 8009b2e:	f104 0a19 	add.w	sl, r4, #25
 8009b32:	68e3      	ldr	r3, [r4, #12]
 8009b34:	6832      	ldr	r2, [r6, #0]
 8009b36:	1a9b      	subs	r3, r3, r2
 8009b38:	42ab      	cmp	r3, r5
 8009b3a:	dc2b      	bgt.n	8009b94 <_printf_common+0xa0>
 8009b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b40:	6822      	ldr	r2, [r4, #0]
 8009b42:	3b00      	subs	r3, #0
 8009b44:	bf18      	it	ne
 8009b46:	2301      	movne	r3, #1
 8009b48:	0692      	lsls	r2, r2, #26
 8009b4a:	d430      	bmi.n	8009bae <_printf_common+0xba>
 8009b4c:	4641      	mov	r1, r8
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b54:	47c8      	blx	r9
 8009b56:	3001      	adds	r0, #1
 8009b58:	d023      	beq.n	8009ba2 <_printf_common+0xae>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	6922      	ldr	r2, [r4, #16]
 8009b5e:	f003 0306 	and.w	r3, r3, #6
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	bf14      	ite	ne
 8009b66:	2500      	movne	r5, #0
 8009b68:	6833      	ldreq	r3, [r6, #0]
 8009b6a:	f04f 0600 	mov.w	r6, #0
 8009b6e:	bf08      	it	eq
 8009b70:	68e5      	ldreq	r5, [r4, #12]
 8009b72:	f104 041a 	add.w	r4, r4, #26
 8009b76:	bf08      	it	eq
 8009b78:	1aed      	subeq	r5, r5, r3
 8009b7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009b7e:	bf08      	it	eq
 8009b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b84:	4293      	cmp	r3, r2
 8009b86:	bfc4      	itt	gt
 8009b88:	1a9b      	subgt	r3, r3, r2
 8009b8a:	18ed      	addgt	r5, r5, r3
 8009b8c:	42b5      	cmp	r5, r6
 8009b8e:	d11a      	bne.n	8009bc6 <_printf_common+0xd2>
 8009b90:	2000      	movs	r0, #0
 8009b92:	e008      	b.n	8009ba6 <_printf_common+0xb2>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4652      	mov	r2, sl
 8009b98:	4641      	mov	r1, r8
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c8      	blx	r9
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d103      	bne.n	8009baa <_printf_common+0xb6>
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	3501      	adds	r5, #1
 8009bac:	e7c1      	b.n	8009b32 <_printf_common+0x3e>
 8009bae:	2030      	movs	r0, #48	@ 0x30
 8009bb0:	18e1      	adds	r1, r4, r3
 8009bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bbc:	4422      	add	r2, r4
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bc4:	e7c2      	b.n	8009b4c <_printf_common+0x58>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4641      	mov	r1, r8
 8009bcc:	4638      	mov	r0, r7
 8009bce:	47c8      	blx	r9
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d0e6      	beq.n	8009ba2 <_printf_common+0xae>
 8009bd4:	3601      	adds	r6, #1
 8009bd6:	e7d9      	b.n	8009b8c <_printf_common+0x98>

08009bd8 <_printf_i>:
 8009bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	7e0f      	ldrb	r7, [r1, #24]
 8009bde:	4691      	mov	r9, r2
 8009be0:	2f78      	cmp	r7, #120	@ 0x78
 8009be2:	4680      	mov	r8, r0
 8009be4:	460c      	mov	r4, r1
 8009be6:	469a      	mov	sl, r3
 8009be8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bee:	d807      	bhi.n	8009c00 <_printf_i+0x28>
 8009bf0:	2f62      	cmp	r7, #98	@ 0x62
 8009bf2:	d80a      	bhi.n	8009c0a <_printf_i+0x32>
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	f000 80d1 	beq.w	8009d9c <_printf_i+0x1c4>
 8009bfa:	2f58      	cmp	r7, #88	@ 0x58
 8009bfc:	f000 80b8 	beq.w	8009d70 <_printf_i+0x198>
 8009c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c08:	e03a      	b.n	8009c80 <_printf_i+0xa8>
 8009c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c0e:	2b15      	cmp	r3, #21
 8009c10:	d8f6      	bhi.n	8009c00 <_printf_i+0x28>
 8009c12:	a101      	add	r1, pc, #4	@ (adr r1, 8009c18 <_printf_i+0x40>)
 8009c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c18:	08009c71 	.word	0x08009c71
 8009c1c:	08009c85 	.word	0x08009c85
 8009c20:	08009c01 	.word	0x08009c01
 8009c24:	08009c01 	.word	0x08009c01
 8009c28:	08009c01 	.word	0x08009c01
 8009c2c:	08009c01 	.word	0x08009c01
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009c01 	.word	0x08009c01
 8009c38:	08009c01 	.word	0x08009c01
 8009c3c:	08009c01 	.word	0x08009c01
 8009c40:	08009c01 	.word	0x08009c01
 8009c44:	08009d83 	.word	0x08009d83
 8009c48:	08009caf 	.word	0x08009caf
 8009c4c:	08009d3d 	.word	0x08009d3d
 8009c50:	08009c01 	.word	0x08009c01
 8009c54:	08009c01 	.word	0x08009c01
 8009c58:	08009da5 	.word	0x08009da5
 8009c5c:	08009c01 	.word	0x08009c01
 8009c60:	08009caf 	.word	0x08009caf
 8009c64:	08009c01 	.word	0x08009c01
 8009c68:	08009c01 	.word	0x08009c01
 8009c6c:	08009d45 	.word	0x08009d45
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6032      	str	r2, [r6, #0]
 8009c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c80:	2301      	movs	r3, #1
 8009c82:	e09c      	b.n	8009dbe <_printf_i+0x1e6>
 8009c84:	6833      	ldr	r3, [r6, #0]
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	6031      	str	r1, [r6, #0]
 8009c8c:	0606      	lsls	r6, r0, #24
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0xbc>
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	e003      	b.n	8009c9c <_printf_i+0xc4>
 8009c94:	0645      	lsls	r5, r0, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0xb8>
 8009c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	da03      	bge.n	8009ca8 <_printf_i+0xd0>
 8009ca0:	232d      	movs	r3, #45	@ 0x2d
 8009ca2:	426d      	negs	r5, r5
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ca8:	230a      	movs	r3, #10
 8009caa:	4858      	ldr	r0, [pc, #352]	@ (8009e0c <_printf_i+0x234>)
 8009cac:	e011      	b.n	8009cd2 <_printf_i+0xfa>
 8009cae:	6821      	ldr	r1, [r4, #0]
 8009cb0:	6833      	ldr	r3, [r6, #0]
 8009cb2:	0608      	lsls	r0, r1, #24
 8009cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009cb8:	d402      	bmi.n	8009cc0 <_printf_i+0xe8>
 8009cba:	0649      	lsls	r1, r1, #25
 8009cbc:	bf48      	it	mi
 8009cbe:	b2ad      	uxthmi	r5, r5
 8009cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cc2:	6033      	str	r3, [r6, #0]
 8009cc4:	bf14      	ite	ne
 8009cc6:	230a      	movne	r3, #10
 8009cc8:	2308      	moveq	r3, #8
 8009cca:	4850      	ldr	r0, [pc, #320]	@ (8009e0c <_printf_i+0x234>)
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cd2:	6866      	ldr	r6, [r4, #4]
 8009cd4:	2e00      	cmp	r6, #0
 8009cd6:	60a6      	str	r6, [r4, #8]
 8009cd8:	db05      	blt.n	8009ce6 <_printf_i+0x10e>
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	432e      	orrs	r6, r5
 8009cde:	f021 0104 	bic.w	r1, r1, #4
 8009ce2:	6021      	str	r1, [r4, #0]
 8009ce4:	d04b      	beq.n	8009d7e <_printf_i+0x1a6>
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cec:	fb03 5711 	mls	r7, r3, r1, r5
 8009cf0:	5dc7      	ldrb	r7, [r0, r7]
 8009cf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cf6:	462f      	mov	r7, r5
 8009cf8:	42bb      	cmp	r3, r7
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	d9f4      	bls.n	8009ce8 <_printf_i+0x110>
 8009cfe:	2b08      	cmp	r3, #8
 8009d00:	d10b      	bne.n	8009d1a <_printf_i+0x142>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	07df      	lsls	r7, r3, #31
 8009d06:	d508      	bpl.n	8009d1a <_printf_i+0x142>
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	6861      	ldr	r1, [r4, #4]
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	bfde      	ittt	le
 8009d10:	2330      	movle	r3, #48	@ 0x30
 8009d12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d1a:	1b92      	subs	r2, r2, r6
 8009d1c:	6122      	str	r2, [r4, #16]
 8009d1e:	464b      	mov	r3, r9
 8009d20:	4621      	mov	r1, r4
 8009d22:	4640      	mov	r0, r8
 8009d24:	f8cd a000 	str.w	sl, [sp]
 8009d28:	aa03      	add	r2, sp, #12
 8009d2a:	f7ff fee3 	bl	8009af4 <_printf_common>
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d14a      	bne.n	8009dc8 <_printf_i+0x1f0>
 8009d32:	f04f 30ff 	mov.w	r0, #4294967295
 8009d36:	b004      	add	sp, #16
 8009d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	f043 0320 	orr.w	r3, r3, #32
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	2778      	movs	r7, #120	@ 0x78
 8009d46:	4832      	ldr	r0, [pc, #200]	@ (8009e10 <_printf_i+0x238>)
 8009d48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	6831      	ldr	r1, [r6, #0]
 8009d50:	061f      	lsls	r7, r3, #24
 8009d52:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d56:	d402      	bmi.n	8009d5e <_printf_i+0x186>
 8009d58:	065f      	lsls	r7, r3, #25
 8009d5a:	bf48      	it	mi
 8009d5c:	b2ad      	uxthmi	r5, r5
 8009d5e:	6031      	str	r1, [r6, #0]
 8009d60:	07d9      	lsls	r1, r3, #31
 8009d62:	bf44      	itt	mi
 8009d64:	f043 0320 	orrmi.w	r3, r3, #32
 8009d68:	6023      	strmi	r3, [r4, #0]
 8009d6a:	b11d      	cbz	r5, 8009d74 <_printf_i+0x19c>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	e7ad      	b.n	8009ccc <_printf_i+0xf4>
 8009d70:	4826      	ldr	r0, [pc, #152]	@ (8009e0c <_printf_i+0x234>)
 8009d72:	e7e9      	b.n	8009d48 <_printf_i+0x170>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	f023 0320 	bic.w	r3, r3, #32
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	e7f6      	b.n	8009d6c <_printf_i+0x194>
 8009d7e:	4616      	mov	r6, r2
 8009d80:	e7bd      	b.n	8009cfe <_printf_i+0x126>
 8009d82:	6833      	ldr	r3, [r6, #0]
 8009d84:	6825      	ldr	r5, [r4, #0]
 8009d86:	1d18      	adds	r0, r3, #4
 8009d88:	6961      	ldr	r1, [r4, #20]
 8009d8a:	6030      	str	r0, [r6, #0]
 8009d8c:	062e      	lsls	r6, r5, #24
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	d501      	bpl.n	8009d96 <_printf_i+0x1be>
 8009d92:	6019      	str	r1, [r3, #0]
 8009d94:	e002      	b.n	8009d9c <_printf_i+0x1c4>
 8009d96:	0668      	lsls	r0, r5, #25
 8009d98:	d5fb      	bpl.n	8009d92 <_printf_i+0x1ba>
 8009d9a:	8019      	strh	r1, [r3, #0]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4616      	mov	r6, r2
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	e7bc      	b.n	8009d1e <_printf_i+0x146>
 8009da4:	6833      	ldr	r3, [r6, #0]
 8009da6:	2100      	movs	r1, #0
 8009da8:	1d1a      	adds	r2, r3, #4
 8009daa:	6032      	str	r2, [r6, #0]
 8009dac:	681e      	ldr	r6, [r3, #0]
 8009dae:	6862      	ldr	r2, [r4, #4]
 8009db0:	4630      	mov	r0, r6
 8009db2:	f000 f859 	bl	8009e68 <memchr>
 8009db6:	b108      	cbz	r0, 8009dbc <_printf_i+0x1e4>
 8009db8:	1b80      	subs	r0, r0, r6
 8009dba:	6060      	str	r0, [r4, #4]
 8009dbc:	6863      	ldr	r3, [r4, #4]
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dc6:	e7aa      	b.n	8009d1e <_printf_i+0x146>
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	47d0      	blx	sl
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d0ad      	beq.n	8009d32 <_printf_i+0x15a>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	079b      	lsls	r3, r3, #30
 8009dda:	d413      	bmi.n	8009e04 <_printf_i+0x22c>
 8009ddc:	68e0      	ldr	r0, [r4, #12]
 8009dde:	9b03      	ldr	r3, [sp, #12]
 8009de0:	4298      	cmp	r0, r3
 8009de2:	bfb8      	it	lt
 8009de4:	4618      	movlt	r0, r3
 8009de6:	e7a6      	b.n	8009d36 <_printf_i+0x15e>
 8009de8:	2301      	movs	r3, #1
 8009dea:	4632      	mov	r2, r6
 8009dec:	4649      	mov	r1, r9
 8009dee:	4640      	mov	r0, r8
 8009df0:	47d0      	blx	sl
 8009df2:	3001      	adds	r0, #1
 8009df4:	d09d      	beq.n	8009d32 <_printf_i+0x15a>
 8009df6:	3501      	adds	r5, #1
 8009df8:	68e3      	ldr	r3, [r4, #12]
 8009dfa:	9903      	ldr	r1, [sp, #12]
 8009dfc:	1a5b      	subs	r3, r3, r1
 8009dfe:	42ab      	cmp	r3, r5
 8009e00:	dcf2      	bgt.n	8009de8 <_printf_i+0x210>
 8009e02:	e7eb      	b.n	8009ddc <_printf_i+0x204>
 8009e04:	2500      	movs	r5, #0
 8009e06:	f104 0619 	add.w	r6, r4, #25
 8009e0a:	e7f5      	b.n	8009df8 <_printf_i+0x220>
 8009e0c:	08009faf 	.word	0x08009faf
 8009e10:	08009fc0 	.word	0x08009fc0

08009e14 <memmove>:
 8009e14:	4288      	cmp	r0, r1
 8009e16:	b510      	push	{r4, lr}
 8009e18:	eb01 0402 	add.w	r4, r1, r2
 8009e1c:	d902      	bls.n	8009e24 <memmove+0x10>
 8009e1e:	4284      	cmp	r4, r0
 8009e20:	4623      	mov	r3, r4
 8009e22:	d807      	bhi.n	8009e34 <memmove+0x20>
 8009e24:	1e43      	subs	r3, r0, #1
 8009e26:	42a1      	cmp	r1, r4
 8009e28:	d008      	beq.n	8009e3c <memmove+0x28>
 8009e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e32:	e7f8      	b.n	8009e26 <memmove+0x12>
 8009e34:	4601      	mov	r1, r0
 8009e36:	4402      	add	r2, r0
 8009e38:	428a      	cmp	r2, r1
 8009e3a:	d100      	bne.n	8009e3e <memmove+0x2a>
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e46:	e7f7      	b.n	8009e38 <memmove+0x24>

08009e48 <_sbrk_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	4d05      	ldr	r5, [pc, #20]	@ (8009e64 <_sbrk_r+0x1c>)
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f6 ffb2 	bl	8000dbc <_sbrk>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_sbrk_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_sbrk_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	200017d4 	.word	0x200017d4

08009e68 <memchr>:
 8009e68:	4603      	mov	r3, r0
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	b2c9      	uxtb	r1, r1
 8009e6e:	4402      	add	r2, r0
 8009e70:	4293      	cmp	r3, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	d101      	bne.n	8009e7a <memchr+0x12>
 8009e76:	2000      	movs	r0, #0
 8009e78:	e003      	b.n	8009e82 <memchr+0x1a>
 8009e7a:	7804      	ldrb	r4, [r0, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	428c      	cmp	r4, r1
 8009e80:	d1f6      	bne.n	8009e70 <memchr+0x8>
 8009e82:	bd10      	pop	{r4, pc}

08009e84 <memcpy>:
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e8c:	d100      	bne.n	8009e90 <memcpy+0xc>
 8009e8e:	4770      	bx	lr
 8009e90:	b510      	push	{r4, lr}
 8009e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e96:	4291      	cmp	r1, r2
 8009e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9c:	d1f9      	bne.n	8009e92 <memcpy+0xe>
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <_realloc_r>:
 8009ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	4614      	mov	r4, r2
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	b921      	cbnz	r1, 8009eb6 <_realloc_r+0x16>
 8009eac:	4611      	mov	r1, r2
 8009eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	f7ff bc3b 	b.w	800972c <_malloc_r>
 8009eb6:	b92a      	cbnz	r2, 8009ec4 <_realloc_r+0x24>
 8009eb8:	f7ff fbce 	bl	8009658 <_free_r>
 8009ebc:	4625      	mov	r5, r4
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec4:	f000 f81a 	bl	8009efc <_malloc_usable_size_r>
 8009ec8:	4284      	cmp	r4, r0
 8009eca:	4606      	mov	r6, r0
 8009ecc:	d802      	bhi.n	8009ed4 <_realloc_r+0x34>
 8009ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ed2:	d8f4      	bhi.n	8009ebe <_realloc_r+0x1e>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f7ff fc28 	bl	800972c <_malloc_r>
 8009edc:	4680      	mov	r8, r0
 8009ede:	b908      	cbnz	r0, 8009ee4 <_realloc_r+0x44>
 8009ee0:	4645      	mov	r5, r8
 8009ee2:	e7ec      	b.n	8009ebe <_realloc_r+0x1e>
 8009ee4:	42b4      	cmp	r4, r6
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	4629      	mov	r1, r5
 8009eea:	bf28      	it	cs
 8009eec:	4632      	movcs	r2, r6
 8009eee:	f7ff ffc9 	bl	8009e84 <memcpy>
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f7ff fbaf 	bl	8009658 <_free_r>
 8009efa:	e7f1      	b.n	8009ee0 <_realloc_r+0x40>

08009efc <_malloc_usable_size_r>:
 8009efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f00:	1f18      	subs	r0, r3, #4
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bfbc      	itt	lt
 8009f06:	580b      	ldrlt	r3, [r1, r0]
 8009f08:	18c0      	addlt	r0, r0, r3
 8009f0a:	4770      	bx	lr

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
