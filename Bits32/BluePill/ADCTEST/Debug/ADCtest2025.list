
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d28  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009e34  08009e34  0000ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee4  08009ee4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009ee4  08009ee4  0000b1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009ee4  08009ee4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee4  08009ee4  0000aee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009eec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001610  200001d4  0800a0c0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017e4  0800a0c0  0000b7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001404b  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a22  00000000  00000000  0001f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00022c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df0  00000000  00000000  00023ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1be  00000000  00000000  00024cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178e6  00000000  00000000  0003fe7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000927d0  00000000  00000000  00057764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9f34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  000e9f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000eef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d4 	.word	0x200001d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009e1c 	.word	0x08009e1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d8 	.word	0x200001d8
 8000148:	08009e1c 	.word	0x08009e1c

0800014c <SendInfo>:
 */

#include "UnerProtocol.h"


void SendInfo(uint8_t bufferAux[],uint8_t bytes){
 800014c:	b480      	push	{r7}
 800014e:	b08d      	sub	sp, #52	@ 0x34
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8000158:	2300      	movs	r3, #0
 800015a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800015e:	2300      	movs	r3, #0
 8000160:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000164:	2300      	movs	r3, #0
 8000166:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800016a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800016e:	1c5a      	adds	r2, r3, #1
 8000170:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000174:	3330      	adds	r3, #48	@ 0x30
 8000176:	443b      	add	r3, r7
 8000178:	2255      	movs	r2, #85	@ 0x55
 800017a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800017e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000182:	1c5a      	adds	r2, r3, #1
 8000184:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000188:	3330      	adds	r3, #48	@ 0x30
 800018a:	443b      	add	r3, r7
 800018c:	224e      	movs	r2, #78	@ 0x4e
 800018e:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 8000192:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800019c:	3330      	adds	r3, #48	@ 0x30
 800019e:	443b      	add	r3, r7
 80001a0:	2245      	movs	r2, #69	@ 0x45
 80001a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80001a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001b0:	3330      	adds	r3, #48	@ 0x30
 80001b2:	443b      	add	r3, r7
 80001b4:	2252      	movs	r2, #82	@ 0x52
 80001b6:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 80001ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001c4:	3330      	adds	r3, #48	@ 0x30
 80001c6:	443b      	add	r3, r7
 80001c8:	78fa      	ldrb	r2, [r7, #3]
 80001ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80001ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001d2:	1c5a      	adds	r2, r3, #1
 80001d4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001d8:	3330      	adds	r3, #48	@ 0x30
 80001da:	443b      	add	r3, r7
 80001dc:	223a      	movs	r2, #58	@ 0x3a
 80001de:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80001e8:	e012      	b.n	8000210 <SendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 80001ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	441a      	add	r2, r3
 80001f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001f6:	1c59      	adds	r1, r3, #1
 80001f8:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 80001fc:	7812      	ldrb	r2, [r2, #0]
 80001fe:	3330      	adds	r3, #48	@ 0x30
 8000200:	443b      	add	r3, r7
 8000202:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 8000206:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800020a:	3301      	adds	r3, #1
 800020c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000210:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000214:	78fb      	ldrb	r3, [r7, #3]
 8000216:	3b01      	subs	r3, #1
 8000218:	429a      	cmp	r2, r3
 800021a:	dbe6      	blt.n	80001ea <SendInfo+0x9e>

    cks=0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8000222:	2300      	movs	r3, #0
 8000224:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000228:	e021      	b.n	800026e <SendInfo+0x122>
        cks^= bufAux[i];
 800022a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800022e:	3330      	adds	r3, #48	@ 0x30
 8000230:	443b      	add	r3, r7
 8000232:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800023a:	4053      	eors	r3, r2
 800023c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=bufAux[i];
 8000240:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000244:	4b18      	ldr	r3, [pc, #96]	@ (80002a8 <SendInfo+0x15c>)
 8000246:	795b      	ldrb	r3, [r3, #5]
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	b2c8      	uxtb	r0, r1
 800024c:	4916      	ldr	r1, [pc, #88]	@ (80002a8 <SendInfo+0x15c>)
 800024e:	7148      	strb	r0, [r1, #5]
 8000250:	4619      	mov	r1, r3
 8000252:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000256:	443b      	add	r3, r7
 8000258:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <SendInfo+0x15c>)
 800025e:	440b      	add	r3, r1
 8000260:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(i=0 ;i<indiceAux;i++){
 8000264:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000268:	3301      	adds	r3, #1
 800026a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800026e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000276:	429a      	cmp	r2, r3
 8000278:	d3d7      	bcc.n	800022a <SendInfo+0xde>
    }
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <SendInfo+0x15c>)
 800027c:	795b      	ldrb	r3, [r3, #5]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	b2d1      	uxtb	r1, r2
 8000282:	4a09      	ldr	r2, [pc, #36]	@ (80002a8 <SendInfo+0x15c>)
 8000284:	7151      	strb	r1, [r2, #5]
 8000286:	461a      	mov	r2, r3
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <SendInfo+0x15c>)
 800028a:	4413      	add	r3, r2
 800028c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000290:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107

     datosComSerie.bytesTosend=indiceAux;
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <SendInfo+0x15c>)
 8000296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800029a:	f882 3207 	strb.w	r3, [r2, #519]	@ 0x207

}
 800029e:	bf00      	nop
 80002a0:	3734      	adds	r7, #52	@ 0x34
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	200002b0 	.word	0x200002b0

080002ac <DecodeHeader>:

void DecodeHeader(_sDato *datosCom){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80002ba:	e0e2      	b.n	8000482 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80002bc:	4b76      	ldr	r3, [pc, #472]	@ (8000498 <DecodeHeader+0x1ec>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	f200 80d7 	bhi.w	8000474 <DecodeHeader+0x1c8>
 80002c6:	a201      	add	r2, pc, #4	@ (adr r2, 80002cc <DecodeHeader+0x20>)
 80002c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002cc:	080002e9 	.word	0x080002e9
 80002d0:	08000311 	.word	0x08000311
 80002d4:	08000345 	.word	0x08000345
 80002d8:	08000379 	.word	0x08000379
 80002dc:	080003ad 	.word	0x080003ad
 80002e0:	080003d5 	.word	0x080003d5
 80002e4:	08000417 	.word	0x08000417
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	b2d1      	uxtb	r1, r2
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	7111      	strb	r1, [r2, #4]
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	79db      	ldrb	r3, [r3, #7]
 80002fc:	2b55      	cmp	r3, #85	@ 0x55
 80002fe:	f040 80bd 	bne.w	800047c <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000302:	4b65      	ldr	r3, [pc, #404]	@ (8000498 <DecodeHeader+0x1ec>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800030e:	e0b5      	b.n	800047c <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	791b      	ldrb	r3, [r3, #4]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	b2d1      	uxtb	r1, r2
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	7111      	strb	r1, [r2, #4]
 800031c:	461a      	mov	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	79db      	ldrb	r3, [r3, #7]
 8000324:	2b4e      	cmp	r3, #78	@ 0x4e
 8000326:	d103      	bne.n	8000330 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000328:	4b5b      	ldr	r3, [pc, #364]	@ (8000498 <DecodeHeader+0x1ec>)
 800032a:	2202      	movs	r2, #2
 800032c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800032e:	e0a8      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	3b01      	subs	r3, #1
 8000336:	b2da      	uxtb	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800033c:	4b56      	ldr	r3, [pc, #344]	@ (8000498 <DecodeHeader+0x1ec>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
                break;
 8000342:	e09e      	b.n	8000482 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	b2d1      	uxtb	r1, r2
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	7111      	strb	r1, [r2, #4]
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	79db      	ldrb	r3, [r3, #7]
 8000358:	2b45      	cmp	r3, #69	@ 0x45
 800035a:	d103      	bne.n	8000364 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 800035c:	4b4e      	ldr	r3, [pc, #312]	@ (8000498 <DecodeHeader+0x1ec>)
 800035e:	2203      	movs	r2, #3
 8000360:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 8000362:	e08e      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000370:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <DecodeHeader+0x1ec>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
                break;
 8000376:	e084      	b.n	8000482 <DecodeHeader+0x1d6>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	b2d1      	uxtb	r1, r2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	7111      	strb	r1, [r2, #4]
 8000384:	461a      	mov	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	79db      	ldrb	r3, [r3, #7]
 800038c:	2b52      	cmp	r3, #82	@ 0x52
 800038e:	d103      	bne.n	8000398 <DecodeHeader+0xec>
					estadoProtocolo=NBYTES;
 8000390:	4b41      	ldr	r3, [pc, #260]	@ (8000498 <DecodeHeader+0x1ec>)
 8000392:	2204      	movs	r2, #4
 8000394:	701a      	strb	r2, [r3, #0]
				else{
					datosCom->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 8000396:	e074      	b.n	8000482 <DecodeHeader+0x1d6>
					datosCom->indexReadRx--;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	3b01      	subs	r3, #1
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80003a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000498 <DecodeHeader+0x1ec>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
            break;
 80003aa:	e06a      	b.n	8000482 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791a      	ldrb	r2, [r3, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	b2d1      	uxtb	r1, r2
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	7111      	strb	r1, [r2, #4]
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	79da      	ldrb	r2, [r3, #7]
 80003c8:	4b34      	ldr	r3, [pc, #208]	@ (800049c <DecodeHeader+0x1f0>)
 80003ca:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80003cc:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ce:	2205      	movs	r2, #5
 80003d0:	701a      	strb	r2, [r3, #0]
                break;
 80003d2:	e056      	b.n	8000482 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	791b      	ldrb	r3, [r3, #4]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	b2d1      	uxtb	r1, r2
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7111      	strb	r1, [r2, #4]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	79db      	ldrb	r3, [r3, #7]
 80003e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80003ea:	d10a      	bne.n	8000402 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 80003ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000498 <DecodeHeader+0x1ec>)
 80003ee:	2206      	movs	r2, #6
 80003f0:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 80003f2:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <DecodeHeader+0x1f0>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000400:	e03f      	b.n	8000482 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	3b01      	subs	r3, #1
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800040e:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <DecodeHeader+0x1ec>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
                break;
 8000414:	e035      	b.n	8000482 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <DecodeHeader+0x1f0>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d90f      	bls.n	800043e <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	b2d1      	uxtb	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7111      	strb	r1, [r2, #4]
 800042a:	461a      	mov	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	79da      	ldrb	r2, [r3, #7]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	4053      	eors	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <DecodeHeader+0x1f0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	3b01      	subs	r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <DecodeHeader+0x1f0>)
 8000448:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <DecodeHeader+0x1f0>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d116      	bne.n	8000480 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <DecodeHeader+0x1ec>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	440b      	add	r3, r1
 8000466:	79db      	ldrb	r3, [r3, #7]
 8000468:	429a      	cmp	r2, r3
 800046a:	d109      	bne.n	8000480 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f817 	bl	80004a0 <decodeData>
                    }
                }

                break;
 8000472:	e005      	b.n	8000480 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 8000474:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <DecodeHeader+0x1ec>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
                break;
 800047a:	e002      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 800047c:	bf00      	nop
 800047e:	e000      	b.n	8000482 <DecodeHeader+0x1d6>
                break;
 8000480:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	7bfa      	ldrb	r2, [r7, #15]
 8000488:	429a      	cmp	r2, r3
 800048a:	f47f af17 	bne.w	80002bc <DecodeHeader+0x10>
        }
    }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	200004b8 	.word	0x200004b8
 800049c:	200001f0 	.word	0x200001f0

080004a0 <decodeData>:



void decodeData(_sDato *datosCom){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	77bb      	strb	r3, [r7, #30]
 80004ac:	2300      	movs	r3, #0
 80004ae:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	785b      	ldrb	r3, [r3, #1]
 80004b4:	3302      	adds	r3, #2
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	2bf2      	cmp	r3, #242	@ 0xf2
 80004be:	d01c      	beq.n	80004fa <decodeData+0x5a>
 80004c0:	2bf2      	cmp	r3, #242	@ 0xf2
 80004c2:	dc23      	bgt.n	800050c <decodeData+0x6c>
 80004c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80004c6:	d002      	beq.n	80004ce <decodeData+0x2e>
 80004c8:	2bf1      	cmp	r3, #241	@ 0xf1
 80004ca:	d00b      	beq.n	80004e4 <decodeData+0x44>
 80004cc:	e01e      	b.n	800050c <decodeData+0x6c>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80004ce:	7fbb      	ldrb	r3, [r7, #30]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	77ba      	strb	r2, [r7, #30]
 80004d4:	3320      	adds	r3, #32
 80004d6:	443b      	add	r3, r7
 80004d8:	22f0      	movs	r2, #240	@ 0xf0
 80004da:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80004de:	2302      	movs	r3, #2
 80004e0:	77fb      	strb	r3, [r7, #31]

    break;
 80004e2:	e01e      	b.n	8000522 <decodeData+0x82>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 80004e4:	7fbb      	ldrb	r3, [r7, #30]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	77ba      	strb	r2, [r7, #30]
 80004ea:	3320      	adds	r3, #32
 80004ec:	443b      	add	r3, r7
 80004ee:	22f1      	movs	r2, #241	@ 0xf1
 80004f0:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 80004f4:	2302      	movs	r3, #2
 80004f6:	77fb      	strb	r3, [r7, #31]

    break;
 80004f8:	e013      	b.n	8000522 <decodeData+0x82>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 80004fa:	7fbb      	ldrb	r3, [r7, #30]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	77ba      	strb	r2, [r7, #30]
 8000500:	3320      	adds	r3, #32
 8000502:	443b      	add	r3, r7
 8000504:	22f2      	movs	r2, #242	@ 0xf2
 8000506:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 800050a:	e00a      	b.n	8000522 <decodeData+0x82>

    default:

        bufAux[indiceAux++]=0xFF;
 800050c:	7fbb      	ldrb	r3, [r7, #30]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	77ba      	strb	r2, [r7, #30]
 8000512:	3320      	adds	r3, #32
 8000514:	443b      	add	r3, r7
 8000516:	22ff      	movs	r2, #255	@ 0xff
 8000518:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 800051c:	2302      	movs	r3, #2
 800051e:	77fb      	strb	r3, [r7, #31]

    break;
 8000520:	bf00      	nop
    }

    SendInfo(bufAux,bytes);
 8000522:	7ffa      	ldrb	r2, [r7, #31]
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	4611      	mov	r1, r2
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff fe0e 	bl	800014c <SendInfo>
}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000544:	2300      	movs	r3, #0
 8000546:	81fb      	strh	r3, [r7, #14]
 8000548:	e014      	b.n	8000574 <datafromUSB+0x3c>
	datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 800054a:	89fb      	ldrh	r3, [r7, #14]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <datafromUSB+0x50>)
 8000552:	78d2      	ldrb	r2, [r2, #3]
 8000554:	b2d2      	uxtb	r2, r2
 8000556:	4611      	mov	r1, r2
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <datafromUSB+0x50>)
 800055c:	440b      	add	r3, r1
 800055e:	71da      	strb	r2, [r3, #7]
	datosComSerie.indexWriteRx++;
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <datafromUSB+0x50>)
 8000562:	78db      	ldrb	r3, [r3, #3]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	3301      	adds	r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <datafromUSB+0x50>)
 800056c:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 800056e:	89fb      	ldrh	r3, [r7, #14]
 8000570:	3301      	adds	r3, #1
 8000572:	81fb      	strh	r3, [r7, #14]
 8000574:	89fa      	ldrh	r2, [r7, #14]
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	429a      	cmp	r2, r3
 800057a:	d3e6      	bcc.n	800054a <datafromUSB+0x12>
  }

}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	200002b0 	.word	0x200002b0

0800058c <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000594:	2300      	movs	r3, #0
 8000596:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000598:	2300      	movs	r3, #0
 800059a:	77fb      	strb	r3, [r7, #31]
 800059c:	e00c      	b.n	80005b8 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 800059e:	7ffa      	ldrb	r2, [r7, #31]
 80005a0:	7ffb      	ldrb	r3, [r7, #31]
 80005a2:	490b      	ldr	r1, [pc, #44]	@ (80005d0 <HAL_ADC_ConvCpltCallback+0x44>)
 80005a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005a8:	f107 000c 	add.w	r0, r7, #12
 80005ac:	4909      	ldr	r1, [pc, #36]	@ (80005d4 <HAL_ADC_ConvCpltCallback+0x48>)
 80005ae:	f008 ff85 	bl	80094bc <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 80005b2:	7ffb      	ldrb	r3, [r7, #31]
 80005b4:	3301      	adds	r3, #1
 80005b6:	77fb      	strb	r3, [r7, #31]
 80005b8:	7ffb      	ldrb	r3, [r7, #31]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	d9ef      	bls.n	800059e <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <HAL_ADC_ConvCpltCallback+0x4c>)
 80005c4:	f001 fd70 	bl	80020a8 <HAL_GPIO_TogglePin>
}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200004bc 	.word	0x200004bc
 80005d4:	08009e34 	.word	0x08009e34
 80005d8:	40011000 	.word	0x40011000

080005dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	IS10MS=TRUE;
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005e6:	7813      	ldrb	r3, [r2, #0]
 80005e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ec:	7013      	strb	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	200004cc 	.word	0x200004cc

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter=0;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
	uint8_t DMAcounter=0;
 8000606:	2300      	movs	r3, #0
 8000608:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fbc1 	bl	8000d90 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(&datafromUSB);
 800060e:	4825      	ldr	r0, [pc, #148]	@ (80006a4 <main+0xa8>)
 8000610:	f008 fb8e 	bl	8008d30 <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <main+0xac>)
 8000616:	2200      	movs	r2, #0
 8000618:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 800061a:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <main+0xac>)
 800061c:	2200      	movs	r2, #0
 800061e:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags=0;
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <main+0xb0>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f849 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f9b1 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 800062e:	f000 f991 	bl	8000954 <MX_DMA_Init>
  MX_ADC1_Init();
 8000632:	f000 f8a1 	bl	8000778 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000636:	f000 f941 	bl	80008bc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800063a:	f008 fa37 	bl	8008aac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800063e:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <main+0xb4>)
 8000640:	f003 ff90 	bl	8004564 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	comunicationsTask(&datosComSerie);
 8000644:	4818      	ldr	r0, [pc, #96]	@ (80006a8 <main+0xac>)
 8000646:	f000 f9ef 	bl	8000a28 <comunicationsTask>

	if(IS10MS){
 800064a:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <main+0xb0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f5      	beq.n	8000644 <main+0x48>
		if(counter>10){
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d901      	bls.n	8000662 <main+0x66>

			counter=0;
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
		}
		if(DMAcounter>100){
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2b64      	cmp	r3, #100	@ 0x64
 8000666:	d906      	bls.n	8000676 <main+0x7a>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 8000668:	2208      	movs	r2, #8
 800066a:	4912      	ldr	r1, [pc, #72]	@ (80006b4 <main+0xb8>)
 800066c:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <main+0xbc>)
 800066e:	f000 fcc9 	bl	8001004 <HAL_ADC_Start_DMA>
			DMAcounter=0;
 8000672:	2300      	movs	r3, #0
 8000674:	71bb      	strb	r3, [r7, #6]
		}
		IS10MS=!IS10MS;
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <main+0xb0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2d9      	uxtb	r1, r3
 800068a:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <main+0xb0>)
 800068c:	7813      	ldrb	r3, [r2, #0]
 800068e:	f361 1386 	bfi	r3, r1, #6, #1
 8000692:	7013      	strb	r3, [r2, #0]
		counter++;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	3301      	adds	r3, #1
 8000698:	71fb      	strb	r3, [r7, #7]
		DMAcounter++;
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	3301      	adds	r3, #1
 800069e:	71bb      	strb	r3, [r7, #6]
	comunicationsTask(&datosComSerie);
 80006a0:	e7d0      	b.n	8000644 <main+0x48>
 80006a2:	bf00      	nop
 80006a4:	08000539 	.word	0x08000539
 80006a8:	200002b0 	.word	0x200002b0
 80006ac:	200004cc 	.word	0x200004cc
 80006b0:	20000268 	.word	0x20000268
 80006b4:	200004bc 	.word	0x200004bc
 80006b8:	200001f4 	.word	0x200001f4

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c6:	2228      	movs	r2, #40	@ 0x28
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f008 ff18 	bl	8009500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000708:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fa42 	bl	8003b9c <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800071e:	f000 f9b5 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000732:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fcae 	bl	80040a0 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800074a:	f000 f99f 	bl	8000a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800074e:	2312      	movs	r3, #18
 8000750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000756:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fdfa 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800076a:	f000 f98f 	bl	8000a8c <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000788:	4b4a      	ldr	r3, [pc, #296]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 800078a:	4a4b      	ldr	r2, [pc, #300]	@ (80008b8 <MX_ADC1_Init+0x140>)
 800078c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800078e:	4b49      	ldr	r3, [pc, #292]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 8000790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000794:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000796:	4b47      	ldr	r3, [pc, #284]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 8000798:	2200      	movs	r2, #0
 800079a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b45      	ldr	r3, [pc, #276]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a2:	4b44      	ldr	r3, [pc, #272]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 80007a4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b42      	ldr	r3, [pc, #264]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80007b0:	4b40      	ldr	r3, [pc, #256]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b6:	483f      	ldr	r0, [pc, #252]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 80007b8:	f000 fb4c 	bl	8000e54 <HAL_ADC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007c2:	f000 f963 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007ce:	2307      	movs	r3, #7
 80007d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4837      	ldr	r0, [pc, #220]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 80007d8:	f000 fdcc 	bl	8001374 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 f953 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4830      	ldr	r0, [pc, #192]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 80007f4:	f000 fdbe 	bl	8001374 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007fe:	f000 f945 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000802:	2302      	movs	r3, #2
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000806:	2303      	movs	r3, #3
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4829      	ldr	r0, [pc, #164]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 8000810:	f000 fdb0 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800081a:	f000 f937 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800081e:	2303      	movs	r3, #3
 8000820:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000822:	2304      	movs	r3, #4
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4822      	ldr	r0, [pc, #136]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 800082c:	f000 fda2 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000836:	f000 f929 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800083a:	2304      	movs	r3, #4
 800083c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800083e:	2305      	movs	r3, #5
 8000840:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 8000848:	f000 fd94 	bl	8001374 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000852:	f000 f91b 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000856:	2305      	movs	r3, #5
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800085a:	2306      	movs	r3, #6
 800085c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4814      	ldr	r0, [pc, #80]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 8000864:	f000 fd86 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800086e:	f000 f90d 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000872:	2306      	movs	r3, #6
 8000874:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000876:	2307      	movs	r3, #7
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 8000880:	f000 fd78 	bl	8001374 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800088a:	f000 f8ff 	bl	8000a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800088e:	2307      	movs	r3, #7
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000892:	2308      	movs	r3, #8
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <MX_ADC1_Init+0x13c>)
 800089c:	f000 fd6a 	bl	8001374 <HAL_ADC_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80008a6:	f000 f8f1 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001f4 	.word	0x200001f4
 80008b8:	40012400 	.word	0x40012400

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_TIM2_Init+0x94>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_TIM2_Init+0x94>)
 80008e2:	2247      	movs	r2, #71	@ 0x47
 80008e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_TIM2_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_TIM2_Init+0x94>)
 80008ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_TIM2_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_TIM2_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	@ (8000950 <MX_TIM2_Init+0x94>)
 8000902:	f003 fddf 	bl	80044c4 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800090c:	f000 f8be 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_TIM2_Init+0x94>)
 800091e:	f003 ff63 	bl	80047e8 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 f8b0 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_TIM2_Init+0x94>)
 800093a:	f004 f945 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f8a2 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000268 	.word	0x20000268

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_DMA_Init+0x38>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <MX_DMA_Init+0x38>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA_Init+0x38>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	200b      	movs	r0, #11
 8000978:	f000 ffd5 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800097c:	200b      	movs	r0, #11
 800097e:	f000 ffee 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <MX_GPIO_Init+0x94>)
 80009f4:	f001 fb40 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <MX_GPIO_Init+0x94>)
 8000a12:	f001 f9ad 	bl	8001d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40011000 	.word	0x40011000

08000a28 <comunicationsTask>:

/* USER CODE BEGIN 4 */

void comunicationsTask(_sDato *datosCom){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791a      	ldrb	r2, [r3, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	78db      	ldrb	r3, [r3, #3]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d007      	beq.n	8000a4e <comunicationsTask+0x26>
		DecodeHeader(datosCom);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fc34 	bl	80002ac <DecodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <comunicationsTask+0x60>)
 8000a46:	78db      	ldrb	r3, [r3, #3]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <comunicationsTask+0x60>)
 8000a4c:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	799a      	ldrb	r2, [r3, #6]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	795b      	ldrb	r3, [r3, #5]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d011      	beq.n	8000a7e <comunicationsTask+0x56>
		CDC_Transmit_FS(&datosComSerie.bufferTx[datosComSerie.indexReadTx], datosComSerie.bytesTosend);
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <comunicationsTask+0x60>)
 8000a5c:	799b      	ldrb	r3, [r3, #6]
 8000a5e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <comunicationsTask+0x60>)
 8000a64:	4413      	add	r3, r2
 8000a66:	3307      	adds	r3, #7
 8000a68:	4a07      	ldr	r2, [pc, #28]	@ (8000a88 <comunicationsTask+0x60>)
 8000a6a:	f892 2207 	ldrb.w	r2, [r2, #519]	@ 0x207
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 f937 	bl	8008ce4 <CDC_Transmit_FS>
		datosComSerie.indexReadTx=datosComSerie.indexWriteTx;
 8000a76:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <comunicationsTask+0x60>)
 8000a78:	795a      	ldrb	r2, [r3, #5]
 8000a7a:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <comunicationsTask+0x60>)
 8000a7c:	719a      	strb	r2, [r3, #6]
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200002b0 	.word	0x200002b0

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <HAL_MspInit+0x5c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6193      	str	r3, [r2, #24]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_MspInit+0x5c>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <HAL_MspInit+0x5c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_MspInit+0x5c>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <HAL_MspInit+0x60>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_MspInit+0x60>)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000

08000afc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc8 <HAL_ADC_MspInit+0xcc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d151      	bne.n	8000bc0 <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <HAL_ADC_MspInit+0xd0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2a      	ldr	r2, [pc, #168]	@ (8000bcc <HAL_ADC_MspInit+0xd0>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <HAL_ADC_MspInit+0xd0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <HAL_ADC_MspInit+0xd0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a24      	ldr	r2, [pc, #144]	@ (8000bcc <HAL_ADC_MspInit+0xd0>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <HAL_ADC_MspInit+0xd0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b4c:	23ff      	movs	r3, #255	@ 0xff
 8000b4e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b50:	2303      	movs	r3, #3
 8000b52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481d      	ldr	r0, [pc, #116]	@ (8000bd0 <HAL_ADC_MspInit+0xd4>)
 8000b5c:	f001 f908 	bl	8001d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b62:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b94:	480f      	ldr	r0, [pc, #60]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000b96:	f000 fefd 	bl	8001994 <HAL_DMA_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ba0:	f7ff ff74 	bl	8000a8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000ba8:	621a      	str	r2, [r3, #32]
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <HAL_ADC_MspInit+0xd8>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2012      	movs	r0, #18
 8000bb6:	f000 feb6 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bba:	2012      	movs	r0, #18
 8000bbc:	f000 fecf 	bl	800195e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40012400 	.word	0x40012400
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	20000224 	.word	0x20000224
 8000bd8:	40020008 	.word	0x40020008

08000bdc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bec:	d113      	bne.n	8000c16 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bee:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_TIM_Base_MspInit+0x44>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <HAL_TIM_Base_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_TIM_Base_MspInit+0x44>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	201c      	movs	r0, #28
 8000c0c:	f000 fe8b 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c10:	201c      	movs	r0, #28
 8000c12:	f000 fea4 	bl	800195e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f8d2 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <DMA1_Channel1_IRQHandler+0x10>)
 8000c82:	f000 ff41 	bl	8001b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000224 	.word	0x20000224

08000c90 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <ADC1_2_IRQHandler+0x10>)
 8000c96:	f000 fa93 	bl	80011c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001f4 	.word	0x200001f4

08000ca4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000caa:	f001 fb32 	bl	8002312 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200011a4 	.word	0x200011a4

08000cb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <TIM2_IRQHandler+0x10>)
 8000cbe:	f003 fca3 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000268 	.word	0x20000268

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f008 fc08 	bl	8009510 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20005000 	.word	0x20005000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	200004d0 	.word	0x200004d0
 8000d34:	200017e8 	.word	0x200017e8

08000d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d44:	f7ff fff8 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d4a:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a09      	ldr	r2, [pc, #36]	@ (8000d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d60:	4c09      	ldr	r4, [pc, #36]	@ (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f008 fbd5 	bl	800951c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff fc43 	bl	80005fc <main>
  bx lr
 8000d76:	4770      	bx	lr
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000d80:	08009eec 	.word	0x08009eec
  ldr r2, =_sbss
 8000d84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000d88:	200017e4 	.word	0x200017e4

08000d8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <CAN1_RX1_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <HAL_Init+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <HAL_Init+0x28>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 fdb5 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fe74 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fdcd 	bl	800197a <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 fd95 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a03      	ldr	r2, [pc, #12]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200004d4 	.word	0x200004d4

08000e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	@ (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	200004d4 	.word	0x200004d4

08000e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0be      	b.n	8000ff4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fe32 	bl	8000afc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fbbd 	bl	8001618 <ADC_ConversionStop_Disable>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8099 	bne.w	8000fe2 <HAL_ADC_Init+0x18e>
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8095 	bne.w	8000fe2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ec0:	f023 0302 	bic.w	r3, r3, #2
 8000ec4:	f043 0202 	orr.w	r2, r3, #2
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7b1b      	ldrb	r3, [r3, #12]
 8000eda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000edc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000eec:	d003      	beq.n	8000ef6 <HAL_ADC_Init+0xa2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <HAL_ADC_Init+0xa8>
 8000ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000efa:	e000      	b.n	8000efe <HAL_ADC_Init+0xaa>
 8000efc:	2300      	movs	r3, #0
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7d1b      	ldrb	r3, [r3, #20]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d119      	bne.n	8000f40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d109      	bne.n	8000f28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	035a      	lsls	r2, r3, #13
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e00b      	b.n	8000f40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <HAL_ADC_Init+0x1a8>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f70:	d003      	beq.n	8000f7a <HAL_ADC_Init+0x126>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	051b      	lsls	r3, r3, #20
 8000f82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_ADC_Init+0x1ac>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fbe:	e018      	b.n	8000ff2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc4:	f023 0312 	bic.w	r3, r3, #18
 8000fc8:	f043 0210 	orr.w	r2, r3, #16
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe0:	e007      	b.n	8000ff2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe6:	f043 0210 	orr.w	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	ffe1f7fd 	.word	0xffe1f7fd
 8001000:	ff1f0efe 	.word	0xff1f0efe

08001004 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a64      	ldr	r2, [pc, #400]	@ (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_ADC_Start_DMA+0x24>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a63      	ldr	r2, [pc, #396]	@ (80011b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d106      	bne.n	8001036 <HAL_ADC_Start_DMA+0x32>
 8001028:	4b60      	ldr	r3, [pc, #384]	@ (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 80b3 	bne.w	800119c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_ADC_Start_DMA+0x40>
 8001040:	2302      	movs	r3, #2
 8001042:	e0ae      	b.n	80011a2 <HAL_ADC_Start_DMA+0x19e>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 fa89 	bl	8001564 <ADC_Enable>
 8001052:	4603      	mov	r3, r0
 8001054:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f040 809a 	bne.w	8001192 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a4e      	ldr	r2, [pc, #312]	@ (80011b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d105      	bne.n	8001088 <HAL_ADC_Start_DMA+0x84>
 800107c:	4b4b      	ldr	r3, [pc, #300]	@ (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d115      	bne.n	80010b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d026      	beq.n	80010f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b2:	e01d      	b.n	80010f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a39      	ldr	r2, [pc, #228]	@ (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_Start_DMA+0xd0>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a38      	ldr	r2, [pc, #224]	@ (80011b0 <HAL_ADC_Start_DMA+0x1ac>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10d      	bne.n	80010f0 <HAL_ADC_Start_DMA+0xec>
 80010d4:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001100:	f023 0206 	bic.w	r2, r3, #6
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001108:	e002      	b.n	8001110 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <HAL_ADC_Start_DMA+0x1b0>)
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_ADC_Start_DMA+0x1b4>)
 8001126:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <HAL_ADC_Start_DMA+0x1b8>)
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0202 	mvn.w	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001148:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a18      	ldr	r0, [r3, #32]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	334c      	adds	r3, #76	@ 0x4c
 8001154:	4619      	mov	r1, r3
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f000 fc75 	bl	8001a48 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001168:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800116c:	d108      	bne.n	8001180 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800117c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800117e:	e00f      	b.n	80011a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800118e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001190:	e006      	b.n	80011a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800119a:	e001      	b.n	80011a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012400 	.word	0x40012400
 80011b0:	40012800 	.word	0x40012800
 80011b4:	0800169b 	.word	0x0800169b
 80011b8:	08001717 	.word	0x08001717
 80011bc:	08001733 	.word	0x08001733

080011c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d03e      	beq.n	8001260 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d039      	beq.n	8001260 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800120e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001212:	d11d      	bne.n	8001250 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001218:	2b00      	cmp	r3, #0
 800121a:	d119      	bne.n	8001250 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0220 	bic.w	r2, r2, #32
 800122a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff f99b 	bl	800058c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f06f 0212 	mvn.w	r2, #18
 800125e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001266:	2b00      	cmp	r3, #0
 8001268:	d04d      	beq.n	8001306 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d048      	beq.n	8001306 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001284:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001296:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800129a:	d012      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d125      	bne.n	80012f6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012b4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012b8:	d11d      	bne.n	80012f6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d119      	bne.n	80012f6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d105      	bne.n	80012f6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fa35 	bl	8001766 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f06f 020c 	mvn.w	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800130c:	2b00      	cmp	r3, #0
 800130e:	d012      	beq.n	8001336 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00d      	beq.n	8001336 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f812 	bl	8001350 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f06f 0201 	mvn.w	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e0dc      	b.n	800154e <HAL_ADC_ConfigChannel+0x1da>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b06      	cmp	r3, #6
 80013a2:	d81c      	bhi.n	80013de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b05      	subs	r3, #5
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	4019      	ands	r1, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b05      	subs	r3, #5
 80013d0:	fa00 f203 	lsl.w	r2, r0, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	635a      	str	r2, [r3, #52]	@ 0x34
 80013dc:	e03c      	b.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d81c      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b23      	subs	r3, #35	@ 0x23
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	4019      	ands	r1, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b23      	subs	r3, #35	@ 0x23
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	631a      	str	r2, [r3, #48]	@ 0x30
 800141e:	e01b      	b.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b41      	subs	r3, #65	@ 0x41
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	4019      	ands	r1, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	3b41      	subs	r3, #65	@ 0x41
 800144c:	fa00 f203 	lsl.w	r2, r0, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b09      	cmp	r3, #9
 800145e:	d91c      	bls.n	800149a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68d9      	ldr	r1, [r3, #12]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	3b1e      	subs	r3, #30
 8001472:	2207      	movs	r2, #7
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6898      	ldr	r0, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	3b1e      	subs	r3, #30
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	e019      	b.n	80014ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6919      	ldr	r1, [r3, #16]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	2207      	movs	r2, #7
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4019      	ands	r1, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	6898      	ldr	r0, [r3, #8]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d003      	beq.n	80014de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014da:	2b11      	cmp	r3, #17
 80014dc:	d132      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <HAL_ADC_ConfigChannel+0x1e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d125      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d126      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001504:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d11a      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_ADC_ConfigChannel+0x1e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <HAL_ADC_ConfigChannel+0x1ec>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9a      	lsrs	r2, r3, #18
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3b01      	subs	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x1b2>
 8001532:	e007      	b.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	f043 0220 	orr.w	r2, r3, #32
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40012400 	.word	0x40012400
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83

08001564 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b01      	cmp	r3, #1
 8001580:	d040      	beq.n	8001604 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0201 	orr.w	r2, r2, #1
 8001590:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <ADC_Enable+0xac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	@ (8001614 <ADC_Enable+0xb0>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a0:	e002      	b.n	80015a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f9      	bne.n	80015a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ae:	f7ff fc47 	bl	8000e40 <HAL_GetTick>
 80015b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015b4:	e01f      	b.n	80015f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015b6:	f7ff fc43 	bl	8000e40 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d918      	bls.n	80015f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d011      	beq.n	80015f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e007      	b.n	8001606 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d1d8      	bne.n	80015b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d12e      	bne.n	8001690 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001642:	f7ff fbfd 	bl	8000e40 <HAL_GetTick>
 8001646:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001648:	e01b      	b.n	8001682 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800164a:	f7ff fbf9 	bl	8000e40 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d914      	bls.n	8001682 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10d      	bne.n	8001682 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166a:	f043 0210 	orr.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e007      	b.n	8001692 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d0dc      	beq.n	800164a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d127      	bne.n	8001704 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016ce:	d115      	bne.n	80016fc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d111      	bne.n	80016fc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7fe ff45 	bl	800058c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001702:	e004      	b.n	800170e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7ff fe0a 	bl	800133e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	f043 0204 	orr.w	r2, r3, #4
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f7ff fe02 	bl	8001362 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4906      	ldr	r1, [pc, #24]	@ (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff90 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff2d 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff42 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff90 	bl	8001868 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5f 	bl	8001814 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff35 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e043      	b.n	8001a32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <HAL_DMA_Init+0xa8>)
 80019b2:	4413      	add	r3, r2
 80019b4:	4a22      	ldr	r2, [pc, #136]	@ (8001a40 <HAL_DMA_Init+0xac>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <HAL_DMA_Init+0xb0>)
 80019c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	bffdfff8 	.word	0xbffdfff8
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_DMA_Start_IT+0x20>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e04b      	b.n	8001b00 <HAL_DMA_Start_IT+0xb8>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d13a      	bne.n	8001af2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f937 	bl	8001d14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 020e 	orr.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e00f      	b.n	8001ae0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 020a 	orr.w	r2, r2, #10
 8001ade:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e005      	b.n	8001afe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
 8001afc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	2204      	movs	r2, #4
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d04f      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xc8>
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d04a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0204 	bic.w	r2, r2, #4
 8001b56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a66      	ldr	r2, [pc, #408]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d029      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0xae>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a65      	ldr	r2, [pc, #404]	@ (8001cfc <HAL_DMA_IRQHandler+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xaa>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a63      	ldr	r2, [pc, #396]	@ (8001d00 <HAL_DMA_IRQHandler+0x1f8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01a      	beq.n	8001bac <HAL_DMA_IRQHandler+0xa4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a62      	ldr	r2, [pc, #392]	@ (8001d04 <HAL_DMA_IRQHandler+0x1fc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d012      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x9e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a60      	ldr	r2, [pc, #384]	@ (8001d08 <HAL_DMA_IRQHandler+0x200>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00a      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x98>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8001d0c <HAL_DMA_IRQHandler+0x204>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d102      	bne.n	8001b9a <HAL_DMA_IRQHandler+0x92>
 8001b94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b98:	e00e      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b9e:	e00b      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001ba0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ba4:	e008      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001ba6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001baa:	e005      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb0:	e002      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001bb2:	2340      	movs	r3, #64	@ 0x40
 8001bb4:	e000      	b.n	8001bb8 <HAL_DMA_IRQHandler+0xb0>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	4a55      	ldr	r2, [pc, #340]	@ (8001d10 <HAL_DMA_IRQHandler+0x208>)
 8001bba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8094 	beq.w	8001cee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bce:	e08e      	b.n	8001cee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d056      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x186>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d051      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020a 	bic.w	r2, r2, #10
 8001c06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a38      	ldr	r2, [pc, #224]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d029      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x166>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a37      	ldr	r2, [pc, #220]	@ (8001cfc <HAL_DMA_IRQHandler+0x1f4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x162>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a35      	ldr	r2, [pc, #212]	@ (8001d00 <HAL_DMA_IRQHandler+0x1f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01a      	beq.n	8001c64 <HAL_DMA_IRQHandler+0x15c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a34      	ldr	r2, [pc, #208]	@ (8001d04 <HAL_DMA_IRQHandler+0x1fc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d012      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x156>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <HAL_DMA_IRQHandler+0x200>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00a      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x150>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a31      	ldr	r2, [pc, #196]	@ (8001d0c <HAL_DMA_IRQHandler+0x204>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <HAL_DMA_IRQHandler+0x14a>
 8001c4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c50:	e00e      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c56:	e00b      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c5c:	e008      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c62:	e005      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c68:	e002      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_IRQHandler+0x168>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	4a27      	ldr	r2, [pc, #156]	@ (8001d10 <HAL_DMA_IRQHandler+0x208>)
 8001c72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d034      	beq.n	8001cee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c8c:	e02f      	b.n	8001cee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	2208      	movs	r2, #8
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d028      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x1e8>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d023      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 020e 	bic.w	r2, r2, #14
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
    }
  }
  return;
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
}
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020008 	.word	0x40020008
 8001cfc:	4002001c 	.word	0x4002001c
 8001d00:	40020030 	.word	0x40020030
 8001d04:	40020044 	.word	0x40020044
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	4002006c 	.word	0x4002006c
 8001d10:	40020000 	.word	0x40020000

08001d14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d108      	bne.n	8001d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d52:	e007      	b.n	8001d64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b08b      	sub	sp, #44	@ 0x2c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d82:	e169      	b.n	8002058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d84:	2201      	movs	r2, #1
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8158 	bne.w	8002052 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a9a      	ldr	r2, [pc, #616]	@ (8002010 <HAL_GPIO_Init+0x2a0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d05e      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dac:	4a98      	ldr	r2, [pc, #608]	@ (8002010 <HAL_GPIO_Init+0x2a0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d875      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001db2:	4a98      	ldr	r2, [pc, #608]	@ (8002014 <HAL_GPIO_Init+0x2a4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d058      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001db8:	4a96      	ldr	r2, [pc, #600]	@ (8002014 <HAL_GPIO_Init+0x2a4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d86f      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dbe:	4a96      	ldr	r2, [pc, #600]	@ (8002018 <HAL_GPIO_Init+0x2a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d052      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dc4:	4a94      	ldr	r2, [pc, #592]	@ (8002018 <HAL_GPIO_Init+0x2a8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d869      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dca:	4a94      	ldr	r2, [pc, #592]	@ (800201c <HAL_GPIO_Init+0x2ac>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d04c      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001dd0:	4a92      	ldr	r2, [pc, #584]	@ (800201c <HAL_GPIO_Init+0x2ac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d863      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dd6:	4a92      	ldr	r2, [pc, #584]	@ (8002020 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d046      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
 8001ddc:	4a90      	ldr	r2, [pc, #576]	@ (8002020 <HAL_GPIO_Init+0x2b0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d85d      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001de2:	2b12      	cmp	r3, #18
 8001de4:	d82a      	bhi.n	8001e3c <HAL_GPIO_Init+0xcc>
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d859      	bhi.n	8001e9e <HAL_GPIO_Init+0x12e>
 8001dea:	a201      	add	r2, pc, #4	@ (adr r2, 8001df0 <HAL_GPIO_Init+0x80>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e6b 	.word	0x08001e6b
 8001df4:	08001e45 	.word	0x08001e45
 8001df8:	08001e57 	.word	0x08001e57
 8001dfc:	08001e99 	.word	0x08001e99
 8001e00:	08001e9f 	.word	0x08001e9f
 8001e04:	08001e9f 	.word	0x08001e9f
 8001e08:	08001e9f 	.word	0x08001e9f
 8001e0c:	08001e9f 	.word	0x08001e9f
 8001e10:	08001e9f 	.word	0x08001e9f
 8001e14:	08001e9f 	.word	0x08001e9f
 8001e18:	08001e9f 	.word	0x08001e9f
 8001e1c:	08001e9f 	.word	0x08001e9f
 8001e20:	08001e9f 	.word	0x08001e9f
 8001e24:	08001e9f 	.word	0x08001e9f
 8001e28:	08001e9f 	.word	0x08001e9f
 8001e2c:	08001e9f 	.word	0x08001e9f
 8001e30:	08001e9f 	.word	0x08001e9f
 8001e34:	08001e4d 	.word	0x08001e4d
 8001e38:	08001e61 	.word	0x08001e61
 8001e3c:	4a79      	ldr	r2, [pc, #484]	@ (8002024 <HAL_GPIO_Init+0x2b4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e42:	e02c      	b.n	8001e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e029      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	3304      	adds	r3, #4
 8001e52:	623b      	str	r3, [r7, #32]
          break;
 8001e54:	e024      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	3308      	adds	r3, #8
 8001e5c:	623b      	str	r3, [r7, #32]
          break;
 8001e5e:	e01f      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	330c      	adds	r3, #12
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	e01a      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e72:	2304      	movs	r3, #4
 8001e74:	623b      	str	r3, [r7, #32]
          break;
 8001e76:	e013      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e80:	2308      	movs	r3, #8
 8001e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	611a      	str	r2, [r3, #16]
          break;
 8001e8a:	e009      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	615a      	str	r2, [r3, #20]
          break;
 8001e96:	e003      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x130>
          break;
 8001e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2bff      	cmp	r3, #255	@ 0xff
 8001ea4:	d801      	bhi.n	8001eaa <HAL_GPIO_Init+0x13a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	e001      	b.n	8001eae <HAL_GPIO_Init+0x13e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2bff      	cmp	r3, #255	@ 0xff
 8001eb4:	d802      	bhi.n	8001ebc <HAL_GPIO_Init+0x14c>
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	e002      	b.n	8001ec2 <HAL_GPIO_Init+0x152>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	3b08      	subs	r3, #8
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	210f      	movs	r1, #15
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	6a39      	ldr	r1, [r7, #32]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80b1 	beq.w	8002052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <HAL_GPIO_Init+0x2b8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8002028 <HAL_GPIO_Init+0x2b8>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_GPIO_Init+0x2b8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f08:	4a48      	ldr	r2, [pc, #288]	@ (800202c <HAL_GPIO_Init+0x2bc>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	@ (8002030 <HAL_GPIO_Init+0x2c0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_GPIO_Init+0x1ec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3f      	ldr	r2, [pc, #252]	@ (8002034 <HAL_GPIO_Init+0x2c4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1e8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002038 <HAL_GPIO_Init+0x2c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1e4>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	@ (800203c <HAL_GPIO_Init+0x2cc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1e0>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e004      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_GPIO_Init+0x1ee>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f6e:	492f      	ldr	r1, [pc, #188]	@ (800202c <HAL_GPIO_Init+0x2bc>)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f88:	4b2d      	ldr	r3, [pc, #180]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	492c      	ldr	r1, [pc, #176]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f96:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	4928      	ldr	r1, [pc, #160]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4922      	ldr	r1, [pc, #136]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fbe:	4b20      	ldr	r3, [pc, #128]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	491e      	ldr	r1, [pc, #120]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4918      	ldr	r1, [pc, #96]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4914      	ldr	r1, [pc, #80]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d021      	beq.n	8002044 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	490e      	ldr	r1, [pc, #56]	@ (8002040 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e021      	b.n	8002052 <HAL_GPIO_Init+0x2e2>
 800200e:	bf00      	nop
 8002010:	10320000 	.word	0x10320000
 8002014:	10310000 	.word	0x10310000
 8002018:	10220000 	.word	0x10220000
 800201c:	10210000 	.word	0x10210000
 8002020:	10120000 	.word	0x10120000
 8002024:	10110000 	.word	0x10110000
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	40010800 	.word	0x40010800
 8002034:	40010c00 	.word	0x40010c00
 8002038:	40011000 	.word	0x40011000
 800203c:	40011400 	.word	0x40011400
 8002040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_GPIO_Init+0x304>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	43db      	mvns	r3, r3
 800204c:	4909      	ldr	r1, [pc, #36]	@ (8002074 <HAL_GPIO_Init+0x304>)
 800204e:	4013      	ands	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	3301      	adds	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	f47f ae8e 	bne.w	8001d84 <HAL_GPIO_Init+0x14>
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	372c      	adds	r7, #44	@ 0x2c
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40010400 	.word	0x40010400

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43d9      	mvns	r1, r3
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	400b      	ands	r3, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	611a      	str	r2, [r3, #16]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0e8      	b.n	80022be <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f006 ff31 	bl	8008f68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fde8 	bl	8004cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002128:	f002 fdbe 	bl	8004ca8 <USB_CoreInit>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0bf      	b.n	80022be <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fdec 	bl	8004d22 <USB_SetCurrentMode>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b0      	b.n	80022be <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e03e      	b.n	80021e0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3311      	adds	r3, #17
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	3310      	adds	r3, #16
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	3313      	adds	r3, #19
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3320      	adds	r3, #32
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	3324      	adds	r3, #36	@ 0x24
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	3301      	adds	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3bb      	bcc.n	8002162 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e044      	b.n	800227a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	791b      	ldrb	r3, [r3, #4]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3b5      	bcc.n	80021f0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	f002 fd54 	bl	8004d3a <USB_DevInit>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e00c      	b.n	80022be <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 ffd3 	bl	8007262 <USB_DevDisconnect>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_PCD_Start+0x16>
 80022d8:	2302      	movs	r3, #2
 80022da:	e016      	b.n	800230a <HAL_PCD_Start+0x44>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 fcea 	bl	8004cc2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80022ee:	2101      	movs	r1, #1
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f007 f8ac 	bl	800944e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f004 ffa7 	bl	800724e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b088      	sub	sp, #32
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f004 ffa9 	bl	8007276 <USB_ReadInterrupts>
 8002324:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fb1a 	bl	800296a <PCD_EP_ISR_Handler>

    return;
 8002336:	e119      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d013      	beq.n	800236a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002354:	b292      	uxth	r2, r2
 8002356:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f006 fe7f 	bl	800905e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002360:	2100      	movs	r1, #0
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f905 	bl	8002572 <HAL_PCD_SetAddress>

    return;
 8002368:	e100      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002386:	b292      	uxth	r2, r2
 8002388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800238c:	e0ee      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023aa:	b292      	uxth	r2, r2
 80023ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80023b0:	e0dc      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d027      	beq.n	800240c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0204 	bic.w	r2, r2, #4
 80023ce:	b292      	uxth	r2, r2
 80023d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0208 	bic.w	r2, r2, #8
 80023e6:	b292      	uxth	r2, r2
 80023e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f006 fe6f 	bl	80090d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002404:	b292      	uxth	r2, r2
 8002406:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800240a:	e0af      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 8083 	beq.w	800251e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	77fb      	strb	r3, [r7, #31]
 800241c:	e010      	b.n	8002440 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	7ffb      	ldrb	r3, [r7, #31]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	7ffb      	ldrb	r3, [r7, #31]
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	b292      	uxth	r2, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	3320      	adds	r3, #32
 8002434:	443b      	add	r3, r7
 8002436:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	3301      	adds	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	2b07      	cmp	r3, #7
 8002444:	d9eb      	bls.n	800241e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	b292      	uxth	r2, r2
 800245a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	b292      	uxth	r2, r2
 8002472:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002476:	bf00      	nop
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002480:	b29b      	uxth	r3, r3
 8002482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f6      	beq.n	8002478 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249c:	b292      	uxth	r2, r2
 800249e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	77fb      	strb	r3, [r7, #31]
 80024a6:	e00f      	b.n	80024c8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4611      	mov	r1, r2
 80024b0:	7ffa      	ldrb	r2, [r7, #31]
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	440a      	add	r2, r1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	3320      	adds	r3, #32
 80024ba:	443b      	add	r3, r7
 80024bc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80024c0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	3301      	adds	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	2b07      	cmp	r3, #7
 80024cc:	d9ec      	bls.n	80024a8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0208 	orr.w	r2, r2, #8
 80024e0:	b292      	uxth	r2, r2
 80024e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f8:	b292      	uxth	r2, r2
 80024fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0204 	orr.w	r2, r2, #4
 8002510:	b292      	uxth	r2, r2
 8002512:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f006 fdc0 	bl	800909c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800251c:	e026      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00f      	beq.n	8002548 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f006 fd7e 	bl	8009042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002546:	e011      	b.n	800256c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00c      	beq.n	800256c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002564:	b292      	uxth	r2, r2
 8002566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800256a:	bf00      	nop
  }
}
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_SetAddress+0x1a>
 8002588:	2302      	movs	r3, #2
 800258a:	e012      	b.n	80025b2 <HAL_PCD_SetAddress+0x40>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 fe40 	bl	8007228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	4608      	mov	r0, r1
 80025c4:	4611      	mov	r1, r2
 80025c6:	461a      	mov	r2, r3
 80025c8:	4603      	mov	r3, r0
 80025ca:	70fb      	strb	r3, [r7, #3]
 80025cc:	460b      	mov	r3, r1
 80025ce:	803b      	strh	r3, [r7, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	da0e      	bge.n	80025fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f003 0207 	and.w	r2, r3, #7
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	3310      	adds	r3, #16
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	705a      	strb	r2, [r3, #1]
 80025fc:	e00e      	b.n	800261c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 0207 	and.w	r2, r3, #7
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	b2da      	uxtb	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002628:	883a      	ldrh	r2, [r7, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	78ba      	ldrb	r2, [r7, #2]
 8002632:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002634:	78bb      	ldrb	r3, [r7, #2]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d102      	bne.n	8002640 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_PCD_EP_Open+0x94>
 800264a:	2302      	movs	r3, #2
 800264c:	e00e      	b.n	800266c <HAL_PCD_EP_Open+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fb89 	bl	8004d74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800266a:	7afb      	ldrb	r3, [r7, #11]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	da0e      	bge.n	80026a6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 0207 	and.w	r2, r3, #7
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	3310      	adds	r3, #16
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	705a      	strb	r2, [r3, #1]
 80026a4:	e00e      	b.n	80026c4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 0207 	and.w	r2, r3, #7
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_Close+0x6a>
 80026da:	2302      	movs	r3, #2
 80026dc:	e00e      	b.n	80026fc <HAL_PCD_EP_Close+0x88>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 ff01 	bl	80054f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	460b      	mov	r3, r1
 8002712:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	f003 0207 	and.w	r2, r3, #7
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	b2da      	uxtb	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6979      	ldr	r1, [r7, #20]
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f8b8 	bl	80058cc <USB_EPStartXfer>

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	f003 0207 	and.w	r2, r3, #7
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002788:	681b      	ldr	r3, [r3, #0]
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	460b      	mov	r3, r1
 80027a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a4:	7afb      	ldrb	r3, [r7, #11]
 80027a6:	f003 0207 	and.w	r2, r3, #7
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	3310      	adds	r3, #16
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2201      	movs	r2, #1
 80027de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6979      	ldr	r1, [r7, #20]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 f86a 	bl	80058cc <USB_EPStartXfer>

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	7912      	ldrb	r2, [r2, #4]
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e04c      	b.n	80028ba <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da0e      	bge.n	8002846 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 0207 	and.w	r2, r3, #7
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	3310      	adds	r3, #16
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	705a      	strb	r2, [r3, #1]
 8002844:	e00c      	b.n	8002860 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_PCD_EP_SetStall+0x7e>
 800287c:	2302      	movs	r3, #2
 800287e:	e01c      	b.n	80028ba <HAL_PCD_EP_SetStall+0xb8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fbcd 	bl	800702e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	2b00      	cmp	r3, #0
 800289c:	d108      	bne.n	80028b0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f004 fcf2 	bl	8007294 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	7912      	ldrb	r2, [r2, #4]
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e040      	b.n	8002962 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da0e      	bge.n	8002906 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 0207 	and.w	r2, r3, #7
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	3310      	adds	r3, #16
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	705a      	strb	r2, [r3, #1]
 8002904:	e00e      	b.n	8002924 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 0207 	and.w	r2, r3, #7
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_PCD_EP_ClrStall+0x82>
 8002940:	2302      	movs	r3, #2
 8002942:	e00e      	b.n	8002962 <HAL_PCD_EP_ClrStall+0xa0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fbbb 	bl	80070ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b096      	sub	sp, #88	@ 0x58
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002972:	e3bb      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800297c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800298e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 8175 	bne.w	8002c82 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d14e      	bne.n	8002a42 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80029b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b4:	81fb      	strh	r3, [r7, #14]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3310      	adds	r3, #16
 80029cc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	3302      	adds	r3, #2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	441a      	add	r2, r3
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f006 faff 	bl	800900e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7b5b      	ldrb	r3, [r3, #13]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8368 	beq.w	80030ec <PCD_EP_ISR_Handler+0x782>
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 8363 	bne.w	80030ec <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7b5b      	ldrb	r3, [r3, #13]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	735a      	strb	r2, [r3, #13]
 8002a40:	e354      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a48:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	3306      	adds	r3, #6
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f004 fc49 	bl	8007336 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	823b      	strh	r3, [r7, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	8a3a      	ldrh	r2, [r7, #16]
 8002aba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f006 fa76 	bl	8008fb4 <HAL_PCD_SetupStageCallback>
 8002ac8:	e310      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002aca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f280 830c 	bge.w	80030ec <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	83fb      	strh	r3, [r7, #30]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	8bfa      	ldrh	r2, [r7, #30]
 8002aea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002aee:	b292      	uxth	r2, r2
 8002af0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	3306      	adds	r3, #6
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <PCD_EP_ISR_Handler+0x1f0>
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d015      	beq.n	8002b5a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	6959      	ldr	r1, [r3, #20]
 8002b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f004 fbf9 	bl	8007336 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	441a      	add	r2, r3
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b52:	2100      	movs	r1, #0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f006 fa3f 	bl	8008fd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 82bd 	bne.w	80030ec <PCD_EP_ISR_Handler+0x782>
 8002b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b7e:	f000 82b5 	beq.w	80030ec <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bb8:	d91d      	bls.n	8002bf6 <PCD_EP_ISR_Handler+0x28c>
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <PCD_EP_ISR_Handler+0x26a>
 8002bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	e026      	b.n	8002c44 <PCD_EP_ISR_Handler+0x2da>
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <PCD_EP_ISR_Handler+0x2aa>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	e017      	b.n	8002c44 <PCD_EP_ISR_Handler+0x2da>
 8002c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <PCD_EP_ISR_Handler+0x2c4>
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	029b      	lsls	r3, r3, #10
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c54:	827b      	strh	r3, [r7, #18]
 8002c56:	8a7b      	ldrh	r3, [r7, #18]
 8002c58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002c5c:	827b      	strh	r3, [r7, #18]
 8002c5e:	8a7b      	ldrh	r3, [r7, #18]
 8002c60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c64:	827b      	strh	r3, [r7, #18]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	8a7b      	ldrh	r3, [r7, #18]
 8002c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
 8002c80:	e234      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c96:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f280 80fc 	bge.w	8002e98 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cd6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cee:	7b1b      	ldrb	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d125      	bne.n	8002d40 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	3306      	adds	r3, #6
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002d20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8092 	beq.w	8002e4e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d30:	6959      	ldr	r1, [r3, #20]
 8002d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d34:	88da      	ldrh	r2, [r3, #6]
 8002d36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d3a:	f004 fafc 	bl	8007336 <USB_ReadPMA>
 8002d3e:	e086      	b.n	8002e4e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d42:	78db      	ldrb	r3, [r3, #3]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d10a      	bne.n	8002d5e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f9d9 	bl	8003108 <HAL_PCD_EP_DB_Receive>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002d5c:	e077      	b.n	8002e4e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d78:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d024      	beq.n	8002e06 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002de8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02e      	beq.n	8002e4e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df6:	6959      	ldr	r1, [r3, #20]
 8002df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfa:	891a      	ldrh	r2, [r3, #8]
 8002dfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e00:	f004 fa99 	bl	8007336 <USB_ReadPMA>
 8002e04:	e023      	b.n	8002e4e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3306      	adds	r3, #6
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002e32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e40:	6959      	ldr	r1, [r3, #20]
 8002e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e44:	895a      	ldrh	r2, [r3, #10]
 8002e46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e4a:	f004 fa74 	bl	8007336 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e56:	441a      	add	r2, r3
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e64:	441a      	add	r2, r3
 8002e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e68:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <PCD_EP_ISR_Handler+0x514>
 8002e72:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d206      	bcs.n	8002e8c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f006 f8a7 	bl	8008fd8 <HAL_PCD_DataOutStageCallback>
 8002e8a:	e005      	b.n	8002e98 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fd1a 	bl	80058cc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8123 	beq.w	80030ec <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ea6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	3310      	adds	r3, #16
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef8:	78db      	ldrb	r3, [r3, #3]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	f040 80a2 	bne.w	8003044 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f08:	7b1b      	ldrb	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8093 	beq.w	8003036 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d046      	beq.n	8002faa <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1e:	785b      	ldrb	r3, [r3, #1]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d126      	bne.n	8002f72 <PCD_EP_ISR_Handler+0x608>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	4413      	add	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	011a      	lsls	r2, r3, #4
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	4413      	add	r3, r2
 8002f46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	801a      	strh	r2, [r3, #0]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	801a      	strh	r2, [r3, #0]
 8002f70:	e061      	b.n	8003036 <PCD_EP_ISR_Handler+0x6cc>
 8002f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d15d      	bne.n	8003036 <PCD_EP_ISR_Handler+0x6cc>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8e:	4413      	add	r3, r2
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	011a      	lsls	r2, r3, #4
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	e045      	b.n	8003036 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	785b      	ldrb	r3, [r3, #1]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d126      	bne.n	8003006 <PCD_EP_ISR_Handler+0x69c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fcc:	4413      	add	r3, r2
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	011a      	lsls	r2, r3, #4
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	4413      	add	r3, r2
 8002fda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	e017      	b.n	8003036 <PCD_EP_ISR_Handler+0x6cc>
 8003006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d113      	bne.n	8003036 <PCD_EP_ISR_Handler+0x6cc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301c:	4413      	add	r3, r2
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	011a      	lsls	r2, r3, #4
 8003026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003028:	4413      	add	r3, r2
 800302a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800302e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	2200      	movs	r2, #0
 8003034:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f005 ffe6 	bl	800900e <HAL_PCD_DataInStageCallback>
 8003042:	e053      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003044:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d146      	bne.n	80030de <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	3302      	adds	r3, #2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003078:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003084:	429a      	cmp	r2, r3
 8003086:	d907      	bls.n	8003098 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003090:	1ad2      	subs	r2, r2, r3
 8003092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003094:	619a      	str	r2, [r3, #24]
 8003096:	e002      	b.n	800309e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309a:	2200      	movs	r2, #0
 800309c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800309e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f005 ffae 	bl	800900e <HAL_PCD_DataInStageCallback>
 80030b2:	e01b      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80030bc:	441a      	add	r2, r3
 80030be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80030c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80030ca:	441a      	add	r2, r3
 80030cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fbf8 	bl	80058cc <USB_EPStartXfer>
 80030dc:	e006      	b.n	80030ec <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030e2:	461a      	mov	r2, r3
 80030e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f91b 	bl	8003322 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f6ff ac3b 	blt.w	8002974 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3758      	adds	r7, #88	@ 0x58
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d07e      	beq.n	800321e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	3302      	adds	r3, #2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003148:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	8b7b      	ldrh	r3, [r7, #26]
 8003150:	429a      	cmp	r2, r3
 8003152:	d306      	bcc.n	8003162 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	8b7b      	ldrh	r3, [r7, #26]
 800315a:	1ad2      	subs	r2, r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	e002      	b.n	8003168 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d123      	bne.n	80031b8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318a:	833b      	strh	r3, [r7, #24]
 800318c:	8b3b      	ldrh	r3, [r7, #24]
 800318e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003192:	833b      	strh	r3, [r7, #24]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	8b3b      	ldrh	r3, [r7, #24]
 80031a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01f      	beq.n	8003202 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031dc:	82fb      	strh	r3, [r7, #22]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	8afb      	ldrh	r3, [r7, #22]
 80031ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031fe:	b29b      	uxth	r3, r3
 8003200:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003202:	8b7b      	ldrh	r3, [r7, #26]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8087 	beq.w	8003318 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6959      	ldr	r1, [r3, #20]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	891a      	ldrh	r2, [r3, #8]
 8003216:	8b7b      	ldrh	r3, [r7, #26]
 8003218:	f004 f88d 	bl	8007336 <USB_ReadPMA>
 800321c:	e07c      	b.n	8003318 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003226:	b29b      	uxth	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	3306      	adds	r3, #6
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003246:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	8b7b      	ldrh	r3, [r7, #26]
 800324e:	429a      	cmp	r2, r3
 8003250:	d306      	bcc.n	8003260 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	8b7b      	ldrh	r3, [r7, #26]
 8003258:	1ad2      	subs	r2, r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	619a      	str	r2, [r3, #24]
 800325e:	e002      	b.n	8003266 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d123      	bne.n	80032b6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003288:	83fb      	strh	r3, [r7, #30]
 800328a:	8bfb      	ldrh	r3, [r7, #30]
 800328c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003290:	83fb      	strh	r3, [r7, #30]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	8bfb      	ldrh	r3, [r7, #30]
 80032a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d11f      	bne.n	8003300 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032da:	83bb      	strh	r3, [r7, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	8bbb      	ldrh	r3, [r7, #28]
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003300:	8b7b      	ldrh	r3, [r7, #26]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6959      	ldr	r1, [r3, #20]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	895a      	ldrh	r2, [r3, #10]
 8003312:	8b7b      	ldrh	r3, [r7, #26]
 8003314:	f004 f80f 	bl	8007336 <USB_ReadPMA>
    }
  }

  return count;
 8003318:	8b7b      	ldrh	r3, [r7, #26]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b0a4      	sub	sp, #144	@ 0x90
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	4613      	mov	r3, r2
 800332e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 81dd 	beq.w	80036f6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	3302      	adds	r3, #2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003364:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003370:	429a      	cmp	r2, r3
 8003372:	d907      	bls.n	8003384 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800337c:	1ad2      	subs	r2, r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	619a      	str	r2, [r3, #24]
 8003382:	e002      	b.n	800338a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2200      	movs	r2, #0
 8003388:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 80b9 	bne.w	8003506 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	785b      	ldrb	r3, [r3, #1]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d126      	bne.n	80033ea <HAL_PCD_EP_DB_Transmit+0xc8>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b0:	4413      	add	r3, r2
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	011a      	lsls	r2, r3, #4
 80033ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033bc:	4413      	add	r3, r2
 80033be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e01a      	b.n	8003420 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	785b      	ldrb	r3, [r3, #1]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d116      	bne.n	8003420 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003400:	b29b      	uxth	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003406:	4413      	add	r3, r2
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	011a      	lsls	r2, r3, #4
 8003410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003412:	4413      	add	r3, r2
 8003414:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d126      	bne.n	800347c <HAL_PCD_EP_DB_Transmit+0x15a>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800343c:	b29b      	uxth	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	011a      	lsls	r2, r3, #4
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	4413      	add	r3, r2
 8003450:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003454:	61bb      	str	r3, [r7, #24]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003460:	b29a      	uxth	r2, r3
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003474:	b29a      	uxth	r2, r3
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	e017      	b.n	80034ac <HAL_PCD_EP_DB_Transmit+0x18a>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d113      	bne.n	80034ac <HAL_PCD_EP_DB_Transmit+0x18a>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	4413      	add	r3, r2
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	011a      	lsls	r2, r3, #4
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	4413      	add	r3, r2
 80034a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	2200      	movs	r2, #0
 80034aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f005 fdab 	bl	800900e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 82fc 	beq.w	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034de:	82fb      	strh	r3, [r7, #22]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	8afb      	ldrh	r3, [r7, #22]
 80034f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003500:	b29b      	uxth	r3, r3
 8003502:	8013      	strh	r3, [r2, #0]
 8003504:	e2da      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d021      	beq.n	8003554 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800352a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800354c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003550:	b29b      	uxth	r3, r3
 8003552:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800355a:	2b01      	cmp	r3, #1
 800355c:	f040 82ae 	bne.w	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003568:	441a      	add	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003576:	441a      	add	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d30b      	bcc.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003598:	1ad2      	subs	r2, r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	621a      	str	r2, [r3, #32]
 800359e:	e017      	b.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80035a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035b8:	e00a      	b.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2200      	movs	r2, #0
 80035ce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d165      	bne.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x382>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ec:	4413      	add	r3, r2
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	011a      	lsls	r2, r3, #4
 80035f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f8:	4413      	add	r3, r2
 80035fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800360a:	b29a      	uxth	r2, r3
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003614:	2b3e      	cmp	r3, #62	@ 0x3e
 8003616:	d91d      	bls.n	8003654 <HAL_PCD_EP_DB_Transmit+0x332>
 8003618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003620:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0x310>
 800362c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362e:	3b01      	subs	r3, #1
 8003630:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29a      	uxth	r2, r3
 8003638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363a:	b29b      	uxth	r3, r3
 800363c:	029b      	lsls	r3, r3, #10
 800363e:	b29b      	uxth	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800364c:	b29a      	uxth	r2, r3
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	e044      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_PCD_EP_DB_Transmit+0x350>
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366a:	b29a      	uxth	r2, r3
 800366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e035      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003688:	3301      	adds	r3, #1
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800368c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29a      	uxth	r2, r3
 8003692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003694:	b29b      	uxth	r3, r3
 8003696:	029b      	lsls	r3, r3, #10
 8003698:	b29b      	uxth	r3, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	b29a      	uxth	r2, r3
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	e01c      	b.n	80036de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d118      	bne.n	80036de <HAL_PCD_EP_DB_Transmit+0x3bc>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c0:	4413      	add	r3, r2
 80036c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	011a      	lsls	r2, r3, #4
 80036ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036cc:	4413      	add	r3, r2
 80036ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d8:	b29a      	uxth	r2, r3
 80036da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036dc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6959      	ldr	r1, [r3, #20]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	891a      	ldrh	r2, [r3, #8]
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f003 fddb 	bl	80072aa <USB_WritePMA>
 80036f4:	e1e2      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	3306      	adds	r3, #6
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800372a:	429a      	cmp	r2, r3
 800372c:	d307      	bcc.n	800373e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003736:	1ad2      	subs	r2, r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	619a      	str	r2, [r3, #24]
 800373c:	e002      	b.n	8003744 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f040 80c0 	bne.w	80038ce <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d126      	bne.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x482>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800376a:	4413      	add	r3, r2
 800376c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	011a      	lsls	r2, r3, #4
 8003774:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003776:	4413      	add	r3, r2
 8003778:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800377c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800377e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003788:	b29a      	uxth	r2, r3
 800378a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379c:	b29a      	uxth	r2, r3
 800379e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	e01a      	b.n	80037da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d116      	bne.n	80037da <HAL_PCD_EP_DB_Transmit+0x4b8>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037c0:	4413      	add	r3, r2
 80037c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	011a      	lsls	r2, r3, #4
 80037ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80037d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037d6:	2200      	movs	r2, #0
 80037d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	677b      	str	r3, [r7, #116]	@ 0x74
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d12b      	bne.n	8003840 <HAL_PCD_EP_DB_Transmit+0x51e>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fc:	4413      	add	r3, r2
 80037fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	011a      	lsls	r2, r3, #4
 8003806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003808:	4413      	add	r3, r2
 800380a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800380e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003812:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381e:	b29a      	uxth	r2, r3
 8003820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003824:	801a      	strh	r2, [r3, #0]
 8003826:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003836:	b29a      	uxth	r2, r3
 8003838:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e017      	b.n	8003870 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	785b      	ldrb	r3, [r3, #1]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d113      	bne.n	8003870 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003850:	b29b      	uxth	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003856:	4413      	add	r3, r2
 8003858:	677b      	str	r3, [r7, #116]	@ 0x74
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	011a      	lsls	r2, r3, #4
 8003860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003862:	4413      	add	r3, r2
 8003864:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003868:	673b      	str	r3, [r7, #112]	@ 0x70
 800386a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800386c:	2200      	movs	r2, #0
 800386e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4619      	mov	r1, r3
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f005 fbc9 	bl	800900e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 811a 	bne.w	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	441a      	add	r2, r3
 80038b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80038b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	8013      	strh	r3, [r2, #0]
 80038cc:	e0f6      	b.n	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d121      	bne.n	800391c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800390c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003922:	2b01      	cmp	r3, #1
 8003924:	f040 80ca 	bne.w	8003abc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003930:	441a      	add	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800393e:	441a      	add	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6a1a      	ldr	r2, [r3, #32]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	429a      	cmp	r2, r3
 800394e:	d30b      	bcc.n	8003968 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6a1a      	ldr	r2, [r3, #32]
 800395c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003960:	1ad2      	subs	r2, r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	621a      	str	r2, [r3, #32]
 8003966:	e017      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003970:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003974:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003980:	e00a      	b.n	8003998 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	657b      	str	r3, [r7, #84]	@ 0x54
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d165      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x750>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ba:	4413      	add	r3, r2
 80039bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	011a      	lsls	r2, r3, #4
 80039c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c6:	4413      	add	r3, r2
 80039c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80039e4:	d91d      	bls.n	8003a22 <HAL_PCD_EP_DB_Transmit+0x700>
 80039e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_PCD_EP_DB_Transmit+0x6de>
 80039fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039fc:	3b01      	subs	r3, #1
 80039fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a1e:	801a      	strh	r2, [r3, #0]
 8003a20:	e041      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a3c:	801a      	strh	r2, [r3, #0]
 8003a3e:	e032      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a44:	085b      	lsrs	r3, r3, #1
 8003a46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_PCD_EP_DB_Transmit+0x738>
 8003a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a56:	3301      	adds	r3, #1
 8003a58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	029b      	lsls	r3, r3, #10
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	e019      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d115      	bne.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x784>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a88:	4413      	add	r3, r2
 8003a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	011a      	lsls	r2, r3, #4
 8003a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a94:	4413      	add	r3, r2
 8003a96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003aa4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6959      	ldr	r1, [r3, #20]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	895a      	ldrh	r2, [r3, #10]
 8003ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f003 fbf7 	bl	80072aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad6:	82bb      	strh	r3, [r7, #20]
 8003ad8:	8abb      	ldrh	r3, [r7, #20]
 8003ada:	f083 0310 	eor.w	r3, r3, #16
 8003ade:	82bb      	strh	r3, [r7, #20]
 8003ae0:	8abb      	ldrh	r3, [r7, #20]
 8003ae2:	f083 0320 	eor.w	r3, r3, #32
 8003ae6:	82bb      	strh	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	8abb      	ldrh	r3, [r7, #20]
 8003af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3790      	adds	r7, #144	@ 0x90
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	607b      	str	r3, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	817b      	strh	r3, [r7, #10]
 8003b24:	4613      	mov	r3, r2
 8003b26:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b34:	897b      	ldrh	r3, [r7, #10]
 8003b36:	f003 0207 	and.w	r2, r3, #7
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	3310      	adds	r3, #16
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e009      	b.n	8003b60 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4c:	897a      	ldrh	r2, [r7, #10]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b60:	893b      	ldrh	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	80da      	strh	r2, [r3, #6]
 8003b74:	e00b      	b.n	8003b8e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0c1b      	lsrs	r3, r3, #16
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e272      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8087 	beq.w	8003cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bbc:	4b92      	ldr	r3, [pc, #584]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d00c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d112      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5e>
 8003bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b89      	ldr	r3, [pc, #548]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x12c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d168      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e24c      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x76>
 8003c04:	4b80      	ldr	r3, [pc, #512]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a7f      	ldr	r2, [pc, #508]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e02e      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x98>
 8003c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7a      	ldr	r2, [pc, #488]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b78      	ldr	r3, [pc, #480]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a77      	ldr	r2, [pc, #476]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0xbc>
 8003c3e:	4b72      	ldr	r3, [pc, #456]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a71      	ldr	r2, [pc, #452]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xd4>
 8003c58:	4b6b      	ldr	r3, [pc, #428]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b68      	ldr	r3, [pc, #416]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a67      	ldr	r2, [pc, #412]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c78:	f7fd f8e2 	bl	8000e40 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd f8de 	bl	8000e40 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e200      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b5d      	ldr	r3, [pc, #372]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe4>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fd f8ce 	bl	8000e40 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd f8ca 	bl	8000e40 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	@ 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e1ec      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b53      	ldr	r3, [pc, #332]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x10c>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ce2:	4b49      	ldr	r3, [pc, #292]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x18c>
 8003cee:	4b46      	ldr	r3, [pc, #280]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	4b43      	ldr	r3, [pc, #268]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x176>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1c0      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b3d      	ldr	r3, [pc, #244]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4939      	ldr	r1, [pc, #228]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	e03a      	b.n	8003d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d020      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <HAL_RCC_OscConfig+0x270>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd f883 	bl	8000e40 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fd f87f 	bl	8000e40 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e1a1      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	4b2d      	ldr	r3, [pc, #180]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4927      	ldr	r1, [pc, #156]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
 8003d70:	e015      	b.n	8003d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d72:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <HAL_RCC_OscConfig+0x270>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fd f862 	bl	8000e40 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d80:	f7fd f85e 	bl	8000e40 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e180      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03a      	beq.n	8003e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db2:	4b17      	ldr	r3, [pc, #92]	@ (8003e10 <HAL_RCC_OscConfig+0x274>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db8:	f7fd f842 	bl	8000e40 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fd f83e 	bl	8000e40 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e160      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f000 fa9c 	bl	800431c <RCC_Delay>
 8003de4:	e01c      	b.n	8003e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <HAL_RCC_OscConfig+0x274>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dec:	f7fd f828 	bl	8000e40 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df2:	e00f      	b.n	8003e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fd f824 	bl	8000e40 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d908      	bls.n	8003e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e146      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	42420000 	.word	0x42420000
 8003e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b92      	ldr	r3, [pc, #584]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e9      	bne.n	8003df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80a6 	beq.w	8003f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b8b      	ldr	r3, [pc, #556]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b88      	ldr	r3, [pc, #544]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	4a87      	ldr	r2, [pc, #540]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	61d3      	str	r3, [r2, #28]
 8003e4a:	4b85      	ldr	r3, [pc, #532]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b82      	ldr	r3, [pc, #520]	@ (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4b7f      	ldr	r3, [pc, #508]	@ (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fc ffe5 	bl	8000e40 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fc ffe1 	bl	8000e40 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	@ 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e103      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b75      	ldr	r3, [pc, #468]	@ (8004064 <HAL_RCC_OscConfig+0x4c8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x312>
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	e02d      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x334>
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a69      	ldr	r2, [pc, #420]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b67      	ldr	r3, [pc, #412]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a66      	ldr	r2, [pc, #408]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	e01c      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x356>
 8003ed8:	4b61      	ldr	r3, [pc, #388]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4a60      	ldr	r2, [pc, #384]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6213      	str	r3, [r2, #32]
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6213      	str	r3, [r2, #32]
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCC_OscConfig+0x36e>
 8003ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a5a      	ldr	r2, [pc, #360]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6213      	str	r3, [r2, #32]
 8003efe:	4b58      	ldr	r3, [pc, #352]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4a57      	ldr	r2, [pc, #348]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d015      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fc ff95 	bl	8000e40 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fc ff91 	bl	8000e40 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0b1      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f30:	4b4b      	ldr	r3, [pc, #300]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ee      	beq.n	8003f1a <HAL_RCC_OscConfig+0x37e>
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fc ff7f 	bl	8000e40 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fc ff7b 	bl	8000e40 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e09b      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5c:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ee      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4a3b      	ldr	r2, [pc, #236]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8087 	beq.w	8004092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f84:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d061      	beq.n	8004054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d146      	bne.n	8004026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fc ff4f 	bl	8000e40 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fc ff4b 	bl	8000e40 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e06d      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb8:	4b29      	ldr	r3, [pc, #164]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fcc:	d108      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fce:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4921      	ldr	r1, [pc, #132]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a19      	ldr	r1, [r3, #32]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	491b      	ldr	r1, [pc, #108]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fc ff1f 	bl	8000e40 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004006:	f7fc ff1b 	bl	8000e40 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e03d      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x46a>
 8004024:	e035      	b.n	8004092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fc ff08 	bl	8000e40 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fc ff04 	bl	8000e40 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e026      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004046:	4b06      	ldr	r3, [pc, #24]	@ (8004060 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x498>
 8004052:	e01e      	b.n	8004092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e019      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
 8004068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <HAL_RCC_OscConfig+0x500>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	429a      	cmp	r2, r3
 800407e:	d106      	bne.n	800408e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d001      	beq.n	8004092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000

080040a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b67      	ldr	r3, [pc, #412]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0207 	bic.w	r2, r3, #7
 80040ca:	4965      	ldr	r1, [pc, #404]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a58      	ldr	r2, [pc, #352]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a52      	ldr	r2, [pc, #328]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800411e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b41      	ldr	r3, [pc, #260]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e073      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3d      	ldr	r3, [pc, #244]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06b      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b39      	ldr	r3, [pc, #228]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4936      	ldr	r1, [pc, #216]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7fc fe56 	bl	8000e40 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7fc fe52 	bl	8000e40 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e053      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b27      	ldr	r3, [pc, #156]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d210      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b24      	ldr	r3, [pc, #144]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	4922      	ldr	r1, [pc, #136]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	@ (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490a      	ldr	r1, [pc, #40]	@ (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	@ (800426c <HAL_RCC_ClockConfig+0x1cc>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <HAL_RCC_ClockConfig+0x1d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc fdb4 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
 8004268:	08009e8c 	.word	0x08009e8c
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800428e:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x94>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x30>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x36>
 80042a2:	e027      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042a4:	4b19      	ldr	r3, [pc, #100]	@ (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042a6:	613b      	str	r3, [r7, #16]
      break;
 80042a8:	e027      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0c9b      	lsrs	r3, r3, #18
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	4a17      	ldr	r2, [pc, #92]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d010      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c2:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x94>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0c5b      	lsrs	r3, r3, #17
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042d6:	fb03 f202 	mul.w	r2, r3, r2
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	e004      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	613b      	str	r3, [r7, #16]
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	@ (800430c <HAL_RCC_GetSysClockFreq+0x98>)
 80042f6:	613b      	str	r3, [r7, #16]
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	693b      	ldr	r3, [r7, #16]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	007a1200 	.word	0x007a1200
 8004310:	08009e9c 	.word	0x08009e9c
 8004314:	08009eac 	.word	0x08009eac
 8004318:	003d0900 	.word	0x003d0900

0800431c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004324:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <RCC_Delay+0x34>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <RCC_Delay+0x38>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	0a5b      	lsrs	r3, r3, #9
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004338:	bf00      	nop
  }
  while (Delay --);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e5a      	subs	r2, r3, #1
 800433e:	60fa      	str	r2, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f9      	bne.n	8004338 <RCC_Delay+0x1c>
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	20000000 	.word	0x20000000
 8004354:	10624dd3 	.word	0x10624dd3

08004358 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d07d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004378:	4b4f      	ldr	r3, [pc, #316]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004384:	4b4c      	ldr	r3, [pc, #304]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4a4b      	ldr	r2, [pc, #300]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800438e:	61d3      	str	r3, [r2, #28]
 8004390:	4b49      	ldr	r3, [pc, #292]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	4b46      	ldr	r3, [pc, #280]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d118      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ac:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a42      	ldr	r2, [pc, #264]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b8:	f7fc fd42 	bl	8000e40 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043be:	e008      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fc fd3e 	bl	8000e40 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	@ 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e06d      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b3a      	ldr	r3, [pc, #232]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043de:	4b36      	ldr	r3, [pc, #216]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02e      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d027      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fc:	4b2e      	ldr	r3, [pc, #184]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004404:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004406:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004408:	2201      	movs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440c:	4b2c      	ldr	r3, [pc, #176]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004412:	4a29      	ldr	r2, [pc, #164]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fc fd0d 	bl	8000e40 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fc fd09 	bl	8000e40 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e036      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800444c:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4917      	ldr	r1, [pc, #92]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445a:	4313      	orrs	r3, r2
 800445c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004464:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800447c:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	490b      	ldr	r1, [pc, #44]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4904      	ldr	r1, [pc, #16]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40007000 	.word	0x40007000
 80044c0:	42420440 	.word	0x42420440

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e041      	b.n	800455a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fb76 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 fa5c 	bl	80049c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b01      	cmp	r3, #1
 8004576:	d001      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e03a      	b.n	80045f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a18      	ldr	r2, [pc, #96]	@ (80045fc <HAL_TIM_Base_Start_IT+0x98>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x58>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a6:	d009      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x58>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <HAL_TIM_Base_Start_IT+0x9c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x58>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a13      	ldr	r2, [pc, #76]	@ (8004604 <HAL_TIM_Base_Start_IT+0xa0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d111      	bne.n	80045e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d010      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	e007      	b.n	80045f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800

08004608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d020      	beq.n	800466c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0202 	mvn.w	r2, #2
 800463c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f998 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f98b 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f99a 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d020      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0204 	mvn.w	r2, #4
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f972 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f965 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f974 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d020      	beq.n	8004704 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0208 	mvn.w	r2, #8
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f94c 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f93f 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f94e 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d020      	beq.n	8004750 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01b      	beq.n	8004750 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0210 	mvn.w	r2, #16
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2208      	movs	r2, #8
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f926 	bl	8004988 <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f919 	bl	8004976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f928 	bl	800499a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0201 	mvn.w	r2, #1
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fb ff34 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa7f 	bl	8004c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8f8 	bl	80049ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0220 	mvn.w	r2, #32
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa52 	bl	8004c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_ConfigClockSource+0x1c>
 8004800:	2302      	movs	r3, #2
 8004802:	e0b4      	b.n	800496e <HAL_TIM_ConfigClockSource+0x186>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800482a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800483c:	d03e      	beq.n	80048bc <HAL_TIM_ConfigClockSource+0xd4>
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004842:	f200 8087 	bhi.w	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484a:	f000 8086 	beq.w	800495a <HAL_TIM_ConfigClockSource+0x172>
 800484e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004852:	d87f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b70      	cmp	r3, #112	@ 0x70
 8004856:	d01a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xa6>
 8004858:	2b70      	cmp	r3, #112	@ 0x70
 800485a:	d87b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b60      	cmp	r3, #96	@ 0x60
 800485e:	d050      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x11a>
 8004860:	2b60      	cmp	r3, #96	@ 0x60
 8004862:	d877      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b50      	cmp	r3, #80	@ 0x50
 8004866:	d03c      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004868:	2b50      	cmp	r3, #80	@ 0x50
 800486a:	d873      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b40      	cmp	r3, #64	@ 0x40
 800486e:	d058      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0x13a>
 8004870:	2b40      	cmp	r3, #64	@ 0x40
 8004872:	d86f      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b30      	cmp	r3, #48	@ 0x30
 8004876:	d064      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b30      	cmp	r3, #48	@ 0x30
 800487a:	d86b      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b20      	cmp	r3, #32
 800487e:	d060      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d867      	bhi.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d05c      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d05a      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x15a>
 800488c:	e062      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800489e:	f000 f974 	bl	8004b8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	609a      	str	r2, [r3, #8]
      break;
 80048ba:	e04f      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048cc:	f000 f95d 	bl	8004b8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048de:	609a      	str	r2, [r3, #8]
      break;
 80048e0:	e03c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 f8d4 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2150      	movs	r1, #80	@ 0x50
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f92b 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 8004900:	e02c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800490e:	461a      	mov	r2, r3
 8004910:	f000 f8f2 	bl	8004af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2160      	movs	r1, #96	@ 0x60
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f91b 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 8004920:	e01c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	461a      	mov	r2, r3
 8004930:	f000 f8b4 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2140      	movs	r1, #64	@ 0x40
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f90b 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 8004940:	e00c      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 f902 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 8004952:	e003      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
      break;
 8004958:	e000      	b.n	800495c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800495a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800496c:	7bfb      	ldrb	r3, [r7, #15]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
	...

080049c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004a90 <TIM_Base_SetConfig+0xd0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0x30>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0x30>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a94 <TIM_Base_SetConfig+0xd4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0x30>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004a98 <TIM_Base_SetConfig+0xd8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <TIM_Base_SetConfig+0xd0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0x62>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0x62>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1f      	ldr	r2, [pc, #124]	@ (8004a94 <TIM_Base_SetConfig+0xd4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0x62>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8004a98 <TIM_Base_SetConfig+0xd8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a90 <TIM_Base_SetConfig+0xd0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d103      	bne.n	8004a68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	611a      	str	r2, [r3, #16]
  }
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800

08004a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 030a 	bic.w	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f043 0307 	orr.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b087      	sub	sp, #28
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	609a      	str	r2, [r3, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e046      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	@ (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a12      	ldr	r2, [pc, #72]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a10      	ldr	r2, [pc, #64]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800

08004c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cd2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004cd6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cf6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004cfa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	4638      	mov	r0, r7
 8004d44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b09d      	sub	sp, #116	@ 0x74
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	78db      	ldrb	r3, [r3, #3]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d81f      	bhi.n	8004de6 <USB_ActivateEndpoint+0x72>
 8004da6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <USB_ActivateEndpoint+0x38>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004def 	.word	0x08004def
 8004db8:	08004dcb 	.word	0x08004dcb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004dc8:	e012      	b.n	8004df0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004dd2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004dd6:	e00b      	b.n	8004df0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004dd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ddc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004de0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004de4:	e004      	b.n	8004df0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004dec:	e000      	b.n	8004df0 <USB_ActivateEndpoint+0x7c>
      break;
 8004dee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	441a      	add	r2, r3
 8004dfa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004dfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	7b1b      	ldrb	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8178 	bne.w	8005150 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8084 	beq.w	8004f72 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	011a      	lsls	r2, r3, #4
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	88db      	ldrh	r3, [r3, #6]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	827b      	strh	r3, [r7, #18]
 8004eac:	8a7b      	ldrh	r3, [r7, #18]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01b      	beq.n	8004eee <USB_ActivateEndpoint+0x17a>
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ecc:	823b      	strh	r3, [r7, #16]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	8a3b      	ldrh	r3, [r7, #16]
 8004eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	78db      	ldrb	r3, [r3, #3]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d020      	beq.n	8004f38 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f0c:	81bb      	strh	r3, [r7, #12]
 8004f0e:	89bb      	ldrh	r3, [r7, #12]
 8004f10:	f083 0320 	eor.w	r3, r3, #32
 8004f14:	81bb      	strh	r3, [r7, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	89bb      	ldrh	r3, [r7, #12]
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
 8004f36:	e2d5      	b.n	80054e4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f4e:	81fb      	strh	r3, [r7, #14]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	89fb      	ldrh	r3, [r7, #14]
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]
 8004f70:	e2b8      	b.n	80054e4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	4413      	add	r3, r2
 8004f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	011a      	lsls	r2, r3, #4
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	88db      	ldrh	r3, [r3, #6]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	4413      	add	r3, r2
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	011a      	lsls	r2, r3, #4
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fe0:	d91d      	bls.n	800501e <USB_ActivateEndpoint+0x2aa>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <USB_ActivateEndpoint+0x288>
 8004ff6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29a      	uxth	r2, r3
 8005002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005004:	b29b      	uxth	r3, r3
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	b29b      	uxth	r3, r3
 800500a:	4313      	orrs	r3, r2
 800500c:	b29b      	uxth	r3, r3
 800500e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005016:	b29a      	uxth	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e026      	b.n	800506c <USB_ActivateEndpoint+0x2f8>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <USB_ActivateEndpoint+0x2c8>
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e017      	b.n	800506c <USB_ActivateEndpoint+0x2f8>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <USB_ActivateEndpoint+0x2e2>
 8005050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005052:	3301      	adds	r3, #1
 8005054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29a      	uxth	r2, r3
 800505c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29b      	uxth	r3, r3
 8005064:	4313      	orrs	r3, r2
 8005066:	b29a      	uxth	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	847b      	strh	r3, [r7, #34]	@ 0x22
 800507a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800507c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <USB_ActivateEndpoint+0x348>
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509a:	843b      	strh	r3, [r7, #32]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	8c3b      	ldrh	r3, [r7, #32]
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d124      	bne.n	800510e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050da:	83bb      	strh	r3, [r7, #28]
 80050dc:	8bbb      	ldrh	r3, [r7, #28]
 80050de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80050e2:	83bb      	strh	r3, [r7, #28]
 80050e4:	8bbb      	ldrh	r3, [r7, #28]
 80050e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80050ea:	83bb      	strh	r3, [r7, #28]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	8bbb      	ldrh	r3, [r7, #28]
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
 800510c:	e1ea      	b.n	80054e4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005124:	83fb      	strh	r3, [r7, #30]
 8005126:	8bfb      	ldrh	r3, [r7, #30]
 8005128:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800512c:	83fb      	strh	r3, [r7, #30]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	8bfb      	ldrh	r3, [r7, #30]
 800513a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800513e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
 800514e:	e1c9      	b.n	80054e4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	78db      	ldrb	r3, [r3, #3]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d11e      	bne.n	8005196 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005188:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800518c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
 8005194:	e01d      	b.n	80051d2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80051a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ac:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80051be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051dc:	b29b      	uxth	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051e2:	4413      	add	r3, r2
 80051e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	011a      	lsls	r2, r3, #4
 80051ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	891b      	ldrh	r3, [r3, #8]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	657b      	str	r3, [r7, #84]	@ 0x54
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005210:	b29b      	uxth	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005216:	4413      	add	r3, r2
 8005218:	657b      	str	r3, [r7, #84]	@ 0x54
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	011a      	lsls	r2, r3, #4
 8005220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005222:	4413      	add	r3, r2
 8005224:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005228:	653b      	str	r3, [r7, #80]	@ 0x50
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	895b      	ldrh	r3, [r3, #10]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005238:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8093 	bne.w	800536a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005254:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <USB_ActivateEndpoint+0x524>
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	441a      	add	r2, r3
 8005282:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800528c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80052a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01b      	beq.n	80052e8 <USB_ActivateEndpoint+0x574>
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005300:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005302:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005306:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005308:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800530a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800530e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800531c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005320:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005324:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005346:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800535c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005364:	b29b      	uxth	r3, r3
 8005366:	8013      	strh	r3, [r2, #0]
 8005368:	e0bc      	b.n	80054e4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800537a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800537e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01d      	beq.n	80053c2 <USB_ActivateEndpoint+0x64e>
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80053d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01d      	beq.n	800541a <USB_ActivateEndpoint+0x6a6>
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	78db      	ldrb	r3, [r3, #3]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d024      	beq.n	800546c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005438:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800543c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005440:	f083 0320 	eor.w	r3, r3, #32
 8005444:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800545a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]
 800546a:	e01d      	b.n	80054a8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005482:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800549c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80054d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80054e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3774      	adds	r7, #116	@ 0x74
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop

080054f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b08d      	sub	sp, #52	@ 0x34
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	7b1b      	ldrb	r3, [r3, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f040 808e 	bne.w	8005624 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d044      	beq.n	800559a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	81bb      	strh	r3, [r7, #12]
 800551e:	89bb      	ldrh	r3, [r7, #12]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <USB_DeactivateEndpoint+0x6c>
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	817b      	strh	r3, [r7, #10]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	897b      	ldrh	r3, [r7, #10]
 800554c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005558:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800555c:	b29b      	uxth	r3, r3
 800555e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005576:	813b      	strh	r3, [r7, #8]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	893b      	ldrh	r3, [r7, #8]
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800558c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
 8005598:	e192      	b.n	80058c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	827b      	strh	r3, [r7, #18]
 80055a8:	8a7b      	ldrh	r3, [r7, #18]
 80055aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <USB_DeactivateEndpoint+0xf6>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c8:	823b      	strh	r3, [r7, #16]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8a3b      	ldrh	r3, [r7, #16]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005600:	81fb      	strh	r3, [r7, #14]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800561a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]
 8005622:	e14d      	b.n	80058c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f040 80a5 	bne.w	8005778 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	843b      	strh	r3, [r7, #32]
 800563c:	8c3b      	ldrh	r3, [r7, #32]
 800563e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01b      	beq.n	800567e <USB_DeactivateEndpoint+0x18a>
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565c:	83fb      	strh	r3, [r7, #30]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8bfb      	ldrh	r3, [r7, #30]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	83bb      	strh	r3, [r7, #28]
 800568c:	8bbb      	ldrh	r3, [r7, #28]
 800568e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <USB_DeactivateEndpoint+0x1da>
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	837b      	strh	r3, [r7, #26]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8b7b      	ldrh	r3, [r7, #26]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e4:	833b      	strh	r3, [r7, #24]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	8b3b      	ldrh	r3, [r7, #24]
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571c:	82fb      	strh	r3, [r7, #22]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	8afb      	ldrh	r3, [r7, #22]
 800572a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800572e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005754:	82bb      	strh	r3, [r7, #20]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	8abb      	ldrh	r3, [r7, #20]
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800576e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
 8005776:	e0a3      	b.n	80058c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005786:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <USB_DeactivateEndpoint+0x2d4>
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	441a      	add	r2, r3
 80057b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80057b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80057d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01b      	beq.n	8005818 <USB_DeactivateEndpoint+0x324>
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005810:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800583c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800584c:	b29b      	uxth	r3, r3
 800584e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005866:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	441a      	add	r2, r3
 8005872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005884:	b29b      	uxth	r3, r3
 8005886:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800589a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3734      	adds	r7, #52	@ 0x34
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b0c2      	sub	sp, #264	@ 0x108
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058da:	6018      	str	r0, [r3, #0]
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	f040 86b7 	bne.w	8006666 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d908      	bls.n	8005926 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005924:	e007      	b.n	8005936 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d13a      	bne.n	80059bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6959      	ldr	r1, [r3, #20]
 8005952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	88da      	ldrh	r2, [r3, #6]
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005962:	b29b      	uxth	r3, r3
 8005964:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005968:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f001 fc9c 	bl	80072aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005982:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4413      	add	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	f000 be1f 	b.w	80065fa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f040 8462 	bne.w	8006292 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	f240 83df 	bls.w	80061aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a12:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a1a      	ldr	r2, [r3, #32]
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 81c7 	beq.w	8005e1c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d177      	bne.n	8005b9a <USB_EPStartXfer+0x2ce>
 8005aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aca:	4413      	add	r3, r2
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	011a      	lsls	r2, r3, #4
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	2b3e      	cmp	r3, #62	@ 0x3e
 8005afc:	d921      	bls.n	8005b42 <USB_EPStartXfer+0x276>
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <USB_EPStartXfer+0x252>
 8005b14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	e050      	b.n	8005be4 <USB_EPStartXfer+0x318>
 8005b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10a      	bne.n	8005b60 <USB_EPStartXfer+0x294>
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e041      	b.n	8005be4 <USB_EPStartXfer+0x318>
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <USB_EPStartXfer+0x2b4>
 8005b76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4313      	orrs	r3, r2
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e024      	b.n	8005be4 <USB_EPStartXfer+0x318>
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11c      	bne.n	8005be4 <USB_EPStartXfer+0x318>
 8005baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	4413      	add	r3, r2
 8005bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	011a      	lsls	r2, r3, #4
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c12:	6800      	ldr	r0, [r0, #0]
 8005c14:	f001 fb49 	bl	80072aa <USB_WritePMA>
            ep->xfer_buff += len;
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	441a      	add	r2, r3
 8005c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d90f      	bls.n	8005c72 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	621a      	str	r2, [r3, #32]
 8005c70:	e00e      	b.n	8005c90 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d177      	bne.n	8005d90 <USB_EPStartXfer+0x4c4>
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cf2:	d921      	bls.n	8005d38 <USB_EPStartXfer+0x46c>
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <USB_EPStartXfer+0x448>
 8005d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4313      	orrs	r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e056      	b.n	8005de6 <USB_EPStartXfer+0x51a>
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <USB_EPStartXfer+0x48a>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e047      	b.n	8005de6 <USB_EPStartXfer+0x51a>
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <USB_EPStartXfer+0x4aa>
 8005d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d70:	3301      	adds	r3, #1
 8005d72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e02a      	b.n	8005de6 <USB_EPStartXfer+0x51a>
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d122      	bne.n	8005de6 <USB_EPStartXfer+0x51a>
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011a      	lsls	r2, r3, #4
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	891b      	ldrh	r3, [r3, #8]
 8005df2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6959      	ldr	r1, [r3, #20]
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e14:	6800      	ldr	r0, [r0, #0]
 8005e16:	f001 fa48 	bl	80072aa <USB_WritePMA>
 8005e1a:	e3ee      	b.n	80065fa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d177      	bne.n	8005f1c <USB_EPStartXfer+0x650>
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4c:	4413      	add	r3, r2
 8005e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	011a      	lsls	r2, r3, #4
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e7e:	d921      	bls.n	8005ec4 <USB_EPStartXfer+0x5f8>
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <USB_EPStartXfer+0x5d4>
 8005e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	029b      	lsls	r3, r3, #10
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e056      	b.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <USB_EPStartXfer+0x616>
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e047      	b.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee6:	085b      	lsrs	r3, r3, #1
 8005ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <USB_EPStartXfer+0x636>
 8005ef8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005efc:	3301      	adds	r3, #1
 8005efe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	e02a      	b.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d122      	bne.n	8005f72 <USB_EPStartXfer+0x6a6>
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f4c:	4413      	add	r3, r2
 8005f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	011a      	lsls	r2, r3, #4
 8005f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	891b      	ldrh	r3, [r3, #8]
 8005f7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005fa0:	6800      	ldr	r0, [r0, #0]
 8005fa2:	f001 f982 	bl	80072aa <USB_WritePMA>
            ep->xfer_buff += len;
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb6:	441a      	add	r2, r3
 8005fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d90f      	bls.n	8006000 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	621a      	str	r2, [r3, #32]
 8005ffe:	e00e      	b.n	800601e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	643b      	str	r3, [r7, #64]	@ 0x40
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d177      	bne.n	800612a <USB_EPStartXfer+0x85e>
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	4413      	add	r3, r2
 800605c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	4413      	add	r3, r2
 8006070:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
 8006076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	2b3e      	cmp	r3, #62	@ 0x3e
 800608c:	d921      	bls.n	80060d2 <USB_EPStartXfer+0x806>
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <USB_EPStartXfer+0x7e2>
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	3b01      	subs	r3, #1
 80060aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	029b      	lsls	r3, r3, #10
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	e050      	b.n	8006174 <USB_EPStartXfer+0x8a8>
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <USB_EPStartXfer+0x824>
 80060da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e041      	b.n	8006174 <USB_EPStartXfer+0x8a8>
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <USB_EPStartXfer+0x844>
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610a:	3301      	adds	r3, #1
 800610c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	b29b      	uxth	r3, r3
 800611c:	029b      	lsls	r3, r3, #10
 800611e:	b29b      	uxth	r3, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	b29a      	uxth	r2, r3
 8006124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e024      	b.n	8006174 <USB_EPStartXfer+0x8a8>
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d11c      	bne.n	8006174 <USB_EPStartXfer+0x8a8>
 800613a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800614e:	4413      	add	r3, r2
 8006150:	643b      	str	r3, [r7, #64]	@ 0x40
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	011a      	lsls	r2, r3, #4
 8006160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006162:	4413      	add	r3, r2
 8006164:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006168:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	b29a      	uxth	r2, r3
 8006170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	895b      	ldrh	r3, [r3, #10]
 8006180:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	b29b      	uxth	r3, r3
 8006196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800619a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800619e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061a2:	6800      	ldr	r0, [r0, #0]
 80061a4:	f001 f881 	bl	80072aa <USB_WritePMA>
 80061a8:	e227      	b.n	80065fa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80061dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80061e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800620a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006230:	b29b      	uxth	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006236:	4413      	add	r3, r2
 8006238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800624a:	4413      	add	r3, r2
 800624c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006250:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	b29a      	uxth	r2, r3
 8006258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800625a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	891b      	ldrh	r3, [r3, #8]
 8006268:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800626c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6959      	ldr	r1, [r3, #20]
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	b29b      	uxth	r3, r3
 800627e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006282:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006286:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	f001 f80d 	bl	80072aa <USB_WritePMA>
 8006290:	e1b3      	b.n	80065fa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80c6 	beq.w	8006464 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d177      	bne.n	80063e4 <USB_EPStartXfer+0xb18>
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800630e:	b29b      	uxth	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006314:	4413      	add	r3, r2
 8006316:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	011a      	lsls	r2, r3, #4
 8006326:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006328:	4413      	add	r3, r2
 800632a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800632e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800633a:	b29a      	uxth	r2, r3
 800633c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	2b3e      	cmp	r3, #62	@ 0x3e
 8006346:	d921      	bls.n	800638c <USB_EPStartXfer+0xac0>
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <USB_EPStartXfer+0xa9c>
 800635e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006362:	3b01      	subs	r3, #1
 8006364:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29a      	uxth	r2, r3
 800636e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006372:	b29b      	uxth	r3, r3
 8006374:	029b      	lsls	r3, r3, #10
 8006376:	b29b      	uxth	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006384:	b29a      	uxth	r2, r3
 8006386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	e050      	b.n	800642e <USB_EPStartXfer+0xb62>
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <USB_EPStartXfer+0xade>
 8006394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	e041      	b.n	800642e <USB_EPStartXfer+0xb62>
 80063aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <USB_EPStartXfer+0xafe>
 80063c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063c4:	3301      	adds	r3, #1
 80063c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	029b      	lsls	r3, r3, #10
 80063d8:	b29b      	uxth	r3, r3
 80063da:	4313      	orrs	r3, r2
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	e024      	b.n	800642e <USB_EPStartXfer+0xb62>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d11c      	bne.n	800642e <USB_EPStartXfer+0xb62>
 80063f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006402:	b29b      	uxth	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006408:	4413      	add	r3, r2
 800640a:	673b      	str	r3, [r7, #112]	@ 0x70
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	011a      	lsls	r2, r3, #4
 800641a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800641c:	4413      	add	r3, r2
 800641e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006428:	b29a      	uxth	r2, r3
 800642a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800642c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	895b      	ldrh	r3, [r3, #10]
 800643a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6959      	ldr	r1, [r3, #20]
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	b29b      	uxth	r3, r3
 8006450:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006454:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006458:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f000 ff24 	bl	80072aa <USB_WritePMA>
 8006462:	e0ca      	b.n	80065fa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d177      	bne.n	8006564 <USB_EPStartXfer+0xc98>
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006494:	4413      	add	r3, r2
 8006496:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	011a      	lsls	r2, r3, #4
 80064a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064c6:	d921      	bls.n	800650c <USB_EPStartXfer+0xc40>
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_EPStartXfer+0xc1c>
 80064de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80064e2:	3b01      	subs	r3, #1
 80064e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4313      	orrs	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29a      	uxth	r2, r3
 8006506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e05c      	b.n	80065c6 <USB_EPStartXfer+0xcfa>
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <USB_EPStartXfer+0xc5e>
 8006514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006522:	b29a      	uxth	r2, r3
 8006524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e04d      	b.n	80065c6 <USB_EPStartXfer+0xcfa>
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <USB_EPStartXfer+0xc7e>
 8006540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006544:	3301      	adds	r3, #1
 8006546:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800654a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	4313      	orrs	r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e030      	b.n	80065c6 <USB_EPStartXfer+0xcfa>
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d128      	bne.n	80065c6 <USB_EPStartXfer+0xcfa>
 8006574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006590:	b29b      	uxth	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006598:	4413      	add	r3, r2
 800659a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	b29a      	uxth	r2, r3
 80065c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80065c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	891b      	ldrh	r3, [r3, #8]
 80065d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6959      	ldr	r1, [r3, #20]
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065f4:	6800      	ldr	r0, [r0, #0]
 80065f6:	f000 fe58 	bl	80072aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800661c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006620:	817b      	strh	r3, [r7, #10]
 8006622:	897b      	ldrh	r3, [r7, #10]
 8006624:	f083 0310 	eor.w	r3, r3, #16
 8006628:	817b      	strh	r3, [r7, #10]
 800662a:	897b      	ldrh	r3, [r7, #10]
 800662c:	f083 0320 	eor.w	r3, r3, #32
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	897b      	ldrh	r3, [r7, #10]
 800664e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800665e:	b29b      	uxth	r3, r3
 8006660:	8013      	strh	r3, [r2, #0]
 8006662:	f000 bcde 	b.w	8007022 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	7b1b      	ldrb	r3, [r3, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 80bb 	bne.w	80067ee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	429a      	cmp	r2, r3
 8006692:	d917      	bls.n	80066c4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80066a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	619a      	str	r2, [r3, #24]
 80066c2:	e00e      	b.n	80066e2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006706:	4413      	add	r3, r2
 8006708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	011a      	lsls	r2, r3, #4
 800671a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800671e:	4413      	add	r3, r2
 8006720:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006740:	2b3e      	cmp	r3, #62	@ 0x3e
 8006742:	d924      	bls.n	800678e <USB_EPStartXfer+0xec2>
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2b00      	cmp	r3, #0
 8006758:	d104      	bne.n	8006764 <USB_EPStartXfer+0xe98>
 800675a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800675e:	3b01      	subs	r3, #1
 8006760:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006770:	b29b      	uxth	r3, r3
 8006772:	029b      	lsls	r3, r3, #10
 8006774:	b29b      	uxth	r3, r3
 8006776:	4313      	orrs	r3, r2
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	f000 bc10 	b.w	8006fae <USB_EPStartXfer+0x16e2>
 800678e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10c      	bne.n	80067b0 <USB_EPStartXfer+0xee4>
 8006796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e3fe      	b.n	8006fae <USB_EPStartXfer+0x16e2>
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <USB_EPStartXfer+0xf04>
 80067c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067ca:	3301      	adds	r3, #1
 80067cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	e3df      	b.n	8006fae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	f040 8218 	bne.w	8006c30 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f040 809d 	bne.w	800694c <USB_EPStartXfer+0x1080>
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800682e:	b29b      	uxth	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006836:	4413      	add	r3, r2
 8006838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	011a      	lsls	r2, r3, #4
 800684a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684e:	4413      	add	r3, r2
 8006850:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006864:	b29a      	uxth	r2, r3
 8006866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b3e      	cmp	r3, #62	@ 0x3e
 800687a:	d92b      	bls.n	80068d4 <USB_EPStartXfer+0x1008>
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <USB_EPStartXfer+0xfe0>
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	3b01      	subs	r3, #1
 80068a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	029b      	lsls	r3, r3, #10
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4313      	orrs	r3, r2
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	e070      	b.n	80069b6 <USB_EPStartXfer+0x10ea>
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10c      	bne.n	80068fe <USB_EPStartXfer+0x1032>
 80068e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068fa:	801a      	strh	r2, [r3, #0]
 80068fc:	e05b      	b.n	80069b6 <USB_EPStartXfer+0x10ea>
 80068fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <USB_EPStartXfer+0x1062>
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006928:	3301      	adds	r3, #1
 800692a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800692e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29a      	uxth	r2, r3
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800693a:	b29b      	uxth	r3, r3
 800693c:	029b      	lsls	r3, r3, #10
 800693e:	b29b      	uxth	r3, r3
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006948:	801a      	strh	r2, [r3, #0]
 800694a:	e034      	b.n	80069b6 <USB_EPStartXfer+0x10ea>
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d12c      	bne.n	80069b6 <USB_EPStartXfer+0x10ea>
 800695c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006960:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006980:	4413      	add	r3, r2
 8006982:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	011a      	lsls	r2, r3, #4
 8006994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006998:	4413      	add	r3, r2
 800699a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800699e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80069b4:	801a      	strh	r2, [r3, #0]
 80069b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 809d 	bne.w	8006b10 <USB_EPStartXfer+0x1244>
 80069d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069fa:	4413      	add	r3, r2
 80069fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	011a      	lsls	r2, r3, #4
 8006a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a12:	4413      	add	r3, r2
 8006a14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a3e:	d92b      	bls.n	8006a98 <USB_EPStartXfer+0x11cc>
 8006a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 031f 	and.w	r3, r3, #31
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <USB_EPStartXfer+0x11a4>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	029b      	lsls	r3, r3, #10
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	4313      	orrs	r3, r2
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e069      	b.n	8006b6c <USB_EPStartXfer+0x12a0>
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <USB_EPStartXfer+0x11f6>
 8006aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	e054      	b.n	8006b6c <USB_EPStartXfer+0x12a0>
 8006ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <USB_EPStartXfer+0x1226>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aec:	3301      	adds	r3, #1
 8006aee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	029b      	lsls	r3, r3, #10
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	e02d      	b.n	8006b6c <USB_EPStartXfer+0x12a0>
 8006b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d125      	bne.n	8006b6c <USB_EPStartXfer+0x12a0>
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b36:	4413      	add	r3, r2
 8006b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	011a      	lsls	r2, r3, #4
 8006b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b4e:	4413      	add	r3, r2
 8006b50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b6a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8218 	beq.w	8006fae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <USB_EPStartXfer+0x12ea>
 8006baa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bb6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f040 81f5 	bne.w	8006fae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006bc4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 81ee 	bne.w	8006fae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]
 8006c2e:	e1be      	b.n	8006fae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	f040 81b4 	bne.w	8006faa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d917      	bls.n	8006c8e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	619a      	str	r2, [r3, #24]
 8006c8c:	e00e      	b.n	8006cac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8085 	bne.w	8006dc8 <USB_EPStartXfer+0x14fc>
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	011a      	lsls	r2, r3, #4
 8006cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d1e:	d923      	bls.n	8006d68 <USB_EPStartXfer+0x149c>
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <USB_EPStartXfer+0x1474>
 8006d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	029b      	lsls	r3, r3, #10
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e060      	b.n	8006e2a <USB_EPStartXfer+0x155e>
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10c      	bne.n	8006d8a <USB_EPStartXfer+0x14be>
 8006d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	e04f      	b.n	8006e2a <USB_EPStartXfer+0x155e>
 8006d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <USB_EPStartXfer+0x14de>
 8006da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006da4:	3301      	adds	r3, #1
 8006da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	029b      	lsls	r3, r3, #10
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	e030      	b.n	8006e2a <USB_EPStartXfer+0x155e>
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d128      	bne.n	8006e2a <USB_EPStartXfer+0x155e>
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	011a      	lsls	r2, r3, #4
 8006e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 8085 	bne.w	8006f54 <USB_EPStartXfer+0x1688>
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e6e:	4413      	add	r3, r2
 8006e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	011a      	lsls	r2, r3, #4
 8006e82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e86:	4413      	add	r3, r2
 8006e88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eaa:	d923      	bls.n	8006ef4 <USB_EPStartXfer+0x1628>
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <USB_EPStartXfer+0x1600>
 8006ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e05c      	b.n	8006fae <USB_EPStartXfer+0x16e2>
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10c      	bne.n	8006f16 <USB_EPStartXfer+0x164a>
 8006efc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	e04b      	b.n	8006fae <USB_EPStartXfer+0x16e2>
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <USB_EPStartXfer+0x166a>
 8006f2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f30:	3301      	adds	r3, #1
 8006f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	029b      	lsls	r3, r3, #10
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	e02c      	b.n	8006fae <USB_EPStartXfer+0x16e2>
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d124      	bne.n	8006fae <USB_EPStartXfer+0x16e2>
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f92:	4413      	add	r3, r2
 8006f94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e001      	b.n	8006fae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e03a      	b.n	8007024 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006fd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006fdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fe0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006fe4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006fe8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006fec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800700e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800701a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701e:	b29b      	uxth	r3, r3
 8007020:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d020      	beq.n	8007082 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	b29b      	uxth	r3, r3
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007056:	81bb      	strh	r3, [r7, #12]
 8007058:	89bb      	ldrh	r3, [r7, #12]
 800705a:	f083 0310 	eor.w	r3, r3, #16
 800705e:	81bb      	strh	r3, [r7, #12]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	89bb      	ldrh	r3, [r7, #12]
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
 8007080:	e01f      	b.n	80070c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007098:	81fb      	strh	r3, [r7, #14]
 800709a:	89fb      	ldrh	r3, [r7, #14]
 800709c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070a0:	81fb      	strh	r3, [r7, #14]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	89fb      	ldrh	r3, [r7, #14]
 80070ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070be:	b29b      	uxth	r3, r3
 80070c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b087      	sub	sp, #28
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	7b1b      	ldrb	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 809d 	bne.w	800721c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d04c      	beq.n	8007184 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	823b      	strh	r3, [r7, #16]
 80070f8:	8a3b      	ldrh	r3, [r7, #16]
 80070fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01b      	beq.n	800713a <USB_EPClearStall+0x6c>
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007118:	81fb      	strh	r3, [r7, #14]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	441a      	add	r2, r3
 8007124:	89fb      	ldrh	r3, [r7, #14]
 8007126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800712a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800712e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007132:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007136:	b29b      	uxth	r3, r3
 8007138:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	78db      	ldrb	r3, [r3, #3]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d06c      	beq.n	800721c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007158:	81bb      	strh	r3, [r7, #12]
 800715a:	89bb      	ldrh	r3, [r7, #12]
 800715c:	f083 0320 	eor.w	r3, r3, #32
 8007160:	81bb      	strh	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	441a      	add	r2, r3
 800716c:	89bb      	ldrh	r3, [r7, #12]
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800717a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]
 8007182:	e04b      	b.n	800721c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	82fb      	strh	r3, [r7, #22]
 8007192:	8afb      	ldrh	r3, [r7, #22]
 8007194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01b      	beq.n	80071d4 <USB_EPClearStall+0x106>
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b2:	82bb      	strh	r3, [r7, #20]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	441a      	add	r2, r3
 80071be:	8abb      	ldrh	r3, [r7, #20]
 80071c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ea:	827b      	strh	r3, [r7, #18]
 80071ec:	8a7b      	ldrh	r3, [r7, #18]
 80071ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071f2:	827b      	strh	r3, [r7, #18]
 80071f4:	8a7b      	ldrh	r3, [r7, #18]
 80071f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071fa:	827b      	strh	r3, [r7, #18]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	8a7b      	ldrh	r3, [r7, #18]
 8007208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800720c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007218:	b29b      	uxth	r3, r3
 800721a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr

08007228 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d103      	bne.n	8007242 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2280      	movs	r2, #128	@ 0x80
 800723e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr

08007276 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007284:	b29b      	uxth	r3, r3
 8007286:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr

08007294 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr

080072aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b08b      	sub	sp, #44	@ 0x2c
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	4611      	mov	r1, r2
 80072b6:	461a      	mov	r2, r3
 80072b8:	460b      	mov	r3, r1
 80072ba:	80fb      	strh	r3, [r7, #6]
 80072bc:	4613      	mov	r3, r2
 80072be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80072c0:	88bb      	ldrh	r3, [r7, #4]
 80072c2:	3301      	adds	r3, #1
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	005a      	lsls	r2, r3, #1
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e2:	e01f      	b.n	8007324 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3301      	adds	r3, #1
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b21b      	sxth	r3, r3
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	b21a      	sxth	r2, r3
 80072f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	8a7a      	ldrh	r2, [r7, #18]
 8007304:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	3302      	adds	r3, #2
 800730a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	3302      	adds	r3, #2
 8007310:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	3301      	adds	r3, #1
 8007316:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	3b01      	subs	r3, #1
 8007322:	627b      	str	r3, [r7, #36]	@ 0x24
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1dc      	bne.n	80072e4 <USB_WritePMA+0x3a>
  }
}
 800732a:	bf00      	nop
 800732c:	bf00      	nop
 800732e:	372c      	adds	r7, #44	@ 0x2c
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr

08007336 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007336:	b480      	push	{r7}
 8007338:	b08b      	sub	sp, #44	@ 0x2c
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	4611      	mov	r1, r2
 8007342:	461a      	mov	r2, r3
 8007344:	460b      	mov	r3, r1
 8007346:	80fb      	strh	r3, [r7, #6]
 8007348:	4613      	mov	r3, r2
 800734a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800734c:	88bb      	ldrh	r3, [r7, #4]
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	b29b      	uxth	r3, r3
 8007352:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	005a      	lsls	r2, r3, #1
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007368:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	627b      	str	r3, [r7, #36]	@ 0x24
 800736e:	e01b      	b.n	80073a8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	3302      	adds	r3, #2
 800737c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	b2da      	uxtb	r2, r3
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	3301      	adds	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	b2da      	uxtb	r2, r3
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	3301      	adds	r3, #1
 800739a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	3302      	adds	r3, #2
 80073a0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	3b01      	subs	r3, #1
 80073a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e0      	bne.n	8007370 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80073ae:	88bb      	ldrh	r3, [r7, #4]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d007      	beq.n	80073ca <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	701a      	strb	r2, [r3, #0]
  }
}
 80073ca:	bf00      	nop
 80073cc:	372c      	adds	r7, #44	@ 0x2c
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr

080073d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7c1b      	ldrb	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d115      	bne.n	8007418 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073f0:	2202      	movs	r2, #2
 80073f2:	2181      	movs	r1, #129	@ 0x81
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 feee 	bl	80091d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007404:	2202      	movs	r2, #2
 8007406:	2101      	movs	r1, #1
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fee4 	bl	80091d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007416:	e012      	b.n	800743e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007418:	2340      	movs	r3, #64	@ 0x40
 800741a:	2202      	movs	r2, #2
 800741c:	2181      	movs	r1, #129	@ 0x81
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 fed9 	bl	80091d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800742a:	2340      	movs	r3, #64	@ 0x40
 800742c:	2202      	movs	r2, #2
 800742e:	2101      	movs	r1, #1
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fed0 	bl	80091d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800743e:	2308      	movs	r3, #8
 8007440:	2203      	movs	r2, #3
 8007442:	2182      	movs	r1, #130	@ 0x82
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 fec6 	bl	80091d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007450:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007454:	f001 ffe6 	bl	8009424 <USBD_static_malloc>
 8007458:	4602      	mov	r2, r0
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e026      	b.n	80074be <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007476:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2200      	movs	r2, #0
 8007486:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	7c1b      	ldrb	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074a4:	2101      	movs	r1, #1
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 ff85 	bl	80093b6 <USBD_LL_PrepareReceive>
 80074ac:	e007      	b.n	80074be <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074b4:	2340      	movs	r3, #64	@ 0x40
 80074b6:	2101      	movs	r1, #1
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 ff7c 	bl	80093b6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074d8:	2181      	movs	r1, #129	@ 0x81
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f001 fea1 	bl	8009222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074e6:	2101      	movs	r1, #1
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fe9a 	bl	8009222 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074f6:	2182      	movs	r1, #130	@ 0x82
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fe92 	bl	8009222 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751e:	4618      	mov	r0, r3
 8007520:	f001 ff8c 	bl	800943c <USBD_static_free>
    pdev->pClassData = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007546:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800755c:	2b00      	cmp	r3, #0
 800755e:	d039      	beq.n	80075d4 <USBD_CDC_Setup+0x9e>
 8007560:	2b20      	cmp	r3, #32
 8007562:	d17f      	bne.n	8007664 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	88db      	ldrh	r3, [r3, #6]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d029      	beq.n	80075c0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b25b      	sxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	da11      	bge.n	800759a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007582:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	88d2      	ldrh	r2, [r2, #6]
 8007588:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800758a:	6939      	ldr	r1, [r7, #16]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	88db      	ldrh	r3, [r3, #6]
 8007590:	461a      	mov	r2, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 fa06 	bl	80089a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007598:	e06b      	b.n	8007672 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785a      	ldrb	r2, [r3, #1]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	88db      	ldrh	r3, [r3, #6]
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075b0:	6939      	ldr	r1, [r7, #16]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	88db      	ldrh	r3, [r3, #6]
 80075b6:	461a      	mov	r2, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f001 fa21 	bl	8008a00 <USBD_CtlPrepareRx>
      break;
 80075be:	e058      	b.n	8007672 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	7850      	ldrb	r0, [r2, #1]
 80075cc:	2200      	movs	r2, #0
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	4798      	blx	r3
      break;
 80075d2:	e04e      	b.n	8007672 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b0b      	cmp	r3, #11
 80075da:	d02e      	beq.n	800763a <USBD_CDC_Setup+0x104>
 80075dc:	2b0b      	cmp	r3, #11
 80075de:	dc38      	bgt.n	8007652 <USBD_CDC_Setup+0x11c>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <USBD_CDC_Setup+0xb4>
 80075e4:	2b0a      	cmp	r3, #10
 80075e6:	d014      	beq.n	8007612 <USBD_CDC_Setup+0xdc>
 80075e8:	e033      	b.n	8007652 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d107      	bne.n	8007604 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80075f4:	f107 030c 	add.w	r3, r7, #12
 80075f8:	2202      	movs	r2, #2
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f9d1 	bl	80089a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007602:	e02e      	b.n	8007662 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f001 f962 	bl	80088d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800760c:	2302      	movs	r3, #2
 800760e:	75fb      	strb	r3, [r7, #23]
          break;
 8007610:	e027      	b.n	8007662 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007618:	2b03      	cmp	r3, #3
 800761a:	d107      	bne.n	800762c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800761c:	f107 030f 	add.w	r3, r7, #15
 8007620:	2201      	movs	r2, #1
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 f9bd 	bl	80089a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800762a:	e01a      	b.n	8007662 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f94e 	bl	80088d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007634:	2302      	movs	r3, #2
 8007636:	75fb      	strb	r3, [r7, #23]
          break;
 8007638:	e013      	b.n	8007662 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007640:	2b03      	cmp	r3, #3
 8007642:	d00d      	beq.n	8007660 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 f942 	bl	80088d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800764c:	2302      	movs	r3, #2
 800764e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007650:	e006      	b.n	8007660 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f93b 	bl	80088d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800765a:	2302      	movs	r3, #2
 800765c:	75fb      	strb	r3, [r7, #23]
          break;
 800765e:	e000      	b.n	8007662 <USBD_CDC_Setup+0x12c>
          break;
 8007660:	bf00      	nop
      }
      break;
 8007662:	e006      	b.n	8007672 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f932 	bl	80088d0 <USBD_CtlError>
      ret = USBD_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	75fb      	strb	r3, [r7, #23]
      break;
 8007670:	bf00      	nop
  }

  return ret;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800768e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007696:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d03a      	beq.n	8007718 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	331c      	adds	r3, #28
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d029      	beq.n	800770c <USBD_CDC_DataIn+0x90>
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	331c      	adds	r3, #28
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	78f9      	ldrb	r1, [r7, #3]
 80076cc:	68b8      	ldr	r0, [r7, #8]
 80076ce:	460b      	mov	r3, r1
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	4403      	add	r3, r0
 80076d8:	3320      	adds	r3, #32
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d110      	bne.n	800770c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80076ea:	78fa      	ldrb	r2, [r7, #3]
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	331c      	adds	r3, #28
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076fe:	78f9      	ldrb	r1, [r7, #3]
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fe33 	bl	8009370 <USBD_LL_Transmit>
 800770a:	e003      	b.n	8007714 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	460b      	mov	r3, r1
 800772c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007734:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fe5e 	bl	80093fc <USBD_LL_GetRxDataSize>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007766:	4611      	mov	r1, r2
 8007768:	4798      	blx	r3

    return USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	e000      	b.n	8007770 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800776e:	2302      	movs	r3, #2
  }
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007786:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800778e:	2b00      	cmp	r3, #0
 8007790:	d014      	beq.n	80077bc <USBD_CDC_EP0_RxReady+0x44>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007798:	2bff      	cmp	r3, #255	@ 0xff
 800779a:	d00f      	beq.n	80077bc <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80077aa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	22ff      	movs	r2, #255	@ 0xff
 80077b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2243      	movs	r2, #67	@ 0x43
 80077d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80077d6:	4b03      	ldr	r3, [pc, #12]	@ (80077e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20000094 	.word	0x20000094

080077e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2243      	movs	r2, #67	@ 0x43
 80077f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80077f6:	4b03      	ldr	r3, [pc, #12]	@ (8007804 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000050 	.word	0x20000050

08007808 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2243      	movs	r2, #67	@ 0x43
 8007814:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007816:	4b03      	ldr	r3, [pc, #12]	@ (8007824 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	200000d8 	.word	0x200000d8

08007828 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220a      	movs	r2, #10
 8007834:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007836:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	2000000c 	.word	0x2000000c

08007848 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007888:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01c      	beq.n	8007920 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d115      	bne.n	800791c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800790e:	b29b      	uxth	r3, r3
 8007910:	2181      	movs	r1, #129	@ 0x81
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fd2c 	bl	8009370 <USBD_LL_Transmit>

      return USBD_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	e002      	b.n	8007922 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007920:	2302      	movs	r3, #2
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007938:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7c1b      	ldrb	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007952:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007956:	2101      	movs	r1, #1
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 fd2c 	bl	80093b6 <USBD_LL_PrepareReceive>
 800795e:	e007      	b.n	8007970 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007966:	2340      	movs	r3, #64	@ 0x40
 8007968:	2101      	movs	r1, #1
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fd23 	bl	80093b6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e000      	b.n	8007976 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007974:	2302      	movs	r3, #2
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	4613      	mov	r3, r2
 800798a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007992:	2302      	movs	r3, #2
 8007994:	e01a      	b.n	80079cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	79fa      	ldrb	r2, [r7, #7]
 80079c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f001 fb91 	bl	80090ec <USBD_LL_Init>

  return USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e001      	b.n	80079fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079f6:	2302      	movs	r3, #2
 80079f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bc80      	pop	{r7}
 8007a04:	4770      	bx	lr

08007a06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 fbc6 	bl	80091a0 <USBD_LL_Start>

  return USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	4611      	mov	r1, r2
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	4611      	mov	r1, r2
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3

  return USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fed8 	bl	800885e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007abc:	461a      	mov	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d016      	beq.n	8007b00 <USBD_LL_SetupStage+0x6a>
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d81c      	bhi.n	8007b10 <USBD_LL_SetupStage+0x7a>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <USBD_LL_SetupStage+0x4a>
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d008      	beq.n	8007af0 <USBD_LL_SetupStage+0x5a>
 8007ade:	e017      	b.n	8007b10 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9cb 	bl	8007e84 <USBD_StdDevReq>
      break;
 8007aee:	e01a      	b.n	8007b26 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fa2d 	bl	8007f58 <USBD_StdItfReq>
      break;
 8007afe:	e012      	b.n	8007b26 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fa6d 	bl	8007fe8 <USBD_StdEPReq>
      break;
 8007b0e:	e00a      	b.n	8007b26 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007b16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fb9e 	bl	8009260 <USBD_LL_StallEP>
      break;
 8007b24:	bf00      	nop
  }

  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d14b      	bne.n	8007bdc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b4a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d134      	bne.n	8007bc0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d919      	bls.n	8007b96 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d203      	bcs.n	8007b84 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	e002      	b.n	8007b8a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 ff54 	bl	8008a3c <USBD_CtlContinueRx>
 8007b94:	e038      	b.n	8007c08 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d105      	bne.n	8007bb8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 ff51 	bl	8008a60 <USBD_CtlSendStatus>
 8007bbe:	e023      	b.n	8007c08 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d11e      	bne.n	8007c08 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f001 fb43 	bl	8009260 <USBD_LL_StallEP>
 8007bda:	e015      	b.n	8007c08 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00d      	beq.n	8007c04 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d108      	bne.n	8007c04 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	7afa      	ldrb	r2, [r7, #11]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	4798      	blx	r3
 8007c02:	e001      	b.n	8007c08 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c04:	2302      	movs	r3, #2
 8007c06:	e000      	b.n	8007c0a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b086      	sub	sp, #24
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d17f      	bne.n	8007d26 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3314      	adds	r3, #20
 8007c2a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d15c      	bne.n	8007cf0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d915      	bls.n	8007c6e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 febe 	bl	80089dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c60:	2300      	movs	r3, #0
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 fba5 	bl	80093b6 <USBD_LL_PrepareReceive>
 8007c6c:	e04e      	b.n	8007d0c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	6912      	ldr	r2, [r2, #16]
 8007c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c7a:	fb01 f202 	mul.w	r2, r1, r2
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d11c      	bne.n	8007cbe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d316      	bcc.n	8007cbe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d20f      	bcs.n	8007cbe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 fe9a 	bl	80089dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f001 fb7d 	bl	80093b6 <USBD_LL_PrepareReceive>
 8007cbc:	e026      	b.n	8007d0c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d105      	bne.n	8007ce0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007ce0:	2180      	movs	r1, #128	@ 0x80
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f001 fabc 	bl	8009260 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fecc 	bl	8008a86 <USBD_CtlReceiveStatus>
 8007cee:	e00d      	b.n	8007d0c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d004      	beq.n	8007d04 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007d04:	2180      	movs	r1, #128	@ 0x80
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f001 faaa 	bl	8009260 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d11d      	bne.n	8007d52 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fe81 	bl	8007a1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d24:	e015      	b.n	8007d52 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00d      	beq.n	8007d4e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d108      	bne.n	8007d4e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	7afa      	ldrb	r2, [r7, #11]
 8007d46:	4611      	mov	r1, r2
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	4798      	blx	r3
 8007d4c:	e001      	b.n	8007d52 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e000      	b.n	8007d54 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d64:	2340      	movs	r3, #64	@ 0x40
 8007d66:	2200      	movs	r2, #0
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fa33 	bl	80091d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2240      	movs	r2, #64	@ 0x40
 8007d7c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d80:	2340      	movs	r3, #64	@ 0x40
 8007d82:	2200      	movs	r2, #0
 8007d84:	2180      	movs	r1, #128	@ 0x80
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fa25 	bl	80091d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2240      	movs	r2, #64	@ 0x40
 8007d96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6852      	ldr	r2, [r2, #4]
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	4611      	mov	r1, r2
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
  }

  return USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2204      	movs	r2, #4
 8007e14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d105      	bne.n	8007e42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d10b      	bne.n	8007e78 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d005      	beq.n	8007e78 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
	...

08007e84 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e9a:	2b40      	cmp	r3, #64	@ 0x40
 8007e9c:	d005      	beq.n	8007eaa <USBD_StdDevReq+0x26>
 8007e9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ea0:	d84f      	bhi.n	8007f42 <USBD_StdDevReq+0xbe>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <USBD_StdDevReq+0x36>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d14b      	bne.n	8007f42 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
      break;
 8007eb8:	e048      	b.n	8007f4c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	785b      	ldrb	r3, [r3, #1]
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d839      	bhi.n	8007f36 <USBD_StdDevReq+0xb2>
 8007ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <USBD_StdDevReq+0x44>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f2d 	.word	0x08007f2d
 8007ed0:	08007f37 	.word	0x08007f37
 8007ed4:	08007f23 	.word	0x08007f23
 8007ed8:	08007f37 	.word	0x08007f37
 8007edc:	08007efb 	.word	0x08007efb
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007f37 	.word	0x08007f37
 8007ee8:	08007f0f 	.word	0x08007f0f
 8007eec:	08007f05 	.word	0x08007f05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9dc 	bl	80082b0 <USBD_GetDescriptor>
          break;
 8007ef8:	e022      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb3f 	bl	8008580 <USBD_SetAddress>
          break;
 8007f02:	e01d      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fb7e 	bl	8008608 <USBD_SetConfig>
          break;
 8007f0c:	e018      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fc07 	bl	8008724 <USBD_GetConfig>
          break;
 8007f16:	e013      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fc37 	bl	800878e <USBD_GetStatus>
          break;
 8007f20:	e00e      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fc65 	bl	80087f4 <USBD_SetFeature>
          break;
 8007f2a:	e009      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fc74 	bl	800881c <USBD_ClrFeature>
          break;
 8007f34:	e004      	b.n	8007f40 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fcc9 	bl	80088d0 <USBD_CtlError>
          break;
 8007f3e:	bf00      	nop
      }
      break;
 8007f40:	e004      	b.n	8007f4c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fcc3 	bl	80088d0 <USBD_CtlError>
      break;
 8007f4a:	bf00      	nop
  }

  return ret;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop

08007f58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f6e:	2b40      	cmp	r3, #64	@ 0x40
 8007f70:	d005      	beq.n	8007f7e <USBD_StdItfReq+0x26>
 8007f72:	2b40      	cmp	r3, #64	@ 0x40
 8007f74:	d82e      	bhi.n	8007fd4 <USBD_StdItfReq+0x7c>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <USBD_StdItfReq+0x26>
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d12a      	bne.n	8007fd4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	3b01      	subs	r3, #1
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d81d      	bhi.n	8007fc6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	889b      	ldrh	r3, [r3, #4]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d813      	bhi.n	8007fbc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	88db      	ldrh	r3, [r3, #6]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d110      	bne.n	8007fd0 <USBD_StdItfReq+0x78>
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10d      	bne.n	8007fd0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fd53 	bl	8008a60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fba:	e009      	b.n	8007fd0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc86 	bl	80088d0 <USBD_CtlError>
          break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc81 	bl	80088d0 <USBD_CtlError>
          break;
 8007fce:	e000      	b.n	8007fd2 <USBD_StdItfReq+0x7a>
          break;
 8007fd0:	bf00      	nop
      }
      break;
 8007fd2:	e004      	b.n	8007fde <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fc7a 	bl	80088d0 <USBD_CtlError>
      break;
 8007fdc:	bf00      	nop
  }

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	889b      	ldrh	r3, [r3, #4]
 8007ffa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008004:	2b40      	cmp	r3, #64	@ 0x40
 8008006:	d007      	beq.n	8008018 <USBD_StdEPReq+0x30>
 8008008:	2b40      	cmp	r3, #64	@ 0x40
 800800a:	f200 8146 	bhi.w	800829a <USBD_StdEPReq+0x2b2>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <USBD_StdEPReq+0x40>
 8008012:	2b20      	cmp	r3, #32
 8008014:	f040 8141 	bne.w	800829a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      break;
 8008026:	e13d      	b.n	80082a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008030:	2b20      	cmp	r3, #32
 8008032:	d10a      	bne.n	800804a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	e12d      	b.n	80082a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b03      	cmp	r3, #3
 8008050:	d007      	beq.n	8008062 <USBD_StdEPReq+0x7a>
 8008052:	2b03      	cmp	r3, #3
 8008054:	f300 811b 	bgt.w	800828e <USBD_StdEPReq+0x2a6>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d072      	beq.n	8008142 <USBD_StdEPReq+0x15a>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d03a      	beq.n	80080d6 <USBD_StdEPReq+0xee>
 8008060:	e115      	b.n	800828e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008068:	2b02      	cmp	r3, #2
 800806a:	d002      	beq.n	8008072 <USBD_StdEPReq+0x8a>
 800806c:	2b03      	cmp	r3, #3
 800806e:	d015      	beq.n	800809c <USBD_StdEPReq+0xb4>
 8008070:	e02b      	b.n	80080ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00c      	beq.n	8008092 <USBD_StdEPReq+0xaa>
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b80      	cmp	r3, #128	@ 0x80
 800807c:	d009      	beq.n	8008092 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 f8ec 	bl	8009260 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008088:	2180      	movs	r1, #128	@ 0x80
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f8e8 	bl	8009260 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008090:	e020      	b.n	80080d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fc1b 	bl	80088d0 <USBD_CtlError>
              break;
 800809a:	e01b      	b.n	80080d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	885b      	ldrh	r3, [r3, #2]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10e      	bne.n	80080c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <USBD_StdEPReq+0xda>
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	2b80      	cmp	r3, #128	@ 0x80
 80080ae:	d008      	beq.n	80080c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	88db      	ldrh	r3, [r3, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f8cf 	bl	8009260 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fccc 	bl	8008a60 <USBD_CtlSendStatus>

              break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fbff 	bl	80088d0 <USBD_CtlError>
              break;
 80080d2:	bf00      	nop
          }
          break;
 80080d4:	e0e0      	b.n	8008298 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d002      	beq.n	80080e6 <USBD_StdEPReq+0xfe>
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d015      	beq.n	8008110 <USBD_StdEPReq+0x128>
 80080e4:	e026      	b.n	8008134 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00c      	beq.n	8008106 <USBD_StdEPReq+0x11e>
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b80      	cmp	r3, #128	@ 0x80
 80080f0:	d009      	beq.n	8008106 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 f8b2 	bl	8009260 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080fc:	2180      	movs	r1, #128	@ 0x80
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 f8ae 	bl	8009260 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008104:	e01c      	b.n	8008140 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fbe1 	bl	80088d0 <USBD_CtlError>
              break;
 800810e:	e017      	b.n	8008140 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	885b      	ldrh	r3, [r3, #2]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d112      	bne.n	800813e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800811e:	2b00      	cmp	r3, #0
 8008120:	d004      	beq.n	800812c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 f8b9 	bl	800929e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fc97 	bl	8008a60 <USBD_CtlSendStatus>
              }
              break;
 8008132:	e004      	b.n	800813e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fbca 	bl	80088d0 <USBD_CtlError>
              break;
 800813c:	e000      	b.n	8008140 <USBD_StdEPReq+0x158>
              break;
 800813e:	bf00      	nop
          }
          break;
 8008140:	e0aa      	b.n	8008298 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008148:	2b02      	cmp	r3, #2
 800814a:	d002      	beq.n	8008152 <USBD_StdEPReq+0x16a>
 800814c:	2b03      	cmp	r3, #3
 800814e:	d032      	beq.n	80081b6 <USBD_StdEPReq+0x1ce>
 8008150:	e097      	b.n	8008282 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <USBD_StdEPReq+0x180>
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b80      	cmp	r3, #128	@ 0x80
 800815c:	d004      	beq.n	8008168 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fbb5 	bl	80088d0 <USBD_CtlError>
                break;
 8008166:	e091      	b.n	800828c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	da0b      	bge.n	8008188 <USBD_StdEPReq+0x1a0>
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	3310      	adds	r3, #16
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	3304      	adds	r3, #4
 8008186:	e00b      	b.n	80081a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	3304      	adds	r3, #4
 80081a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2202      	movs	r2, #2
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fbf8 	bl	80089a4 <USBD_CtlSendData>
              break;
 80081b4:	e06a      	b.n	800828c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da11      	bge.n	80081e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	f003 020f 	and.w	r2, r3, #15
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	3318      	adds	r3, #24
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d117      	bne.n	8008208 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fb78 	bl	80088d0 <USBD_CtlError>
                  break;
 80081e0:	e054      	b.n	800828c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	f003 020f 	and.w	r2, r3, #15
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fb65 	bl	80088d0 <USBD_CtlError>
                  break;
 8008206:	e041      	b.n	800828c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da0b      	bge.n	8008228 <USBD_StdEPReq+0x240>
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	3310      	adds	r3, #16
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	4413      	add	r3, r2
 8008224:	3304      	adds	r3, #4
 8008226:	e00b      	b.n	8008240 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	3304      	adds	r3, #4
 8008240:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <USBD_StdEPReq+0x266>
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b80      	cmp	r3, #128	@ 0x80
 800824c:	d103      	bne.n	8008256 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e00e      	b.n	8008274 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 f83e 	bl	80092dc <USBD_LL_IsStallEP>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	e002      	b.n	8008274 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2202      	movs	r2, #2
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb92 	bl	80089a4 <USBD_CtlSendData>
              break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fb23 	bl	80088d0 <USBD_CtlError>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e004      	b.n	8008298 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb1d 	bl	80088d0 <USBD_CtlError>
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e004      	b.n	80082a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb17 	bl	80088d0 <USBD_CtlError>
      break;
 80082a2:	bf00      	nop
  }

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	885b      	ldrh	r3, [r3, #2]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b01      	subs	r3, #1
 80082d0:	2b06      	cmp	r3, #6
 80082d2:	f200 8128 	bhi.w	8008526 <USBD_GetDescriptor+0x276>
 80082d6:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <USBD_GetDescriptor+0x2c>)
 80082d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082dc:	080082f9 	.word	0x080082f9
 80082e0:	08008311 	.word	0x08008311
 80082e4:	08008351 	.word	0x08008351
 80082e8:	08008527 	.word	0x08008527
 80082ec:	08008527 	.word	0x08008527
 80082f0:	080084c7 	.word	0x080084c7
 80082f4:	080084f3 	.word	0x080084f3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	7c12      	ldrb	r2, [r2, #16]
 8008304:	f107 0108 	add.w	r1, r7, #8
 8008308:	4610      	mov	r0, r2
 800830a:	4798      	blx	r3
 800830c:	60f8      	str	r0, [r7, #12]
      break;
 800830e:	e112      	b.n	8008536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7c1b      	ldrb	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10d      	bne.n	8008334 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	f107 0208 	add.w	r2, r7, #8
 8008324:	4610      	mov	r0, r2
 8008326:	4798      	blx	r3
 8008328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	2202      	movs	r2, #2
 8008330:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008332:	e100      	b.n	8008536 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	f107 0208 	add.w	r2, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	2202      	movs	r2, #2
 800834c:	701a      	strb	r2, [r3, #0]
      break;
 800834e:	e0f2      	b.n	8008536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	885b      	ldrh	r3, [r3, #2]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b05      	cmp	r3, #5
 8008358:	f200 80ac 	bhi.w	80084b4 <USBD_GetDescriptor+0x204>
 800835c:	a201      	add	r2, pc, #4	@ (adr r2, 8008364 <USBD_GetDescriptor+0xb4>)
 800835e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008362:	bf00      	nop
 8008364:	0800837d 	.word	0x0800837d
 8008368:	080083b1 	.word	0x080083b1
 800836c:	080083e5 	.word	0x080083e5
 8008370:	08008419 	.word	0x08008419
 8008374:	0800844d 	.word	0x0800844d
 8008378:	08008481 	.word	0x08008481
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e091      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa94 	bl	80088d0 <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e089      	b.n	80084c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e077      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa7a 	bl	80088d0 <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e06f      	b.n	80084c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e05d      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa60 	bl	80088d0 <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e055      	b.n	80084c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7c12      	ldrb	r2, [r2, #16]
 8008430:	f107 0108 	add.w	r1, r7, #8
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843a:	e043      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa46 	bl	80088d0 <USBD_CtlError>
            err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
          break;
 800844a:	e03b      	b.n	80084c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	7c12      	ldrb	r2, [r2, #16]
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846e:	e029      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa2c 	bl	80088d0 <USBD_CtlError>
            err++;
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	3301      	adds	r3, #1
 800847c:	72fb      	strb	r3, [r7, #11]
          break;
 800847e:	e021      	b.n	80084c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00b      	beq.n	80084a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	7c12      	ldrb	r2, [r2, #16]
 8008498:	f107 0108 	add.w	r1, r7, #8
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
 80084a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a2:	e00f      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa12 	bl	80088d0 <USBD_CtlError>
            err++;
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	3301      	adds	r3, #1
 80084b0:	72fb      	strb	r3, [r7, #11]
          break;
 80084b2:	e007      	b.n	80084c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa0a 	bl	80088d0 <USBD_CtlError>
          err++;
 80084bc:	7afb      	ldrb	r3, [r7, #11]
 80084be:	3301      	adds	r3, #1
 80084c0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084c2:	e038      	b.n	8008536 <USBD_GetDescriptor+0x286>
 80084c4:	e037      	b.n	8008536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	7c1b      	ldrb	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d6:	f107 0208 	add.w	r2, r7, #8
 80084da:	4610      	mov	r0, r2
 80084dc:	4798      	blx	r3
 80084de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e0:	e029      	b.n	8008536 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f9f3 	bl	80088d0 <USBD_CtlError>
        err++;
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	3301      	adds	r3, #1
 80084ee:	72fb      	strb	r3, [r7, #11]
      break;
 80084f0:	e021      	b.n	8008536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	7c1b      	ldrb	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10d      	bne.n	8008516 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008502:	f107 0208 	add.w	r2, r7, #8
 8008506:	4610      	mov	r0, r2
 8008508:	4798      	blx	r3
 800850a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3301      	adds	r3, #1
 8008510:	2207      	movs	r2, #7
 8008512:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008514:	e00f      	b.n	8008536 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f9d9 	bl	80088d0 <USBD_CtlError>
        err++;
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	3301      	adds	r3, #1
 8008522:	72fb      	strb	r3, [r7, #11]
      break;
 8008524:	e007      	b.n	8008536 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f9d1 	bl	80088d0 <USBD_CtlError>
      err++;
 800852e:	7afb      	ldrb	r3, [r7, #11]
 8008530:	3301      	adds	r3, #1
 8008532:	72fb      	strb	r3, [r7, #11]
      break;
 8008534:	bf00      	nop
  }

  if (err != 0U)
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d11c      	bne.n	8008576 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800853c:	893b      	ldrh	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d011      	beq.n	8008566 <USBD_GetDescriptor+0x2b6>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	88db      	ldrh	r3, [r3, #6]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00d      	beq.n	8008566 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88da      	ldrh	r2, [r3, #6]
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	4293      	cmp	r3, r2
 8008552:	bf28      	it	cs
 8008554:	4613      	movcs	r3, r2
 8008556:	b29b      	uxth	r3, r3
 8008558:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800855a:	893b      	ldrh	r3, [r7, #8]
 800855c:	461a      	mov	r2, r3
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa1f 	bl	80089a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	88db      	ldrh	r3, [r3, #6]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa76 	bl	8008a60 <USBD_CtlSendStatus>
 8008574:	e000      	b.n	8008578 <USBD_GetDescriptor+0x2c8>
    return;
 8008576:	bf00      	nop
    }
  }
}
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop

08008580 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d130      	bne.n	80085f4 <USBD_SetAddress+0x74>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d12c      	bne.n	80085f4 <USBD_SetAddress+0x74>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	885b      	ldrh	r3, [r3, #2]
 800859e:	2b7f      	cmp	r3, #127	@ 0x7f
 80085a0:	d828      	bhi.n	80085f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d104      	bne.n	80085c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f988 	bl	80088d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c0:	e01d      	b.n	80085fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	7bfa      	ldrb	r2, [r7, #15]
 80085c6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 feaf 	bl	8009332 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fa43 	bl	8008a60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e8:	e009      	b.n	80085fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f2:	e004      	b.n	80085fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f96a 	bl	80088d0 <USBD_CtlError>
  }
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	b2da      	uxtb	r2, r3
 8008618:	4b41      	ldr	r3, [pc, #260]	@ (8008720 <USBD_SetConfig+0x118>)
 800861a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800861c:	4b40      	ldr	r3, [pc, #256]	@ (8008720 <USBD_SetConfig+0x118>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d904      	bls.n	800862e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f952 	bl	80088d0 <USBD_CtlError>
 800862c:	e075      	b.n	800871a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008634:	2b02      	cmp	r3, #2
 8008636:	d002      	beq.n	800863e <USBD_SetConfig+0x36>
 8008638:	2b03      	cmp	r3, #3
 800863a:	d023      	beq.n	8008684 <USBD_SetConfig+0x7c>
 800863c:	e062      	b.n	8008704 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800863e:	4b38      	ldr	r3, [pc, #224]	@ (8008720 <USBD_SetConfig+0x118>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01a      	beq.n	800867c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008646:	4b36      	ldr	r3, [pc, #216]	@ (8008720 <USBD_SetConfig+0x118>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2203      	movs	r2, #3
 8008654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008658:	4b31      	ldr	r3, [pc, #196]	@ (8008720 <USBD_SetConfig+0x118>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff f9e7 	bl	8007a32 <USBD_SetClassConfig>
 8008664:	4603      	mov	r3, r0
 8008666:	2b02      	cmp	r3, #2
 8008668:	d104      	bne.n	8008674 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f92f 	bl	80088d0 <USBD_CtlError>
            return;
 8008672:	e052      	b.n	800871a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9f3 	bl	8008a60 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800867a:	e04e      	b.n	800871a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f9ef 	bl	8008a60 <USBD_CtlSendStatus>
        break;
 8008682:	e04a      	b.n	800871a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008684:	4b26      	ldr	r3, [pc, #152]	@ (8008720 <USBD_SetConfig+0x118>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d112      	bne.n	80086b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008694:	4b22      	ldr	r3, [pc, #136]	@ (8008720 <USBD_SetConfig+0x118>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800869e:	4b20      	ldr	r3, [pc, #128]	@ (8008720 <USBD_SetConfig+0x118>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff f9e3 	bl	8007a70 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f9d8 	bl	8008a60 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086b0:	e033      	b.n	800871a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <USBD_SetConfig+0x118>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d01d      	beq.n	80086fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff f9d1 	bl	8007a70 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086ce:	4b14      	ldr	r3, [pc, #80]	@ (8008720 <USBD_SetConfig+0x118>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086d8:	4b11      	ldr	r3, [pc, #68]	@ (8008720 <USBD_SetConfig+0x118>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff f9a7 	bl	8007a32 <USBD_SetClassConfig>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d104      	bne.n	80086f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f8ef 	bl	80088d0 <USBD_CtlError>
            return;
 80086f2:	e012      	b.n	800871a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f9b3 	bl	8008a60 <USBD_CtlSendStatus>
        break;
 80086fa:	e00e      	b.n	800871a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9af 	bl	8008a60 <USBD_CtlSendStatus>
        break;
 8008702:	e00a      	b.n	800871a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f8e2 	bl	80088d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800870c:	4b04      	ldr	r3, [pc, #16]	@ (8008720 <USBD_SetConfig+0x118>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f9ac 	bl	8007a70 <USBD_ClrClassConfig>
        break;
 8008718:	bf00      	nop
    }
  }
}
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	200004d8 	.word	0x200004d8

08008724 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	88db      	ldrh	r3, [r3, #6]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d004      	beq.n	8008740 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8c9 	bl	80088d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800873e:	e022      	b.n	8008786 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008746:	2b02      	cmp	r3, #2
 8008748:	dc02      	bgt.n	8008750 <USBD_GetConfig+0x2c>
 800874a:	2b00      	cmp	r3, #0
 800874c:	dc03      	bgt.n	8008756 <USBD_GetConfig+0x32>
 800874e:	e015      	b.n	800877c <USBD_GetConfig+0x58>
 8008750:	2b03      	cmp	r3, #3
 8008752:	d00b      	beq.n	800876c <USBD_GetConfig+0x48>
 8008754:	e012      	b.n	800877c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3308      	adds	r3, #8
 8008760:	2201      	movs	r2, #1
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f91d 	bl	80089a4 <USBD_CtlSendData>
        break;
 800876a:	e00c      	b.n	8008786 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	2201      	movs	r2, #1
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f915 	bl	80089a4 <USBD_CtlSendData>
        break;
 800877a:	e004      	b.n	8008786 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f8a6 	bl	80088d0 <USBD_CtlError>
        break;
 8008784:	bf00      	nop
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879e:	3b01      	subs	r3, #1
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d81e      	bhi.n	80087e2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	88db      	ldrh	r3, [r3, #6]
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d004      	beq.n	80087b6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f88e 	bl	80088d0 <USBD_CtlError>
        break;
 80087b4:	e01a      	b.n	80087ec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f043 0202 	orr.w	r2, r3, #2
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	330c      	adds	r3, #12
 80087d6:	2202      	movs	r2, #2
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f8e2 	bl	80089a4 <USBD_CtlSendData>
      break;
 80087e0:	e004      	b.n	80087ec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f873 	bl	80088d0 <USBD_CtlError>
      break;
 80087ea:	bf00      	nop
  }
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	885b      	ldrh	r3, [r3, #2]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d106      	bne.n	8008814 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f926 	bl	8008a60 <USBD_CtlSendStatus>
  }
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800882c:	3b01      	subs	r3, #1
 800882e:	2b02      	cmp	r3, #2
 8008830:	d80b      	bhi.n	800884a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d10c      	bne.n	8008854 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f90c 	bl	8008a60 <USBD_CtlSendStatus>
      }
      break;
 8008848:	e004      	b.n	8008854 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f83f 	bl	80088d0 <USBD_CtlError>
      break;
 8008852:	e000      	b.n	8008856 <USBD_ClrFeature+0x3a>
      break;
 8008854:	bf00      	nop
  }
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781a      	ldrb	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	785a      	ldrb	r2, [r3, #1]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	3302      	adds	r3, #2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	3303      	adds	r3, #3
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	b29b      	uxth	r3, r3
 800888a:	4413      	add	r3, r2
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	3304      	adds	r3, #4
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	3305      	adds	r3, #5
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	4413      	add	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	3306      	adds	r3, #6
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3307      	adds	r3, #7
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	b29b      	uxth	r3, r3
 80088be:	4413      	add	r3, r2
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	80da      	strh	r2, [r3, #6]

}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bc80      	pop	{r7}
 80088ce:	4770      	bx	lr

080088d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088da:	2180      	movs	r1, #128	@ 0x80
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fcbf 	bl	8009260 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fcbb 	bl	8009260 <USBD_LL_StallEP>
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d032      	beq.n	800896e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f834 	bl	8008976 <USBD_GetLen>
 800890e:	4603      	mov	r3, r0
 8008910:	3301      	adds	r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	75fa      	strb	r2, [r7, #23]
 8008922:	461a      	mov	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4413      	add	r3, r2
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7812      	ldrb	r2, [r2, #0]
 800892c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	75fa      	strb	r2, [r7, #23]
 8008934:	461a      	mov	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	4413      	add	r3, r2
 800893a:	2203      	movs	r2, #3
 800893c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800893e:	e012      	b.n	8008966 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	60fa      	str	r2, [r7, #12]
 8008946:	7dfa      	ldrb	r2, [r7, #23]
 8008948:	1c51      	adds	r1, r2, #1
 800894a:	75f9      	strb	r1, [r7, #23]
 800894c:	4611      	mov	r1, r2
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	440a      	add	r2, r1
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	75fa      	strb	r2, [r7, #23]
 800895c:	461a      	mov	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e8      	bne.n	8008940 <USBD_GetString+0x4e>
    }
  }
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008982:	e005      	b.n	8008990 <USBD_GetLen+0x1a>
  {
    len++;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	3301      	adds	r3, #1
 8008988:	73fb      	strb	r3, [r7, #15]
    buf++;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3301      	adds	r3, #1
 800898e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1f5      	bne.n	8008984 <USBD_GetLen+0xe>
  }

  return len;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr

080089a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2202      	movs	r2, #2
 80089b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089c0:	88fa      	ldrh	r2, [r7, #6]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	2100      	movs	r1, #0
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 fccf 	bl	8009370 <USBD_LL_Transmit>

  return USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089ea:	88fb      	ldrh	r3, [r7, #6]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fcbd 	bl	8009370 <USBD_LL_Transmit>

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2203      	movs	r2, #3
 8008a12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a1e:	88fa      	ldrh	r2, [r7, #6]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 fcc2 	bl	80093b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	4613      	mov	r3, r2
 8008a48:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a4a:	88fb      	ldrh	r3, [r7, #6]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	2100      	movs	r1, #0
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fcb0 	bl	80093b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2204      	movs	r2, #4
 8008a6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a70:	2300      	movs	r3, #0
 8008a72:	2200      	movs	r2, #0
 8008a74:	2100      	movs	r1, #0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fc7a 	bl	8009370 <USBD_LL_Transmit>

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2205      	movs	r2, #5
 8008a92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a96:	2300      	movs	r3, #0
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc8a 	bl	80093b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4912      	ldr	r1, [pc, #72]	@ (8008afc <MX_USB_DEVICE_Init+0x50>)
 8008ab4:	4812      	ldr	r0, [pc, #72]	@ (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008ab6:	f7fe ff62 	bl	800797e <USBD_Init>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ac0:	f7f7 ffe4 	bl	8000a8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ac4:	490f      	ldr	r1, [pc, #60]	@ (8008b04 <MX_USB_DEVICE_Init+0x58>)
 8008ac6:	480e      	ldr	r0, [pc, #56]	@ (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008ac8:	f7fe ff84 	bl	80079d4 <USBD_RegisterClass>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ad2:	f7f7 ffdb 	bl	8000a8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ad6:	490c      	ldr	r1, [pc, #48]	@ (8008b08 <MX_USB_DEVICE_Init+0x5c>)
 8008ad8:	4809      	ldr	r0, [pc, #36]	@ (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008ada:	f7fe feb5 	bl	8007848 <USBD_CDC_RegisterInterface>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ae4:	f7f7 ffd2 	bl	8000a8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ae8:	4805      	ldr	r0, [pc, #20]	@ (8008b00 <MX_USB_DEVICE_Init+0x54>)
 8008aea:	f7fe ff8c 	bl	8007a06 <USBD_Start>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008af4:	f7f7 ffca 	bl	8000a8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008af8:	bf00      	nop
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20000134 	.word	0x20000134
 8008b00:	200004dc 	.word	0x200004dc
 8008b04:	20000018 	.word	0x20000018
 8008b08:	20000124 	.word	0x20000124

08008b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b10:	2200      	movs	r2, #0
 8008b12:	4905      	ldr	r1, [pc, #20]	@ (8008b28 <CDC_Init_FS+0x1c>)
 8008b14:	4805      	ldr	r0, [pc, #20]	@ (8008b2c <CDC_Init_FS+0x20>)
 8008b16:	f7fe fead 	bl	8007874 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b1a:	4905      	ldr	r1, [pc, #20]	@ (8008b30 <CDC_Init_FS+0x24>)
 8008b1c:	4803      	ldr	r0, [pc, #12]	@ (8008b2c <CDC_Init_FS+0x20>)
 8008b1e:	f7fe fec2 	bl	80078a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000ba0 	.word	0x20000ba0
 8008b2c:	200004dc 	.word	0x200004dc
 8008b30:	200007a0 	.word	0x200007a0

08008b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
	...

08008b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	6039      	str	r1, [r7, #0]
 8008b4e:	71fb      	strb	r3, [r7, #7]
 8008b50:	4613      	mov	r3, r2
 8008b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	2b23      	cmp	r3, #35	@ 0x23
 8008b58:	f200 8098 	bhi.w	8008c8c <CDC_Control_FS+0x148>
 8008b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b64 <CDC_Control_FS+0x20>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008c8d 	.word	0x08008c8d
 8008b68:	08008c8d 	.word	0x08008c8d
 8008b6c:	08008c8d 	.word	0x08008c8d
 8008b70:	08008c8d 	.word	0x08008c8d
 8008b74:	08008c8d 	.word	0x08008c8d
 8008b78:	08008c8d 	.word	0x08008c8d
 8008b7c:	08008c8d 	.word	0x08008c8d
 8008b80:	08008c8d 	.word	0x08008c8d
 8008b84:	08008c8d 	.word	0x08008c8d
 8008b88:	08008c8d 	.word	0x08008c8d
 8008b8c:	08008c8d 	.word	0x08008c8d
 8008b90:	08008c8d 	.word	0x08008c8d
 8008b94:	08008c8d 	.word	0x08008c8d
 8008b98:	08008c8d 	.word	0x08008c8d
 8008b9c:	08008c8d 	.word	0x08008c8d
 8008ba0:	08008c8d 	.word	0x08008c8d
 8008ba4:	08008c8d 	.word	0x08008c8d
 8008ba8:	08008c8d 	.word	0x08008c8d
 8008bac:	08008c8d 	.word	0x08008c8d
 8008bb0:	08008c8d 	.word	0x08008c8d
 8008bb4:	08008c8d 	.word	0x08008c8d
 8008bb8:	08008c8d 	.word	0x08008c8d
 8008bbc:	08008c8d 	.word	0x08008c8d
 8008bc0:	08008c8d 	.word	0x08008c8d
 8008bc4:	08008c8d 	.word	0x08008c8d
 8008bc8:	08008c8d 	.word	0x08008c8d
 8008bcc:	08008c8d 	.word	0x08008c8d
 8008bd0:	08008c8d 	.word	0x08008c8d
 8008bd4:	08008c8d 	.word	0x08008c8d
 8008bd8:	08008c8d 	.word	0x08008c8d
 8008bdc:	08008c8d 	.word	0x08008c8d
 8008be0:	08008c8d 	.word	0x08008c8d
 8008be4:	08008bf5 	.word	0x08008bf5
 8008be8:	08008c39 	.word	0x08008c39
 8008bec:	08008c8d 	.word	0x08008c8d
 8008bf0:	08008c8d 	.word	0x08008c8d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	431a      	orrs	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	3302      	adds	r3, #2
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	041b      	lsls	r3, r3, #16
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	3303      	adds	r3, #3
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	061b      	lsls	r3, r3, #24
 8008c16:	4313      	orrs	r3, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4b20      	ldr	r3, [pc, #128]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c1c:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	791a      	ldrb	r2, [r3, #4]
 8008c22:	4b1e      	ldr	r3, [pc, #120]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c24:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	795a      	ldrb	r2, [r3, #5]
 8008c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c2c:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	799a      	ldrb	r2, [r3, #6]
 8008c32:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c34:	719a      	strb	r2, [r3, #6]
    break;
 8008c36:	e02a      	b.n	8008c8e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008c38:	4b18      	ldr	r3, [pc, #96]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008c42:	4b16      	ldr	r3, [pc, #88]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	0a1a      	lsrs	r2, r3, #8
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b2d2      	uxtb	r2, r2
 8008c4e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008c50:	4b12      	ldr	r3, [pc, #72]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	0c1a      	lsrs	r2, r3, #16
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	3302      	adds	r3, #2
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	0e1a      	lsrs	r2, r3, #24
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	3303      	adds	r3, #3
 8008c68:	b2d2      	uxtb	r2, r2
 8008c6a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4a0a      	ldr	r2, [pc, #40]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c72:	7912      	ldrb	r2, [r2, #4]
 8008c74:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	3305      	adds	r3, #5
 8008c7a:	4a08      	ldr	r2, [pc, #32]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c7c:	7952      	ldrb	r2, [r2, #5]
 8008c7e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	3306      	adds	r3, #6
 8008c84:	4a05      	ldr	r2, [pc, #20]	@ (8008c9c <CDC_Control_FS+0x158>)
 8008c86:	7992      	ldrb	r2, [r2, #6]
 8008c88:	701a      	strb	r2, [r3, #0]
    break;
 8008c8a:	e000      	b.n	8008c8e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c8c:	bf00      	nop
  }

  return (USBD_OK);
 8008c8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	2000011c 	.word	0x2000011c

08008ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <CDC_Receive_FS+0x3c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cdc <CDC_Receive_FS+0x3c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	6812      	ldr	r2, [r2, #0]
 8008cba:	b292      	uxth	r2, r2
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4806      	ldr	r0, [pc, #24]	@ (8008ce0 <CDC_Receive_FS+0x40>)
 8008cc6:	f7fe fdee 	bl	80078a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cca:	4805      	ldr	r0, [pc, #20]	@ (8008ce0 <CDC_Receive_FS+0x40>)
 8008ccc:	f7fe fe2d 	bl	800792a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000fa0 	.word	0x20000fa0
 8008ce0:	200004dc 	.word	0x200004dc

08008ce4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	460b      	mov	r3, r1
 8008cee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8008d2c <CDC_Transmit_FS+0x48>)
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e00b      	b.n	8008d22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d0a:	887b      	ldrh	r3, [r7, #2]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4806      	ldr	r0, [pc, #24]	@ (8008d2c <CDC_Transmit_FS+0x48>)
 8008d12:	f7fe fdaf 	bl	8007874 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d16:	4805      	ldr	r0, [pc, #20]	@ (8008d2c <CDC_Transmit_FS+0x48>)
 8008d18:	f7fe fdd8 	bl	80078cc <USBD_CDC_TransmitPacket>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200004dc 	.word	0x200004dc

08008d30 <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8008d38:	4a03      	ldr	r2, [pc, #12]	@ (8008d48 <CDC_AttachRxData+0x18>)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6013      	str	r3, [r2, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr
 8008d48:	20000fa0 	.word	0x20000fa0

08008d4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2212      	movs	r2, #18
 8008d5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d5e:	4b03      	ldr	r3, [pc, #12]	@ (8008d6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	20000150 	.word	0x20000150

08008d70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2204      	movs	r2, #4
 8008d80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d82:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	20000164 	.word	0x20000164

08008d94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	4907      	ldr	r1, [pc, #28]	@ (8008dc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008daa:	4808      	ldr	r0, [pc, #32]	@ (8008dcc <USBD_FS_ProductStrDescriptor+0x38>)
 8008dac:	f7ff fda1 	bl	80088f2 <USBD_GetString>
 8008db0:	e004      	b.n	8008dbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4904      	ldr	r1, [pc, #16]	@ (8008dc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008db6:	4805      	ldr	r0, [pc, #20]	@ (8008dcc <USBD_FS_ProductStrDescriptor+0x38>)
 8008db8:	f7ff fd9b 	bl	80088f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dbc:	4b02      	ldr	r3, [pc, #8]	@ (8008dc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000fa4 	.word	0x20000fa4
 8008dcc:	08009e44 	.word	0x08009e44

08008dd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	4904      	ldr	r1, [pc, #16]	@ (8008df0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008de0:	4804      	ldr	r0, [pc, #16]	@ (8008df4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008de2:	f7ff fd86 	bl	80088f2 <USBD_GetString>
  return USBD_StrDesc;
 8008de6:	4b02      	ldr	r3, [pc, #8]	@ (8008df0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20000fa4 	.word	0x20000fa4
 8008df4:	08009e5c 	.word	0x08009e5c

08008df8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	221a      	movs	r2, #26
 8008e08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e0a:	f000 f843 	bl	8008e94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e0e:	4b02      	ldr	r3, [pc, #8]	@ (8008e18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000168 	.word	0x20000168

08008e1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	6039      	str	r1, [r7, #0]
 8008e26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d105      	bne.n	8008e3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4907      	ldr	r1, [pc, #28]	@ (8008e50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e32:	4808      	ldr	r0, [pc, #32]	@ (8008e54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e34:	f7ff fd5d 	bl	80088f2 <USBD_GetString>
 8008e38:	e004      	b.n	8008e44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	4904      	ldr	r1, [pc, #16]	@ (8008e50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e3e:	4805      	ldr	r0, [pc, #20]	@ (8008e54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e40:	f7ff fd57 	bl	80088f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e44:	4b02      	ldr	r3, [pc, #8]	@ (8008e50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000fa4 	.word	0x20000fa4
 8008e54:	08009e70 	.word	0x08009e70

08008e58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4907      	ldr	r1, [pc, #28]	@ (8008e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e6e:	4808      	ldr	r0, [pc, #32]	@ (8008e90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e70:	f7ff fd3f 	bl	80088f2 <USBD_GetString>
 8008e74:	e004      	b.n	8008e80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4904      	ldr	r1, [pc, #16]	@ (8008e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e7a:	4805      	ldr	r0, [pc, #20]	@ (8008e90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e7c:	f7ff fd39 	bl	80088f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	@ (8008e8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000fa4 	.word	0x20000fa4
 8008e90:	08009e7c 	.word	0x08009e7c

08008e94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed8 <Get_SerialNum+0x44>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8008edc <Get_SerialNum+0x48>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee0 <Get_SerialNum+0x4c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d009      	beq.n	8008ece <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4909      	ldr	r1, [pc, #36]	@ (8008ee4 <Get_SerialNum+0x50>)
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 f814 	bl	8008eec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ec4:	2204      	movs	r2, #4
 8008ec6:	4908      	ldr	r1, [pc, #32]	@ (8008ee8 <Get_SerialNum+0x54>)
 8008ec8:	68b8      	ldr	r0, [r7, #8]
 8008eca:	f000 f80f 	bl	8008eec <IntToUnicode>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	1ffff7e8 	.word	0x1ffff7e8
 8008edc:	1ffff7ec 	.word	0x1ffff7ec
 8008ee0:	1ffff7f0 	.word	0x1ffff7f0
 8008ee4:	2000016a 	.word	0x2000016a
 8008ee8:	2000017a 	.word	0x2000017a

08008eec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
 8008f02:	e027      	b.n	8008f54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	0f1b      	lsrs	r3, r3, #28
 8008f08:	2b09      	cmp	r3, #9
 8008f0a:	d80b      	bhi.n	8008f24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0f1b      	lsrs	r3, r3, #28
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	4619      	mov	r1, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3230      	adds	r2, #48	@ 0x30
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	e00a      	b.n	8008f3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	0f1b      	lsrs	r3, r3, #28
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4619      	mov	r1, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	440b      	add	r3, r1
 8008f34:	3237      	adds	r2, #55	@ 0x37
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	3301      	adds	r3, #1
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	4413      	add	r3, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	3301      	adds	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]
 8008f54:	7dfa      	ldrb	r2, [r7, #23]
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3d3      	bcc.n	8008f04 <IntToUnicode+0x18>
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a0d      	ldr	r2, [pc, #52]	@ (8008fac <HAL_PCD_MspInit+0x44>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d113      	bne.n	8008fa2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb0 <HAL_PCD_MspInit+0x48>)
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb0 <HAL_PCD_MspInit+0x48>)
 8008f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008f84:	61d3      	str	r3, [r2, #28]
 8008f86:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb0 <HAL_PCD_MspInit+0x48>)
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f92:	2200      	movs	r2, #0
 8008f94:	2100      	movs	r1, #0
 8008f96:	2014      	movs	r0, #20
 8008f98:	f7f8 fcc5 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f9c:	2014      	movs	r0, #20
 8008f9e:	f7f8 fcde 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	40005c00 	.word	0x40005c00
 8008fb0:	40021000 	.word	0x40021000

08008fb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fe fd63 	bl	8007a96 <USBD_LL_SetupStage>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	6879      	ldr	r1, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	00db      	lsls	r3, r3, #3
 8008ff6:	440b      	add	r3, r1
 8008ff8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	4619      	mov	r1, r3
 8009002:	f7fe fd95 	bl	8007b30 <USBD_LL_DataOutStage>
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	440b      	add	r3, r1
 800902e:	3324      	adds	r3, #36	@ 0x24
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	4619      	mov	r1, r3
 8009036:	f7fe fdec 	bl	8007c12 <USBD_LL_DataInStage>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fefc 	bl	8007e4e <USBD_LL_SOF>
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009066:	2301      	movs	r3, #1
 8009068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	799b      	ldrb	r3, [r3, #6]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d001      	beq.n	8009076 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009072:	f7f7 fd0b 	bl	8000a8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800907c:	7bfa      	ldrb	r2, [r7, #15]
 800907e:	4611      	mov	r1, r2
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe feac 	bl	8007dde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe fe65 	bl	8007d5c <USBD_LL_Reset>
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fea6 	bl	8007dfc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	7a9b      	ldrb	r3, [r3, #10]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090b8:	4b04      	ldr	r3, [pc, #16]	@ (80090cc <HAL_PCD_SuspendCallback+0x30>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	4a03      	ldr	r2, [pc, #12]	@ (80090cc <HAL_PCD_SuspendCallback+0x30>)
 80090be:	f043 0306 	orr.w	r3, r3, #6
 80090c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	e000ed00 	.word	0xe000ed00

080090d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fea0 	bl	8007e24 <USBD_LL_Resume>
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80090f4:	4a28      	ldr	r2, [pc, #160]	@ (8009198 <USBD_LL_Init+0xac>)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a26      	ldr	r2, [pc, #152]	@ (8009198 <USBD_LL_Init+0xac>)
 8009100:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009104:	4b24      	ldr	r3, [pc, #144]	@ (8009198 <USBD_LL_Init+0xac>)
 8009106:	4a25      	ldr	r2, [pc, #148]	@ (800919c <USBD_LL_Init+0xb0>)
 8009108:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800910a:	4b23      	ldr	r3, [pc, #140]	@ (8009198 <USBD_LL_Init+0xac>)
 800910c:	2208      	movs	r2, #8
 800910e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009110:	4b21      	ldr	r3, [pc, #132]	@ (8009198 <USBD_LL_Init+0xac>)
 8009112:	2202      	movs	r2, #2
 8009114:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009116:	4b20      	ldr	r3, [pc, #128]	@ (8009198 <USBD_LL_Init+0xac>)
 8009118:	2200      	movs	r2, #0
 800911a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800911c:	4b1e      	ldr	r3, [pc, #120]	@ (8009198 <USBD_LL_Init+0xac>)
 800911e:	2200      	movs	r2, #0
 8009120:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009122:	4b1d      	ldr	r3, [pc, #116]	@ (8009198 <USBD_LL_Init+0xac>)
 8009124:	2200      	movs	r2, #0
 8009126:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009128:	481b      	ldr	r0, [pc, #108]	@ (8009198 <USBD_LL_Init+0xac>)
 800912a:	f7f8 ffd6 	bl	80020da <HAL_PCD_Init>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009134:	f7f7 fcaa 	bl	8000a8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800913e:	2318      	movs	r3, #24
 8009140:	2200      	movs	r2, #0
 8009142:	2100      	movs	r1, #0
 8009144:	f7fa fce7 	bl	8003b16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800914e:	2358      	movs	r3, #88	@ 0x58
 8009150:	2200      	movs	r2, #0
 8009152:	2180      	movs	r1, #128	@ 0x80
 8009154:	f7fa fcdf 	bl	8003b16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800915e:	23c0      	movs	r3, #192	@ 0xc0
 8009160:	2200      	movs	r2, #0
 8009162:	2181      	movs	r1, #129	@ 0x81
 8009164:	f7fa fcd7 	bl	8003b16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800916e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009172:	2200      	movs	r2, #0
 8009174:	2101      	movs	r1, #1
 8009176:	f7fa fcce 	bl	8003b16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009180:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009184:	2200      	movs	r2, #0
 8009186:	2182      	movs	r1, #130	@ 0x82
 8009188:	f7fa fcc5 	bl	8003b16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	200011a4 	.word	0x200011a4
 800919c:	40005c00 	.word	0x40005c00

080091a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7f9 f885 	bl	80022c6 <HAL_PCD_Start>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f94e 	bl	8009464 <USBD_Get_USB_Status>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	4608      	mov	r0, r1
 80091e0:	4611      	mov	r1, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	70fb      	strb	r3, [r7, #3]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70bb      	strb	r3, [r7, #2]
 80091ec:	4613      	mov	r3, r2
 80091ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091fe:	78bb      	ldrb	r3, [r7, #2]
 8009200:	883a      	ldrh	r2, [r7, #0]
 8009202:	78f9      	ldrb	r1, [r7, #3]
 8009204:	f7f9 f9d9 	bl	80025ba <HAL_PCD_EP_Open>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 f928 	bl	8009464 <USBD_Get_USB_Status>
 8009214:	4603      	mov	r3, r0
 8009216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009218:	7bbb      	ldrb	r3, [r7, #14]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f7f9 fa17 	bl	8002674 <HAL_PCD_EP_Close>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f909 	bl	8009464 <USBD_Get_USB_Status>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009256:	7bbb      	ldrb	r3, [r7, #14]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7f9 fabf 	bl	8002802 <HAL_PCD_EP_SetStall>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f8ea 	bl	8009464 <USBD_Get_USB_Status>
 8009290:	4603      	mov	r3, r0
 8009292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009294:	7bbb      	ldrb	r3, [r7, #14]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f7f9 fb00 	bl	80028c2 <HAL_PCD_EP_ClrStall>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 f8cb 	bl	8009464 <USBD_Get_USB_Status>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da0b      	bge.n	8009310 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	440b      	add	r3, r1
 800930a:	3312      	adds	r3, #18
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	e00b      	b.n	8009328 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	440b      	add	r3, r1
 8009322:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr

08009332 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	460b      	mov	r3, r1
 800933c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800934c:	78fa      	ldrb	r2, [r7, #3]
 800934e:	4611      	mov	r1, r2
 8009350:	4618      	mov	r0, r3
 8009352:	f7f9 f90e 	bl	8002572 <HAL_PCD_SetAddress>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f881 	bl	8009464 <USBD_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009366:	7bbb      	ldrb	r3, [r7, #14]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	461a      	mov	r2, r3
 800937c:	460b      	mov	r3, r1
 800937e:	72fb      	strb	r3, [r7, #11]
 8009380:	4613      	mov	r3, r2
 8009382:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009392:	893b      	ldrh	r3, [r7, #8]
 8009394:	7af9      	ldrb	r1, [r7, #11]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	f7f9 f9fc 	bl	8002794 <HAL_PCD_EP_Transmit>
 800939c:	4603      	mov	r3, r0
 800939e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f85e 	bl	8009464 <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	461a      	mov	r2, r3
 80093c2:	460b      	mov	r3, r1
 80093c4:	72fb      	strb	r3, [r7, #11]
 80093c6:	4613      	mov	r3, r2
 80093c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80093d8:	893b      	ldrh	r3, [r7, #8]
 80093da:	7af9      	ldrb	r1, [r7, #11]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	f7f9 f991 	bl	8002704 <HAL_PCD_EP_Receive>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f83b 	bl	8009464 <USBD_Get_USB_Status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7f9 f9a7 	bl	8002766 <HAL_PCD_EP_GetRxCount>
 8009418:	4603      	mov	r3, r0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800942c:	4b02      	ldr	r3, [pc, #8]	@ (8009438 <USBD_static_malloc+0x14>)
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr
 8009438:	2000147c 	.word	0x2000147c

0800943c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]

}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr

0800944e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	bc80      	pop	{r7}
 8009462:	4770      	bx	lr

08009464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	2b03      	cmp	r3, #3
 8009476:	d817      	bhi.n	80094a8 <USBD_Get_USB_Status+0x44>
 8009478:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <USBD_Get_USB_Status+0x1c>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009491 	.word	0x08009491
 8009484:	08009497 	.word	0x08009497
 8009488:	0800949d 	.word	0x0800949d
 800948c:	080094a3 	.word	0x080094a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
    break;
 8009494:	e00b      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009496:	2302      	movs	r3, #2
 8009498:	73fb      	strb	r3, [r7, #15]
    break;
 800949a:	e008      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800949c:	2301      	movs	r3, #1
 800949e:	73fb      	strb	r3, [r7, #15]
    break;
 80094a0:	e005      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094a2:	2302      	movs	r3, #2
 80094a4:	73fb      	strb	r3, [r7, #15]
    break;
 80094a6:	e002      	b.n	80094ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094a8:	2302      	movs	r3, #2
 80094aa:	73fb      	strb	r3, [r7, #15]
    break;
 80094ac:	bf00      	nop
  }
  return usb_status;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop

080094bc <siprintf>:
 80094bc:	b40e      	push	{r1, r2, r3}
 80094be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094c2:	b510      	push	{r4, lr}
 80094c4:	2400      	movs	r4, #0
 80094c6:	b09d      	sub	sp, #116	@ 0x74
 80094c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80094ca:	9002      	str	r0, [sp, #8]
 80094cc:	9006      	str	r0, [sp, #24]
 80094ce:	9107      	str	r1, [sp, #28]
 80094d0:	9104      	str	r1, [sp, #16]
 80094d2:	4809      	ldr	r0, [pc, #36]	@ (80094f8 <siprintf+0x3c>)
 80094d4:	4909      	ldr	r1, [pc, #36]	@ (80094fc <siprintf+0x40>)
 80094d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094da:	9105      	str	r1, [sp, #20]
 80094dc:	6800      	ldr	r0, [r0, #0]
 80094de:	a902      	add	r1, sp, #8
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80094e4:	f000 f992 	bl	800980c <_svfiprintf_r>
 80094e8:	9b02      	ldr	r3, [sp, #8]
 80094ea:	701c      	strb	r4, [r3, #0]
 80094ec:	b01d      	add	sp, #116	@ 0x74
 80094ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f2:	b003      	add	sp, #12
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000184 	.word	0x20000184
 80094fc:	ffff0208 	.word	0xffff0208

08009500 <memset>:
 8009500:	4603      	mov	r3, r0
 8009502:	4402      	add	r2, r0
 8009504:	4293      	cmp	r3, r2
 8009506:	d100      	bne.n	800950a <memset+0xa>
 8009508:	4770      	bx	lr
 800950a:	f803 1b01 	strb.w	r1, [r3], #1
 800950e:	e7f9      	b.n	8009504 <memset+0x4>

08009510 <__errno>:
 8009510:	4b01      	ldr	r3, [pc, #4]	@ (8009518 <__errno+0x8>)
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000184 	.word	0x20000184

0800951c <__libc_init_array>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	2600      	movs	r6, #0
 8009520:	4d0c      	ldr	r5, [pc, #48]	@ (8009554 <__libc_init_array+0x38>)
 8009522:	4c0d      	ldr	r4, [pc, #52]	@ (8009558 <__libc_init_array+0x3c>)
 8009524:	1b64      	subs	r4, r4, r5
 8009526:	10a4      	asrs	r4, r4, #2
 8009528:	42a6      	cmp	r6, r4
 800952a:	d109      	bne.n	8009540 <__libc_init_array+0x24>
 800952c:	f000 fc76 	bl	8009e1c <_init>
 8009530:	2600      	movs	r6, #0
 8009532:	4d0a      	ldr	r5, [pc, #40]	@ (800955c <__libc_init_array+0x40>)
 8009534:	4c0a      	ldr	r4, [pc, #40]	@ (8009560 <__libc_init_array+0x44>)
 8009536:	1b64      	subs	r4, r4, r5
 8009538:	10a4      	asrs	r4, r4, #2
 800953a:	42a6      	cmp	r6, r4
 800953c:	d105      	bne.n	800954a <__libc_init_array+0x2e>
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	f855 3b04 	ldr.w	r3, [r5], #4
 8009544:	4798      	blx	r3
 8009546:	3601      	adds	r6, #1
 8009548:	e7ee      	b.n	8009528 <__libc_init_array+0xc>
 800954a:	f855 3b04 	ldr.w	r3, [r5], #4
 800954e:	4798      	blx	r3
 8009550:	3601      	adds	r6, #1
 8009552:	e7f2      	b.n	800953a <__libc_init_array+0x1e>
 8009554:	08009ee4 	.word	0x08009ee4
 8009558:	08009ee4 	.word	0x08009ee4
 800955c:	08009ee4 	.word	0x08009ee4
 8009560:	08009ee8 	.word	0x08009ee8

08009564 <__retarget_lock_acquire_recursive>:
 8009564:	4770      	bx	lr

08009566 <__retarget_lock_release_recursive>:
 8009566:	4770      	bx	lr

08009568 <_free_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4605      	mov	r5, r0
 800956c:	2900      	cmp	r1, #0
 800956e:	d040      	beq.n	80095f2 <_free_r+0x8a>
 8009570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009574:	1f0c      	subs	r4, r1, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	18e4      	addlt	r4, r4, r3
 800957c:	f000 f8de 	bl	800973c <__malloc_lock>
 8009580:	4a1c      	ldr	r2, [pc, #112]	@ (80095f4 <_free_r+0x8c>)
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	b933      	cbnz	r3, 8009594 <_free_r+0x2c>
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	6014      	str	r4, [r2, #0]
 800958a:	4628      	mov	r0, r5
 800958c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009590:	f000 b8da 	b.w	8009748 <__malloc_unlock>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d908      	bls.n	80095aa <_free_r+0x42>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	1821      	adds	r1, r4, r0
 800959c:	428b      	cmp	r3, r1
 800959e:	bf01      	itttt	eq
 80095a0:	6819      	ldreq	r1, [r3, #0]
 80095a2:	685b      	ldreq	r3, [r3, #4]
 80095a4:	1809      	addeq	r1, r1, r0
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	e7ed      	b.n	8009586 <_free_r+0x1e>
 80095aa:	461a      	mov	r2, r3
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b10b      	cbz	r3, 80095b4 <_free_r+0x4c>
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d9fa      	bls.n	80095aa <_free_r+0x42>
 80095b4:	6811      	ldr	r1, [r2, #0]
 80095b6:	1850      	adds	r0, r2, r1
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	d10b      	bne.n	80095d4 <_free_r+0x6c>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	4401      	add	r1, r0
 80095c0:	1850      	adds	r0, r2, r1
 80095c2:	4283      	cmp	r3, r0
 80095c4:	6011      	str	r1, [r2, #0]
 80095c6:	d1e0      	bne.n	800958a <_free_r+0x22>
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	4408      	add	r0, r1
 80095ce:	6010      	str	r0, [r2, #0]
 80095d0:	6053      	str	r3, [r2, #4]
 80095d2:	e7da      	b.n	800958a <_free_r+0x22>
 80095d4:	d902      	bls.n	80095dc <_free_r+0x74>
 80095d6:	230c      	movs	r3, #12
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	e7d6      	b.n	800958a <_free_r+0x22>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	1821      	adds	r1, r4, r0
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf01      	itttt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	1809      	addeq	r1, r1, r0
 80095ea:	6021      	streq	r1, [r4, #0]
 80095ec:	6063      	str	r3, [r4, #4]
 80095ee:	6054      	str	r4, [r2, #4]
 80095f0:	e7cb      	b.n	800958a <_free_r+0x22>
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	200017e0 	.word	0x200017e0

080095f8 <sbrk_aligned>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4e0f      	ldr	r6, [pc, #60]	@ (8009638 <sbrk_aligned+0x40>)
 80095fc:	460c      	mov	r4, r1
 80095fe:	6831      	ldr	r1, [r6, #0]
 8009600:	4605      	mov	r5, r0
 8009602:	b911      	cbnz	r1, 800960a <sbrk_aligned+0x12>
 8009604:	f000 fba8 	bl	8009d58 <_sbrk_r>
 8009608:	6030      	str	r0, [r6, #0]
 800960a:	4621      	mov	r1, r4
 800960c:	4628      	mov	r0, r5
 800960e:	f000 fba3 	bl	8009d58 <_sbrk_r>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	d103      	bne.n	800961e <sbrk_aligned+0x26>
 8009616:	f04f 34ff 	mov.w	r4, #4294967295
 800961a:	4620      	mov	r0, r4
 800961c:	bd70      	pop	{r4, r5, r6, pc}
 800961e:	1cc4      	adds	r4, r0, #3
 8009620:	f024 0403 	bic.w	r4, r4, #3
 8009624:	42a0      	cmp	r0, r4
 8009626:	d0f8      	beq.n	800961a <sbrk_aligned+0x22>
 8009628:	1a21      	subs	r1, r4, r0
 800962a:	4628      	mov	r0, r5
 800962c:	f000 fb94 	bl	8009d58 <_sbrk_r>
 8009630:	3001      	adds	r0, #1
 8009632:	d1f2      	bne.n	800961a <sbrk_aligned+0x22>
 8009634:	e7ef      	b.n	8009616 <sbrk_aligned+0x1e>
 8009636:	bf00      	nop
 8009638:	200017dc 	.word	0x200017dc

0800963c <_malloc_r>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	1ccd      	adds	r5, r1, #3
 8009642:	f025 0503 	bic.w	r5, r5, #3
 8009646:	3508      	adds	r5, #8
 8009648:	2d0c      	cmp	r5, #12
 800964a:	bf38      	it	cc
 800964c:	250c      	movcc	r5, #12
 800964e:	2d00      	cmp	r5, #0
 8009650:	4606      	mov	r6, r0
 8009652:	db01      	blt.n	8009658 <_malloc_r+0x1c>
 8009654:	42a9      	cmp	r1, r5
 8009656:	d904      	bls.n	8009662 <_malloc_r+0x26>
 8009658:	230c      	movs	r3, #12
 800965a:	6033      	str	r3, [r6, #0]
 800965c:	2000      	movs	r0, #0
 800965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009738 <_malloc_r+0xfc>
 8009666:	f000 f869 	bl	800973c <__malloc_lock>
 800966a:	f8d8 3000 	ldr.w	r3, [r8]
 800966e:	461c      	mov	r4, r3
 8009670:	bb44      	cbnz	r4, 80096c4 <_malloc_r+0x88>
 8009672:	4629      	mov	r1, r5
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ffbf 	bl	80095f8 <sbrk_aligned>
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	4604      	mov	r4, r0
 800967e:	d158      	bne.n	8009732 <_malloc_r+0xf6>
 8009680:	f8d8 4000 	ldr.w	r4, [r8]
 8009684:	4627      	mov	r7, r4
 8009686:	2f00      	cmp	r7, #0
 8009688:	d143      	bne.n	8009712 <_malloc_r+0xd6>
 800968a:	2c00      	cmp	r4, #0
 800968c:	d04b      	beq.n	8009726 <_malloc_r+0xea>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	4639      	mov	r1, r7
 8009692:	4630      	mov	r0, r6
 8009694:	eb04 0903 	add.w	r9, r4, r3
 8009698:	f000 fb5e 	bl	8009d58 <_sbrk_r>
 800969c:	4581      	cmp	r9, r0
 800969e:	d142      	bne.n	8009726 <_malloc_r+0xea>
 80096a0:	6821      	ldr	r1, [r4, #0]
 80096a2:	4630      	mov	r0, r6
 80096a4:	1a6d      	subs	r5, r5, r1
 80096a6:	4629      	mov	r1, r5
 80096a8:	f7ff ffa6 	bl	80095f8 <sbrk_aligned>
 80096ac:	3001      	adds	r0, #1
 80096ae:	d03a      	beq.n	8009726 <_malloc_r+0xea>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	442b      	add	r3, r5
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	f8d8 3000 	ldr.w	r3, [r8]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	bb62      	cbnz	r2, 8009718 <_malloc_r+0xdc>
 80096be:	f8c8 7000 	str.w	r7, [r8]
 80096c2:	e00f      	b.n	80096e4 <_malloc_r+0xa8>
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	1b52      	subs	r2, r2, r5
 80096c8:	d420      	bmi.n	800970c <_malloc_r+0xd0>
 80096ca:	2a0b      	cmp	r2, #11
 80096cc:	d917      	bls.n	80096fe <_malloc_r+0xc2>
 80096ce:	1961      	adds	r1, r4, r5
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	6025      	str	r5, [r4, #0]
 80096d4:	bf18      	it	ne
 80096d6:	6059      	strne	r1, [r3, #4]
 80096d8:	6863      	ldr	r3, [r4, #4]
 80096da:	bf08      	it	eq
 80096dc:	f8c8 1000 	streq.w	r1, [r8]
 80096e0:	5162      	str	r2, [r4, r5]
 80096e2:	604b      	str	r3, [r1, #4]
 80096e4:	4630      	mov	r0, r6
 80096e6:	f000 f82f 	bl	8009748 <__malloc_unlock>
 80096ea:	f104 000b 	add.w	r0, r4, #11
 80096ee:	1d23      	adds	r3, r4, #4
 80096f0:	f020 0007 	bic.w	r0, r0, #7
 80096f4:	1ac2      	subs	r2, r0, r3
 80096f6:	bf1c      	itt	ne
 80096f8:	1a1b      	subne	r3, r3, r0
 80096fa:	50a3      	strne	r3, [r4, r2]
 80096fc:	e7af      	b.n	800965e <_malloc_r+0x22>
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	42a3      	cmp	r3, r4
 8009702:	bf0c      	ite	eq
 8009704:	f8c8 2000 	streq.w	r2, [r8]
 8009708:	605a      	strne	r2, [r3, #4]
 800970a:	e7eb      	b.n	80096e4 <_malloc_r+0xa8>
 800970c:	4623      	mov	r3, r4
 800970e:	6864      	ldr	r4, [r4, #4]
 8009710:	e7ae      	b.n	8009670 <_malloc_r+0x34>
 8009712:	463c      	mov	r4, r7
 8009714:	687f      	ldr	r7, [r7, #4]
 8009716:	e7b6      	b.n	8009686 <_malloc_r+0x4a>
 8009718:	461a      	mov	r2, r3
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	42a3      	cmp	r3, r4
 800971e:	d1fb      	bne.n	8009718 <_malloc_r+0xdc>
 8009720:	2300      	movs	r3, #0
 8009722:	6053      	str	r3, [r2, #4]
 8009724:	e7de      	b.n	80096e4 <_malloc_r+0xa8>
 8009726:	230c      	movs	r3, #12
 8009728:	4630      	mov	r0, r6
 800972a:	6033      	str	r3, [r6, #0]
 800972c:	f000 f80c 	bl	8009748 <__malloc_unlock>
 8009730:	e794      	b.n	800965c <_malloc_r+0x20>
 8009732:	6005      	str	r5, [r0, #0]
 8009734:	e7d6      	b.n	80096e4 <_malloc_r+0xa8>
 8009736:	bf00      	nop
 8009738:	200017e0 	.word	0x200017e0

0800973c <__malloc_lock>:
 800973c:	4801      	ldr	r0, [pc, #4]	@ (8009744 <__malloc_lock+0x8>)
 800973e:	f7ff bf11 	b.w	8009564 <__retarget_lock_acquire_recursive>
 8009742:	bf00      	nop
 8009744:	200017d8 	.word	0x200017d8

08009748 <__malloc_unlock>:
 8009748:	4801      	ldr	r0, [pc, #4]	@ (8009750 <__malloc_unlock+0x8>)
 800974a:	f7ff bf0c 	b.w	8009566 <__retarget_lock_release_recursive>
 800974e:	bf00      	nop
 8009750:	200017d8 	.word	0x200017d8

08009754 <__ssputs_r>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	461f      	mov	r7, r3
 800975a:	688e      	ldr	r6, [r1, #8]
 800975c:	4682      	mov	sl, r0
 800975e:	42be      	cmp	r6, r7
 8009760:	460c      	mov	r4, r1
 8009762:	4690      	mov	r8, r2
 8009764:	680b      	ldr	r3, [r1, #0]
 8009766:	d82d      	bhi.n	80097c4 <__ssputs_r+0x70>
 8009768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800976c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009770:	d026      	beq.n	80097c0 <__ssputs_r+0x6c>
 8009772:	6965      	ldr	r5, [r4, #20]
 8009774:	6909      	ldr	r1, [r1, #16]
 8009776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800977a:	eba3 0901 	sub.w	r9, r3, r1
 800977e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009782:	1c7b      	adds	r3, r7, #1
 8009784:	444b      	add	r3, r9
 8009786:	106d      	asrs	r5, r5, #1
 8009788:	429d      	cmp	r5, r3
 800978a:	bf38      	it	cc
 800978c:	461d      	movcc	r5, r3
 800978e:	0553      	lsls	r3, r2, #21
 8009790:	d527      	bpl.n	80097e2 <__ssputs_r+0x8e>
 8009792:	4629      	mov	r1, r5
 8009794:	f7ff ff52 	bl	800963c <_malloc_r>
 8009798:	4606      	mov	r6, r0
 800979a:	b360      	cbz	r0, 80097f6 <__ssputs_r+0xa2>
 800979c:	464a      	mov	r2, r9
 800979e:	6921      	ldr	r1, [r4, #16]
 80097a0:	f000 faf8 	bl	8009d94 <memcpy>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	6126      	str	r6, [r4, #16]
 80097b2:	444e      	add	r6, r9
 80097b4:	6026      	str	r6, [r4, #0]
 80097b6:	463e      	mov	r6, r7
 80097b8:	6165      	str	r5, [r4, #20]
 80097ba:	eba5 0509 	sub.w	r5, r5, r9
 80097be:	60a5      	str	r5, [r4, #8]
 80097c0:	42be      	cmp	r6, r7
 80097c2:	d900      	bls.n	80097c6 <__ssputs_r+0x72>
 80097c4:	463e      	mov	r6, r7
 80097c6:	4632      	mov	r2, r6
 80097c8:	4641      	mov	r1, r8
 80097ca:	6820      	ldr	r0, [r4, #0]
 80097cc:	f000 faaa 	bl	8009d24 <memmove>
 80097d0:	2000      	movs	r0, #0
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	60a3      	str	r3, [r4, #8]
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	4433      	add	r3, r6
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e2:	462a      	mov	r2, r5
 80097e4:	f000 fae4 	bl	8009db0 <_realloc_r>
 80097e8:	4606      	mov	r6, r0
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d1e0      	bne.n	80097b0 <__ssputs_r+0x5c>
 80097ee:	4650      	mov	r0, sl
 80097f0:	6921      	ldr	r1, [r4, #16]
 80097f2:	f7ff feb9 	bl	8009568 <_free_r>
 80097f6:	230c      	movs	r3, #12
 80097f8:	f8ca 3000 	str.w	r3, [sl]
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009806:	81a3      	strh	r3, [r4, #12]
 8009808:	e7e9      	b.n	80097de <__ssputs_r+0x8a>
	...

0800980c <_svfiprintf_r>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4698      	mov	r8, r3
 8009812:	898b      	ldrh	r3, [r1, #12]
 8009814:	4607      	mov	r7, r0
 8009816:	061b      	lsls	r3, r3, #24
 8009818:	460d      	mov	r5, r1
 800981a:	4614      	mov	r4, r2
 800981c:	b09d      	sub	sp, #116	@ 0x74
 800981e:	d510      	bpl.n	8009842 <_svfiprintf_r+0x36>
 8009820:	690b      	ldr	r3, [r1, #16]
 8009822:	b973      	cbnz	r3, 8009842 <_svfiprintf_r+0x36>
 8009824:	2140      	movs	r1, #64	@ 0x40
 8009826:	f7ff ff09 	bl	800963c <_malloc_r>
 800982a:	6028      	str	r0, [r5, #0]
 800982c:	6128      	str	r0, [r5, #16]
 800982e:	b930      	cbnz	r0, 800983e <_svfiprintf_r+0x32>
 8009830:	230c      	movs	r3, #12
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	b01d      	add	sp, #116	@ 0x74
 800983a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983e:	2340      	movs	r3, #64	@ 0x40
 8009840:	616b      	str	r3, [r5, #20]
 8009842:	2300      	movs	r3, #0
 8009844:	9309      	str	r3, [sp, #36]	@ 0x24
 8009846:	2320      	movs	r3, #32
 8009848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800984c:	2330      	movs	r3, #48	@ 0x30
 800984e:	f04f 0901 	mov.w	r9, #1
 8009852:	f8cd 800c 	str.w	r8, [sp, #12]
 8009856:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80099f0 <_svfiprintf_r+0x1e4>
 800985a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800985e:	4623      	mov	r3, r4
 8009860:	469a      	mov	sl, r3
 8009862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009866:	b10a      	cbz	r2, 800986c <_svfiprintf_r+0x60>
 8009868:	2a25      	cmp	r2, #37	@ 0x25
 800986a:	d1f9      	bne.n	8009860 <_svfiprintf_r+0x54>
 800986c:	ebba 0b04 	subs.w	fp, sl, r4
 8009870:	d00b      	beq.n	800988a <_svfiprintf_r+0x7e>
 8009872:	465b      	mov	r3, fp
 8009874:	4622      	mov	r2, r4
 8009876:	4629      	mov	r1, r5
 8009878:	4638      	mov	r0, r7
 800987a:	f7ff ff6b 	bl	8009754 <__ssputs_r>
 800987e:	3001      	adds	r0, #1
 8009880:	f000 80a7 	beq.w	80099d2 <_svfiprintf_r+0x1c6>
 8009884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009886:	445a      	add	r2, fp
 8009888:	9209      	str	r2, [sp, #36]	@ 0x24
 800988a:	f89a 3000 	ldrb.w	r3, [sl]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 809f 	beq.w	80099d2 <_svfiprintf_r+0x1c6>
 8009894:	2300      	movs	r3, #0
 8009896:	f04f 32ff 	mov.w	r2, #4294967295
 800989a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989e:	f10a 0a01 	add.w	sl, sl, #1
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	9307      	str	r3, [sp, #28]
 80098a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80098ac:	4654      	mov	r4, sl
 80098ae:	2205      	movs	r2, #5
 80098b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b4:	484e      	ldr	r0, [pc, #312]	@ (80099f0 <_svfiprintf_r+0x1e4>)
 80098b6:	f000 fa5f 	bl	8009d78 <memchr>
 80098ba:	9a04      	ldr	r2, [sp, #16]
 80098bc:	b9d8      	cbnz	r0, 80098f6 <_svfiprintf_r+0xea>
 80098be:	06d0      	lsls	r0, r2, #27
 80098c0:	bf44      	itt	mi
 80098c2:	2320      	movmi	r3, #32
 80098c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c8:	0711      	lsls	r1, r2, #28
 80098ca:	bf44      	itt	mi
 80098cc:	232b      	movmi	r3, #43	@ 0x2b
 80098ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098d2:	f89a 3000 	ldrb.w	r3, [sl]
 80098d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d8:	d015      	beq.n	8009906 <_svfiprintf_r+0xfa>
 80098da:	4654      	mov	r4, sl
 80098dc:	2000      	movs	r0, #0
 80098de:	f04f 0c0a 	mov.w	ip, #10
 80098e2:	9a07      	ldr	r2, [sp, #28]
 80098e4:	4621      	mov	r1, r4
 80098e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ea:	3b30      	subs	r3, #48	@ 0x30
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d94b      	bls.n	8009988 <_svfiprintf_r+0x17c>
 80098f0:	b1b0      	cbz	r0, 8009920 <_svfiprintf_r+0x114>
 80098f2:	9207      	str	r2, [sp, #28]
 80098f4:	e014      	b.n	8009920 <_svfiprintf_r+0x114>
 80098f6:	eba0 0308 	sub.w	r3, r0, r8
 80098fa:	fa09 f303 	lsl.w	r3, r9, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	46a2      	mov	sl, r4
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	e7d2      	b.n	80098ac <_svfiprintf_r+0xa0>
 8009906:	9b03      	ldr	r3, [sp, #12]
 8009908:	1d19      	adds	r1, r3, #4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	9103      	str	r1, [sp, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	bfbb      	ittet	lt
 8009912:	425b      	neglt	r3, r3
 8009914:	f042 0202 	orrlt.w	r2, r2, #2
 8009918:	9307      	strge	r3, [sp, #28]
 800991a:	9307      	strlt	r3, [sp, #28]
 800991c:	bfb8      	it	lt
 800991e:	9204      	strlt	r2, [sp, #16]
 8009920:	7823      	ldrb	r3, [r4, #0]
 8009922:	2b2e      	cmp	r3, #46	@ 0x2e
 8009924:	d10a      	bne.n	800993c <_svfiprintf_r+0x130>
 8009926:	7863      	ldrb	r3, [r4, #1]
 8009928:	2b2a      	cmp	r3, #42	@ 0x2a
 800992a:	d132      	bne.n	8009992 <_svfiprintf_r+0x186>
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	3402      	adds	r4, #2
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	9203      	str	r2, [sp, #12]
 8009936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80099f4 <_svfiprintf_r+0x1e8>
 8009940:	2203      	movs	r2, #3
 8009942:	4650      	mov	r0, sl
 8009944:	7821      	ldrb	r1, [r4, #0]
 8009946:	f000 fa17 	bl	8009d78 <memchr>
 800994a:	b138      	cbz	r0, 800995c <_svfiprintf_r+0x150>
 800994c:	2240      	movs	r2, #64	@ 0x40
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	eba0 000a 	sub.w	r0, r0, sl
 8009954:	4082      	lsls	r2, r0
 8009956:	4313      	orrs	r3, r2
 8009958:	3401      	adds	r4, #1
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	2206      	movs	r2, #6
 8009962:	4825      	ldr	r0, [pc, #148]	@ (80099f8 <_svfiprintf_r+0x1ec>)
 8009964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009968:	f000 fa06 	bl	8009d78 <memchr>
 800996c:	2800      	cmp	r0, #0
 800996e:	d036      	beq.n	80099de <_svfiprintf_r+0x1d2>
 8009970:	4b22      	ldr	r3, [pc, #136]	@ (80099fc <_svfiprintf_r+0x1f0>)
 8009972:	bb1b      	cbnz	r3, 80099bc <_svfiprintf_r+0x1b0>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	3307      	adds	r3, #7
 8009978:	f023 0307 	bic.w	r3, r3, #7
 800997c:	3308      	adds	r3, #8
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009982:	4433      	add	r3, r6
 8009984:	9309      	str	r3, [sp, #36]	@ 0x24
 8009986:	e76a      	b.n	800985e <_svfiprintf_r+0x52>
 8009988:	460c      	mov	r4, r1
 800998a:	2001      	movs	r0, #1
 800998c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009990:	e7a8      	b.n	80098e4 <_svfiprintf_r+0xd8>
 8009992:	2300      	movs	r3, #0
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4619      	mov	r1, r3
 800999a:	3401      	adds	r4, #1
 800999c:	9305      	str	r3, [sp, #20]
 800999e:	4620      	mov	r0, r4
 80099a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a4:	3a30      	subs	r2, #48	@ 0x30
 80099a6:	2a09      	cmp	r2, #9
 80099a8:	d903      	bls.n	80099b2 <_svfiprintf_r+0x1a6>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c6      	beq.n	800993c <_svfiprintf_r+0x130>
 80099ae:	9105      	str	r1, [sp, #20]
 80099b0:	e7c4      	b.n	800993c <_svfiprintf_r+0x130>
 80099b2:	4604      	mov	r4, r0
 80099b4:	2301      	movs	r3, #1
 80099b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ba:	e7f0      	b.n	800999e <_svfiprintf_r+0x192>
 80099bc:	ab03      	add	r3, sp, #12
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	462a      	mov	r2, r5
 80099c2:	4638      	mov	r0, r7
 80099c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009a00 <_svfiprintf_r+0x1f4>)
 80099c6:	a904      	add	r1, sp, #16
 80099c8:	f3af 8000 	nop.w
 80099cc:	1c42      	adds	r2, r0, #1
 80099ce:	4606      	mov	r6, r0
 80099d0:	d1d6      	bne.n	8009980 <_svfiprintf_r+0x174>
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	065b      	lsls	r3, r3, #25
 80099d6:	f53f af2d 	bmi.w	8009834 <_svfiprintf_r+0x28>
 80099da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099dc:	e72c      	b.n	8009838 <_svfiprintf_r+0x2c>
 80099de:	ab03      	add	r3, sp, #12
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	462a      	mov	r2, r5
 80099e4:	4638      	mov	r0, r7
 80099e6:	4b06      	ldr	r3, [pc, #24]	@ (8009a00 <_svfiprintf_r+0x1f4>)
 80099e8:	a904      	add	r1, sp, #16
 80099ea:	f000 f87d 	bl	8009ae8 <_printf_i>
 80099ee:	e7ed      	b.n	80099cc <_svfiprintf_r+0x1c0>
 80099f0:	08009eae 	.word	0x08009eae
 80099f4:	08009eb4 	.word	0x08009eb4
 80099f8:	08009eb8 	.word	0x08009eb8
 80099fc:	00000000 	.word	0x00000000
 8009a00:	08009755 	.word	0x08009755

08009a04 <_printf_common>:
 8009a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a08:	4616      	mov	r6, r2
 8009a0a:	4698      	mov	r8, r3
 8009a0c:	688a      	ldr	r2, [r1, #8]
 8009a0e:	690b      	ldr	r3, [r1, #16]
 8009a10:	4607      	mov	r7, r0
 8009a12:	4293      	cmp	r3, r2
 8009a14:	bfb8      	it	lt
 8009a16:	4613      	movlt	r3, r2
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a1e:	460c      	mov	r4, r1
 8009a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a24:	b10a      	cbz	r2, 8009a2a <_printf_common+0x26>
 8009a26:	3301      	adds	r3, #1
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	0699      	lsls	r1, r3, #26
 8009a2e:	bf42      	ittt	mi
 8009a30:	6833      	ldrmi	r3, [r6, #0]
 8009a32:	3302      	addmi	r3, #2
 8009a34:	6033      	strmi	r3, [r6, #0]
 8009a36:	6825      	ldr	r5, [r4, #0]
 8009a38:	f015 0506 	ands.w	r5, r5, #6
 8009a3c:	d106      	bne.n	8009a4c <_printf_common+0x48>
 8009a3e:	f104 0a19 	add.w	sl, r4, #25
 8009a42:	68e3      	ldr	r3, [r4, #12]
 8009a44:	6832      	ldr	r2, [r6, #0]
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	dc2b      	bgt.n	8009aa4 <_printf_common+0xa0>
 8009a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	3b00      	subs	r3, #0
 8009a54:	bf18      	it	ne
 8009a56:	2301      	movne	r3, #1
 8009a58:	0692      	lsls	r2, r2, #26
 8009a5a:	d430      	bmi.n	8009abe <_printf_common+0xba>
 8009a5c:	4641      	mov	r1, r8
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a64:	47c8      	blx	r9
 8009a66:	3001      	adds	r0, #1
 8009a68:	d023      	beq.n	8009ab2 <_printf_common+0xae>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	f003 0306 	and.w	r3, r3, #6
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	bf14      	ite	ne
 8009a76:	2500      	movne	r5, #0
 8009a78:	6833      	ldreq	r3, [r6, #0]
 8009a7a:	f04f 0600 	mov.w	r6, #0
 8009a7e:	bf08      	it	eq
 8009a80:	68e5      	ldreq	r5, [r4, #12]
 8009a82:	f104 041a 	add.w	r4, r4, #26
 8009a86:	bf08      	it	eq
 8009a88:	1aed      	subeq	r5, r5, r3
 8009a8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a8e:	bf08      	it	eq
 8009a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a94:	4293      	cmp	r3, r2
 8009a96:	bfc4      	itt	gt
 8009a98:	1a9b      	subgt	r3, r3, r2
 8009a9a:	18ed      	addgt	r5, r5, r3
 8009a9c:	42b5      	cmp	r5, r6
 8009a9e:	d11a      	bne.n	8009ad6 <_printf_common+0xd2>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e008      	b.n	8009ab6 <_printf_common+0xb2>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	4652      	mov	r2, sl
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	4638      	mov	r0, r7
 8009aac:	47c8      	blx	r9
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d103      	bne.n	8009aba <_printf_common+0xb6>
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aba:	3501      	adds	r5, #1
 8009abc:	e7c1      	b.n	8009a42 <_printf_common+0x3e>
 8009abe:	2030      	movs	r0, #48	@ 0x30
 8009ac0:	18e1      	adds	r1, r4, r3
 8009ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009acc:	4422      	add	r2, r4
 8009ace:	3302      	adds	r3, #2
 8009ad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ad4:	e7c2      	b.n	8009a5c <_printf_common+0x58>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4641      	mov	r1, r8
 8009adc:	4638      	mov	r0, r7
 8009ade:	47c8      	blx	r9
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d0e6      	beq.n	8009ab2 <_printf_common+0xae>
 8009ae4:	3601      	adds	r6, #1
 8009ae6:	e7d9      	b.n	8009a9c <_printf_common+0x98>

08009ae8 <_printf_i>:
 8009ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	7e0f      	ldrb	r7, [r1, #24]
 8009aee:	4691      	mov	r9, r2
 8009af0:	2f78      	cmp	r7, #120	@ 0x78
 8009af2:	4680      	mov	r8, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	469a      	mov	sl, r3
 8009af8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009afe:	d807      	bhi.n	8009b10 <_printf_i+0x28>
 8009b00:	2f62      	cmp	r7, #98	@ 0x62
 8009b02:	d80a      	bhi.n	8009b1a <_printf_i+0x32>
 8009b04:	2f00      	cmp	r7, #0
 8009b06:	f000 80d1 	beq.w	8009cac <_printf_i+0x1c4>
 8009b0a:	2f58      	cmp	r7, #88	@ 0x58
 8009b0c:	f000 80b8 	beq.w	8009c80 <_printf_i+0x198>
 8009b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b18:	e03a      	b.n	8009b90 <_printf_i+0xa8>
 8009b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b1e:	2b15      	cmp	r3, #21
 8009b20:	d8f6      	bhi.n	8009b10 <_printf_i+0x28>
 8009b22:	a101      	add	r1, pc, #4	@ (adr r1, 8009b28 <_printf_i+0x40>)
 8009b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b28:	08009b81 	.word	0x08009b81
 8009b2c:	08009b95 	.word	0x08009b95
 8009b30:	08009b11 	.word	0x08009b11
 8009b34:	08009b11 	.word	0x08009b11
 8009b38:	08009b11 	.word	0x08009b11
 8009b3c:	08009b11 	.word	0x08009b11
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009b11 	.word	0x08009b11
 8009b48:	08009b11 	.word	0x08009b11
 8009b4c:	08009b11 	.word	0x08009b11
 8009b50:	08009b11 	.word	0x08009b11
 8009b54:	08009c93 	.word	0x08009c93
 8009b58:	08009bbf 	.word	0x08009bbf
 8009b5c:	08009c4d 	.word	0x08009c4d
 8009b60:	08009b11 	.word	0x08009b11
 8009b64:	08009b11 	.word	0x08009b11
 8009b68:	08009cb5 	.word	0x08009cb5
 8009b6c:	08009b11 	.word	0x08009b11
 8009b70:	08009bbf 	.word	0x08009bbf
 8009b74:	08009b11 	.word	0x08009b11
 8009b78:	08009b11 	.word	0x08009b11
 8009b7c:	08009c55 	.word	0x08009c55
 8009b80:	6833      	ldr	r3, [r6, #0]
 8009b82:	1d1a      	adds	r2, r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6032      	str	r2, [r6, #0]
 8009b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b90:	2301      	movs	r3, #1
 8009b92:	e09c      	b.n	8009cce <_printf_i+0x1e6>
 8009b94:	6833      	ldr	r3, [r6, #0]
 8009b96:	6820      	ldr	r0, [r4, #0]
 8009b98:	1d19      	adds	r1, r3, #4
 8009b9a:	6031      	str	r1, [r6, #0]
 8009b9c:	0606      	lsls	r6, r0, #24
 8009b9e:	d501      	bpl.n	8009ba4 <_printf_i+0xbc>
 8009ba0:	681d      	ldr	r5, [r3, #0]
 8009ba2:	e003      	b.n	8009bac <_printf_i+0xc4>
 8009ba4:	0645      	lsls	r5, r0, #25
 8009ba6:	d5fb      	bpl.n	8009ba0 <_printf_i+0xb8>
 8009ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bac:	2d00      	cmp	r5, #0
 8009bae:	da03      	bge.n	8009bb8 <_printf_i+0xd0>
 8009bb0:	232d      	movs	r3, #45	@ 0x2d
 8009bb2:	426d      	negs	r5, r5
 8009bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bb8:	230a      	movs	r3, #10
 8009bba:	4858      	ldr	r0, [pc, #352]	@ (8009d1c <_printf_i+0x234>)
 8009bbc:	e011      	b.n	8009be2 <_printf_i+0xfa>
 8009bbe:	6821      	ldr	r1, [r4, #0]
 8009bc0:	6833      	ldr	r3, [r6, #0]
 8009bc2:	0608      	lsls	r0, r1, #24
 8009bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bc8:	d402      	bmi.n	8009bd0 <_printf_i+0xe8>
 8009bca:	0649      	lsls	r1, r1, #25
 8009bcc:	bf48      	it	mi
 8009bce:	b2ad      	uxthmi	r5, r5
 8009bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bd2:	6033      	str	r3, [r6, #0]
 8009bd4:	bf14      	ite	ne
 8009bd6:	230a      	movne	r3, #10
 8009bd8:	2308      	moveq	r3, #8
 8009bda:	4850      	ldr	r0, [pc, #320]	@ (8009d1c <_printf_i+0x234>)
 8009bdc:	2100      	movs	r1, #0
 8009bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009be2:	6866      	ldr	r6, [r4, #4]
 8009be4:	2e00      	cmp	r6, #0
 8009be6:	60a6      	str	r6, [r4, #8]
 8009be8:	db05      	blt.n	8009bf6 <_printf_i+0x10e>
 8009bea:	6821      	ldr	r1, [r4, #0]
 8009bec:	432e      	orrs	r6, r5
 8009bee:	f021 0104 	bic.w	r1, r1, #4
 8009bf2:	6021      	str	r1, [r4, #0]
 8009bf4:	d04b      	beq.n	8009c8e <_printf_i+0x1a6>
 8009bf6:	4616      	mov	r6, r2
 8009bf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bfc:	fb03 5711 	mls	r7, r3, r1, r5
 8009c00:	5dc7      	ldrb	r7, [r0, r7]
 8009c02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c06:	462f      	mov	r7, r5
 8009c08:	42bb      	cmp	r3, r7
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	d9f4      	bls.n	8009bf8 <_printf_i+0x110>
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d10b      	bne.n	8009c2a <_printf_i+0x142>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	07df      	lsls	r7, r3, #31
 8009c16:	d508      	bpl.n	8009c2a <_printf_i+0x142>
 8009c18:	6923      	ldr	r3, [r4, #16]
 8009c1a:	6861      	ldr	r1, [r4, #4]
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	bfde      	ittt	le
 8009c20:	2330      	movle	r3, #48	@ 0x30
 8009c22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c2a:	1b92      	subs	r2, r2, r6
 8009c2c:	6122      	str	r2, [r4, #16]
 8009c2e:	464b      	mov	r3, r9
 8009c30:	4621      	mov	r1, r4
 8009c32:	4640      	mov	r0, r8
 8009c34:	f8cd a000 	str.w	sl, [sp]
 8009c38:	aa03      	add	r2, sp, #12
 8009c3a:	f7ff fee3 	bl	8009a04 <_printf_common>
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d14a      	bne.n	8009cd8 <_printf_i+0x1f0>
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295
 8009c46:	b004      	add	sp, #16
 8009c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	f043 0320 	orr.w	r3, r3, #32
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	2778      	movs	r7, #120	@ 0x78
 8009c56:	4832      	ldr	r0, [pc, #200]	@ (8009d20 <_printf_i+0x238>)
 8009c58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	6831      	ldr	r1, [r6, #0]
 8009c60:	061f      	lsls	r7, r3, #24
 8009c62:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c66:	d402      	bmi.n	8009c6e <_printf_i+0x186>
 8009c68:	065f      	lsls	r7, r3, #25
 8009c6a:	bf48      	it	mi
 8009c6c:	b2ad      	uxthmi	r5, r5
 8009c6e:	6031      	str	r1, [r6, #0]
 8009c70:	07d9      	lsls	r1, r3, #31
 8009c72:	bf44      	itt	mi
 8009c74:	f043 0320 	orrmi.w	r3, r3, #32
 8009c78:	6023      	strmi	r3, [r4, #0]
 8009c7a:	b11d      	cbz	r5, 8009c84 <_printf_i+0x19c>
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	e7ad      	b.n	8009bdc <_printf_i+0xf4>
 8009c80:	4826      	ldr	r0, [pc, #152]	@ (8009d1c <_printf_i+0x234>)
 8009c82:	e7e9      	b.n	8009c58 <_printf_i+0x170>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	f023 0320 	bic.w	r3, r3, #32
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	e7f6      	b.n	8009c7c <_printf_i+0x194>
 8009c8e:	4616      	mov	r6, r2
 8009c90:	e7bd      	b.n	8009c0e <_printf_i+0x126>
 8009c92:	6833      	ldr	r3, [r6, #0]
 8009c94:	6825      	ldr	r5, [r4, #0]
 8009c96:	1d18      	adds	r0, r3, #4
 8009c98:	6961      	ldr	r1, [r4, #20]
 8009c9a:	6030      	str	r0, [r6, #0]
 8009c9c:	062e      	lsls	r6, r5, #24
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	d501      	bpl.n	8009ca6 <_printf_i+0x1be>
 8009ca2:	6019      	str	r1, [r3, #0]
 8009ca4:	e002      	b.n	8009cac <_printf_i+0x1c4>
 8009ca6:	0668      	lsls	r0, r5, #25
 8009ca8:	d5fb      	bpl.n	8009ca2 <_printf_i+0x1ba>
 8009caa:	8019      	strh	r1, [r3, #0]
 8009cac:	2300      	movs	r3, #0
 8009cae:	4616      	mov	r6, r2
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	e7bc      	b.n	8009c2e <_printf_i+0x146>
 8009cb4:	6833      	ldr	r3, [r6, #0]
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	1d1a      	adds	r2, r3, #4
 8009cba:	6032      	str	r2, [r6, #0]
 8009cbc:	681e      	ldr	r6, [r3, #0]
 8009cbe:	6862      	ldr	r2, [r4, #4]
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f859 	bl	8009d78 <memchr>
 8009cc6:	b108      	cbz	r0, 8009ccc <_printf_i+0x1e4>
 8009cc8:	1b80      	subs	r0, r0, r6
 8009cca:	6060      	str	r0, [r4, #4]
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cd6:	e7aa      	b.n	8009c2e <_printf_i+0x146>
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4649      	mov	r1, r9
 8009cdc:	4640      	mov	r0, r8
 8009cde:	6923      	ldr	r3, [r4, #16]
 8009ce0:	47d0      	blx	sl
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d0ad      	beq.n	8009c42 <_printf_i+0x15a>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	079b      	lsls	r3, r3, #30
 8009cea:	d413      	bmi.n	8009d14 <_printf_i+0x22c>
 8009cec:	68e0      	ldr	r0, [r4, #12]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	4298      	cmp	r0, r3
 8009cf2:	bfb8      	it	lt
 8009cf4:	4618      	movlt	r0, r3
 8009cf6:	e7a6      	b.n	8009c46 <_printf_i+0x15e>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4640      	mov	r0, r8
 8009d00:	47d0      	blx	sl
 8009d02:	3001      	adds	r0, #1
 8009d04:	d09d      	beq.n	8009c42 <_printf_i+0x15a>
 8009d06:	3501      	adds	r5, #1
 8009d08:	68e3      	ldr	r3, [r4, #12]
 8009d0a:	9903      	ldr	r1, [sp, #12]
 8009d0c:	1a5b      	subs	r3, r3, r1
 8009d0e:	42ab      	cmp	r3, r5
 8009d10:	dcf2      	bgt.n	8009cf8 <_printf_i+0x210>
 8009d12:	e7eb      	b.n	8009cec <_printf_i+0x204>
 8009d14:	2500      	movs	r5, #0
 8009d16:	f104 0619 	add.w	r6, r4, #25
 8009d1a:	e7f5      	b.n	8009d08 <_printf_i+0x220>
 8009d1c:	08009ebf 	.word	0x08009ebf
 8009d20:	08009ed0 	.word	0x08009ed0

08009d24 <memmove>:
 8009d24:	4288      	cmp	r0, r1
 8009d26:	b510      	push	{r4, lr}
 8009d28:	eb01 0402 	add.w	r4, r1, r2
 8009d2c:	d902      	bls.n	8009d34 <memmove+0x10>
 8009d2e:	4284      	cmp	r4, r0
 8009d30:	4623      	mov	r3, r4
 8009d32:	d807      	bhi.n	8009d44 <memmove+0x20>
 8009d34:	1e43      	subs	r3, r0, #1
 8009d36:	42a1      	cmp	r1, r4
 8009d38:	d008      	beq.n	8009d4c <memmove+0x28>
 8009d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d42:	e7f8      	b.n	8009d36 <memmove+0x12>
 8009d44:	4601      	mov	r1, r0
 8009d46:	4402      	add	r2, r0
 8009d48:	428a      	cmp	r2, r1
 8009d4a:	d100      	bne.n	8009d4e <memmove+0x2a>
 8009d4c:	bd10      	pop	{r4, pc}
 8009d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d56:	e7f7      	b.n	8009d48 <memmove+0x24>

08009d58 <_sbrk_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4d05      	ldr	r5, [pc, #20]	@ (8009d74 <_sbrk_r+0x1c>)
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f6 ffb2 	bl	8000ccc <_sbrk>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_sbrk_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_sbrk_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	200017d4 	.word	0x200017d4

08009d78 <memchr>:
 8009d78:	4603      	mov	r3, r0
 8009d7a:	b510      	push	{r4, lr}
 8009d7c:	b2c9      	uxtb	r1, r1
 8009d7e:	4402      	add	r2, r0
 8009d80:	4293      	cmp	r3, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	d101      	bne.n	8009d8a <memchr+0x12>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e003      	b.n	8009d92 <memchr+0x1a>
 8009d8a:	7804      	ldrb	r4, [r0, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	428c      	cmp	r4, r1
 8009d90:	d1f6      	bne.n	8009d80 <memchr+0x8>
 8009d92:	bd10      	pop	{r4, pc}

08009d94 <memcpy>:
 8009d94:	440a      	add	r2, r1
 8009d96:	4291      	cmp	r1, r2
 8009d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d9c:	d100      	bne.n	8009da0 <memcpy+0xc>
 8009d9e:	4770      	bx	lr
 8009da0:	b510      	push	{r4, lr}
 8009da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009da6:	4291      	cmp	r1, r2
 8009da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dac:	d1f9      	bne.n	8009da2 <memcpy+0xe>
 8009dae:	bd10      	pop	{r4, pc}

08009db0 <_realloc_r>:
 8009db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	4607      	mov	r7, r0
 8009db6:	4614      	mov	r4, r2
 8009db8:	460d      	mov	r5, r1
 8009dba:	b921      	cbnz	r1, 8009dc6 <_realloc_r+0x16>
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	f7ff bc3b 	b.w	800963c <_malloc_r>
 8009dc6:	b92a      	cbnz	r2, 8009dd4 <_realloc_r+0x24>
 8009dc8:	f7ff fbce 	bl	8009568 <_free_r>
 8009dcc:	4625      	mov	r5, r4
 8009dce:	4628      	mov	r0, r5
 8009dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd4:	f000 f81a 	bl	8009e0c <_malloc_usable_size_r>
 8009dd8:	4284      	cmp	r4, r0
 8009dda:	4606      	mov	r6, r0
 8009ddc:	d802      	bhi.n	8009de4 <_realloc_r+0x34>
 8009dde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009de2:	d8f4      	bhi.n	8009dce <_realloc_r+0x1e>
 8009de4:	4621      	mov	r1, r4
 8009de6:	4638      	mov	r0, r7
 8009de8:	f7ff fc28 	bl	800963c <_malloc_r>
 8009dec:	4680      	mov	r8, r0
 8009dee:	b908      	cbnz	r0, 8009df4 <_realloc_r+0x44>
 8009df0:	4645      	mov	r5, r8
 8009df2:	e7ec      	b.n	8009dce <_realloc_r+0x1e>
 8009df4:	42b4      	cmp	r4, r6
 8009df6:	4622      	mov	r2, r4
 8009df8:	4629      	mov	r1, r5
 8009dfa:	bf28      	it	cs
 8009dfc:	4632      	movcs	r2, r6
 8009dfe:	f7ff ffc9 	bl	8009d94 <memcpy>
 8009e02:	4629      	mov	r1, r5
 8009e04:	4638      	mov	r0, r7
 8009e06:	f7ff fbaf 	bl	8009568 <_free_r>
 8009e0a:	e7f1      	b.n	8009df0 <_realloc_r+0x40>

08009e0c <_malloc_usable_size_r>:
 8009e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e10:	1f18      	subs	r0, r3, #4
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfbc      	itt	lt
 8009e16:	580b      	ldrlt	r3, [r1, r0]
 8009e18:	18c0      	addlt	r0, r0, r3
 8009e1a:	4770      	bx	lr

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
