
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a704  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a810  0800a810  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c0  0800a8c0  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a8c0  0800a8c0  0000c1d8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a8c0  0800a8c0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c0  0800a8c0  0000b8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8c4  0800a8c4  0000b8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a8c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  200001d8  0800aaa0  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  0800aaa0  0000c650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014284  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a44  00000000  00000000  00020485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00023ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e11  00000000  00000000  00025158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0d3  00000000  00000000  00025f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175d5  00000000  00000000  0004103c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009292d  00000000  00000000  00058611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eaf3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b8  00000000  00000000  000eaf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a7f8 	.word	0x0800a7f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800a7f8 	.word	0x0800a7f8

0800014c <UP_initprotocol>:

int16_t value=9999;
_sDato datosCom1;
_eProtocolo estadoProtocolo;

void UP_initprotocol(_sDato *datosCom,uint8_t *ringbuff){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]

	datosCom->bufferRx=ringbuff;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	683a      	ldr	r2, [r7, #0]
 800015a:	609a      	str	r2, [r3, #8]
	datosCom->bufferTx=ringbuff;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	683a      	ldr	r2, [r7, #0]
 8000160:	60da      	str	r2, [r3, #12]

}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <UP_sendInfo>:

void UP_sendInfo(uint8_t bufferAux[],uint8_t bytes){
 800016c:	b490      	push	{r4, r7}
 800016e:	b08c      	sub	sp, #48	@ 0x30
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	460b      	mov	r3, r1
 8000176:	70fb      	strb	r3, [r7, #3]

    uint8_t bufAux[30], indiceAux=0,cks=0,i=0;
 8000178:	2300      	movs	r3, #0
 800017a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800017e:	2300      	movs	r3, #0
 8000180:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000184:	2300      	movs	r3, #0
 8000186:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    bufAux[indiceAux++]='U';
 800018a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800018e:	1c5a      	adds	r2, r3, #1
 8000190:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8000194:	3330      	adds	r3, #48	@ 0x30
 8000196:	443b      	add	r3, r7
 8000198:	2255      	movs	r2, #85	@ 0x55
 800019a:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='N';
 800019e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001a2:	1c5a      	adds	r2, r3, #1
 80001a4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001a8:	3330      	adds	r3, #48	@ 0x30
 80001aa:	443b      	add	r3, r7
 80001ac:	224e      	movs	r2, #78	@ 0x4e
 80001ae:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='E';
 80001b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001b6:	1c5a      	adds	r2, r3, #1
 80001b8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001bc:	3330      	adds	r3, #48	@ 0x30
 80001be:	443b      	add	r3, r7
 80001c0:	2245      	movs	r2, #69	@ 0x45
 80001c2:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]='R';
 80001c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001ca:	1c5a      	adds	r2, r3, #1
 80001cc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001d0:	3330      	adds	r3, #48	@ 0x30
 80001d2:	443b      	add	r3, r7
 80001d4:	2252      	movs	r2, #82	@ 0x52
 80001d6:	f803 2c24 	strb.w	r2, [r3, #-36]

    bufAux[indiceAux++]=bytes;
 80001da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001de:	1c5a      	adds	r2, r3, #1
 80001e0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001e4:	3330      	adds	r3, #48	@ 0x30
 80001e6:	443b      	add	r3, r7
 80001e8:	78fa      	ldrb	r2, [r7, #3]
 80001ea:	f803 2c24 	strb.w	r2, [r3, #-36]
    bufAux[indiceAux++]=':';
 80001ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80001f8:	3330      	adds	r3, #48	@ 0x30
 80001fa:	443b      	add	r3, r7
 80001fc:	223a      	movs	r2, #58	@ 0x3a
 80001fe:	f803 2c24 	strb.w	r2, [r3, #-36]

    for(i=0; i<bytes-1; i++)
 8000202:	2300      	movs	r3, #0
 8000204:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000208:	e012      	b.n	8000230 <UP_sendInfo+0xc4>
        bufAux[indiceAux++] = bufferAux[i];
 800020a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	441a      	add	r2, r3
 8000212:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000216:	1c59      	adds	r1, r3, #1
 8000218:	f887 102f 	strb.w	r1, [r7, #47]	@ 0x2f
 800021c:	7812      	ldrb	r2, [r2, #0]
 800021e:	3330      	adds	r3, #48	@ 0x30
 8000220:	443b      	add	r3, r7
 8000222:	f803 2c24 	strb.w	r2, [r3, #-36]
    for(i=0; i<bytes-1; i++)
 8000226:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800022a:	3301      	adds	r3, #1
 800022c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000230:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	3b01      	subs	r3, #1
 8000238:	429a      	cmp	r2, r3
 800023a:	dbe6      	blt.n	800020a <UP_sendInfo+0x9e>

    cks=0;
 800023c:	2300      	movs	r3, #0
 800023e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    for(i=0 ;i<indiceAux;i++){
 8000242:	2300      	movs	r3, #0
 8000244:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000248:	e01f      	b.n	800028a <UP_sendInfo+0x11e>
        cks^= bufAux[i];
 800024a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800024e:	3330      	adds	r3, #48	@ 0x30
 8000250:	443b      	add	r3, r7
 8000252:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8000256:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800025a:	4053      	eors	r3, r2
 800025c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        datosCom1.bufferTx[datosCom1.indexWriteTx++]=bufAux[i];
 8000260:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000264:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <UP_sendInfo+0x154>)
 8000266:	68d9      	ldr	r1, [r3, #12]
 8000268:	4b15      	ldr	r3, [pc, #84]	@ (80002c0 <UP_sendInfo+0x154>)
 800026a:	795b      	ldrb	r3, [r3, #5]
 800026c:	1c58      	adds	r0, r3, #1
 800026e:	b2c4      	uxtb	r4, r0
 8000270:	4813      	ldr	r0, [pc, #76]	@ (80002c0 <UP_sendInfo+0x154>)
 8000272:	7144      	strb	r4, [r0, #5]
 8000274:	440b      	add	r3, r1
 8000276:	3230      	adds	r2, #48	@ 0x30
 8000278:	443a      	add	r2, r7
 800027a:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 800027e:	701a      	strb	r2, [r3, #0]
    for(i=0 ;i<indiceAux;i++){
 8000280:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000284:	3301      	adds	r3, #1
 8000286:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800028a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800028e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000292:	429a      	cmp	r2, r3
 8000294:	d3d9      	bcc.n	800024a <UP_sendInfo+0xde>
    }
     datosCom1.bufferTx[datosCom1.indexWriteTx++]=cks;
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <UP_sendInfo+0x154>)
 8000298:	68da      	ldr	r2, [r3, #12]
 800029a:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <UP_sendInfo+0x154>)
 800029c:	795b      	ldrb	r3, [r3, #5]
 800029e:	1c59      	adds	r1, r3, #1
 80002a0:	b2c8      	uxtb	r0, r1
 80002a2:	4907      	ldr	r1, [pc, #28]	@ (80002c0 <UP_sendInfo+0x154>)
 80002a4:	7148      	strb	r0, [r1, #5]
 80002a6:	4413      	add	r3, r2
 80002a8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80002ac:	701a      	strb	r2, [r3, #0]

     datosCom1.bytesTosend=indiceAux;
 80002ae:	4a04      	ldr	r2, [pc, #16]	@ (80002c0 <UP_sendInfo+0x154>)
 80002b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80002b4:	7413      	strb	r3, [r2, #16]

}
 80002b6:	bf00      	nop
 80002b8:	3730      	adds	r7, #48	@ 0x30
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc90      	pop	{r4, r7}
 80002be:	4770      	bx	lr
 80002c0:	200001f8 	.word	0x200001f8

080002c4 <UP_decodeHeader>:

void UP_decodeHeader(_sDato *datosCom){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80002d2:	e0e2      	b.n	800049a <UP_decodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 80002d4:	4b76      	ldr	r3, [pc, #472]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b06      	cmp	r3, #6
 80002da:	f200 80d7 	bhi.w	800048c <UP_decodeHeader+0x1c8>
 80002de:	a201      	add	r2, pc, #4	@ (adr r2, 80002e4 <UP_decodeHeader+0x20>)
 80002e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e4:	08000301 	.word	0x08000301
 80002e8:	08000329 	.word	0x08000329
 80002ec:	0800035d 	.word	0x0800035d
 80002f0:	08000391 	.word	0x08000391
 80002f4:	080003c5 	.word	0x080003c5
 80002f8:	080003ed 	.word	0x080003ed
 80002fc:	0800042f 	.word	0x0800042f
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	1c59      	adds	r1, r3, #1
 800030a:	b2c8      	uxtb	r0, r1
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	7108      	strb	r0, [r1, #4]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b55      	cmp	r3, #85	@ 0x55
 8000316:	f040 80bd 	bne.w	8000494 <UP_decodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 800031a:	4b65      	ldr	r3, [pc, #404]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 800031c:	2201      	movs	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2200      	movs	r2, #0
 8000324:	709a      	strb	r2, [r3, #2]
                }
                break;
 8000326:	e0b5      	b.n	8000494 <UP_decodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	1c59      	adds	r1, r3, #1
 8000332:	b2c8      	uxtb	r0, r1
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	7108      	strb	r0, [r1, #4]
 8000338:	4413      	add	r3, r2
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b4e      	cmp	r3, #78	@ 0x4e
 800033e:	d103      	bne.n	8000348 <UP_decodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000340:	4b5b      	ldr	r3, [pc, #364]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 8000342:	2202      	movs	r2, #2
 8000344:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000346:	e0a8      	b.n	800049a <UP_decodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	3b01      	subs	r3, #1
 800034e:	b2da      	uxtb	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000354:	4b56      	ldr	r3, [pc, #344]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 8000356:	2200      	movs	r2, #0
 8000358:	701a      	strb	r2, [r3, #0]
                break;
 800035a:	e09e      	b.n	800049a <UP_decodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	689a      	ldr	r2, [r3, #8]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	1c59      	adds	r1, r3, #1
 8000366:	b2c8      	uxtb	r0, r1
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	7108      	strb	r0, [r1, #4]
 800036c:	4413      	add	r3, r2
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b45      	cmp	r3, #69	@ 0x45
 8000372:	d103      	bne.n	800037c <UP_decodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 8000374:	4b4e      	ldr	r3, [pc, #312]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 8000376:	2203      	movs	r2, #3
 8000378:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 800037a:	e08e      	b.n	800049a <UP_decodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	791b      	ldrb	r3, [r3, #4]
 8000380:	3b01      	subs	r3, #1
 8000382:	b2da      	uxtb	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 8000388:	4b49      	ldr	r3, [pc, #292]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
                break;
 800038e:	e084      	b.n	800049a <UP_decodeHeader+0x1d6>
			case HEADER_3:
				if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689a      	ldr	r2, [r3, #8]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	791b      	ldrb	r3, [r3, #4]
 8000398:	1c59      	adds	r1, r3, #1
 800039a:	b2c8      	uxtb	r0, r1
 800039c:	6879      	ldr	r1, [r7, #4]
 800039e:	7108      	strb	r0, [r1, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b52      	cmp	r3, #82	@ 0x52
 80003a6:	d103      	bne.n	80003b0 <UP_decodeHeader+0xec>
					estadoProtocolo=NBYTES;
 80003a8:	4b41      	ldr	r3, [pc, #260]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	701a      	strb	r2, [r3, #0]
				else{
					datosCom->indexReadRx--;
				    estadoProtocolo=START;
				}
            break;
 80003ae:	e074      	b.n	800049a <UP_decodeHeader+0x1d6>
					datosCom->indexReadRx--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	791b      	ldrb	r3, [r3, #4]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	711a      	strb	r2, [r3, #4]
				    estadoProtocolo=START;
 80003bc:	4b3c      	ldr	r3, [pc, #240]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
            break;
 80003c2:	e06a      	b.n	800049a <UP_decodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	791a      	ldrb	r2, [r3, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689a      	ldr	r2, [r3, #8]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	1c59      	adds	r1, r3, #1
 80003d6:	b2c8      	uxtb	r0, r1
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	7108      	strb	r0, [r1, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <UP_decodeHeader+0x1f0>)
 80003e2:	701a      	strb	r2, [r3, #0]
                estadoProtocolo=TOKEN;
 80003e4:	4b32      	ldr	r3, [pc, #200]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 80003e6:	2205      	movs	r2, #5
 80003e8:	701a      	strb	r2, [r3, #0]
                break;
 80003ea:	e056      	b.n	800049a <UP_decodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	689a      	ldr	r2, [r3, #8]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	1c59      	adds	r1, r3, #1
 80003f6:	b2c8      	uxtb	r0, r1
 80003f8:	6879      	ldr	r1, [r7, #4]
 80003fa:	7108      	strb	r0, [r1, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b3a      	cmp	r3, #58	@ 0x3a
 8000402:	d10a      	bne.n	800041a <UP_decodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 8000404:	4b2a      	ldr	r3, [pc, #168]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 8000406:	2206      	movs	r2, #6
 8000408:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 800040a:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <UP_decodeHeader+0x1f0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000418:	e03f      	b.n	800049a <UP_decodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	b2da      	uxtb	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 8000426:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
                break;
 800042c:	e035      	b.n	800049a <UP_decodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 800042e:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <UP_decodeHeader+0x1f0>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d90f      	bls.n	8000456 <UP_decodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	689a      	ldr	r2, [r3, #8]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	791b      	ldrb	r3, [r3, #4]
 800043e:	1c59      	adds	r1, r3, #1
 8000440:	b2c8      	uxtb	r0, r1
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	7108      	strb	r0, [r1, #4]
 8000446:	4413      	add	r3, r2
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	4053      	eors	r3, r2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <UP_decodeHeader+0x1f0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <UP_decodeHeader+0x1f0>)
 8000460:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <UP_decodeHeader+0x1f0>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d116      	bne.n	8000498 <UP_decodeHeader+0x1d4>
                    estadoProtocolo=START;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	789a      	ldrb	r2, [r3, #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	6879      	ldr	r1, [r7, #4]
 800047a:	7909      	ldrb	r1, [r1, #4]
 800047c:	440b      	add	r3, r1
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	d109      	bne.n	8000498 <UP_decodeHeader+0x1d4>
                    	UP_decodeData(datosCom);
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 f817 	bl	80004b8 <UP_decodeData>
                    }
                }

                break;
 800048a:	e005      	b.n	8000498 <UP_decodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <UP_decodeHeader+0x1ec>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
                break;
 8000492:	e002      	b.n	800049a <UP_decodeHeader+0x1d6>
                break;
 8000494:	bf00      	nop
 8000496:	e000      	b.n	800049a <UP_decodeHeader+0x1d6>
                break;
 8000498:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	7bfa      	ldrb	r2, [r7, #15]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	f47f af17 	bne.w	80002d4 <UP_decodeHeader+0x10>
        }
    }
}
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000020c 	.word	0x2000020c
 80004b4:	2000020d 	.word	0x2000020d

080004b8 <UP_decodeData>:



void UP_decodeData(_sDato *datosCom){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,bytes=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	77bb      	strb	r3, [r7, #30]
 80004c4:	2300      	movs	r3, #0
 80004c6:	77fb      	strb	r3, [r7, #31]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//CMD EN LA POSICION 2
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	785b      	ldrb	r3, [r3, #1]
 80004d0:	3302      	adds	r3, #2
 80004d2:	4413      	add	r3, r2
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80004d8:	d01f      	beq.n	800051a <UP_decodeData+0x62>
 80004da:	2bf2      	cmp	r3, #242	@ 0xf2
 80004dc:	dc46      	bgt.n	800056c <UP_decodeData+0xb4>
 80004de:	2bf1      	cmp	r3, #241	@ 0xf1
 80004e0:	d010      	beq.n	8000504 <UP_decodeData+0x4c>
 80004e2:	2bf1      	cmp	r3, #241	@ 0xf1
 80004e4:	dc42      	bgt.n	800056c <UP_decodeData+0xb4>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d020      	beq.n	800052c <UP_decodeData+0x74>
 80004ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80004ec:	d13e      	bne.n	800056c <UP_decodeData+0xb4>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 80004ee:	7fbb      	ldrb	r3, [r7, #30]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	77ba      	strb	r2, [r7, #30]
 80004f4:	3320      	adds	r3, #32
 80004f6:	443b      	add	r3, r7
 80004f8:	22f0      	movs	r2, #240	@ 0xf0
 80004fa:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;//aca debo darle CMD+CKS+PAYLOAD
 80004fe:	2302      	movs	r3, #2
 8000500:	77fb      	strb	r3, [r7, #31]

    break;
 8000502:	e03e      	b.n	8000582 <UP_decodeData+0xca>
    case FIRMWARE:

		bufAux[indiceAux++]=FIRMWARE;
 8000504:	7fbb      	ldrb	r3, [r7, #30]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	77ba      	strb	r2, [r7, #30]
 800050a:	3320      	adds	r3, #32
 800050c:	443b      	add	r3, r7
 800050e:	22f1      	movs	r2, #241	@ 0xf1
 8000510:	f803 2c18 	strb.w	r2, [r3, #-24]
		bytes=0x02;
 8000514:	2302      	movs	r3, #2
 8000516:	77fb      	strb	r3, [r7, #31]

    break;
 8000518:	e033      	b.n	8000582 <UP_decodeData+0xca>

    case TEXT:

		bufAux[indiceAux++]=TEXT;
 800051a:	7fbb      	ldrb	r3, [r7, #30]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	77ba      	strb	r2, [r7, #30]
 8000520:	3320      	adds	r3, #32
 8000522:	443b      	add	r3, r7
 8000524:	22f2      	movs	r2, #242	@ 0xf2
 8000526:	f803 2c18 	strb.w	r2, [r3, #-24]
//		bytes=;

    break;
 800052a:	e02a      	b.n	8000582 <UP_decodeData+0xca>

    case ENGINES:
    	bufAux[indiceAux++]=ENGINES;
 800052c:	7fbb      	ldrb	r3, [r7, #30]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	77ba      	strb	r2, [r7, #30]
 8000532:	3320      	adds	r3, #32
 8000534:	443b      	add	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	f803 2c18 	strb.w	r2, [r3, #-24]

    	casts.u8[0]=datosCom->bufferRx[datosCom->indexStart+3];
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	785b      	ldrb	r3, [r3, #1]
 8000544:	3303      	adds	r3, #3
 8000546:	4413      	add	r3, r2
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <UP_decodeData+0xe0>)
 800054c:	701a      	strb	r2, [r3, #0]
    	casts.u8[1]=datosCom->bufferRx[datosCom->indexStart+4];
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	785b      	ldrb	r3, [r3, #1]
 8000556:	3304      	adds	r3, #4
 8000558:	4413      	add	r3, r2
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <UP_decodeData+0xe0>)
 800055e:	705a      	strb	r2, [r3, #1]

    	value = casts.i16[0]; //ver aca que pasa para recuperar el valor de la velocidad
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <UP_decodeData+0xe0>)
 8000562:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <UP_decodeData+0xe4>)
 8000568:	801a      	strh	r2, [r3, #0]

    break;
 800056a:	e00a      	b.n	8000582 <UP_decodeData+0xca>
    default:

        bufAux[indiceAux++]=0xFF;
 800056c:	7fbb      	ldrb	r3, [r7, #30]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	77ba      	strb	r2, [r7, #30]
 8000572:	3320      	adds	r3, #32
 8000574:	443b      	add	r3, r7
 8000576:	22ff      	movs	r2, #255	@ 0xff
 8000578:	f803 2c18 	strb.w	r2, [r3, #-24]
        bytes=0x02;
 800057c:	2302      	movs	r3, #2
 800057e:	77fb      	strb	r3, [r7, #31]

    break;
 8000580:	bf00      	nop
    }

    UP_sendInfo(bufAux,bytes);
 8000582:	7ffa      	ldrb	r2, [r7, #31]
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fdee 	bl	800016c <UP_sendInfo>
}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200001f4 	.word	0x200001f4
 800059c:	20000000 	.word	0x20000000

080005a0 <UP_datafromUSB>:

void UP_datafromUSB(uint8_t *buf, uint16_t length) {
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	81fb      	strh	r3, [r7, #14]
 80005b0:	e014      	b.n	80005dc <UP_datafromUSB+0x3c>
	datosCom1.bufferRx[datosCom1.indexWriteRx] = buf[i];
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	441a      	add	r2, r3
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <UP_datafromUSB+0x50>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	490c      	ldr	r1, [pc, #48]	@ (80005f0 <UP_datafromUSB+0x50>)
 80005be:	78c9      	ldrb	r1, [r1, #3]
 80005c0:	b2c9      	uxtb	r1, r1
 80005c2:	440b      	add	r3, r1
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	701a      	strb	r2, [r3, #0]
	datosCom1.indexWriteRx++;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <UP_datafromUSB+0x50>)
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <UP_datafromUSB+0x50>)
 80005d4:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	81fb      	strh	r3, [r7, #14]
 80005dc:	89fa      	ldrh	r2, [r7, #14]
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3e6      	bcc.n	80005b2 <UP_datafromUSB+0x12>
  }

}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	200001f8 	.word	0x200001f8

080005f4 <ret_eng_Values>:

int16_t ret_eng_Values(){
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	return value;
 80005f8:	4b03      	ldr	r3, [pc, #12]	@ (8000608 <ret_eng_Values+0x14>)
 80005fa:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000

0800060c <HAL_ADC_ConvCpltCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

	uint8_t u=0;
 8000614:	2300      	movs	r3, #0
 8000616:	77fb      	strb	r3, [r7, #31]
	char palabra[18];

	for(u=0;u<NUM_CHANNELS;u++){
 8000618:	2300      	movs	r3, #0
 800061a:	77fb      	strb	r3, [r7, #31]
 800061c:	e00c      	b.n	8000638 <HAL_ADC_ConvCpltCallback+0x2c>

//		casts.u16[0]=adcBuffer[u];
		sprintf(&palabra[0],"Channel %d:%i\n",u,adcBuffer[u]);
 800061e:	7ffa      	ldrb	r2, [r7, #31]
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	490b      	ldr	r1, [pc, #44]	@ (8000650 <HAL_ADC_ConvCpltCallback+0x44>)
 8000624:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000628:	f107 000c 	add.w	r0, r7, #12
 800062c:	4909      	ldr	r1, [pc, #36]	@ (8000654 <HAL_ADC_ConvCpltCallback+0x48>)
 800062e:	f009 fc33 	bl	8009e98 <siprintf>
	for(u=0;u<NUM_CHANNELS;u++){
 8000632:	7ffb      	ldrb	r3, [r7, #31]
 8000634:	3301      	adds	r3, #1
 8000636:	77fb      	strb	r3, [r7, #31]
 8000638:	7ffb      	ldrb	r3, [r7, #31]
 800063a:	2b07      	cmp	r3, #7
 800063c:	d9ef      	bls.n	800061e <HAL_ADC_ConvCpltCallback+0x12>
//		memcpy(datosComSerie.bufferTx,palabra,sizeof(palabra));
//		datosComSerie.indexWriteTx  += sizeof(palabra);
	}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800063e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000644:	f001 feb6 	bl	80023b4 <HAL_GPIO_TogglePin>
}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000328 	.word	0x20000328
 8000654:	0800a810 	.word	0x0800a810
 8000658:	40011000 	.word	0x40011000

0800065c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	IS10MS=TRUE;
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000666:	7813      	ldrb	r3, [r2, #0]
 8000668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800066c:	7013      	strb	r3, [r2, #0]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000338 	.word	0x20000338

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t counter=0;
 8000682:	2300      	movs	r3, #0
 8000684:	71fb      	strb	r3, [r7, #7]
	uint8_t DMAcounter=0;
 8000686:	2300      	movs	r3, #0
 8000688:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fd07 	bl	800109c <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(&UP_datafromUSB);
 800068e:	483d      	ldr	r0, [pc, #244]	@ (8000784 <main+0x108>)
 8000690:	f009 f83c 	bl	800970c <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 8000694:	4b3c      	ldr	r3, [pc, #240]	@ (8000788 <main+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 800069a:	4b3b      	ldr	r3, [pc, #236]	@ (8000788 <main+0x10c>)
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
  myFlags.allFlags=0;
 80006a0:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <main+0x110>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f87d 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 fa67 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f000 fa47 	bl	8000b40 <MX_DMA_Init>
  MX_ADC1_Init();
 80006b2:	f000 f8d5 	bl	8000860 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006b6:	f000 f975 	bl	80009a4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80006ba:	f008 fee5 	bl	8009488 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80006be:	f000 f9bd 	bl	8000a3c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006c2:	4833      	ldr	r0, [pc, #204]	@ (8000790 <main+0x114>)
 80006c4:	f004 f8d4 	bl	8004870 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80006c8:	2104      	movs	r1, #4
 80006ca:	4832      	ldr	r0, [pc, #200]	@ (8000794 <main+0x118>)
 80006cc:	f004 f97a 	bl	80049c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006d0:	2100      	movs	r1, #0
 80006d2:	4830      	ldr	r0, [pc, #192]	@ (8000794 <main+0x118>)
 80006d4:	f004 f976 	bl	80049c4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(Engine1_GPIO_Port, Engine1_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2180      	movs	r1, #128	@ 0x80
 80006dc:	482e      	ldr	r0, [pc, #184]	@ (8000798 <main+0x11c>)
 80006de:	f001 fe51 	bl	8002384 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Engine2_GPIO_Port, Engine2_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	@ 0x40
 80006e6:	482c      	ldr	r0, [pc, #176]	@ (8000798 <main+0x11c>)
 80006e8:	f001 fe4c 	bl	8002384 <HAL_GPIO_WritePin>

  UP_initprotocol(&datosComSerie,(uint8_t*)RINGBUFFER);
 80006ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f0:	4825      	ldr	r0, [pc, #148]	@ (8000788 <main+0x10c>)
 80006f2:	f7ff fd2b 	bl	800014c <UP_initprotocol>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	comunicationsTask(&datosComSerie);
 80006f6:	4824      	ldr	r0, [pc, #144]	@ (8000788 <main+0x10c>)
 80006f8:	f000 faac 	bl	8000c54 <comunicationsTask>

	if(IS10MS){
 80006fc:	4b23      	ldr	r3, [pc, #140]	@ (800078c <main+0x110>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0f5      	beq.n	80006f6 <main+0x7a>
		if(counter>10){
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b0a      	cmp	r3, #10
 800070e:	d919      	bls.n	8000744 <main+0xc8>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,ret_eng_Values());
 8000710:	f7ff ff70 	bl	80005f4 <ret_eng_Values>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <main+0x118>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	639a      	str	r2, [r3, #56]	@ 0x38
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,ret_eng_Values());
 800071e:	f7ff ff69 	bl	80005f4 <ret_eng_Values>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <main+0x118>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(Engine1_1_GPIO_Port, Engine1_1_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	4819      	ldr	r0, [pc, #100]	@ (8000798 <main+0x11c>)
 8000732:	f001 fe27 	bl	8002384 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Engine1_1_GPIO_Port, Engine1_1_Pin, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2110      	movs	r1, #16
 800073a:	4817      	ldr	r0, [pc, #92]	@ (8000798 <main+0x11c>)
 800073c:	f001 fe22 	bl	8002384 <HAL_GPIO_WritePin>
			counter=0;
 8000740:	2300      	movs	r3, #0
 8000742:	71fb      	strb	r3, [r7, #7]
		}
		if(DMAcounter>100){
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2b64      	cmp	r3, #100	@ 0x64
 8000748:	d906      	bls.n	8000758 <main+0xdc>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, 8);
 800074a:	2208      	movs	r2, #8
 800074c:	4913      	ldr	r1, [pc, #76]	@ (800079c <main+0x120>)
 800074e:	4814      	ldr	r0, [pc, #80]	@ (80007a0 <main+0x124>)
 8000750:	f000 fdde 	bl	8001310 <HAL_ADC_Start_DMA>
			DMAcounter=0;
 8000754:	2300      	movs	r3, #0
 8000756:	71bb      	strb	r3, [r7, #6]
		}
		IS10MS=!IS10MS;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <main+0x110>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	bf0c      	ite	eq
 8000766:	2301      	moveq	r3, #1
 8000768:	2300      	movne	r3, #0
 800076a:	b2d9      	uxtb	r1, r3
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <main+0x110>)
 800076e:	7813      	ldrb	r3, [r2, #0]
 8000770:	f361 1386 	bfi	r3, r1, #6, #1
 8000774:	7013      	strb	r3, [r2, #0]
		counter++;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3301      	adds	r3, #1
 800077a:	71fb      	strb	r3, [r7, #7]
		DMAcounter++;
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	3301      	adds	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
	comunicationsTask(&datosComSerie);
 8000782:	e7b8      	b.n	80006f6 <main+0x7a>
 8000784:	080005a1 	.word	0x080005a1
 8000788:	20000314 	.word	0x20000314
 800078c:	20000338 	.word	0x20000338
 8000790:	20000284 	.word	0x20000284
 8000794:	200002cc 	.word	0x200002cc
 8000798:	40010c00 	.word	0x40010c00
 800079c:	20000328 	.word	0x20000328
 80007a0:	20000210 	.word	0x20000210

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	@ 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ae:	2228      	movs	r2, #40	@ 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f009 fb92 	bl	8009edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fb54 	bl	8003ea8 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000806:	f000 fa6f 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800081a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fdc0 	bl	80043ac <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000832:	f000 fa59 	bl	8000ce8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000836:	2312      	movs	r3, #18
 8000838:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800083a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800083e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f003 ff0c 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000852:	f000 fa49 	bl	8000ce8 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	@ 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000870:	4b4a      	ldr	r3, [pc, #296]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000872:	4a4b      	ldr	r2, [pc, #300]	@ (80009a0 <MX_ADC1_Init+0x140>)
 8000874:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000876:	4b49      	ldr	r3, [pc, #292]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087e:	4b47      	ldr	r3, [pc, #284]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000880:	2200      	movs	r2, #0
 8000882:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000884:	4b45      	ldr	r3, [pc, #276]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000886:	2200      	movs	r2, #0
 8000888:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088a:	4b44      	ldr	r3, [pc, #272]	@ (800099c <MX_ADC1_Init+0x13c>)
 800088c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000890:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000892:	4b42      	ldr	r3, [pc, #264]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000898:	4b40      	ldr	r3, [pc, #256]	@ (800099c <MX_ADC1_Init+0x13c>)
 800089a:	2208      	movs	r2, #8
 800089c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089e:	483f      	ldr	r0, [pc, #252]	@ (800099c <MX_ADC1_Init+0x13c>)
 80008a0:	f000 fc5e 	bl	8001160 <HAL_ADC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008aa:	f000 fa1d 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80008b6:	2307      	movs	r3, #7
 80008b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4837      	ldr	r0, [pc, #220]	@ (800099c <MX_ADC1_Init+0x13c>)
 80008c0:	f000 fede 	bl	8001680 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fa0d 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	4830      	ldr	r0, [pc, #192]	@ (800099c <MX_ADC1_Init+0x13c>)
 80008dc:	f000 fed0 	bl	8001680 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80008e6:	f000 f9ff 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4829      	ldr	r0, [pc, #164]	@ (800099c <MX_ADC1_Init+0x13c>)
 80008f8:	f000 fec2 	bl	8001680 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 f9f1 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000906:	2303      	movs	r3, #3
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800090a:	2304      	movs	r3, #4
 800090c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	4822      	ldr	r0, [pc, #136]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000914:	f000 feb4 	bl	8001680 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800091e:	f000 f9e3 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000922:	2304      	movs	r3, #4
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000926:	2305      	movs	r3, #5
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	481b      	ldr	r0, [pc, #108]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000930:	f000 fea6 	bl	8001680 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800093a:	f000 f9d5 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800093e:	2305      	movs	r3, #5
 8000940:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000942:	2306      	movs	r3, #6
 8000944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4814      	ldr	r0, [pc, #80]	@ (800099c <MX_ADC1_Init+0x13c>)
 800094c:	f000 fe98 	bl	8001680 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000956:	f000 f9c7 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800095a:	2306      	movs	r3, #6
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800095e:	2307      	movs	r3, #7
 8000960:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000968:	f000 fe8a 	bl	8001680 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000972:	f000 f9b9 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000976:	2307      	movs	r3, #7
 8000978:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800097a:	2308      	movs	r3, #8
 800097c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <MX_ADC1_Init+0x13c>)
 8000984:	f000 fe7c 	bl	8001680 <HAL_ADC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800098e:	f000 f9ab 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000210 	.word	0x20000210
 80009a0:	40012400 	.word	0x40012400

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009ca:	2247      	movs	r2, #71	@ 0x47
 80009cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e8:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <MX_TIM2_Init+0x94>)
 80009ea:	f003 fef1 	bl	80047d0 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f4:	f000 f978 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_TIM2_Init+0x94>)
 8000a06:	f004 fa31 	bl	8004e6c <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a10:	f000 f96a 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_TIM2_Init+0x94>)
 8000a22:	f004 fdbf 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 f95c 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000284 	.word	0x20000284

08000a3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	@ 0x38
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a6c:	4b32      	ldr	r3, [pc, #200]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a6e:	4a33      	ldr	r2, [pc, #204]	@ (8000b3c <MX_TIM4_Init+0x100>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000a72:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a74:	2247      	movs	r2, #71	@ 0x47
 8000a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b2f      	ldr	r3, [pc, #188]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a80:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a92:	4829      	ldr	r0, [pc, #164]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000a94:	f003 fe9c 	bl	80047d0 <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a9e:	f000 f923 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4822      	ldr	r0, [pc, #136]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000ab0:	f004 f9dc 	bl	8004e6c <HAL_TIM_ConfigClockSource>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000aba:	f000 f915 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000abe:	481e      	ldr	r0, [pc, #120]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000ac0:	f003 ff28 	bl	8004914 <HAL_TIM_PWM_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000aca:	f000 f90d 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	4619      	mov	r1, r3
 8000adc:	4816      	ldr	r0, [pc, #88]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000ade:	f004 fd61 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ae8:	f000 f8fe 	bl	8000ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	@ 0x60
 8000aee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000af4:	2302      	movs	r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000b04:	f004 f8f0 	bl	8004ce8 <HAL_TIM_PWM_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b0e:	f000 f8eb 	bl	8000ce8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2204      	movs	r2, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000b1a:	f004 f8e5 	bl	8004ce8 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000b24:	f000 f8e0 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b28:	4803      	ldr	r0, [pc, #12]	@ (8000b38 <MX_TIM4_Init+0xfc>)
 8000b2a:	f000 f9c5 	bl	8000eb8 <HAL_TIM_MspPostInit>

}
 8000b2e:	bf00      	nop
 8000b30:	3738      	adds	r7, #56	@ 0x38
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200002cc 	.word	0x200002cc
 8000b3c:	40000800 	.word	0x40000800

08000b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_DMA_Init+0x38>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b78 <MX_DMA_Init+0x38>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_DMA_Init+0x38>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	200b      	movs	r0, #11
 8000b64:	f001 f865 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b68:	200b      	movs	r0, #11
 8000b6a:	f001 f87e 	bl	8001c6a <HAL_NVIC_EnableIRQ>

}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2c      	ldr	r2, [pc, #176]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a26      	ldr	r2, [pc, #152]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bae:	f043 0320 	orr.w	r3, r3, #32
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0320 	and.w	r3, r3, #32
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a20      	ldr	r2, [pc, #128]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_GPIO_Init+0xcc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf6:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <MX_GPIO_Init+0xd0>)
 8000bf8:	f001 fbc4 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Engine1_1_Pin|Engine1_2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2130      	movs	r1, #48	@ 0x30
 8000c00:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <MX_GPIO_Init+0xd4>)
 8000c02:	f001 fbbf 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480b      	ldr	r0, [pc, #44]	@ (8000c4c <MX_GPIO_Init+0xd0>)
 8000c20:	f001 fa2c 	bl	800207c <HAL_GPIO_Init>

  /*Configure GPIO pins : Engine1_1_Pin Engine1_2_Pin */
  GPIO_InitStruct.Pin = Engine1_1_Pin|Engine1_2_Pin;
 8000c24:	2330      	movs	r3, #48	@ 0x30
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_GPIO_Init+0xd4>)
 8000c3c:	f001 fa1e 	bl	800207c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <comunicationsTask>:

/* USER CODE BEGIN 4 */

void comunicationsTask(_sDato *datosCom){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	791a      	ldrb	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	78db      	ldrb	r3, [r3, #3]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d007      	beq.n	8000c7a <comunicationsTask+0x26>
		UP_decodeHeader(datosCom);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fb2a 	bl	80002c4 <UP_decodeHeader>
		datosComSerie.indexReadRx=datosComSerie.indexWriteRx;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <comunicationsTask+0x90>)
 8000c72:	78db      	ldrb	r3, [r3, #3]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <comunicationsTask+0x90>)
 8000c78:	711a      	strb	r2, [r3, #4]
	}

	if(datosCom->indexReadTx!=datosCom->indexWriteTx ){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	799a      	ldrb	r2, [r3, #6]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d02a      	beq.n	8000cdc <comunicationsTask+0x88>

		if(datosCom->indexWriteTx > datosCom->indexReadTx){
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	795a      	ldrb	r2, [r3, #5]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	799b      	ldrb	r3, [r3, #6]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d908      	bls.n	8000ca4 <comunicationsTask+0x50>
				datosComSerie.bytesTosend = datosCom->indexWriteTx - datosCom->indexReadTx;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	795a      	ldrb	r2, [r3, #5]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	799b      	ldrb	r3, [r3, #6]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <comunicationsTask+0x90>)
 8000ca0:	741a      	strb	r2, [r3, #16]
 8000ca2:	e005      	b.n	8000cb0 <comunicationsTask+0x5c>
		    }else{
		    	datosComSerie.bytesTosend =  RINGBUFFER - datosCom->indexReadTx;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	799b      	ldrb	r3, [r3, #6]
 8000ca8:	425b      	negs	r3, r3
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <comunicationsTask+0x90>)
 8000cae:	741a      	strb	r2, [r3, #16]
		    }
		    if(CDC_Transmit_FS(&datosComSerie.bufferTx[datosCom->indexReadTx], datosComSerie.bytesTosend) == USBD_OK){
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <comunicationsTask+0x90>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	7992      	ldrb	r2, [r2, #6]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <comunicationsTask+0x90>)
 8000cbc:	7c12      	ldrb	r2, [r2, #16]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f008 fcfd 	bl	80096c0 <CDC_Transmit_FS>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d107      	bne.n	8000cdc <comunicationsTask+0x88>
		    	datosCom->indexReadTx += datosComSerie.bytesTosend;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	799a      	ldrb	r2, [r3, #6]
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <comunicationsTask+0x90>)
 8000cd2:	7c1b      	ldrb	r3, [r3, #16]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	719a      	strb	r2, [r3, #6]
		    }
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000314 	.word	0x20000314

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_MspInit+0x5c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <HAL_MspInit+0x5c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <HAL_MspInit+0x5c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <HAL_MspInit+0x5c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_MspInit+0x60>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_MspInit+0x60>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010000 	.word	0x40010000

08000d58 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a2c      	ldr	r2, [pc, #176]	@ (8000e24 <HAL_ADC_MspInit+0xcc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d151      	bne.n	8000e1c <HAL_ADC_MspInit+0xc4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d78:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <HAL_ADC_MspInit+0xd0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <HAL_ADC_MspInit+0xd0>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <HAL_ADC_MspInit+0xd0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <HAL_ADC_MspInit+0xd0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a24      	ldr	r2, [pc, #144]	@ (8000e28 <HAL_ADC_MspInit+0xd0>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <HAL_ADC_MspInit+0xd0>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000da8:	23ff      	movs	r3, #255	@ 0xff
 8000daa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dac:	2303      	movs	r3, #3
 8000dae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4619      	mov	r1, r3
 8000db6:	481d      	ldr	r0, [pc, #116]	@ (8000e2c <HAL_ADC_MspInit+0xd4>)
 8000db8:	f001 f960 	bl	800207c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000e34 <HAL_ADC_MspInit+0xdc>)
 8000dc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df0:	480f      	ldr	r0, [pc, #60]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000df2:	f000 ff55 	bl	8001ca0 <HAL_DMA_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000dfc:	f7ff ff74 	bl	8000ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000e04:	621a      	str	r2, [r3, #32]
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <HAL_ADC_MspInit+0xd8>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2012      	movs	r0, #18
 8000e12:	f000 ff0e 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e16:	2012      	movs	r0, #18
 8000e18:	f000 ff27 	bl	8001c6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012400 	.word	0x40012400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	20000240 	.word	0x20000240
 8000e34:	40020008 	.word	0x40020008

08000e38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e48:	d114      	bne.n	8000e74 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4a:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x78>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a18      	ldr	r2, [pc, #96]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x78>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x78>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	201c      	movs	r0, #28
 8000e68:	f000 fee3 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f000 fefc 	bl	8001c6a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e72:	e018      	b.n	8000ea6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d113      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x78>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x78>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x78>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	201e      	movs	r0, #30
 8000e9c:	f000 fec9 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ea0:	201e      	movs	r0, #30
 8000ea2:	f000 fee2 	bl	8001c6a <HAL_NVIC_EnableIRQ>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40000800 	.word	0x40000800

08000eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_TIM_MspPostInit+0x58>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d117      	bne.n	8000f08 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_TIM_MspPostInit+0x5c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <HAL_TIM_MspPostInit+0x5c>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_TIM_MspPostInit+0x5c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Engine2_Pin|Engine1_Pin;
 8000ef0:	23c0      	movs	r3, #192	@ 0xc0
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_TIM_MspPostInit+0x60>)
 8000f04:	f001 f8ba 	bl	800207c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40000800 	.word	0x40000800
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <NMI_Handler+0x4>

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <MemManage_Handler+0x4>

08000f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f8dc 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <DMA1_Channel1_IRQHandler+0x10>)
 8000f7a:	f000 ff4b 	bl	8001e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000240 	.word	0x20000240

08000f88 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <ADC1_2_IRQHandler+0x10>)
 8000f8e:	f000 fa9d 	bl	80014cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000210 	.word	0x20000210

08000f9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fa2:	f001 fb3c 	bl	800261e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20001010 	.word	0x20001010

08000fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <TIM2_IRQHandler+0x10>)
 8000fb6:	f003 fda7 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000284 	.word	0x20000284

08000fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <TIM4_IRQHandler+0x10>)
 8000fca:	f003 fd9d 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002cc 	.word	0x200002cc

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	@ (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f008 ff70 	bl	8009eec <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20005000 	.word	0x20005000
 8001038:	00000400 	.word	0x00000400
 800103c:	2000033c 	.word	0x2000033c
 8001040:	20001650 	.word	0x20001650

08001044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001050:	f7ff fff8 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480b      	ldr	r0, [pc, #44]	@ (8001084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001056:	490c      	ldr	r1, [pc, #48]	@ (8001088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001058:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <LoopFillZerobss+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800106c:	4c09      	ldr	r4, [pc, #36]	@ (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f008 ff3d 	bl	8009ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107e:	f7ff fafd 	bl	800067c <main>
  bx lr
 8001082:	4770      	bx	lr
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800108c:	0800a8c8 	.word	0x0800a8c8
  ldr r2, =_sbss
 8001090:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001094:	20001650 	.word	0x20001650

08001098 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <CAN1_RX1_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <HAL_Init+0x28>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <HAL_Init+0x28>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 fdb5 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fe1c 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fdcd 	bl	8001c86 <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 fd95 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000004 	.word	0x20000004
 8001120:	2000000c 	.word	0x2000000c
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a03      	ldr	r2, [pc, #12]	@ (8001148 <HAL_IncTick+0x20>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000340 	.word	0x20000340

0800114c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	@ (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	20000340 	.word	0x20000340

08001160 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0be      	b.n	8001300 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fdda 	bl	8000d58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fbbd 	bl	8001924 <ADC_ConversionStop_Disable>
 80011aa:	4603      	mov	r3, r0
 80011ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 8099 	bne.w	80012ee <HAL_ADC_Init+0x18e>
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f040 8095 	bne.w	80012ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011cc:	f023 0302 	bic.w	r3, r3, #2
 80011d0:	f043 0202 	orr.w	r2, r3, #2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b1b      	ldrb	r3, [r3, #12]
 80011e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011f8:	d003      	beq.n	8001202 <HAL_ADC_Init+0xa2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_ADC_Init+0xa8>
 8001202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001206:	e000      	b.n	800120a <HAL_ADC_Init+0xaa>
 8001208:	2300      	movs	r3, #0
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7d1b      	ldrb	r3, [r3, #20]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d119      	bne.n	800124c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7b1b      	ldrb	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	3b01      	subs	r3, #1
 8001226:	035a      	lsls	r2, r3, #13
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	e00b      	b.n	800124c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	f043 0220 	orr.w	r2, r3, #32
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <HAL_ADC_Init+0x1a8>)
 8001268:	4013      	ands	r3, r2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	430b      	orrs	r3, r1
 8001272:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800127c:	d003      	beq.n	8001286 <HAL_ADC_Init+0x126>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d104      	bne.n	8001290 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	3b01      	subs	r3, #1
 800128c:	051b      	lsls	r3, r3, #20
 800128e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001296:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_ADC_Init+0x1ac>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10b      	bne.n	80012cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012be:	f023 0303 	bic.w	r3, r3, #3
 80012c2:	f043 0201 	orr.w	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ca:	e018      	b.n	80012fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	f023 0312 	bic.w	r3, r3, #18
 80012d4:	f043 0210 	orr.w	r2, r3, #16
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ec:	e007      	b.n	80012fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	ffe1f7fd 	.word	0xffe1f7fd
 800130c:	ff1f0efe 	.word	0xff1f0efe

08001310 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a64      	ldr	r2, [pc, #400]	@ (80014b8 <HAL_ADC_Start_DMA+0x1a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d004      	beq.n	8001334 <HAL_ADC_Start_DMA+0x24>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a63      	ldr	r2, [pc, #396]	@ (80014bc <HAL_ADC_Start_DMA+0x1ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d106      	bne.n	8001342 <HAL_ADC_Start_DMA+0x32>
 8001334:	4b60      	ldr	r3, [pc, #384]	@ (80014b8 <HAL_ADC_Start_DMA+0x1a8>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 80b3 	bne.w	80014a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_ADC_Start_DMA+0x40>
 800134c:	2302      	movs	r3, #2
 800134e:	e0ae      	b.n	80014ae <HAL_ADC_Start_DMA+0x19e>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fa89 	bl	8001870 <ADC_Enable>
 800135e:	4603      	mov	r3, r0
 8001360:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f040 809a 	bne.w	800149e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a4e      	ldr	r2, [pc, #312]	@ (80014bc <HAL_ADC_Start_DMA+0x1ac>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d105      	bne.n	8001394 <HAL_ADC_Start_DMA+0x84>
 8001388:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <HAL_ADC_Start_DMA+0x1a8>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d115      	bne.n	80013c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001398:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d026      	beq.n	80013fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013be:	e01d      	b.n	80013fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a39      	ldr	r2, [pc, #228]	@ (80014b8 <HAL_ADC_Start_DMA+0x1a8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_ADC_Start_DMA+0xd0>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a38      	ldr	r2, [pc, #224]	@ (80014bc <HAL_ADC_Start_DMA+0x1ac>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d10d      	bne.n	80013fc <HAL_ADC_Start_DMA+0xec>
 80013e0:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <HAL_ADC_Start_DMA+0x1a8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140c:	f023 0206 	bic.w	r2, r3, #6
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001414:	e002      	b.n	800141c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <HAL_ADC_Start_DMA+0x1b0>)
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <HAL_ADC_Start_DMA+0x1b4>)
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <HAL_ADC_Start_DMA+0x1b8>)
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f06f 0202 	mvn.w	r2, #2
 8001444:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001454:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a18      	ldr	r0, [r3, #32]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	334c      	adds	r3, #76	@ 0x4c
 8001460:	4619      	mov	r1, r3
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f000 fc75 	bl	8001d54 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001474:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001478:	d108      	bne.n	800148c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001488:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800148a:	e00f      	b.n	80014ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800149a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800149c:	e006      	b.n	80014ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80014a6:	e001      	b.n	80014ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012400 	.word	0x40012400
 80014bc:	40012800 	.word	0x40012800
 80014c0:	080019a7 	.word	0x080019a7
 80014c4:	08001a23 	.word	0x08001a23
 80014c8:	08001a3f 	.word	0x08001a3f

080014cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03e      	beq.n	800156c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d039      	beq.n	800156c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800151a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800151e:	d11d      	bne.n	800155c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001524:	2b00      	cmp	r3, #0
 8001526:	d119      	bne.n	800155c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0220 	bic.w	r2, r2, #32
 8001536:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d105      	bne.n	800155c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff f855 	bl	800060c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0212 	mvn.w	r2, #18
 800156a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001572:	2b00      	cmp	r3, #0
 8001574:	d04d      	beq.n	8001612 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d048      	beq.n	8001612 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80015a2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80015a6:	d012      	beq.n	80015ce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d125      	bne.n	8001602 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015c0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015c4:	d11d      	bne.n	8001602 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d119      	bne.n	8001602 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015dc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d105      	bne.n	8001602 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fa35 	bl	8001a72 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f06f 020c 	mvn.w	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d012      	beq.n	8001642 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f812 	bl	800165c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0201 	mvn.w	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x20>
 800169c:	2302      	movs	r3, #2
 800169e:	e0dc      	b.n	800185a <HAL_ADC_ConfigChannel+0x1da>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b06      	cmp	r3, #6
 80016ae:	d81c      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b05      	subs	r3, #5
 80016c2:	221f      	movs	r2, #31
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	4019      	ands	r1, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b05      	subs	r3, #5
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e8:	e03c      	b.n	8001764 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d81c      	bhi.n	800172c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b23      	subs	r3, #35	@ 0x23
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	3b23      	subs	r3, #35	@ 0x23
 800171e:	fa00 f203 	lsl.w	r2, r0, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	631a      	str	r2, [r3, #48]	@ 0x30
 800172a:	e01b      	b.n	8001764 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b41      	subs	r3, #65	@ 0x41
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	3b41      	subs	r3, #65	@ 0x41
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b09      	cmp	r3, #9
 800176a:	d91c      	bls.n	80017a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	3b1e      	subs	r3, #30
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	3b1e      	subs	r3, #30
 8001798:	fa00 f203 	lsl.w	r2, r0, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	e019      	b.n	80017da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6919      	ldr	r1, [r3, #16]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	2207      	movs	r2, #7
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	4019      	ands	r1, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6898      	ldr	r0, [r3, #8]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017e6:	2b11      	cmp	r3, #17
 80017e8:	d132      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <HAL_ADC_ConfigChannel+0x1e4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d125      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d126      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001810:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d11a      	bne.n	8001850 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_ADC_ConfigChannel+0x1e8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a13      	ldr	r2, [pc, #76]	@ (800186c <HAL_ADC_ConfigChannel+0x1ec>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	0c9a      	lsrs	r2, r3, #18
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001830:	e002      	b.n	8001838 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x1b2>
 800183e:	e007      	b.n	8001850 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40012400 	.word	0x40012400
 8001868:	20000004 	.word	0x20000004
 800186c:	431bde83 	.word	0x431bde83

08001870 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b01      	cmp	r3, #1
 800188c:	d040      	beq.n	8001910 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <ADC_Enable+0xac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001920 <ADC_Enable+0xb0>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018ac:	e002      	b.n	80018b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f9      	bne.n	80018ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ba:	f7ff fc47 	bl	800114c <HAL_GetTick>
 80018be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018c0:	e01f      	b.n	8001902 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018c2:	f7ff fc43 	bl	800114c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d918      	bls.n	8001902 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d011      	beq.n	8001902 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e007      	b.n	8001912 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d1d8      	bne.n	80018c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000004 	.word	0x20000004
 8001920:	431bde83 	.word	0x431bde83

08001924 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b01      	cmp	r3, #1
 800193c:	d12e      	bne.n	800199c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800194e:	f7ff fbfd 	bl	800114c <HAL_GetTick>
 8001952:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001954:	e01b      	b.n	800198e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001956:	f7ff fbf9 	bl	800114c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d914      	bls.n	800198e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10d      	bne.n	800198e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	f043 0210 	orr.w	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e007      	b.n	800199e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d0dc      	beq.n	8001956 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d127      	bne.n	8001a10 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019da:	d115      	bne.n	8001a08 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7fe fdff 	bl	800060c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a0e:	e004      	b.n	8001a1a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fe0a 	bl	800164a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5c:	f043 0204 	orr.w	r2, r3, #4
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fe02 	bl	800166e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4906      	ldr	r1, [pc, #24]	@ (8001b1c <__NVIC_EnableIRQ+0x34>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	@ (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	@ (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	@ 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff90 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff2d 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff42 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff90 	bl	8001b74 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5f 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff35 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffa2 	bl	8001bd8 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e043      	b.n	8001d3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_DMA_Init+0xa8>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a22      	ldr	r2, [pc, #136]	@ (8001d4c <HAL_DMA_Init+0xac>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	009a      	lsls	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <HAL_DMA_Init+0xb0>)
 8001cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001cea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001cee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	bffdfff8 	.word	0xbffdfff8
 8001d4c:	cccccccd 	.word	0xcccccccd
 8001d50:	40020000 	.word	0x40020000

08001d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Start_IT+0x20>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e04b      	b.n	8001e0c <HAL_DMA_Start_IT+0xb8>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d13a      	bne.n	8001dfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f937 	bl	8002020 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d008      	beq.n	8001dcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 020e 	orr.w	r2, r2, #14
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e00f      	b.n	8001dec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0204 	bic.w	r2, r2, #4
 8001dda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 020a 	orr.w	r2, r2, #10
 8001dea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e005      	b.n	8001e0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	2204      	movs	r2, #4
 8001e32:	409a      	lsls	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d04f      	beq.n	8001edc <HAL_DMA_IRQHandler+0xc8>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d04a      	beq.n	8001edc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a66      	ldr	r2, [pc, #408]	@ (8002004 <HAL_DMA_IRQHandler+0x1f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d029      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0xae>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <HAL_DMA_IRQHandler+0x1f4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_IRQHandler+0xaa>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a63      	ldr	r2, [pc, #396]	@ (800200c <HAL_DMA_IRQHandler+0x1f8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01a      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0xa4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a62      	ldr	r2, [pc, #392]	@ (8002010 <HAL_DMA_IRQHandler+0x1fc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x9e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a60      	ldr	r2, [pc, #384]	@ (8002014 <HAL_DMA_IRQHandler+0x200>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00a      	beq.n	8001eac <HAL_DMA_IRQHandler+0x98>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002018 <HAL_DMA_IRQHandler+0x204>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d102      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x92>
 8001ea0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ea4:	e00e      	b.n	8001ec4 <HAL_DMA_IRQHandler+0xb0>
 8001ea6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001eaa:	e00b      	b.n	8001ec4 <HAL_DMA_IRQHandler+0xb0>
 8001eac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001eb0:	e008      	b.n	8001ec4 <HAL_DMA_IRQHandler+0xb0>
 8001eb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001eb6:	e005      	b.n	8001ec4 <HAL_DMA_IRQHandler+0xb0>
 8001eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ebc:	e002      	b.n	8001ec4 <HAL_DMA_IRQHandler+0xb0>
 8001ebe:	2340      	movs	r3, #64	@ 0x40
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_IRQHandler+0xb0>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	4a55      	ldr	r2, [pc, #340]	@ (800201c <HAL_DMA_IRQHandler+0x208>)
 8001ec6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8094 	beq.w	8001ffa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001eda:	e08e      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d056      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x186>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d051      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10b      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 020a 	bic.w	r2, r2, #10
 8001f12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a38      	ldr	r2, [pc, #224]	@ (8002004 <HAL_DMA_IRQHandler+0x1f0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d029      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x166>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a37      	ldr	r2, [pc, #220]	@ (8002008 <HAL_DMA_IRQHandler+0x1f4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x162>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a35      	ldr	r2, [pc, #212]	@ (800200c <HAL_DMA_IRQHandler+0x1f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01a      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x15c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <HAL_DMA_IRQHandler+0x1fc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d012      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x156>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a32      	ldr	r2, [pc, #200]	@ (8002014 <HAL_DMA_IRQHandler+0x200>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00a      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x150>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <HAL_DMA_IRQHandler+0x204>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d102      	bne.n	8001f5e <HAL_DMA_IRQHandler+0x14a>
 8001f58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f5c:	e00e      	b.n	8001f7c <HAL_DMA_IRQHandler+0x168>
 8001f5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f62:	e00b      	b.n	8001f7c <HAL_DMA_IRQHandler+0x168>
 8001f64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f68:	e008      	b.n	8001f7c <HAL_DMA_IRQHandler+0x168>
 8001f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6e:	e005      	b.n	8001f7c <HAL_DMA_IRQHandler+0x168>
 8001f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f74:	e002      	b.n	8001f7c <HAL_DMA_IRQHandler+0x168>
 8001f76:	2320      	movs	r3, #32
 8001f78:	e000      	b.n	8001f7c <HAL_DMA_IRQHandler+0x168>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	4a27      	ldr	r2, [pc, #156]	@ (800201c <HAL_DMA_IRQHandler+0x208>)
 8001f7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d034      	beq.n	8001ffa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f98:	e02f      	b.n	8001ffa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d028      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x1e8>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d023      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020e 	bic.w	r2, r2, #14
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
    }
  }
  return;
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
}
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40020008 	.word	0x40020008
 8002008:	4002001c 	.word	0x4002001c
 800200c:	40020030 	.word	0x40020030
 8002010:	40020044 	.word	0x40020044
 8002014:	40020058 	.word	0x40020058
 8002018:	4002006c 	.word	0x4002006c
 800201c:	40020000 	.word	0x40020000

08002020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b10      	cmp	r3, #16
 800204c:	d108      	bne.n	8002060 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800205e:	e007      	b.n	8002070 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	60da      	str	r2, [r3, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
	...

0800207c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800207c:	b480      	push	{r7}
 800207e:	b08b      	sub	sp, #44	@ 0x2c
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208e:	e169      	b.n	8002364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002090:	2201      	movs	r2, #1
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8158 	bne.w	800235e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a9a      	ldr	r2, [pc, #616]	@ (800231c <HAL_GPIO_Init+0x2a0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d05e      	beq.n	8002176 <HAL_GPIO_Init+0xfa>
 80020b8:	4a98      	ldr	r2, [pc, #608]	@ (800231c <HAL_GPIO_Init+0x2a0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d875      	bhi.n	80021aa <HAL_GPIO_Init+0x12e>
 80020be:	4a98      	ldr	r2, [pc, #608]	@ (8002320 <HAL_GPIO_Init+0x2a4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d058      	beq.n	8002176 <HAL_GPIO_Init+0xfa>
 80020c4:	4a96      	ldr	r2, [pc, #600]	@ (8002320 <HAL_GPIO_Init+0x2a4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d86f      	bhi.n	80021aa <HAL_GPIO_Init+0x12e>
 80020ca:	4a96      	ldr	r2, [pc, #600]	@ (8002324 <HAL_GPIO_Init+0x2a8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d052      	beq.n	8002176 <HAL_GPIO_Init+0xfa>
 80020d0:	4a94      	ldr	r2, [pc, #592]	@ (8002324 <HAL_GPIO_Init+0x2a8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d869      	bhi.n	80021aa <HAL_GPIO_Init+0x12e>
 80020d6:	4a94      	ldr	r2, [pc, #592]	@ (8002328 <HAL_GPIO_Init+0x2ac>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d04c      	beq.n	8002176 <HAL_GPIO_Init+0xfa>
 80020dc:	4a92      	ldr	r2, [pc, #584]	@ (8002328 <HAL_GPIO_Init+0x2ac>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d863      	bhi.n	80021aa <HAL_GPIO_Init+0x12e>
 80020e2:	4a92      	ldr	r2, [pc, #584]	@ (800232c <HAL_GPIO_Init+0x2b0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d046      	beq.n	8002176 <HAL_GPIO_Init+0xfa>
 80020e8:	4a90      	ldr	r2, [pc, #576]	@ (800232c <HAL_GPIO_Init+0x2b0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d85d      	bhi.n	80021aa <HAL_GPIO_Init+0x12e>
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d82a      	bhi.n	8002148 <HAL_GPIO_Init+0xcc>
 80020f2:	2b12      	cmp	r3, #18
 80020f4:	d859      	bhi.n	80021aa <HAL_GPIO_Init+0x12e>
 80020f6:	a201      	add	r2, pc, #4	@ (adr r2, 80020fc <HAL_GPIO_Init+0x80>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	08002177 	.word	0x08002177
 8002100:	08002151 	.word	0x08002151
 8002104:	08002163 	.word	0x08002163
 8002108:	080021a5 	.word	0x080021a5
 800210c:	080021ab 	.word	0x080021ab
 8002110:	080021ab 	.word	0x080021ab
 8002114:	080021ab 	.word	0x080021ab
 8002118:	080021ab 	.word	0x080021ab
 800211c:	080021ab 	.word	0x080021ab
 8002120:	080021ab 	.word	0x080021ab
 8002124:	080021ab 	.word	0x080021ab
 8002128:	080021ab 	.word	0x080021ab
 800212c:	080021ab 	.word	0x080021ab
 8002130:	080021ab 	.word	0x080021ab
 8002134:	080021ab 	.word	0x080021ab
 8002138:	080021ab 	.word	0x080021ab
 800213c:	080021ab 	.word	0x080021ab
 8002140:	08002159 	.word	0x08002159
 8002144:	0800216d 	.word	0x0800216d
 8002148:	4a79      	ldr	r2, [pc, #484]	@ (8002330 <HAL_GPIO_Init+0x2b4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800214e:	e02c      	b.n	80021aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	623b      	str	r3, [r7, #32]
          break;
 8002156:	e029      	b.n	80021ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	3304      	adds	r3, #4
 800215e:	623b      	str	r3, [r7, #32]
          break;
 8002160:	e024      	b.n	80021ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	3308      	adds	r3, #8
 8002168:	623b      	str	r3, [r7, #32]
          break;
 800216a:	e01f      	b.n	80021ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	330c      	adds	r3, #12
 8002172:	623b      	str	r3, [r7, #32]
          break;
 8002174:	e01a      	b.n	80021ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800217e:	2304      	movs	r3, #4
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e013      	b.n	80021ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800218c:	2308      	movs	r3, #8
 800218e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	611a      	str	r2, [r3, #16]
          break;
 8002196:	e009      	b.n	80021ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002198:	2308      	movs	r3, #8
 800219a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	615a      	str	r2, [r3, #20]
          break;
 80021a2:	e003      	b.n	80021ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
          break;
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x130>
          break;
 80021aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2bff      	cmp	r3, #255	@ 0xff
 80021b0:	d801      	bhi.n	80021b6 <HAL_GPIO_Init+0x13a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	e001      	b.n	80021ba <HAL_GPIO_Init+0x13e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3304      	adds	r3, #4
 80021ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2bff      	cmp	r3, #255	@ 0xff
 80021c0:	d802      	bhi.n	80021c8 <HAL_GPIO_Init+0x14c>
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	e002      	b.n	80021ce <HAL_GPIO_Init+0x152>
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	3b08      	subs	r3, #8
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	210f      	movs	r1, #15
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	6a39      	ldr	r1, [r7, #32]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	431a      	orrs	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80b1 	beq.w	800235e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002334 <HAL_GPIO_Init+0x2b8>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a4c      	ldr	r2, [pc, #304]	@ (8002334 <HAL_GPIO_Init+0x2b8>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <HAL_GPIO_Init+0x2b8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002214:	4a48      	ldr	r2, [pc, #288]	@ (8002338 <HAL_GPIO_Init+0x2bc>)
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002220:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a40      	ldr	r2, [pc, #256]	@ (800233c <HAL_GPIO_Init+0x2c0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_GPIO_Init+0x1ec>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3f      	ldr	r2, [pc, #252]	@ (8002340 <HAL_GPIO_Init+0x2c4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00d      	beq.n	8002264 <HAL_GPIO_Init+0x1e8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a3e      	ldr	r2, [pc, #248]	@ (8002344 <HAL_GPIO_Init+0x2c8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <HAL_GPIO_Init+0x1e4>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3d      	ldr	r2, [pc, #244]	@ (8002348 <HAL_GPIO_Init+0x2cc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d101      	bne.n	800225c <HAL_GPIO_Init+0x1e0>
 8002258:	2303      	movs	r3, #3
 800225a:	e006      	b.n	800226a <HAL_GPIO_Init+0x1ee>
 800225c:	2304      	movs	r3, #4
 800225e:	e004      	b.n	800226a <HAL_GPIO_Init+0x1ee>
 8002260:	2302      	movs	r3, #2
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x1ee>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_GPIO_Init+0x1ee>
 8002268:	2300      	movs	r3, #0
 800226a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800226c:	f002 0203 	and.w	r2, r2, #3
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	4093      	lsls	r3, r2
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800227a:	492f      	ldr	r1, [pc, #188]	@ (8002338 <HAL_GPIO_Init+0x2bc>)
 800227c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	492c      	ldr	r1, [pc, #176]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a2:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4928      	ldr	r1, [pc, #160]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022bc:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	4922      	ldr	r1, [pc, #136]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	491e      	ldr	r1, [pc, #120]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4918      	ldr	r1, [pc, #96]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4914      	ldr	r1, [pc, #80]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d021      	beq.n	8002350 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800230c:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	490e      	ldr	r1, [pc, #56]	@ (800234c <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	e021      	b.n	800235e <HAL_GPIO_Init+0x2e2>
 800231a:	bf00      	nop
 800231c:	10320000 	.word	0x10320000
 8002320:	10310000 	.word	0x10310000
 8002324:	10220000 	.word	0x10220000
 8002328:	10210000 	.word	0x10210000
 800232c:	10120000 	.word	0x10120000
 8002330:	10110000 	.word	0x10110000
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000
 800233c:	40010800 	.word	0x40010800
 8002340:	40010c00 	.word	0x40010c00
 8002344:	40011000 	.word	0x40011000
 8002348:	40011400 	.word	0x40011400
 800234c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_GPIO_Init+0x304>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	43db      	mvns	r3, r3
 8002358:	4909      	ldr	r1, [pc, #36]	@ (8002380 <HAL_GPIO_Init+0x304>)
 800235a:	4013      	ands	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	3301      	adds	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	f47f ae8e 	bne.w	8002090 <HAL_GPIO_Init+0x14>
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	372c      	adds	r7, #44	@ 0x2c
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
 8002390:	4613      	mov	r3, r2
 8002392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002394:	787b      	ldrb	r3, [r7, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023a0:	e003      	b.n	80023aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023a2:	887b      	ldrh	r3, [r7, #2]
 80023a4:	041a      	lsls	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4013      	ands	r3, r2
 80023cc:	041a      	lsls	r2, r3, #16
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43d9      	mvns	r1, r3
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	400b      	ands	r3, r1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	611a      	str	r2, [r3, #16]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0e8      	b.n	80025ca <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f007 fa99 	bl	8009944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f003 f950 	bl	80056ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002434:	f003 f926 	bl	8005684 <USB_CoreInit>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0bf      	b.n	80025ca <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f003 f954 	bl	80056fe <USB_SetCurrentMode>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b0      	b.n	80025ca <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e03e      	b.n	80024ec <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3311      	adds	r3, #17
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3310      	adds	r3, #16
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	440b      	add	r3, r1
 80024a4:	3313      	adds	r3, #19
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	3320      	adds	r3, #32
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3324      	adds	r3, #36	@ 0x24
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3bb      	bcc.n	800246e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	440b      	add	r3, r1
 8002536:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3b5      	bcc.n	80024fc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259a:	f003 f8bc 	bl	8005716 <USB_DevInit>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e00c      	b.n	80025ca <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f005 fb3b 	bl	8007c3e <USB_DevDisconnect>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_PCD_Start+0x16>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e016      	b.n	8002616 <HAL_PCD_Start+0x44>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 f852 	bl	800569e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80025fa:	2101      	movs	r1, #1
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f007 fc14 	bl	8009e2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fb0f 	bl	8007c2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b088      	sub	sp, #32
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fb11 	bl	8007c52 <USB_ReadInterrupts>
 8002630:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fb1a 	bl	8002c76 <PCD_EP_ISR_Handler>

    return;
 8002642:	e119      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264a:	2b00      	cmp	r3, #0
 800264c:	d013      	beq.n	8002676 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002660:	b292      	uxth	r2, r2
 8002662:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f007 f9e7 	bl	8009a3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800266c:	2100      	movs	r1, #0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f905 	bl	800287e <HAL_PCD_SetAddress>

    return;
 8002674:	e100      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002692:	b292      	uxth	r2, r2
 8002694:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002698:	e0ee      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026b6:	b292      	uxth	r2, r2
 80026b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026bc:	e0dc      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d027      	beq.n	8002718 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	b292      	uxth	r2, r2
 80026dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0208 	bic.w	r2, r2, #8
 80026f2:	b292      	uxth	r2, r2
 80026f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f007 f9d7 	bl	8009aac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002710:	b292      	uxth	r2, r2
 8002712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002716:	e0af      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8083 	beq.w	800282a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	77fb      	strb	r3, [r7, #31]
 8002728:	e010      	b.n	800274c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	7ffb      	ldrb	r3, [r7, #31]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	441a      	add	r2, r3
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	8812      	ldrh	r2, [r2, #0]
 800273a:	b292      	uxth	r2, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	3320      	adds	r3, #32
 8002740:	443b      	add	r3, r7
 8002742:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002746:	7ffb      	ldrb	r3, [r7, #31]
 8002748:	3301      	adds	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
 800274c:	7ffb      	ldrb	r3, [r7, #31]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d9eb      	bls.n	800272a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800275a:	b29a      	uxth	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	b292      	uxth	r2, r2
 8002766:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	b292      	uxth	r2, r2
 800277e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002782:	bf00      	nop
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800278c:	b29b      	uxth	r3, r3
 800278e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f6      	beq.n	8002784 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a8:	b292      	uxth	r2, r2
 80027aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	77fb      	strb	r3, [r7, #31]
 80027b2:	e00f      	b.n	80027d4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80027b4:	7ffb      	ldrb	r3, [r7, #31]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4611      	mov	r1, r2
 80027bc:	7ffa      	ldrb	r2, [r7, #31]
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	440a      	add	r2, r1
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	3320      	adds	r3, #32
 80027c6:	443b      	add	r3, r7
 80027c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80027cc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	3301      	adds	r3, #1
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	d9ec      	bls.n	80027b4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0208 	orr.w	r2, r2, #8
 80027ec:	b292      	uxth	r2, r2
 80027ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002804:	b292      	uxth	r2, r2
 8002806:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0204 	orr.w	r2, r2, #4
 800281c:	b292      	uxth	r2, r2
 800281e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f007 f928 	bl	8009a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002828:	e026      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00f      	beq.n	8002854 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800283c:	b29a      	uxth	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002846:	b292      	uxth	r2, r2
 8002848:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f007 f8e6 	bl	8009a1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002852:	e011      	b.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002870:	b292      	uxth	r2, r2
 8002872:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002876:	bf00      	nop
  }
}
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_PCD_SetAddress+0x1a>
 8002894:	2302      	movs	r3, #2
 8002896:	e012      	b.n	80028be <HAL_PCD_SetAddress+0x40>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f005 f9a8 	bl	8007c04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	4608      	mov	r0, r1
 80028d0:	4611      	mov	r1, r2
 80028d2:	461a      	mov	r2, r3
 80028d4:	4603      	mov	r3, r0
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	460b      	mov	r3, r1
 80028da:	803b      	strh	r3, [r7, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	da0e      	bge.n	800290a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	f003 0207 	and.w	r2, r3, #7
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	3310      	adds	r3, #16
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	705a      	strb	r2, [r3, #1]
 8002908:	e00e      	b.n	8002928 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 0207 	and.w	r2, r3, #7
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002934:	883a      	ldrh	r2, [r7, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	78ba      	ldrb	r2, [r7, #2]
 800293e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002940:	78bb      	ldrb	r3, [r7, #2]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d102      	bne.n	800294c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_PCD_EP_Open+0x94>
 8002956:	2302      	movs	r3, #2
 8002958:	e00e      	b.n	8002978 <HAL_PCD_EP_Open+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68f9      	ldr	r1, [r7, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	f002 fef1 	bl	8005750 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002976:	7afb      	ldrb	r3, [r7, #11]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800298c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da0e      	bge.n	80029b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 0207 	and.w	r2, r3, #7
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	3310      	adds	r3, #16
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	705a      	strb	r2, [r3, #1]
 80029b0:	e00e      	b.n	80029d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0207 	and.w	r2, r3, #7
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_PCD_EP_Close+0x6a>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e00e      	b.n	8002a08 <HAL_PCD_EP_Close+0x88>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fa69 	bl	8005ed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	7afb      	ldrb	r3, [r7, #11]
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6979      	ldr	r1, [r7, #20]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fc20 	bl	80062a8 <USB_EPStartXfer>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 0207 	and.w	r2, r3, #7
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002a94:	681b      	ldr	r3, [r3, #0]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f003 0207 	and.w	r2, r3, #7
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	3310      	adds	r3, #16
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fbd2 	bl	80062a8 <USB_EPStartXfer>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	7912      	ldrb	r2, [r2, #4]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e04c      	b.n	8002bc6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da0e      	bge.n	8002b52 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 0207 	and.w	r2, r3, #7
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	3310      	adds	r3, #16
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	705a      	strb	r2, [r3, #1]
 8002b50:	e00c      	b.n	8002b6c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_PCD_EP_SetStall+0x7e>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e01c      	b.n	8002bc6 <HAL_PCD_EP_SetStall+0xb8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 ff35 	bl	8007a0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f005 f85a 	bl	8007c70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	7912      	ldrb	r2, [r2, #4]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e040      	b.n	8002c6e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	da0e      	bge.n	8002c12 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 0207 	and.w	r2, r3, #7
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	3310      	adds	r3, #16
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	705a      	strb	r2, [r3, #1]
 8002c10:	e00e      	b.n	8002c30 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 0207 	and.w	r2, r3, #7
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_EP_ClrStall+0x82>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e00e      	b.n	8002c6e <HAL_PCD_EP_ClrStall+0xa0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 ff23 	bl	8007aaa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b096      	sub	sp, #88	@ 0x58
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c7e:	e3bb      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002c9a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 8175 	bne.w	8002f8e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d14e      	bne.n	8002d4e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc0:	81fb      	strh	r3, [r7, #14]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	89fb      	ldrh	r3, [r7, #14]
 8002cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3310      	adds	r3, #16
 8002cd8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	441a      	add	r2, r3
 8002d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d12:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d14:	2100      	movs	r1, #0
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f006 fe67 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7b5b      	ldrb	r3, [r3, #13]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 8368 	beq.w	80033f8 <PCD_EP_ISR_Handler+0x782>
 8002d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 8363 	bne.w	80033f8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7b5b      	ldrb	r3, [r3, #13]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	735a      	strb	r2, [r3, #13]
 8002d4c:	e354      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d54:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d034      	beq.n	8002dd6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3306      	adds	r3, #6
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d96:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f004 ffb1 	bl	8007d12 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	823b      	strh	r3, [r7, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	8a3a      	ldrh	r2, [r7, #16]
 8002dc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dca:	b292      	uxth	r2, r2
 8002dcc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f006 fdde 	bl	8009990 <HAL_PCD_SetupStageCallback>
 8002dd4:	e310      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dd6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f280 830c 	bge.w	80033f8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002dec:	4013      	ands	r3, r2
 8002dee:	83fb      	strh	r3, [r7, #30]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	8bfa      	ldrh	r2, [r7, #30]
 8002df6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	3306      	adds	r3, #6
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d019      	beq.n	8002e66 <PCD_EP_ISR_Handler+0x1f0>
 8002e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e40:	6959      	ldr	r1, [r3, #20]
 8002e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f004 ff61 	bl	8007d12 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	441a      	add	r2, r3
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e5e:	2100      	movs	r1, #0
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f006 fda7 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002e70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 82bd 	bne.w	80033f8 <PCD_EP_ISR_Handler+0x782>
 8002e7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002e86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e8a:	f000 82b5 	beq.w	80033f8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	801a      	strh	r2, [r3, #0]
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ec4:	d91d      	bls.n	8002f02 <PCD_EP_ISR_Handler+0x28c>
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <PCD_EP_ISR_Handler+0x26a>
 8002eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002edc:	3b01      	subs	r3, #1
 8002ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	029b      	lsls	r3, r3, #10
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	e026      	b.n	8002f50 <PCD_EP_ISR_Handler+0x2da>
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <PCD_EP_ISR_Handler+0x2aa>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e017      	b.n	8002f50 <PCD_EP_ISR_Handler+0x2da>
 8002f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <PCD_EP_ISR_Handler+0x2c4>
 8002f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f36:	3301      	adds	r3, #1
 8002f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	029b      	lsls	r3, r3, #10
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f60:	827b      	strh	r3, [r7, #18]
 8002f62:	8a7b      	ldrh	r3, [r7, #18]
 8002f64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002f68:	827b      	strh	r3, [r7, #18]
 8002f6a:	8a7b      	ldrh	r3, [r7, #18]
 8002f6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f70:	827b      	strh	r3, [r7, #18]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	8a7b      	ldrh	r3, [r7, #18]
 8002f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8013      	strh	r3, [r2, #0]
 8002f8c:	e234      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002fa2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f280 80fc 	bge.w	80031a4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002fda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002fe2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	7b1b      	ldrb	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d125      	bne.n	800304c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003008:	b29b      	uxth	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	3306      	adds	r3, #6
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003028:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800302c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8092 	beq.w	800315a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	6959      	ldr	r1, [r3, #20]
 800303e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003040:	88da      	ldrh	r2, [r3, #6]
 8003042:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003046:	f004 fe64 	bl	8007d12 <USB_ReadPMA>
 800304a:	e086      	b.n	800315a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800304c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d10a      	bne.n	800306a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003058:	461a      	mov	r2, r3
 800305a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f9d9 	bl	8003414 <HAL_PCD_EP_DB_Receive>
 8003062:	4603      	mov	r3, r0
 8003064:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003068:	e077      	b.n	800315a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003084:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800309a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800309e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d024      	beq.n	8003112 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	3302      	adds	r3, #2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80030f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02e      	beq.n	800315a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	6959      	ldr	r1, [r3, #20]
 8003104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003106:	891a      	ldrh	r2, [r3, #8]
 8003108:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800310c:	f004 fe01 	bl	8007d12 <USB_ReadPMA>
 8003110:	e023      	b.n	800315a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	3306      	adds	r3, #6
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800313a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800313e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314c:	6959      	ldr	r1, [r3, #20]
 800314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003150:	895a      	ldrh	r2, [r3, #10]
 8003152:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003156:	f004 fddc 	bl	8007d12 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003162:	441a      	add	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003166:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003170:	441a      	add	r2, r3
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <PCD_EP_ISR_Handler+0x514>
 800317e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	429a      	cmp	r2, r3
 8003188:	d206      	bcs.n	8003198 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f006 fc0f 	bl	80099b4 <HAL_PCD_DataOutStageCallback>
 8003196:	e005      	b.n	80031a4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 f882 	bl	80062a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80031a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8123 	beq.w	80033f8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80031b2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	3310      	adds	r3, #16
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80031dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80031f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031fe:	b29b      	uxth	r3, r3
 8003200:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003204:	78db      	ldrb	r3, [r3, #3]
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 80a2 	bne.w	8003350 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800320c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003214:	7b1b      	ldrb	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8093 	beq.w	8003342 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800321c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d046      	beq.n	80032b6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d126      	bne.n	800327e <PCD_EP_ISR_Handler+0x608>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	4413      	add	r3, r2
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
 8003248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	011a      	lsls	r2, r3, #4
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	4413      	add	r3, r2
 8003252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003262:	b29a      	uxth	r2, r3
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	801a      	strh	r2, [r3, #0]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003276:	b29a      	uxth	r2, r3
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	801a      	strh	r2, [r3, #0]
 800327c:	e061      	b.n	8003342 <PCD_EP_ISR_Handler+0x6cc>
 800327e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003280:	785b      	ldrb	r3, [r3, #1]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d15d      	bne.n	8003342 <PCD_EP_ISR_Handler+0x6cc>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003294:	b29b      	uxth	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	4413      	add	r3, r2
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	011a      	lsls	r2, r3, #4
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a6:	4413      	add	r3, r2
 80032a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b0:	2200      	movs	r2, #0
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	e045      	b.n	8003342 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d126      	bne.n	8003312 <PCD_EP_ISR_Handler+0x69c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d8:	4413      	add	r3, r2
 80032da:	637b      	str	r3, [r7, #52]	@ 0x34
 80032dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	011a      	lsls	r2, r3, #4
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	4413      	add	r3, r2
 80032e6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330a:	b29a      	uxth	r2, r3
 800330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	e017      	b.n	8003342 <PCD_EP_ISR_Handler+0x6cc>
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	785b      	ldrb	r3, [r3, #1]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d113      	bne.n	8003342 <PCD_EP_ISR_Handler+0x6cc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003328:	4413      	add	r3, r2
 800332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800332c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	011a      	lsls	r2, r3, #4
 8003332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003334:	4413      	add	r3, r2
 8003336:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333e:	2200      	movs	r2, #0
 8003340:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f006 fb4e 	bl	80099ea <HAL_PCD_DataInStageCallback>
 800334e:	e053      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003350:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d146      	bne.n	80033ea <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	3302      	adds	r3, #2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003384:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003390:	429a      	cmp	r2, r3
 8003392:	d907      	bls.n	80033a4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003396:	699a      	ldr	r2, [r3, #24]
 8003398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800339c:	1ad2      	subs	r2, r2, r3
 800339e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a0:	619a      	str	r2, [r3, #24]
 80033a2:	e002      	b.n	80033aa <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80033a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80033aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f006 fb16 	bl	80099ea <HAL_PCD_DataInStageCallback>
 80033be:	e01b      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033c8:	441a      	add	r2, r3
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80033ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80033d6:	441a      	add	r2, r3
 80033d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 ff60 	bl	80062a8 <USB_EPStartXfer>
 80033e8:	e006      	b.n	80033f8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033ee:	461a      	mov	r2, r3
 80033f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f91b 	bl	800362e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003400:	b29b      	uxth	r3, r3
 8003402:	b21b      	sxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	f6ff ac3b 	blt.w	8002c80 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3758      	adds	r7, #88	@ 0x58
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d07e      	beq.n	800352a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	3302      	adds	r3, #2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003454:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	8b7b      	ldrh	r3, [r7, #26]
 800345c:	429a      	cmp	r2, r3
 800345e:	d306      	bcc.n	800346e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	8b7b      	ldrh	r3, [r7, #26]
 8003466:	1ad2      	subs	r2, r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	619a      	str	r2, [r3, #24]
 800346c:	e002      	b.n	8003474 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2200      	movs	r2, #0
 8003472:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d123      	bne.n	80034c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003496:	833b      	strh	r3, [r7, #24]
 8003498:	8b3b      	ldrh	r3, [r7, #24]
 800349a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800349e:	833b      	strh	r3, [r7, #24]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	8b3b      	ldrh	r3, [r7, #24]
 80034b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01f      	beq.n	800350e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e8:	82fb      	strh	r3, [r7, #22]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8afb      	ldrh	r3, [r7, #22]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003506:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800350e:	8b7b      	ldrh	r3, [r7, #26]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8087 	beq.w	8003624 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6959      	ldr	r1, [r3, #20]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	891a      	ldrh	r2, [r3, #8]
 8003522:	8b7b      	ldrh	r3, [r7, #26]
 8003524:	f004 fbf5 	bl	8007d12 <USB_ReadPMA>
 8003528:	e07c      	b.n	8003624 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	3306      	adds	r3, #6
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003552:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	8b7b      	ldrh	r3, [r7, #26]
 800355a:	429a      	cmp	r2, r3
 800355c:	d306      	bcc.n	800356c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	8b7b      	ldrh	r3, [r7, #26]
 8003564:	1ad2      	subs	r2, r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	619a      	str	r2, [r3, #24]
 800356a:	e002      	b.n	8003572 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d123      	bne.n	80035c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003594:	83fb      	strh	r3, [r7, #30]
 8003596:	8bfb      	ldrh	r3, [r7, #30]
 8003598:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800359c:	83fb      	strh	r3, [r7, #30]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	8bfb      	ldrh	r3, [r7, #30]
 80035ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035be:	b29b      	uxth	r3, r3
 80035c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11f      	bne.n	800360c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e6:	83bb      	strh	r3, [r7, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	441a      	add	r2, r3
 80035f6:	8bbb      	ldrh	r3, [r7, #28]
 80035f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003604:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800360c:	8b7b      	ldrh	r3, [r7, #26]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6959      	ldr	r1, [r3, #20]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	895a      	ldrh	r2, [r3, #10]
 800361e:	8b7b      	ldrh	r3, [r7, #26]
 8003620:	f004 fb77 	bl	8007d12 <USB_ReadPMA>
    }
  }

  return count;
 8003624:	8b7b      	ldrh	r3, [r7, #26]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b0a4      	sub	sp, #144	@ 0x90
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	4613      	mov	r3, r2
 800363a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 81dd 	beq.w	8003a02 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003650:	b29b      	uxth	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	3302      	adds	r3, #2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003670:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800367c:	429a      	cmp	r2, r3
 800367e:	d907      	bls.n	8003690 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003688:	1ad2      	subs	r2, r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	619a      	str	r2, [r3, #24]
 800368e:	e002      	b.n	8003696 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 80b9 	bne.w	8003812 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	785b      	ldrb	r3, [r3, #1]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d126      	bne.n	80036f6 <HAL_PCD_EP_DB_Transmit+0xc8>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036bc:	4413      	add	r3, r2
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	011a      	lsls	r2, r3, #4
 80036c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c8:	4413      	add	r3, r2
 80036ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036da:	b29a      	uxth	r2, r3
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	801a      	strh	r2, [r3, #0]
 80036e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	801a      	strh	r2, [r3, #0]
 80036f4:	e01a      	b.n	800372c <HAL_PCD_EP_DB_Transmit+0xfe>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d116      	bne.n	800372c <HAL_PCD_EP_DB_Transmit+0xfe>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	637b      	str	r3, [r7, #52]	@ 0x34
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	4413      	add	r3, r2
 8003714:	637b      	str	r3, [r7, #52]	@ 0x34
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	011a      	lsls	r2, r3, #4
 800371c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371e:	4413      	add	r3, r2
 8003720:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003724:	633b      	str	r3, [r7, #48]	@ 0x30
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d126      	bne.n	8003788 <HAL_PCD_EP_DB_Transmit+0x15a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003748:	b29b      	uxth	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	011a      	lsls	r2, r3, #4
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376c:	b29a      	uxth	r2, r3
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003780:	b29a      	uxth	r2, r3
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	e017      	b.n	80037b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d113      	bne.n	80037b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	4413      	add	r3, r2
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	011a      	lsls	r2, r3, #4
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	4413      	add	r3, r2
 80037ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	2200      	movs	r2, #0
 80037b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f006 f913 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 82fc 	beq.w	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ea:	82fb      	strh	r3, [r7, #22]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	8afb      	ldrh	r3, [r7, #22]
 80037fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800380c:	b29b      	uxth	r3, r3
 800380e:	8013      	strh	r3, [r2, #0]
 8003810:	e2da      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d021      	beq.n	8003860 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003836:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	441a      	add	r2, r3
 8003848:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800384c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800385c:	b29b      	uxth	r3, r3
 800385e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 82ae 	bne.w	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003874:	441a      	add	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003882:	441a      	add	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6a1a      	ldr	r2, [r3, #32]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	429a      	cmp	r2, r3
 8003892:	d30b      	bcc.n	80038ac <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6a1a      	ldr	r2, [r3, #32]
 80038a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038a4:	1ad2      	subs	r2, r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	621a      	str	r2, [r3, #32]
 80038aa:	e017      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d108      	bne.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80038b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80038c4:	e00a      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d165      	bne.n	80039b0 <HAL_PCD_EP_DB_Transmit+0x382>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f8:	4413      	add	r3, r2
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	011a      	lsls	r2, r3, #4
 8003902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003904:	4413      	add	r3, r2
 8003906:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800390a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003916:	b29a      	uxth	r2, r3
 8003918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391a:	801a      	strh	r2, [r3, #0]
 800391c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003920:	2b3e      	cmp	r3, #62	@ 0x3e
 8003922:	d91d      	bls.n	8003960 <HAL_PCD_EP_DB_Transmit+0x332>
 8003924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800392c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_PCD_EP_DB_Transmit+0x310>
 8003938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800393a:	3b01      	subs	r3, #1
 800393c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003946:	b29b      	uxth	r3, r3
 8003948:	029b      	lsls	r3, r3, #10
 800394a:	b29b      	uxth	r3, r3
 800394c:	4313      	orrs	r3, r2
 800394e:	b29b      	uxth	r3, r3
 8003950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003958:	b29a      	uxth	r2, r3
 800395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	e044      	b.n	80039ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_PCD_EP_DB_Transmit+0x350>
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003976:	b29a      	uxth	r2, r3
 8003978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e035      	b.n	80039ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 800397e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003994:	3301      	adds	r3, #1
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29a      	uxth	r2, r3
 800399e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e01c      	b.n	80039ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d118      	bne.n	80039ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039cc:	4413      	add	r3, r2
 80039ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	011a      	lsls	r2, r3, #4
 80039d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d8:	4413      	add	r3, r2
 80039da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039de:	643b      	str	r3, [r7, #64]	@ 0x40
 80039e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6959      	ldr	r1, [r3, #20]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	891a      	ldrh	r2, [r3, #8]
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f004 f943 	bl	8007c86 <USB_WritePMA>
 8003a00:	e1e2      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	3306      	adds	r3, #6
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d307      	bcc.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a42:	1ad2      	subs	r2, r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	619a      	str	r2, [r3, #24]
 8003a48:	e002      	b.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 80c0 	bne.w	8003bda <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d126      	bne.n	8003ab0 <HAL_PCD_EP_DB_Transmit+0x482>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a76:	4413      	add	r3, r2
 8003a78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	011a      	lsls	r2, r3, #4
 8003a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a82:	4413      	add	r3, r2
 8003a84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e01a      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d116      	bne.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003acc:	4413      	add	r3, r2
 8003ace:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	011a      	lsls	r2, r3, #4
 8003ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ade:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	677b      	str	r3, [r7, #116]	@ 0x74
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d12b      	bne.n	8003b4c <HAL_PCD_EP_DB_Transmit+0x51e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b08:	4413      	add	r3, r2
 8003b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	011a      	lsls	r2, r3, #4
 8003b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e017      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d113      	bne.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b62:	4413      	add	r3, r2
 8003b64:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	011a      	lsls	r2, r3, #4
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b6e:	4413      	add	r3, r2
 8003b70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f005 ff31 	bl	80099ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 811a 	bne.w	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bae:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]
 8003bd8:	e0f6      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d121      	bne.n	8003c28 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	f040 80ca 	bne.w	8003dc8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d30b      	bcc.n	8003c74 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6c:	1ad2      	subs	r2, r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	621a      	str	r2, [r3, #32]
 8003c72:	e017      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003c7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c8c:	e00a      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d165      	bne.n	8003d7e <HAL_PCD_EP_DB_Transmit+0x750>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cc6:	4413      	add	r3, r2
 8003cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	011a      	lsls	r2, r3, #4
 8003cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ce8:	801a      	strh	r2, [r3, #0]
 8003cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cee:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cf0:	d91d      	bls.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x700>
 8003cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x6de>
 8003d06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	029b      	lsls	r3, r3, #10
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	e041      	b.n	8003db2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e032      	b.n	8003db2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_PCD_EP_DB_Transmit+0x738>
 8003d60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d62:	3301      	adds	r3, #1
 8003d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	029b      	lsls	r3, r3, #10
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	4313      	orrs	r3, r2
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e019      	b.n	8003db2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d115      	bne.n	8003db2 <HAL_PCD_EP_DB_Transmit+0x784>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d94:	4413      	add	r3, r2
 8003d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	011a      	lsls	r2, r3, #4
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da0:	4413      	add	r3, r2
 8003da2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003db0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6959      	ldr	r1, [r3, #20]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	895a      	ldrh	r2, [r3, #10]
 8003dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f003 ff5f 	bl	8007c86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de2:	82bb      	strh	r3, [r7, #20]
 8003de4:	8abb      	ldrh	r3, [r7, #20]
 8003de6:	f083 0310 	eor.w	r3, r3, #16
 8003dea:	82bb      	strh	r3, [r7, #20]
 8003dec:	8abb      	ldrh	r3, [r7, #20]
 8003dee:	f083 0320 	eor.w	r3, r3, #32
 8003df2:	82bb      	strh	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	8abb      	ldrh	r3, [r7, #20]
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3790      	adds	r7, #144	@ 0x90
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
 8003e30:	4613      	mov	r3, r2
 8003e32:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00b      	beq.n	8003e58 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	f003 0207 	and.w	r2, r3, #7
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	3310      	adds	r3, #16
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e009      	b.n	8003e6c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e58:	897a      	ldrh	r2, [r7, #10]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003e6c:	893b      	ldrh	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	80da      	strh	r2, [r3, #6]
 8003e80:	e00b      	b.n	8003e9a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2201      	movs	r2, #1
 8003e86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
	...

08003ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e272      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8087 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ec8:	4b92      	ldr	r3, [pc, #584]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d00c      	beq.n	8003eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d112      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e>
 8003ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eee:	4b89      	ldr	r3, [pc, #548]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06c      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x12c>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d168      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e24c      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x76>
 8003f10:	4b80      	ldr	r3, [pc, #512]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a7f      	ldr	r2, [pc, #508]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	e02e      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x98>
 8003f26:	4b7b      	ldr	r3, [pc, #492]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7a      	ldr	r2, [pc, #488]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	4b78      	ldr	r3, [pc, #480]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a77      	ldr	r2, [pc, #476]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e01d      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0xbc>
 8003f4a:	4b72      	ldr	r3, [pc, #456]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a71      	ldr	r2, [pc, #452]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	4b6f      	ldr	r3, [pc, #444]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e00b      	b.n	8003f7c <HAL_RCC_OscConfig+0xd4>
 8003f64:	4b6b      	ldr	r3, [pc, #428]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a6a      	ldr	r2, [pc, #424]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b68      	ldr	r3, [pc, #416]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a67      	ldr	r2, [pc, #412]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d013      	beq.n	8003fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fd f8e2 	bl	800114c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fd f8de 	bl	800114c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	@ 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e200      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe4>
 8003faa:	e014      	b.n	8003fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd f8ce 	bl	800114c <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fd f8ca 	bl	800114c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	@ 0x64
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e1ec      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc6:	4b53      	ldr	r3, [pc, #332]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x10c>
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d063      	beq.n	80040aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fee:	4b49      	ldr	r3, [pc, #292]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d11c      	bne.n	8004034 <HAL_RCC_OscConfig+0x18c>
 8003ffa:	4b46      	ldr	r3, [pc, #280]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d116      	bne.n	8004034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_RCC_OscConfig+0x176>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d001      	beq.n	800401e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e1c0      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401e:	4b3d      	ldr	r3, [pc, #244]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4939      	ldr	r1, [pc, #228]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004032:	e03a      	b.n	80040aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800403c:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <HAL_RCC_OscConfig+0x270>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fd f883 	bl	800114c <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404a:	f7fd f87f 	bl	800114c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1a1      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b2a      	ldr	r3, [pc, #168]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4927      	ldr	r1, [pc, #156]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	600b      	str	r3, [r1, #0]
 800407c:	e015      	b.n	80040aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407e:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <HAL_RCC_OscConfig+0x270>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd f862 	bl	800114c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408c:	f7fd f85e 	bl	800114c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e180      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03a      	beq.n	800412c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d019      	beq.n	80040f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040be:	4b17      	ldr	r3, [pc, #92]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c4:	f7fd f842 	bl	800114c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040cc:	f7fd f83e 	bl	800114c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e160      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ea:	2001      	movs	r0, #1
 80040ec:	f000 fa9c 	bl	8004628 <RCC_Delay>
 80040f0:	e01c      	b.n	800412c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f2:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <HAL_RCC_OscConfig+0x274>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7fd f828 	bl	800114c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fe:	e00f      	b.n	8004120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fd f824 	bl	800114c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d908      	bls.n	8004120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e146      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	42420000 	.word	0x42420000
 800411c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004120:	4b92      	ldr	r3, [pc, #584]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e9      	bne.n	8004100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80a6 	beq.w	8004286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413e:	4b8b      	ldr	r3, [pc, #556]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10d      	bne.n	8004166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4b88      	ldr	r3, [pc, #544]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4a87      	ldr	r2, [pc, #540]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004154:	61d3      	str	r3, [r2, #28]
 8004156:	4b85      	ldr	r3, [pc, #532]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004166:	4b82      	ldr	r3, [pc, #520]	@ (8004370 <HAL_RCC_OscConfig+0x4c8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416e:	2b00      	cmp	r3, #0
 8004170:	d118      	bne.n	80041a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004172:	4b7f      	ldr	r3, [pc, #508]	@ (8004370 <HAL_RCC_OscConfig+0x4c8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7e      	ldr	r2, [pc, #504]	@ (8004370 <HAL_RCC_OscConfig+0x4c8>)
 8004178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417e:	f7fc ffe5 	bl	800114c <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004186:	f7fc ffe1 	bl	800114c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b64      	cmp	r3, #100	@ 0x64
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e103      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	4b75      	ldr	r3, [pc, #468]	@ (8004370 <HAL_RCC_OscConfig+0x4c8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x312>
 80041ac:	4b6f      	ldr	r3, [pc, #444]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4a6e      	ldr	r2, [pc, #440]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6213      	str	r3, [r2, #32]
 80041b8:	e02d      	b.n	8004216 <HAL_RCC_OscConfig+0x36e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0x334>
 80041c2:	4b6a      	ldr	r3, [pc, #424]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a69      	ldr	r2, [pc, #420]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6213      	str	r3, [r2, #32]
 80041ce:	4b67      	ldr	r3, [pc, #412]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a66      	ldr	r2, [pc, #408]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6213      	str	r3, [r2, #32]
 80041da:	e01c      	b.n	8004216 <HAL_RCC_OscConfig+0x36e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x356>
 80041e4:	4b61      	ldr	r3, [pc, #388]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a60      	ldr	r2, [pc, #384]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6213      	str	r3, [r2, #32]
 80041f0:	4b5e      	ldr	r3, [pc, #376]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a5d      	ldr	r2, [pc, #372]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6213      	str	r3, [r2, #32]
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x36e>
 80041fe:	4b5b      	ldr	r3, [pc, #364]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a5a      	ldr	r2, [pc, #360]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	4b58      	ldr	r3, [pc, #352]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4a57      	ldr	r2, [pc, #348]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d015      	beq.n	800424a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fc ff95 	bl	800114c <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fc ff91 	bl	800114c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0b1      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423c:	4b4b      	ldr	r3, [pc, #300]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RCC_OscConfig+0x37e>
 8004248:	e014      	b.n	8004274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424a:	f7fc ff7f 	bl	800114c <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fc ff7b 	bl	800114c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e09b      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004268:	4b40      	ldr	r3, [pc, #256]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b3c      	ldr	r3, [pc, #240]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a3b      	ldr	r2, [pc, #236]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8087 	beq.w	800439e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004290:	4b36      	ldr	r3, [pc, #216]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d061      	beq.n	8004360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d146      	bne.n	8004332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a4:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <HAL_RCC_OscConfig+0x4cc>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042aa:	f7fc ff4f 	bl	800114c <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fc ff4b 	bl	800114c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e06d      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c4:	4b29      	ldr	r3, [pc, #164]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d8:	d108      	bne.n	80042ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042da:	4b24      	ldr	r3, [pc, #144]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4921      	ldr	r1, [pc, #132]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ec:	4b1f      	ldr	r3, [pc, #124]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a19      	ldr	r1, [r3, #32]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	430b      	orrs	r3, r1
 80042fe:	491b      	ldr	r1, [pc, #108]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004304:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCC_OscConfig+0x4cc>)
 8004306:	2201      	movs	r2, #1
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fc ff1f 	bl	800114c <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fc ff1b 	bl	800114c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e03d      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x46a>
 8004330:	e035      	b.n	800439e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b10      	ldr	r3, [pc, #64]	@ (8004374 <HAL_RCC_OscConfig+0x4cc>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fc ff08 	bl	800114c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fc ff04 	bl	800114c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e026      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004352:	4b06      	ldr	r3, [pc, #24]	@ (800436c <HAL_RCC_OscConfig+0x4c4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x498>
 800435e:	e01e      	b.n	800439e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e019      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
 8004374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_OscConfig+0x500>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	429a      	cmp	r2, r3
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000

080043ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0d0      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b6a      	ldr	r3, [pc, #424]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d910      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b67      	ldr	r3, [pc, #412]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 0207 	bic.w	r2, r3, #7
 80043d6:	4965      	ldr	r1, [pc, #404]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	4313      	orrs	r3, r2
 80043dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b63      	ldr	r3, [pc, #396]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0b8      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004408:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a58      	ldr	r2, [pc, #352]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004420:	4b53      	ldr	r3, [pc, #332]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a52      	ldr	r2, [pc, #328]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800442a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4b50      	ldr	r3, [pc, #320]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	494d      	ldr	r1, [pc, #308]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d040      	beq.n	80044cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	4b47      	ldr	r3, [pc, #284]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d115      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07f      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446a:	4b41      	ldr	r3, [pc, #260]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e073      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e06b      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448a:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4936      	ldr	r1, [pc, #216]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800449c:	f7fc fe56 	bl	800114c <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	e00a      	b.n	80044ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a4:	f7fc fe52 	bl	800114c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e053      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 020c 	and.w	r2, r3, #12
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d1eb      	bne.n	80044a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044cc:	4b27      	ldr	r3, [pc, #156]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d210      	bcs.n	80044fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b24      	ldr	r3, [pc, #144]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	4922      	ldr	r1, [pc, #136]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	@ (800456c <HAL_RCC_ClockConfig+0x1c0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e032      	b.n	8004562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004508:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4916      	ldr	r1, [pc, #88]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004526:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	490e      	ldr	r1, [pc, #56]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800453a:	f000 f821 	bl	8004580 <HAL_RCC_GetSysClockFreq>
 800453e:	4602      	mov	r2, r0
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	490a      	ldr	r1, [pc, #40]	@ (8004574 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	5ccb      	ldrb	r3, [r1, r3]
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a09      	ldr	r2, [pc, #36]	@ (8004578 <HAL_RCC_ClockConfig+0x1cc>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <HAL_RCC_ClockConfig+0x1d0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fc fdb4 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40022000 	.word	0x40022000
 8004570:	40021000 	.word	0x40021000
 8004574:	0800a868 	.word	0x0800a868
 8004578:	20000004 	.word	0x20000004
 800457c:	20000008 	.word	0x20000008

08004580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x94>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d002      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x30>
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x36>
 80045ae:	e027      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045b0:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x98>)
 80045b2:	613b      	str	r3, [r7, #16]
      break;
 80045b4:	e027      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	0c9b      	lsrs	r3, r3, #18
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	4a17      	ldr	r2, [pc, #92]	@ (800461c <HAL_RCC_GetSysClockFreq+0x9c>)
 80045c0:	5cd3      	ldrb	r3, [r2, r3]
 80045c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ce:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <HAL_RCC_GetSysClockFreq+0x94>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	0c5b      	lsrs	r3, r3, #17
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	4a11      	ldr	r2, [pc, #68]	@ (8004620 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045da:	5cd3      	ldrb	r3, [r2, r3]
 80045dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x98>)
 80045e2:	fb03 f202 	mul.w	r2, r3, r2
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e004      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045f4:	fb02 f303 	mul.w	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	613b      	str	r3, [r7, #16]
      break;
 80045fe:	e002      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <HAL_RCC_GetSysClockFreq+0x98>)
 8004602:	613b      	str	r3, [r7, #16]
      break;
 8004604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004606:	693b      	ldr	r3, [r7, #16]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
 8004618:	007a1200 	.word	0x007a1200
 800461c:	0800a878 	.word	0x0800a878
 8004620:	0800a888 	.word	0x0800a888
 8004624:	003d0900 	.word	0x003d0900

08004628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004630:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <RCC_Delay+0x34>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <RCC_Delay+0x38>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	0a5b      	lsrs	r3, r3, #9
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004644:	bf00      	nop
  }
  while (Delay --);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	60fa      	str	r2, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f9      	bne.n	8004644 <RCC_Delay+0x1c>
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	20000004 	.word	0x20000004
 8004660:	10624dd3 	.word	0x10624dd3

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d07d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004684:	4b4f      	ldr	r3, [pc, #316]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10d      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b4c      	ldr	r3, [pc, #304]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	4a4b      	ldr	r2, [pc, #300]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469a:	61d3      	str	r3, [r2, #28]
 800469c:	4b49      	ldr	r3, [pc, #292]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b46      	ldr	r3, [pc, #280]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d118      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b8:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a42      	ldr	r2, [pc, #264]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c4:	f7fc fd42 	bl	800114c <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	e008      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046cc:	f7fc fd3e 	bl	800114c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	@ 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e06d      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046de:	4b3a      	ldr	r3, [pc, #232]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ea:	4b36      	ldr	r3, [pc, #216]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	429a      	cmp	r2, r3
 8004706:	d027      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004708:	4b2e      	ldr	r3, [pc, #184]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004712:	4b2e      	ldr	r3, [pc, #184]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b2c      	ldr	r3, [pc, #176]	@ (80047cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800471e:	4a29      	ldr	r2, [pc, #164]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472e:	f7fc fd0d 	bl	800114c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fc fd09 	bl	800114c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e036      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b1d      	ldr	r3, [pc, #116]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004758:	4b1a      	ldr	r3, [pc, #104]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4917      	ldr	r1, [pc, #92]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	4313      	orrs	r3, r2
 8004768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004770:	4b14      	ldr	r3, [pc, #80]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4a13      	ldr	r2, [pc, #76]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800477a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004788:	4b0e      	ldr	r3, [pc, #56]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	490b      	ldr	r1, [pc, #44]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a6:	4b07      	ldr	r3, [pc, #28]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	4904      	ldr	r1, [pc, #16]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42420440 	.word	0x42420440

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e041      	b.n	8004866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fb1e 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fc18 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e03a      	b.n	80048fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a18      	ldr	r2, [pc, #96]	@ (8004908 <HAL_TIM_Base_Start_IT+0x98>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_TIM_Base_Start_IT+0x58>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b2:	d009      	beq.n	80048c8 <HAL_TIM_Base_Start_IT+0x58>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a14      	ldr	r2, [pc, #80]	@ (800490c <HAL_TIM_Base_Start_IT+0x9c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIM_Base_Start_IT+0x58>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a13      	ldr	r2, [pc, #76]	@ (8004910 <HAL_TIM_Base_Start_IT+0xa0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d111      	bne.n	80048ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d010      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ea:	e007      	b.n	80048fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800

08004914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e041      	b.n	80049aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f839 	bl	80049b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f000 fb76 	bl	8005044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x24>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e022      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d109      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x3e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e015      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d109      	bne.n	8004a1c <HAL_TIM_PWM_Start+0x58>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_PWM_Start+0x6a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e05e      	b.n	8004af4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start+0x82>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	e013      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x92>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a54:	e00b      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xa2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a64:	e003      	b.n	8004a6e <HAL_TIM_PWM_Start+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fd70 	bl	800555c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_TIM_PWM_Start+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d107      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a18      	ldr	r2, [pc, #96]	@ (8004afc <HAL_TIM_PWM_Start+0x138>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIM_PWM_Start+0xfa>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa8:	d009      	beq.n	8004abe <HAL_TIM_PWM_Start+0xfa>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a14      	ldr	r2, [pc, #80]	@ (8004b00 <HAL_TIM_PWM_Start+0x13c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIM_PWM_Start+0xfa>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a12      	ldr	r2, [pc, #72]	@ (8004b04 <HAL_TIM_PWM_Start+0x140>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d010      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e007      	b.n	8004af2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800

08004b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d020      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0202 	mvn.w	r2, #2
 8004b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa5a 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa4d 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa5c 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0204 	mvn.w	r2, #4
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa34 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa27 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa36 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0208 	mvn.w	r2, #8
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa0e 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fa01 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fa10 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0210 	mvn.w	r2, #16
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2208      	movs	r2, #8
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9e8 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9db 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9ea 	bl	800501e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0201 	mvn.w	r2, #1
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fb fcf4 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fced 	bl	8005672 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9ba 	bl	8005030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0220 	mvn.w	r2, #32
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fcc0 	bl	8005660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0ae      	b.n	8004e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b0c      	cmp	r3, #12
 8004d12:	f200 809f 	bhi.w	8004e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d16:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004e55 	.word	0x08004e55
 8004d24:	08004e55 	.word	0x08004e55
 8004d28:	08004e55 	.word	0x08004e55
 8004d2c:	08004d91 	.word	0x08004d91
 8004d30:	08004e55 	.word	0x08004e55
 8004d34:	08004e55 	.word	0x08004e55
 8004d38:	08004e55 	.word	0x08004e55
 8004d3c:	08004dd3 	.word	0x08004dd3
 8004d40:	08004e55 	.word	0x08004e55
 8004d44:	08004e55 	.word	0x08004e55
 8004d48:	08004e55 	.word	0x08004e55
 8004d4c:	08004e13 	.word	0x08004e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f9e2 	bl	8005120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0208 	orr.w	r2, r2, #8
 8004d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0204 	bic.w	r2, r2, #4
 8004d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6999      	ldr	r1, [r3, #24]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	619a      	str	r2, [r3, #24]
      break;
 8004d8e:	e064      	b.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa28 	bl	80051ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]
      break;
 8004dd0:	e043      	b.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fa71 	bl	80052c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0208 	orr.w	r2, r2, #8
 8004dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0204 	bic.w	r2, r2, #4
 8004dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69d9      	ldr	r1, [r3, #28]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	61da      	str	r2, [r3, #28]
      break;
 8004e10:	e023      	b.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fabb 	bl	8005394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	021a      	lsls	r2, r3, #8
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	61da      	str	r2, [r3, #28]
      break;
 8004e52:	e002      	b.n	8004e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
      break;
 8004e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIM_ConfigClockSource+0x1c>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0b4      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x186>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec0:	d03e      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec6:	f200 8087 	bhi.w	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ece:	f000 8086 	beq.w	8004fde <HAL_TIM_ConfigClockSource+0x172>
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	d87f      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b70      	cmp	r3, #112	@ 0x70
 8004eda:	d01a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0xa6>
 8004edc:	2b70      	cmp	r3, #112	@ 0x70
 8004ede:	d87b      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b60      	cmp	r3, #96	@ 0x60
 8004ee2:	d050      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee4:	2b60      	cmp	r3, #96	@ 0x60
 8004ee6:	d877      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b50      	cmp	r3, #80	@ 0x50
 8004eea:	d03c      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0xfa>
 8004eec:	2b50      	cmp	r3, #80	@ 0x50
 8004eee:	d873      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d058      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d86f      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b30      	cmp	r3, #48	@ 0x30
 8004efa:	d064      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004efc:	2b30      	cmp	r3, #48	@ 0x30
 8004efe:	d86b      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d060      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d867      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d05a      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	e062      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	f000 fafc 	bl	800551e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	609a      	str	r2, [r3, #8]
      break;
 8004f3e:	e04f      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f50:	f000 fae5 	bl	800551e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f62:	609a      	str	r2, [r3, #8]
      break;
 8004f64:	e03c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 fa5c 	bl	8005430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2150      	movs	r1, #80	@ 0x50
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fab3 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 8004f84:	e02c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fa7a 	bl	800548c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2160      	movs	r1, #96	@ 0x60
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 faa3 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e01c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 fa3c 	bl	8005430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2140      	movs	r1, #64	@ 0x40
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fa93 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e00c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 fa8a 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 8004fd6:	e003      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
      break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
	...

08005044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a2f      	ldr	r2, [pc, #188]	@ (8005114 <TIM_Base_SetConfig+0xd0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00b      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005062:	d007      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2c      	ldr	r2, [pc, #176]	@ (8005118 <TIM_Base_SetConfig+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0x30>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2b      	ldr	r2, [pc, #172]	@ (800511c <TIM_Base_SetConfig+0xd8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d108      	bne.n	8005086 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a22      	ldr	r2, [pc, #136]	@ (8005114 <TIM_Base_SetConfig+0xd0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1f      	ldr	r2, [pc, #124]	@ (8005118 <TIM_Base_SetConfig+0xd4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0x62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1e      	ldr	r2, [pc, #120]	@ (800511c <TIM_Base_SetConfig+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0d      	ldr	r2, [pc, #52]	@ (8005114 <TIM_Base_SetConfig+0xd0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]
  }
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800

08005120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 0201 	bic.w	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0302 	bic.w	r3, r3, #2
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1c      	ldr	r2, [pc, #112]	@ (80051e8 <TIM_OC1_SetConfig+0xc8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10c      	bne.n	8005196 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0308 	bic.w	r3, r3, #8
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a13      	ldr	r2, [pc, #76]	@ (80051e8 <TIM_OC1_SetConfig+0xc8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d111      	bne.n	80051c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	621a      	str	r2, [r3, #32]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40012c00 	.word	0x40012c00

080051ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f023 0210 	bic.w	r2, r3, #16
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0320 	bic.w	r3, r3, #32
 8005236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a1d      	ldr	r2, [pc, #116]	@ (80052bc <TIM_OC2_SetConfig+0xd0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10d      	bne.n	8005268 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005266:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a14      	ldr	r2, [pc, #80]	@ (80052bc <TIM_OC2_SetConfig+0xd0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00

080052c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1d      	ldr	r2, [pc, #116]	@ (8005390 <TIM_OC3_SetConfig+0xd0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d10d      	bne.n	800533a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a14      	ldr	r2, [pc, #80]	@ (8005390 <TIM_OC3_SetConfig+0xd0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d113      	bne.n	800536a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40012c00 	.word	0x40012c00

08005394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	031b      	lsls	r3, r3, #12
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a0f      	ldr	r2, [pc, #60]	@ (800542c <TIM_OC4_SetConfig+0x98>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d109      	bne.n	8005408 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	40012c00 	.word	0x40012c00

08005430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0201 	bic.w	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800545a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 030a 	bic.w	r3, r3, #10
 800546c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0210 	bic.w	r2, r3, #16
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	621a      	str	r2, [r3, #32]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	f043 0307 	orr.w	r3, r3, #7
 800550c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005538:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	431a      	orrs	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	609a      	str	r2, [r3, #8]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2201      	movs	r2, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e046      	b.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005608:	d009      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a12      	ldr	r2, [pc, #72]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a10      	ldr	r2, [pc, #64]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10c      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4313      	orrs	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800

08005660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr

08005672 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	4638      	mov	r0, r7
 800568e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056ae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80056b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056d2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80056d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4013      	ands	r3, r2
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr

080056fe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	4638      	mov	r0, r7
 8005720:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005750:	b480      	push	{r7}
 8005752:	b09d      	sub	sp, #116	@ 0x74
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005776:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	78db      	ldrb	r3, [r3, #3]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d81f      	bhi.n	80057c2 <USB_ActivateEndpoint+0x72>
 8005782:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <USB_ActivateEndpoint+0x38>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	08005799 	.word	0x08005799
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057cb 	.word	0x080057cb
 8005794:	080057a7 	.word	0x080057a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800579c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057a4:	e012      	b.n	80057cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057aa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80057ae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057b2:	e00b      	b.n	80057cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80057c0:	e004      	b.n	80057cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80057c8:	e000      	b.n	80057cc <USB_ActivateEndpoint+0x7c>
      break;
 80057ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80057da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005804:	b29b      	uxth	r3, r3
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	4313      	orrs	r3, r2
 800580c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800581e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800582a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800582e:	b29b      	uxth	r3, r3
 8005830:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	7b1b      	ldrb	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 8178 	bne.w	8005b2c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8084 	beq.w	800594e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005850:	b29b      	uxth	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	4413      	add	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	011a      	lsls	r2, r3, #4
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	88db      	ldrh	r3, [r3, #6]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	b29b      	uxth	r3, r3
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	827b      	strh	r3, [r7, #18]
 8005888:	8a7b      	ldrh	r3, [r7, #18]
 800588a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01b      	beq.n	80058ca <USB_ActivateEndpoint+0x17a>
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a8:	823b      	strh	r3, [r7, #16]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	8a3b      	ldrh	r3, [r7, #16]
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d020      	beq.n	8005914 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e8:	81bb      	strh	r3, [r7, #12]
 80058ea:	89bb      	ldrh	r3, [r7, #12]
 80058ec:	f083 0320 	eor.w	r3, r3, #32
 80058f0:	81bb      	strh	r3, [r7, #12]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	89bb      	ldrh	r3, [r7, #12]
 80058fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590e:	b29b      	uxth	r3, r3
 8005910:	8013      	strh	r3, [r2, #0]
 8005912:	e2d5      	b.n	8005ec0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592a:	81fb      	strh	r3, [r7, #14]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]
 800594c:	e2b8      	b.n	8005ec0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	633b      	str	r3, [r7, #48]	@ 0x30
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	4413      	add	r3, r2
 8005960:	633b      	str	r3, [r7, #48]	@ 0x30
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	011a      	lsls	r2, r3, #4
 8005968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596a:	4413      	add	r3, r2
 800596c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	88db      	ldrh	r3, [r3, #6]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	b29b      	uxth	r3, r3
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598c:	b29b      	uxth	r3, r3
 800598e:	461a      	mov	r2, r3
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	4413      	add	r3, r2
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	011a      	lsls	r2, r3, #4
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	4413      	add	r3, r2
 80059a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80059bc:	d91d      	bls.n	80059fa <USB_ActivateEndpoint+0x2aa>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <USB_ActivateEndpoint+0x288>
 80059d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059d4:	3b01      	subs	r3, #1
 80059d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29a      	uxth	r2, r3
 80059de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	029b      	lsls	r3, r3, #10
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e026      	b.n	8005a48 <USB_ActivateEndpoint+0x2f8>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <USB_ActivateEndpoint+0x2c8>
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	801a      	strh	r2, [r3, #0]
 8005a16:	e017      	b.n	8005a48 <USB_ActivateEndpoint+0x2f8>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <USB_ActivateEndpoint+0x2e2>
 8005a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a2e:	3301      	adds	r3, #1
 8005a30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	029b      	lsls	r3, r3, #10
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4313      	orrs	r3, r2
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01b      	beq.n	8005a98 <USB_ActivateEndpoint+0x348>
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a76:	843b      	strh	r3, [r7, #32]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	441a      	add	r2, r3
 8005a82:	8c3b      	ldrh	r3, [r7, #32]
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d124      	bne.n	8005aea <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	83bb      	strh	r3, [r7, #28]
 8005ab8:	8bbb      	ldrh	r3, [r7, #28]
 8005aba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005abe:	83bb      	strh	r3, [r7, #28]
 8005ac0:	8bbb      	ldrh	r3, [r7, #28]
 8005ac2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ac6:	83bb      	strh	r3, [r7, #28]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	8bbb      	ldrh	r3, [r7, #28]
 8005ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	8013      	strh	r3, [r2, #0]
 8005ae8:	e1ea      	b.n	8005ec0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b00:	83fb      	strh	r3, [r7, #30]
 8005b02:	8bfb      	ldrh	r3, [r7, #30]
 8005b04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b08:	83fb      	strh	r3, [r7, #30]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	8bfb      	ldrh	r3, [r7, #30]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
 8005b2a:	e1c9      	b.n	8005ec0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	78db      	ldrb	r3, [r3, #3]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d11e      	bne.n	8005b72 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b64:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	8013      	strh	r3, [r2, #0]
 8005b70:	e01d      	b.n	8005bae <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b88:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bbe:	4413      	add	r3, r2
 8005bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	011a      	lsls	r2, r3, #4
 8005bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	891b      	ldrh	r3, [r3, #8]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf2:	4413      	add	r3, r2
 8005bf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011a      	lsls	r2, r3, #4
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c04:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	895b      	ldrh	r3, [r3, #10]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c14:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 8093 	bne.w	8005d46 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005c30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <USB_ActivateEndpoint+0x524>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005c82:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01b      	beq.n	8005cc4 <USB_ActivateEndpoint+0x574>
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cda:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cdc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cde:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ce2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ce4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ce6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005cea:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d22:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]
 8005d44:	e0bc      	b.n	8005ec0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01d      	beq.n	8005d9e <USB_ActivateEndpoint+0x64e>
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d78:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	441a      	add	r2, r3
 8005d86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005dae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01d      	beq.n	8005df6 <USB_ActivateEndpoint+0x6a6>
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	441a      	add	r2, r3
 8005dde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005de2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	78db      	ldrb	r3, [r3, #3]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d024      	beq.n	8005e48 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e14:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e1c:	f083 0320 	eor.w	r3, r3, #32
 8005e20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]
 8005e46:	e01d      	b.n	8005e84 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005ec0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3774      	adds	r7, #116	@ 0x74
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b08d      	sub	sp, #52	@ 0x34
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	7b1b      	ldrb	r3, [r3, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 808e 	bne.w	8006000 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d044      	beq.n	8005f76 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	81bb      	strh	r3, [r7, #12]
 8005efa:	89bb      	ldrh	r3, [r7, #12]
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01b      	beq.n	8005f3c <USB_DeactivateEndpoint+0x6c>
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1a:	817b      	strh	r3, [r7, #10]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f52:	813b      	strh	r3, [r7, #8]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	893b      	ldrh	r3, [r7, #8]
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
 8005f74:	e192      	b.n	800629c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	827b      	strh	r3, [r7, #18]
 8005f84:	8a7b      	ldrh	r3, [r7, #18]
 8005f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <USB_DeactivateEndpoint+0xf6>
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa4:	823b      	strh	r3, [r7, #16]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	8a3b      	ldrh	r3, [r7, #16]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fdc:	81fb      	strh	r3, [r7, #14]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	89fb      	ldrh	r3, [r7, #14]
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]
 8005ffe:	e14d      	b.n	800629c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 80a5 	bne.w	8006154 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	843b      	strh	r3, [r7, #32]
 8006018:	8c3b      	ldrh	r3, [r7, #32]
 800601a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <USB_DeactivateEndpoint+0x18a>
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	83fb      	strh	r3, [r7, #30]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	8bfb      	ldrh	r3, [r7, #30]
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	83bb      	strh	r3, [r7, #28]
 8006068:	8bbb      	ldrh	r3, [r7, #28]
 800606a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01b      	beq.n	80060aa <USB_DeactivateEndpoint+0x1da>
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006088:	837b      	strh	r3, [r7, #26]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	441a      	add	r2, r3
 8006094:	8b7b      	ldrh	r3, [r7, #26]
 8006096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800609a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800609e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c0:	833b      	strh	r3, [r7, #24]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	8b3b      	ldrh	r3, [r7, #24]
 80060ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060de:	b29b      	uxth	r3, r3
 80060e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060f8:	82fb      	strh	r3, [r7, #22]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	8afb      	ldrh	r3, [r7, #22]
 8006106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800610a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800610e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006116:	b29b      	uxth	r3, r3
 8006118:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800612c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006130:	82bb      	strh	r3, [r7, #20]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	8abb      	ldrh	r3, [r7, #20]
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800614a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]
 8006152:	e0a3      	b.n	800629c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006162:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01b      	beq.n	80061a4 <USB_DeactivateEndpoint+0x2d4>
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800617e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006182:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006198:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800619c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80061b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01b      	beq.n	80061f4 <USB_DeactivateEndpoint+0x324>
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	441a      	add	r2, r3
 80061de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	441a      	add	r2, r3
 8006216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800621c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006228:	b29b      	uxth	r3, r3
 800622a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006242:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800625c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006260:	b29b      	uxth	r3, r3
 8006262:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	441a      	add	r2, r3
 8006286:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800628c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006298:	b29b      	uxth	r3, r3
 800629a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3734      	adds	r7, #52	@ 0x34
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0c2      	sub	sp, #264	@ 0x108
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b6:	6018      	str	r0, [r3, #0]
 80062b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	f040 86b7 	bne.w	8007042 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d908      	bls.n	8006302 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006300:	e007      	b.n	8006312 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	7b1b      	ldrb	r3, [r3, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d13a      	bne.n	8006398 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6959      	ldr	r1, [r3, #20]
 800632e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	88da      	ldrh	r2, [r3, #6]
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	b29b      	uxth	r3, r3
 8006340:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006344:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006348:	6800      	ldr	r0, [r0, #0]
 800634a:	f001 fc9c 	bl	8007c86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800634e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006368:	b29b      	uxth	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	011a      	lsls	r2, r3, #4
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	f000 be1f 	b.w	8006fd6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	78db      	ldrb	r3, [r3, #3]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	f040 8462 	bne.w	8006c6e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f240 83df 	bls.w	8006b86 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80063f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006418:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800641c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006420:	b29b      	uxth	r3, r3
 8006422:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 81c7 	beq.w	80067f8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800646a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
 8006476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d177      	bne.n	8006576 <USB_EPStartXfer+0x2ce>
 8006486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	4413      	add	r3, r2
 80064a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	011a      	lsls	r2, r3, #4
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80064d8:	d921      	bls.n	800651e <USB_EPStartXfer+0x276>
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <USB_EPStartXfer+0x252>
 80064f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064f4:	3b01      	subs	r3, #1
 80064f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006504:	b29b      	uxth	r3, r3
 8006506:	029b      	lsls	r3, r3, #10
 8006508:	b29b      	uxth	r3, r3
 800650a:	4313      	orrs	r3, r2
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e050      	b.n	80065c0 <USB_EPStartXfer+0x318>
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <USB_EPStartXfer+0x294>
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006534:	b29a      	uxth	r2, r3
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	801a      	strh	r2, [r3, #0]
 800653a:	e041      	b.n	80065c0 <USB_EPStartXfer+0x318>
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <USB_EPStartXfer+0x2b4>
 8006552:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006556:	3301      	adds	r3, #1
 8006558:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006566:	b29b      	uxth	r3, r3
 8006568:	029b      	lsls	r3, r3, #10
 800656a:	b29b      	uxth	r3, r3
 800656c:	4313      	orrs	r3, r2
 800656e:	b29a      	uxth	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	e024      	b.n	80065c0 <USB_EPStartXfer+0x318>
 8006576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d11c      	bne.n	80065c0 <USB_EPStartXfer+0x318>
 8006586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006594:	b29b      	uxth	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	4413      	add	r3, r2
 800659c:	633b      	str	r3, [r7, #48]	@ 0x30
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	011a      	lsls	r2, r3, #4
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	4413      	add	r3, r2
 80065b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	895b      	ldrh	r3, [r3, #10]
 80065cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6959      	ldr	r1, [r3, #20]
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065ee:	6800      	ldr	r0, [r0, #0]
 80065f0:	f001 fb49 	bl	8007c86 <USB_WritePMA>
            ep->xfer_buff += len;
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006604:	441a      	add	r2, r3
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90f      	bls.n	800664e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800662e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	621a      	str	r2, [r3, #32]
 800664c:	e00e      	b.n	800666c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800664e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800665e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2200      	movs	r2, #0
 800666a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d177      	bne.n	800676c <USB_EPStartXfer+0x4c4>
 800667c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	4413      	add	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	011a      	lsls	r2, r3, #4
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	4413      	add	r3, r2
 80066b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80066ce:	d921      	bls.n	8006714 <USB_EPStartXfer+0x46c>
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <USB_EPStartXfer+0x448>
 80066e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ea:	3b01      	subs	r3, #1
 80066ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	029b      	lsls	r3, r3, #10
 80066fe:	b29b      	uxth	r3, r3
 8006700:	4313      	orrs	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	e056      	b.n	80067c2 <USB_EPStartXfer+0x51a>
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <USB_EPStartXfer+0x48a>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800672a:	b29a      	uxth	r2, r3
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e047      	b.n	80067c2 <USB_EPStartXfer+0x51a>
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <USB_EPStartXfer+0x4aa>
 8006748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674c:	3301      	adds	r3, #1
 800674e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29a      	uxth	r2, r3
 8006758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675c:	b29b      	uxth	r3, r3
 800675e:	029b      	lsls	r3, r3, #10
 8006760:	b29b      	uxth	r3, r3
 8006762:	4313      	orrs	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e02a      	b.n	80067c2 <USB_EPStartXfer+0x51a>
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d122      	bne.n	80067c2 <USB_EPStartXfer+0x51a>
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	623b      	str	r3, [r7, #32]
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	4413      	add	r3, r2
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	011a      	lsls	r2, r3, #4
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	b29a      	uxth	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	891b      	ldrh	r3, [r3, #8]
 80067ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6959      	ldr	r1, [r3, #20]
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80067e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80067ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80067f0:	6800      	ldr	r0, [r0, #0]
 80067f2:	f001 fa48 	bl	8007c86 <USB_WritePMA>
 80067f6:	e3ee      	b.n	8006fd6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d177      	bne.n	80068f8 <USB_EPStartXfer+0x650>
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006828:	4413      	add	r3, r2
 800682a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800682c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	011a      	lsls	r2, r3, #4
 800683a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800683c:	4413      	add	r3, r2
 800683e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006842:	647b      	str	r3, [r7, #68]	@ 0x44
 8006844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800684e:	b29a      	uxth	r2, r3
 8006850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006858:	2b3e      	cmp	r3, #62	@ 0x3e
 800685a:	d921      	bls.n	80068a0 <USB_EPStartXfer+0x5f8>
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <USB_EPStartXfer+0x5d4>
 8006872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006876:	3b01      	subs	r3, #1
 8006878:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800687c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006886:	b29b      	uxth	r3, r3
 8006888:	029b      	lsls	r3, r3, #10
 800688a:	b29b      	uxth	r3, r3
 800688c:	4313      	orrs	r3, r2
 800688e:	b29b      	uxth	r3, r3
 8006890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006898:	b29a      	uxth	r2, r3
 800689a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e056      	b.n	800694e <USB_EPStartXfer+0x6a6>
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <USB_EPStartXfer+0x616>
 80068a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	e047      	b.n	800694e <USB_EPStartXfer+0x6a6>
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d004      	beq.n	80068de <USB_EPStartXfer+0x636>
 80068d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068d8:	3301      	adds	r3, #1
 80068da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	029b      	lsls	r3, r3, #10
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e02a      	b.n	800694e <USB_EPStartXfer+0x6a6>
 80068f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d122      	bne.n	800694e <USB_EPStartXfer+0x6a6>
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	653b      	str	r3, [r7, #80]	@ 0x50
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006928:	4413      	add	r3, r2
 800692a:	653b      	str	r3, [r7, #80]	@ 0x50
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	011a      	lsls	r2, r3, #4
 800693a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693c:	4413      	add	r3, r2
 800693e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	b29a      	uxth	r2, r3
 800694a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	891b      	ldrh	r3, [r3, #8]
 800695a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800695e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6959      	ldr	r1, [r3, #20]
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696e:	b29b      	uxth	r3, r3
 8006970:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006974:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006978:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800697c:	6800      	ldr	r0, [r0, #0]
 800697e:	f001 f982 	bl	8007c86 <USB_WritePMA>
            ep->xfer_buff += len;
 8006982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006992:	441a      	add	r2, r3
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d90f      	bls.n	80069dc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069cc:	1ad2      	subs	r2, r2, r3
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	621a      	str	r2, [r3, #32]
 80069da:	e00e      	b.n	80069fa <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80069dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d177      	bne.n	8006b06 <USB_EPStartXfer+0x85e>
 8006a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	4413      	add	r3, r2
 8006a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	011a      	lsls	r2, r3, #4
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a68:	d921      	bls.n	8006aae <USB_EPStartXfer+0x806>
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <USB_EPStartXfer+0x7e2>
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e050      	b.n	8006b50 <USB_EPStartXfer+0x8a8>
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <USB_EPStartXfer+0x824>
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	e041      	b.n	8006b50 <USB_EPStartXfer+0x8a8>
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USB_EPStartXfer+0x844>
 8006ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	4313      	orrs	r3, r2
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e024      	b.n	8006b50 <USB_EPStartXfer+0x8a8>
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d11c      	bne.n	8006b50 <USB_EPStartXfer+0x8a8>
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2a:	4413      	add	r3, r2
 8006b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	011a      	lsls	r2, r3, #4
 8006b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	895b      	ldrh	r3, [r3, #10]
 8006b5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b76:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b7a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f001 f881 	bl	8007c86 <USB_WritePMA>
 8006b84:	e227      	b.n	8006fd6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	441a      	add	r2, r3
 8006bda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c12:	4413      	add	r3, r2
 8006c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	011a      	lsls	r2, r3, #4
 8006c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c26:	4413      	add	r3, r2
 8006c28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	891b      	ldrh	r3, [r3, #8]
 8006c44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6959      	ldr	r1, [r3, #20]
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c66:	6800      	ldr	r0, [r0, #0]
 8006c68:	f001 f80d 	bl	8007c86 <USB_WritePMA>
 8006c6c:	e1b3      	b.n	8006fd6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6a1a      	ldr	r2, [r3, #32]
 8006c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80c6 	beq.w	8006e40 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d177      	bne.n	8006dc0 <USB_EPStartXfer+0xb18>
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cf0:	4413      	add	r3, r2
 8006cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	011a      	lsls	r2, r3, #4
 8006d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d22:	d921      	bls.n	8006d68 <USB_EPStartXfer+0xac0>
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <USB_EPStartXfer+0xa9c>
 8006d3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	029b      	lsls	r3, r3, #10
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	4313      	orrs	r3, r2
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	e050      	b.n	8006e0a <USB_EPStartXfer+0xb62>
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <USB_EPStartXfer+0xade>
 8006d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d82:	801a      	strh	r2, [r3, #0]
 8006d84:	e041      	b.n	8006e0a <USB_EPStartXfer+0xb62>
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	085b      	lsrs	r3, r3, #1
 8006d8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <USB_EPStartXfer+0xafe>
 8006d9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006da0:	3301      	adds	r3, #1
 8006da2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006da6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e024      	b.n	8006e0a <USB_EPStartXfer+0xb62>
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	785b      	ldrb	r3, [r3, #1]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d11c      	bne.n	8006e0a <USB_EPStartXfer+0xb62>
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006de4:	4413      	add	r3, r2
 8006de6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	011a      	lsls	r2, r3, #4
 8006df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	895b      	ldrh	r3, [r3, #10]
 8006e16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6959      	ldr	r1, [r3, #20]
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e38:	6800      	ldr	r0, [r0, #0]
 8006e3a:	f000 ff24 	bl	8007c86 <USB_WritePMA>
 8006e3e:	e0ca      	b.n	8006fd6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d177      	bne.n	8006f40 <USB_EPStartXfer+0xc98>
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e70:	4413      	add	r3, r2
 8006e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	011a      	lsls	r2, r3, #4
 8006e82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e84:	4413      	add	r3, r2
 8006e86:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ea2:	d921      	bls.n	8006ee8 <USB_EPStartXfer+0xc40>
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <USB_EPStartXfer+0xc1c>
 8006eba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e05c      	b.n	8006fa2 <USB_EPStartXfer+0xcfa>
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <USB_EPStartXfer+0xc5e>
 8006ef0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	e04d      	b.n	8006fa2 <USB_EPStartXfer+0xcfa>
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <USB_EPStartXfer+0xc7e>
 8006f1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f20:	3301      	adds	r3, #1
 8006f22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	029b      	lsls	r3, r3, #10
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	e030      	b.n	8006fa2 <USB_EPStartXfer+0xcfa>
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d128      	bne.n	8006fa2 <USB_EPStartXfer+0xcfa>
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f74:	4413      	add	r3, r2
 8006f76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	011a      	lsls	r2, r3, #4
 8006f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fa0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	891b      	ldrh	r3, [r3, #8]
 8006fae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6959      	ldr	r1, [r3, #20]
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fd0:	6800      	ldr	r0, [r0, #0]
 8006fd2:	f000 fe58 	bl	8007c86 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffc:	817b      	strh	r3, [r7, #10]
 8006ffe:	897b      	ldrh	r3, [r7, #10]
 8007000:	f083 0310 	eor.w	r3, r3, #16
 8007004:	817b      	strh	r3, [r7, #10]
 8007006:	897b      	ldrh	r3, [r7, #10]
 8007008:	f083 0320 	eor.w	r3, r3, #32
 800700c:	817b      	strh	r3, [r7, #10]
 800700e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	897b      	ldrh	r3, [r7, #10]
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
 800703e:	f000 bcde 	b.w	80079fe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	7b1b      	ldrb	r3, [r3, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 80bb 	bne.w	80071ca <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	429a      	cmp	r2, r3
 800706e:	d917      	bls.n	80070a0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	1ad2      	subs	r2, r2, r3
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	619a      	str	r2, [r3, #24]
 800709e:	e00e      	b.n	80070be <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2200      	movs	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070e2:	4413      	add	r3, r2
 80070e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	011a      	lsls	r2, r3, #4
 80070f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070fa:	4413      	add	r3, r2
 80070fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711c:	2b3e      	cmp	r3, #62	@ 0x3e
 800711e:	d924      	bls.n	800716a <USB_EPStartXfer+0xec2>
 8007120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007124:	095b      	lsrs	r3, r3, #5
 8007126:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <USB_EPStartXfer+0xe98>
 8007136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800713a:	3b01      	subs	r3, #1
 800713c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800714c:	b29b      	uxth	r3, r3
 800714e:	029b      	lsls	r3, r3, #10
 8007150:	b29b      	uxth	r3, r3
 8007152:	4313      	orrs	r3, r2
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715e:	b29a      	uxth	r2, r3
 8007160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	f000 bc10 	b.w	800798a <USB_EPStartXfer+0x16e2>
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10c      	bne.n	800718c <USB_EPStartXfer+0xee4>
 8007172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29a      	uxth	r2, r3
 8007184:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007188:	801a      	strh	r2, [r3, #0]
 800718a:	e3fe      	b.n	800798a <USB_EPStartXfer+0x16e2>
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007190:	085b      	lsrs	r3, r3, #1
 8007192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <USB_EPStartXfer+0xf04>
 80071a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071a6:	3301      	adds	r3, #1
 80071a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	029b      	lsls	r3, r3, #10
 80071bc:	b29b      	uxth	r3, r3
 80071be:	4313      	orrs	r3, r2
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	e3df      	b.n	800798a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80071ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	78db      	ldrb	r3, [r3, #3]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f040 8218 	bne.w	800760c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 809d 	bne.w	8007328 <USB_EPStartXfer+0x1080>
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007212:	4413      	add	r3, r2
 8007214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	011a      	lsls	r2, r3, #4
 8007226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800722a:	4413      	add	r3, r2
 800722c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b3e      	cmp	r3, #62	@ 0x3e
 8007256:	d92b      	bls.n	80072b0 <USB_EPStartXfer+0x1008>
 8007258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	095b      	lsrs	r3, r3, #5
 8007266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800726a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <USB_EPStartXfer+0xfe0>
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007282:	3b01      	subs	r3, #1
 8007284:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007294:	b29b      	uxth	r3, r3
 8007296:	029b      	lsls	r3, r3, #10
 8007298:	b29b      	uxth	r3, r3
 800729a:	4313      	orrs	r3, r2
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	e070      	b.n	8007392 <USB_EPStartXfer+0x10ea>
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10c      	bne.n	80072da <USB_EPStartXfer+0x1032>
 80072c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e05b      	b.n	8007392 <USB_EPStartXfer+0x10ea>
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <USB_EPStartXfer+0x1062>
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007304:	3301      	adds	r3, #1
 8007306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800730a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e034      	b.n	8007392 <USB_EPStartXfer+0x10ea>
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d12c      	bne.n	8007392 <USB_EPStartXfer+0x10ea>
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800735c:	4413      	add	r3, r2
 800735e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	011a      	lsls	r2, r3, #4
 8007370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007374:	4413      	add	r3, r2
 8007376:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800737a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	b29a      	uxth	r2, r3
 800738c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 809d 	bne.w	80074ec <USB_EPStartXfer+0x1244>
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073d6:	4413      	add	r3, r2
 80073d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	011a      	lsls	r2, r3, #4
 80073ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b3e      	cmp	r3, #62	@ 0x3e
 800741a:	d92b      	bls.n	8007474 <USB_EPStartXfer+0x11cc>
 800741c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800742e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <USB_EPStartXfer+0x11a4>
 8007442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007446:	3b01      	subs	r3, #1
 8007448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800744c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007458:	b29b      	uxth	r3, r3
 800745a:	029b      	lsls	r3, r3, #10
 800745c:	b29b      	uxth	r3, r3
 800745e:	4313      	orrs	r3, r2
 8007460:	b29b      	uxth	r3, r3
 8007462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746a:	b29a      	uxth	r2, r3
 800746c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e069      	b.n	8007548 <USB_EPStartXfer+0x12a0>
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10c      	bne.n	800749e <USB_EPStartXfer+0x11f6>
 8007484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007494:	b29a      	uxth	r2, r3
 8007496:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	e054      	b.n	8007548 <USB_EPStartXfer+0x12a0>
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d004      	beq.n	80074ce <USB_EPStartXfer+0x1226>
 80074c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c8:	3301      	adds	r3, #1
 80074ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074da:	b29b      	uxth	r3, r3
 80074dc:	029b      	lsls	r3, r3, #10
 80074de:	b29b      	uxth	r3, r3
 80074e0:	4313      	orrs	r3, r2
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	e02d      	b.n	8007548 <USB_EPStartXfer+0x12a0>
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d125      	bne.n	8007548 <USB_EPStartXfer+0x12a0>
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800750a:	b29b      	uxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007512:	4413      	add	r3, r2
 8007514:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	011a      	lsls	r2, r3, #4
 8007526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800752a:	4413      	add	r3, r2
 800752c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007530:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	b29a      	uxth	r2, r3
 8007542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007546:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8218 	beq.w	800798a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800755a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800757a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800757e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <USB_EPStartXfer+0x12ea>
 8007586:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800758a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10d      	bne.n	80075ae <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007592:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 81f5 	bne.w	800798a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f040 81ee 	bne.w	800798a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	441a      	add	r2, r3
 80075f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80075f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007606:	b29b      	uxth	r3, r3
 8007608:	8013      	strh	r3, [r2, #0]
 800760a:	e1be      	b.n	800798a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	78db      	ldrb	r3, [r3, #3]
 8007618:	2b01      	cmp	r3, #1
 800761a:	f040 81b4 	bne.w	8007986 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800761e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	429a      	cmp	r2, r3
 8007638:	d917      	bls.n	800766a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800764a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	619a      	str	r2, [r3, #24]
 8007668:	e00e      	b.n	8007688 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800766a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2200      	movs	r2, #0
 8007686:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f040 8085 	bne.w	80077a4 <USB_EPStartXfer+0x14fc>
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076be:	4413      	add	r3, r2
 80076c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	011a      	lsls	r2, r3, #4
 80076d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076d6:	4413      	add	r3, r2
 80076d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80076fa:	d923      	bls.n	8007744 <USB_EPStartXfer+0x149c>
 80076fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <USB_EPStartXfer+0x1474>
 8007712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007716:	3b01      	subs	r3, #1
 8007718:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800771c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29a      	uxth	r2, r3
 8007724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007728:	b29b      	uxth	r3, r3
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	b29b      	uxth	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773a:	b29a      	uxth	r2, r3
 800773c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	e060      	b.n	8007806 <USB_EPStartXfer+0x155e>
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <USB_EPStartXfer+0x14be>
 800774c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775c:	b29a      	uxth	r2, r3
 800775e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e04f      	b.n	8007806 <USB_EPStartXfer+0x155e>
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <USB_EPStartXfer+0x14de>
 800777c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007780:	3301      	adds	r3, #1
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	4313      	orrs	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e030      	b.n	8007806 <USB_EPStartXfer+0x155e>
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d128      	bne.n	8007806 <USB_EPStartXfer+0x155e>
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077d8:	4413      	add	r3, r2
 80077da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	011a      	lsls	r2, r3, #4
 80077ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	b29a      	uxth	r2, r3
 8007800:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 8085 	bne.w	8007930 <USB_EPStartXfer+0x1688>
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007842:	b29b      	uxth	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800784a:	4413      	add	r3, r2
 800784c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	011a      	lsls	r2, r3, #4
 800785e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007862:	4413      	add	r3, r2
 8007864:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800786c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007878:	b29a      	uxth	r2, r3
 800787a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007884:	2b3e      	cmp	r3, #62	@ 0x3e
 8007886:	d923      	bls.n	80078d0 <USB_EPStartXfer+0x1628>
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <USB_EPStartXfer+0x1600>
 800789e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078a2:	3b01      	subs	r3, #1
 80078a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	029b      	lsls	r3, r3, #10
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4313      	orrs	r3, r2
 80078bc:	b29b      	uxth	r3, r3
 80078be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e05c      	b.n	800798a <USB_EPStartXfer+0x16e2>
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10c      	bne.n	80078f2 <USB_EPStartXfer+0x164a>
 80078d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e04b      	b.n	800798a <USB_EPStartXfer+0x16e2>
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <USB_EPStartXfer+0x166a>
 8007908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800790c:	3301      	adds	r3, #1
 800790e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29a      	uxth	r2, r3
 800791a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800791e:	b29b      	uxth	r3, r3
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	b29b      	uxth	r3, r3
 8007924:	4313      	orrs	r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e02c      	b.n	800798a <USB_EPStartXfer+0x16e2>
 8007930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d124      	bne.n	800798a <USB_EPStartXfer+0x16e2>
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800794e:	b29b      	uxth	r3, r3
 8007950:	461a      	mov	r2, r3
 8007952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007956:	4413      	add	r3, r2
 8007958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800795c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	011a      	lsls	r2, r3, #4
 800796a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800796e:	4413      	add	r3, r2
 8007970:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	e001      	b.n	800798a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e03a      	b.n	8007a00 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800798a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80079c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80079cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	441a      	add	r2, r3
 80079e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d020      	beq.n	8007a5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a32:	81bb      	strh	r3, [r7, #12]
 8007a34:	89bb      	ldrh	r3, [r7, #12]
 8007a36:	f083 0310 	eor.w	r3, r3, #16
 8007a3a:	81bb      	strh	r3, [r7, #12]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	441a      	add	r2, r3
 8007a46:	89bb      	ldrh	r3, [r7, #12]
 8007a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	8013      	strh	r3, [r2, #0]
 8007a5c:	e01f      	b.n	8007a9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a74:	81fb      	strh	r3, [r7, #14]
 8007a76:	89fb      	ldrh	r3, [r7, #14]
 8007a78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a7c:	81fb      	strh	r3, [r7, #14]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	441a      	add	r2, r3
 8007a88:	89fb      	ldrh	r3, [r7, #14]
 8007a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b087      	sub	sp, #28
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f040 809d 	bne.w	8007bf8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	785b      	ldrb	r3, [r3, #1]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d04c      	beq.n	8007b60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	823b      	strh	r3, [r7, #16]
 8007ad4:	8a3b      	ldrh	r3, [r7, #16]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d01b      	beq.n	8007b16 <USB_EPClearStall+0x6c>
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af4:	81fb      	strh	r3, [r7, #14]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	441a      	add	r2, r3
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	78db      	ldrb	r3, [r3, #3]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d06c      	beq.n	8007bf8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b34:	81bb      	strh	r3, [r7, #12]
 8007b36:	89bb      	ldrh	r3, [r7, #12]
 8007b38:	f083 0320 	eor.w	r3, r3, #32
 8007b3c:	81bb      	strh	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	441a      	add	r2, r3
 8007b48:	89bb      	ldrh	r3, [r7, #12]
 8007b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	8013      	strh	r3, [r2, #0]
 8007b5e:	e04b      	b.n	8007bf8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	82fb      	strh	r3, [r7, #22]
 8007b6e:	8afb      	ldrh	r3, [r7, #22]
 8007b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01b      	beq.n	8007bb0 <USB_EPClearStall+0x106>
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8e:	82bb      	strh	r3, [r7, #20]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	8abb      	ldrh	r3, [r7, #20]
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc6:	827b      	strh	r3, [r7, #18]
 8007bc8:	8a7b      	ldrh	r3, [r7, #18]
 8007bca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007bce:	827b      	strh	r3, [r7, #18]
 8007bd0:	8a7b      	ldrh	r3, [r7, #18]
 8007bd2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007bd6:	827b      	strh	r3, [r7, #18]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	8a7b      	ldrh	r3, [r7, #18]
 8007be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr

08007c04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d103      	bne.n	8007c1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2280      	movs	r2, #128	@ 0x80
 8007c1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr

08007c2a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr

08007c3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr

08007c52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c64:	68fb      	ldr	r3, [r7, #12]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr

08007c86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b08b      	sub	sp, #44	@ 0x2c
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	4611      	mov	r1, r2
 8007c92:	461a      	mov	r2, r3
 8007c94:	460b      	mov	r3, r1
 8007c96:	80fb      	strh	r3, [r7, #6]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007c9c:	88bb      	ldrh	r3, [r7, #4]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	005a      	lsls	r2, r3, #1
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cb8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cbe:	e01f      	b.n	8007d00 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	b21a      	sxth	r2, r3
 8007cd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b21b      	sxth	r3, r3
 8007cda:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	8a7a      	ldrh	r2, [r7, #18]
 8007ce0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	3302      	adds	r3, #2
 8007cec:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1dc      	bne.n	8007cc0 <USB_WritePMA+0x3a>
  }
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	372c      	adds	r7, #44	@ 0x2c
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b08b      	sub	sp, #44	@ 0x2c
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	461a      	mov	r2, r3
 8007d20:	460b      	mov	r3, r1
 8007d22:	80fb      	strh	r3, [r7, #6]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d28:	88bb      	ldrh	r3, [r7, #4]
 8007d2a:	085b      	lsrs	r3, r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	005a      	lsls	r2, r3, #1
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d44:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4a:	e01b      	b.n	8007d84 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	3302      	adds	r3, #2
 8007d58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	0a1b      	lsrs	r3, r3, #8
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	3301      	adds	r3, #1
 8007d76:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	3b01      	subs	r3, #1
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e0      	bne.n	8007d4c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007d8a:	88bb      	ldrh	r3, [r7, #4]
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	701a      	strb	r2, [r3, #0]
  }
}
 8007da6:	bf00      	nop
 8007da8:	372c      	adds	r7, #44	@ 0x2c
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7c1b      	ldrb	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d115      	bne.n	8007df4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dcc:	2202      	movs	r2, #2
 8007dce:	2181      	movs	r1, #129	@ 0x81
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 feee 	bl	8009bb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007de0:	2202      	movs	r2, #2
 8007de2:	2101      	movs	r1, #1
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 fee4 	bl	8009bb2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007df2:	e012      	b.n	8007e1a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007df4:	2340      	movs	r3, #64	@ 0x40
 8007df6:	2202      	movs	r2, #2
 8007df8:	2181      	movs	r1, #129	@ 0x81
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 fed9 	bl	8009bb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e06:	2340      	movs	r3, #64	@ 0x40
 8007e08:	2202      	movs	r2, #2
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fed0 	bl	8009bb2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	2182      	movs	r1, #130	@ 0x82
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fec6 	bl	8009bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e2c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e30:	f001 ffe6 	bl	8009e00 <USBD_static_malloc>
 8007e34:	4602      	mov	r2, r0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007e46:	2301      	movs	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
 8007e4a:	e026      	b.n	8007e9a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e52:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7c1b      	ldrb	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d109      	bne.n	8007e8a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e80:	2101      	movs	r1, #1
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 ff85 	bl	8009d92 <USBD_LL_PrepareReceive>
 8007e88:	e007      	b.n	8007e9a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e90:	2340      	movs	r3, #64	@ 0x40
 8007e92:	2101      	movs	r1, #1
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 ff7c 	bl	8009d92 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007eb4:	2181      	movs	r1, #129	@ 0x81
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fea1 	bl	8009bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f001 fe9a 	bl	8009bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007ed2:	2182      	movs	r1, #130	@ 0x82
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 fe92 	bl	8009bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00e      	beq.n	8007f08 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 ff8c 	bl	8009e18 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f22:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d039      	beq.n	8007fb0 <USBD_CDC_Setup+0x9e>
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d17f      	bne.n	8008040 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d029      	beq.n	8007f9c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	b25b      	sxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	da11      	bge.n	8007f76 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007f5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	88d2      	ldrh	r2, [r2, #6]
 8007f64:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f66:	6939      	ldr	r1, [r7, #16]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	88db      	ldrh	r3, [r3, #6]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 fa06 	bl	8009380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f74:	e06b      	b.n	800804e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	785a      	ldrb	r2, [r3, #1]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	88db      	ldrh	r3, [r3, #6]
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f8c:	6939      	ldr	r1, [r7, #16]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 fa21 	bl	80093dc <USBD_CtlPrepareRx>
      break;
 8007f9a:	e058      	b.n	800804e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	7850      	ldrb	r0, [r2, #1]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	4798      	blx	r3
      break;
 8007fae:	e04e      	b.n	800804e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	785b      	ldrb	r3, [r3, #1]
 8007fb4:	2b0b      	cmp	r3, #11
 8007fb6:	d02e      	beq.n	8008016 <USBD_CDC_Setup+0x104>
 8007fb8:	2b0b      	cmp	r3, #11
 8007fba:	dc38      	bgt.n	800802e <USBD_CDC_Setup+0x11c>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <USBD_CDC_Setup+0xb4>
 8007fc0:	2b0a      	cmp	r3, #10
 8007fc2:	d014      	beq.n	8007fee <USBD_CDC_Setup+0xdc>
 8007fc4:	e033      	b.n	800802e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d107      	bne.n	8007fe0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fd0:	f107 030c 	add.w	r3, r7, #12
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f9d1 	bl	8009380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fde:	e02e      	b.n	800803e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 f962 	bl	80092ac <USBD_CtlError>
            ret = USBD_FAIL;
 8007fe8:	2302      	movs	r3, #2
 8007fea:	75fb      	strb	r3, [r7, #23]
          break;
 8007fec:	e027      	b.n	800803e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d107      	bne.n	8008008 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ff8:	f107 030f 	add.w	r3, r7, #15
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 f9bd 	bl	8009380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008006:	e01a      	b.n	800803e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 f94e 	bl	80092ac <USBD_CtlError>
            ret = USBD_FAIL;
 8008010:	2302      	movs	r3, #2
 8008012:	75fb      	strb	r3, [r7, #23]
          break;
 8008014:	e013      	b.n	800803e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800801c:	2b03      	cmp	r3, #3
 800801e:	d00d      	beq.n	800803c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 f942 	bl	80092ac <USBD_CtlError>
            ret = USBD_FAIL;
 8008028:	2302      	movs	r3, #2
 800802a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800802c:	e006      	b.n	800803c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f93b 	bl	80092ac <USBD_CtlError>
          ret = USBD_FAIL;
 8008036:	2302      	movs	r3, #2
 8008038:	75fb      	strb	r3, [r7, #23]
          break;
 800803a:	e000      	b.n	800803e <USBD_CDC_Setup+0x12c>
          break;
 800803c:	bf00      	nop
      }
      break;
 800803e:	e006      	b.n	800804e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 f932 	bl	80092ac <USBD_CtlError>
      ret = USBD_FAIL;
 8008048:	2302      	movs	r3, #2
 800804a:	75fb      	strb	r3, [r7, #23]
      break;
 800804c:	bf00      	nop
  }

  return ret;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800806a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008072:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d03a      	beq.n	80080f4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	331c      	adds	r3, #28
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d029      	beq.n	80080e8 <USBD_CDC_DataIn+0x90>
 8008094:	78fa      	ldrb	r2, [r7, #3]
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	440b      	add	r3, r1
 80080a2:	331c      	adds	r3, #28
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	78f9      	ldrb	r1, [r7, #3]
 80080a8:	68b8      	ldr	r0, [r7, #8]
 80080aa:	460b      	mov	r3, r1
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	4403      	add	r3, r0
 80080b4:	3320      	adds	r3, #32
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d110      	bne.n	80080e8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80080c6:	78fa      	ldrb	r2, [r7, #3]
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	440b      	add	r3, r1
 80080d4:	331c      	adds	r3, #28
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080da:	78f9      	ldrb	r1, [r7, #3]
 80080dc:	2300      	movs	r3, #0
 80080de:	2200      	movs	r2, #0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fe33 	bl	8009d4c <USBD_LL_Transmit>
 80080e6:	e003      	b.n	80080f0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	e000      	b.n	80080f6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008110:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fe5e 	bl	8009dd8 <USBD_LL_GetRxDataSize>
 800811c:	4602      	mov	r2, r0
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008142:	4611      	mov	r1, r2
 8008144:	4798      	blx	r3

    return USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	e000      	b.n	800814c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800814a:	2302      	movs	r3, #2
  }
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008162:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800816a:	2b00      	cmp	r3, #0
 800816c:	d014      	beq.n	8008198 <USBD_CDC_EP0_RxReady+0x44>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008174:	2bff      	cmp	r3, #255	@ 0xff
 8008176:	d00f      	beq.n	8008198 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008186:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800818e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	22ff      	movs	r2, #255	@ 0xff
 8008194:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2243      	movs	r2, #67	@ 0x43
 80081b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80081b2:	4b03      	ldr	r3, [pc, #12]	@ (80081c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000098 	.word	0x20000098

080081c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2243      	movs	r2, #67	@ 0x43
 80081d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80081d2:	4b03      	ldr	r3, [pc, #12]	@ (80081e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000054 	.word	0x20000054

080081e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2243      	movs	r2, #67	@ 0x43
 80081f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80081f2:	4b03      	ldr	r3, [pc, #12]	@ (8008200 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	200000dc 	.word	0x200000dc

08008204 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	220a      	movs	r2, #10
 8008210:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008212:	4b03      	ldr	r3, [pc, #12]	@ (8008220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000010 	.word	0x20000010

08008224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800822e:	2302      	movs	r3, #2
 8008230:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr

08008250 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008264:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800826e:	88fa      	ldrh	r2, [r7, #6]
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	bc80      	pop	{r7}
 8008280:	4770      	bx	lr

08008282 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008292:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr

080082a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01c      	beq.n	80082fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d115      	bne.n	80082f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2181      	movs	r1, #129	@ 0x81
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fd2c 	bl	8009d4c <USBD_LL_Transmit>

      return USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e002      	b.n	80082fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80082fc:	2302      	movs	r3, #2
  }
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008314:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d017      	beq.n	8008350 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7c1b      	ldrb	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800832e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008332:	2101      	movs	r1, #1
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 fd2c 	bl	8009d92 <USBD_LL_PrepareReceive>
 800833a:	e007      	b.n	800834c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008342:	2340      	movs	r3, #64	@ 0x40
 8008344:	2101      	movs	r1, #1
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 fd23 	bl	8009d92 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	e000      	b.n	8008352 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008350:	2302      	movs	r3, #2
  }
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800836e:	2302      	movs	r3, #2
 8008370:	e01a      	b.n	80083a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	79fa      	ldrb	r2, [r7, #7]
 800839e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 fb91 	bl	8009ac8 <USBD_LL_Init>

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d006      	beq.n	80083d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e001      	b.n	80083d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80083d2:	2302      	movs	r3, #2
 80083d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 fbc6 	bl	8009b7c <USBD_LL_Start>

  return USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr

0800840e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800841a:	2302      	movs	r3, #2
 800841c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00c      	beq.n	8008442 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	4611      	mov	r1, r2
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	78fa      	ldrb	r2, [r7, #3]
 8008462:	4611      	mov	r1, r2
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	4798      	blx	r3

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fed8 	bl	800923a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d016      	beq.n	80084dc <USBD_LL_SetupStage+0x6a>
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d81c      	bhi.n	80084ec <USBD_LL_SetupStage+0x7a>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <USBD_LL_SetupStage+0x4a>
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d008      	beq.n	80084cc <USBD_LL_SetupStage+0x5a>
 80084ba:	e017      	b.n	80084ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f9cb 	bl	8008860 <USBD_StdDevReq>
      break;
 80084ca:	e01a      	b.n	8008502 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa2d 	bl	8008934 <USBD_StdItfReq>
      break;
 80084da:	e012      	b.n	8008502 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fa6d 	bl	80089c4 <USBD_StdEPReq>
      break;
 80084ea:	e00a      	b.n	8008502 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80084f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fb9e 	bl	8009c3c <USBD_LL_StallEP>
      break;
 8008500:	bf00      	nop
  }

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800851a:	7afb      	ldrb	r3, [r7, #11]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d14b      	bne.n	80085b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008526:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800852e:	2b03      	cmp	r3, #3
 8008530:	d134      	bne.n	800859c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	68da      	ldr	r2, [r3, #12]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	429a      	cmp	r2, r3
 800853c:	d919      	bls.n	8008572 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008554:	429a      	cmp	r2, r3
 8008556:	d203      	bcs.n	8008560 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800855c:	b29b      	uxth	r3, r3
 800855e:	e002      	b.n	8008566 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008564:	b29b      	uxth	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 ff54 	bl	8009418 <USBD_CtlContinueRx>
 8008570:	e038      	b.n	80085e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008584:	2b03      	cmp	r3, #3
 8008586:	d105      	bne.n	8008594 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 ff51 	bl	800943c <USBD_CtlSendStatus>
 800859a:	e023      	b.n	80085e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085a2:	2b05      	cmp	r3, #5
 80085a4:	d11e      	bne.n	80085e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80085ae:	2100      	movs	r1, #0
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 fb43 	bl	8009c3c <USBD_LL_StallEP>
 80085b6:	e015      	b.n	80085e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00d      	beq.n	80085e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d108      	bne.n	80085e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	7afa      	ldrb	r2, [r7, #11]
 80085d8:	4611      	mov	r1, r2
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	4798      	blx	r3
 80085de:	e001      	b.n	80085e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085e0:	2302      	movs	r3, #2
 80085e2:	e000      	b.n	80085e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	460b      	mov	r3, r1
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d17f      	bne.n	8008702 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3314      	adds	r3, #20
 8008606:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800860e:	2b02      	cmp	r3, #2
 8008610:	d15c      	bne.n	80086cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	429a      	cmp	r2, r3
 800861c:	d915      	bls.n	800864a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	b29b      	uxth	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 febe 	bl	80093b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800863c:	2300      	movs	r3, #0
 800863e:	2200      	movs	r2, #0
 8008640:	2100      	movs	r1, #0
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f001 fba5 	bl	8009d92 <USBD_LL_PrepareReceive>
 8008648:	e04e      	b.n	80086e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	6912      	ldr	r2, [r2, #16]
 8008652:	fbb3 f1f2 	udiv	r1, r3, r2
 8008656:	fb01 f202 	mul.w	r2, r1, r2
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11c      	bne.n	800869a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008668:	429a      	cmp	r2, r3
 800866a:	d316      	bcc.n	800869a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008676:	429a      	cmp	r2, r3
 8008678:	d20f      	bcs.n	800869a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800867a:	2200      	movs	r2, #0
 800867c:	2100      	movs	r1, #0
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 fe9a 	bl	80093b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800868c:	2300      	movs	r3, #0
 800868e:	2200      	movs	r2, #0
 8008690:	2100      	movs	r1, #0
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f001 fb7d 	bl	8009d92 <USBD_LL_PrepareReceive>
 8008698:	e026      	b.n	80086e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d105      	bne.n	80086bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80086bc:	2180      	movs	r1, #128	@ 0x80
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f001 fabc 	bl	8009c3c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fecc 	bl	8009462 <USBD_CtlReceiveStatus>
 80086ca:	e00d      	b.n	80086e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d004      	beq.n	80086e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d103      	bne.n	80086e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80086e0:	2180      	movs	r1, #128	@ 0x80
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 faaa 	bl	8009c3c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d11d      	bne.n	800872e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fe81 	bl	80083fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008700:	e015      	b.n	800872e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00d      	beq.n	800872a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008714:	2b03      	cmp	r3, #3
 8008716:	d108      	bne.n	800872a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	7afa      	ldrb	r2, [r7, #11]
 8008722:	4611      	mov	r1, r2
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	4798      	blx	r3
 8008728:	e001      	b.n	800872e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800872a:	2302      	movs	r3, #2
 800872c:	e000      	b.n	8008730 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008740:	2340      	movs	r3, #64	@ 0x40
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 fa33 	bl	8009bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2240      	movs	r2, #64	@ 0x40
 8008758:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800875c:	2340      	movs	r3, #64	@ 0x40
 800875e:	2200      	movs	r2, #0
 8008760:	2180      	movs	r1, #128	@ 0x80
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fa25 	bl	8009bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2240      	movs	r2, #64	@ 0x40
 8008772:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d009      	beq.n	80087b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6852      	ldr	r2, [r2, #4]
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	4611      	mov	r1, r2
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
  }

  return USBD_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	460b      	mov	r3, r1
 80087c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr

080087d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800880e:	2b04      	cmp	r3, #4
 8008810:	d105      	bne.n	800881e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr

0800882a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008838:	2b03      	cmp	r3, #3
 800883a:	d10b      	bne.n	8008854 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008876:	2b40      	cmp	r3, #64	@ 0x40
 8008878:	d005      	beq.n	8008886 <USBD_StdDevReq+0x26>
 800887a:	2b40      	cmp	r3, #64	@ 0x40
 800887c:	d84f      	bhi.n	800891e <USBD_StdDevReq+0xbe>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <USBD_StdDevReq+0x36>
 8008882:	2b20      	cmp	r3, #32
 8008884:	d14b      	bne.n	800891e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	4798      	blx	r3
      break;
 8008894:	e048      	b.n	8008928 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b09      	cmp	r3, #9
 800889c:	d839      	bhi.n	8008912 <USBD_StdDevReq+0xb2>
 800889e:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <USBD_StdDevReq+0x44>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088f5 	.word	0x080088f5
 80088a8:	08008909 	.word	0x08008909
 80088ac:	08008913 	.word	0x08008913
 80088b0:	080088ff 	.word	0x080088ff
 80088b4:	08008913 	.word	0x08008913
 80088b8:	080088d7 	.word	0x080088d7
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	08008913 	.word	0x08008913
 80088c4:	080088eb 	.word	0x080088eb
 80088c8:	080088e1 	.word	0x080088e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f9dc 	bl	8008c8c <USBD_GetDescriptor>
          break;
 80088d4:	e022      	b.n	800891c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fb3f 	bl	8008f5c <USBD_SetAddress>
          break;
 80088de:	e01d      	b.n	800891c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fb7e 	bl	8008fe4 <USBD_SetConfig>
          break;
 80088e8:	e018      	b.n	800891c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fc07 	bl	8009100 <USBD_GetConfig>
          break;
 80088f2:	e013      	b.n	800891c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fc37 	bl	800916a <USBD_GetStatus>
          break;
 80088fc:	e00e      	b.n	800891c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc65 	bl	80091d0 <USBD_SetFeature>
          break;
 8008906:	e009      	b.n	800891c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fc74 	bl	80091f8 <USBD_ClrFeature>
          break;
 8008910:	e004      	b.n	800891c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fcc9 	bl	80092ac <USBD_CtlError>
          break;
 800891a:	bf00      	nop
      }
      break;
 800891c:	e004      	b.n	8008928 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fcc3 	bl	80092ac <USBD_CtlError>
      break;
 8008926:	bf00      	nop
  }

  return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop

08008934 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800894a:	2b40      	cmp	r3, #64	@ 0x40
 800894c:	d005      	beq.n	800895a <USBD_StdItfReq+0x26>
 800894e:	2b40      	cmp	r3, #64	@ 0x40
 8008950:	d82e      	bhi.n	80089b0 <USBD_StdItfReq+0x7c>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <USBD_StdItfReq+0x26>
 8008956:	2b20      	cmp	r3, #32
 8008958:	d12a      	bne.n	80089b0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008960:	3b01      	subs	r3, #1
 8008962:	2b02      	cmp	r3, #2
 8008964:	d81d      	bhi.n	80089a2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	889b      	ldrh	r3, [r3, #4]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b01      	cmp	r3, #1
 800896e:	d813      	bhi.n	8008998 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
 800897e:	4603      	mov	r3, r0
 8008980:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	88db      	ldrh	r3, [r3, #6]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d110      	bne.n	80089ac <USBD_StdItfReq+0x78>
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fd53 	bl	800943c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008996:	e009      	b.n	80089ac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008998:	6839      	ldr	r1, [r7, #0]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fc86 	bl	80092ac <USBD_CtlError>
          break;
 80089a0:	e004      	b.n	80089ac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc81 	bl	80092ac <USBD_CtlError>
          break;
 80089aa:	e000      	b.n	80089ae <USBD_StdItfReq+0x7a>
          break;
 80089ac:	bf00      	nop
      }
      break;
 80089ae:	e004      	b.n	80089ba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fc7a 	bl	80092ac <USBD_CtlError>
      break;
 80089b8:	bf00      	nop
  }

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089e0:	2b40      	cmp	r3, #64	@ 0x40
 80089e2:	d007      	beq.n	80089f4 <USBD_StdEPReq+0x30>
 80089e4:	2b40      	cmp	r3, #64	@ 0x40
 80089e6:	f200 8146 	bhi.w	8008c76 <USBD_StdEPReq+0x2b2>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <USBD_StdEPReq+0x40>
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	f040 8141 	bne.w	8008c76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
      break;
 8008a02:	e13d      	b.n	8008c80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d10a      	bne.n	8008a26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	e12d      	b.n	8008c82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d007      	beq.n	8008a3e <USBD_StdEPReq+0x7a>
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	f300 811b 	bgt.w	8008c6a <USBD_StdEPReq+0x2a6>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d072      	beq.n	8008b1e <USBD_StdEPReq+0x15a>
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d03a      	beq.n	8008ab2 <USBD_StdEPReq+0xee>
 8008a3c:	e115      	b.n	8008c6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d002      	beq.n	8008a4e <USBD_StdEPReq+0x8a>
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d015      	beq.n	8008a78 <USBD_StdEPReq+0xb4>
 8008a4c:	e02b      	b.n	8008aa6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00c      	beq.n	8008a6e <USBD_StdEPReq+0xaa>
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	2b80      	cmp	r3, #128	@ 0x80
 8008a58:	d009      	beq.n	8008a6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 f8ec 	bl	8009c3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a64:	2180      	movs	r1, #128	@ 0x80
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f8e8 	bl	8009c3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a6c:	e020      	b.n	8008ab0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fc1b 	bl	80092ac <USBD_CtlError>
              break;
 8008a76:	e01b      	b.n	8008ab0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	885b      	ldrh	r3, [r3, #2]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10e      	bne.n	8008a9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <USBD_StdEPReq+0xda>
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b80      	cmp	r3, #128	@ 0x80
 8008a8a:	d008      	beq.n	8008a9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	88db      	ldrh	r3, [r3, #6]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 f8cf 	bl	8009c3c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fccc 	bl	800943c <USBD_CtlSendStatus>

              break;
 8008aa4:	e004      	b.n	8008ab0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fbff 	bl	80092ac <USBD_CtlError>
              break;
 8008aae:	bf00      	nop
          }
          break;
 8008ab0:	e0e0      	b.n	8008c74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d002      	beq.n	8008ac2 <USBD_StdEPReq+0xfe>
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d015      	beq.n	8008aec <USBD_StdEPReq+0x128>
 8008ac0:	e026      	b.n	8008b10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00c      	beq.n	8008ae2 <USBD_StdEPReq+0x11e>
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b80      	cmp	r3, #128	@ 0x80
 8008acc:	d009      	beq.n	8008ae2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 f8b2 	bl	8009c3c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ad8:	2180      	movs	r1, #128	@ 0x80
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f8ae 	bl	8009c3c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae0:	e01c      	b.n	8008b1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fbe1 	bl	80092ac <USBD_CtlError>
              break;
 8008aea:	e017      	b.n	8008b1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	885b      	ldrh	r3, [r3, #2]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d112      	bne.n	8008b1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d004      	beq.n	8008b08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 f8b9 	bl	8009c7a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fc97 	bl	800943c <USBD_CtlSendStatus>
              }
              break;
 8008b0e:	e004      	b.n	8008b1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fbca 	bl	80092ac <USBD_CtlError>
              break;
 8008b18:	e000      	b.n	8008b1c <USBD_StdEPReq+0x158>
              break;
 8008b1a:	bf00      	nop
          }
          break;
 8008b1c:	e0aa      	b.n	8008c74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d002      	beq.n	8008b2e <USBD_StdEPReq+0x16a>
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d032      	beq.n	8008b92 <USBD_StdEPReq+0x1ce>
 8008b2c:	e097      	b.n	8008c5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d007      	beq.n	8008b44 <USBD_StdEPReq+0x180>
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b80      	cmp	r3, #128	@ 0x80
 8008b38:	d004      	beq.n	8008b44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fbb5 	bl	80092ac <USBD_CtlError>
                break;
 8008b42:	e091      	b.n	8008c68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	da0b      	bge.n	8008b64 <USBD_StdEPReq+0x1a0>
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	3310      	adds	r3, #16
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	4413      	add	r3, r2
 8008b60:	3304      	adds	r3, #4
 8008b62:	e00b      	b.n	8008b7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	4413      	add	r3, r2
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2202      	movs	r2, #2
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fbf8 	bl	8009380 <USBD_CtlSendData>
              break;
 8008b90:	e06a      	b.n	8008c68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	da11      	bge.n	8008bbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	f003 020f 	and.w	r2, r3, #15
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	3318      	adds	r3, #24
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d117      	bne.n	8008be4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fb78 	bl	80092ac <USBD_CtlError>
                  break;
 8008bbc:	e054      	b.n	8008c68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	f003 020f 	and.w	r2, r3, #15
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fb65 	bl	80092ac <USBD_CtlError>
                  break;
 8008be2:	e041      	b.n	8008c68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da0b      	bge.n	8008c04 <USBD_StdEPReq+0x240>
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	3310      	adds	r3, #16
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	3304      	adds	r3, #4
 8008c02:	e00b      	b.n	8008c1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	4413      	add	r3, r2
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <USBD_StdEPReq+0x266>
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b80      	cmp	r3, #128	@ 0x80
 8008c28:	d103      	bne.n	8008c32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e00e      	b.n	8008c50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 f83e 	bl	8009cb8 <USBD_LL_IsStallEP>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2201      	movs	r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e002      	b.n	8008c50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2202      	movs	r2, #2
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fb92 	bl	8009380 <USBD_CtlSendData>
              break;
 8008c5c:	e004      	b.n	8008c68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fb23 	bl	80092ac <USBD_CtlError>
              break;
 8008c66:	bf00      	nop
          }
          break;
 8008c68:	e004      	b.n	8008c74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb1d 	bl	80092ac <USBD_CtlError>
          break;
 8008c72:	bf00      	nop
      }
      break;
 8008c74:	e004      	b.n	8008c80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fb17 	bl	80092ac <USBD_CtlError>
      break;
 8008c7e:	bf00      	nop
  }

  return ret;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	885b      	ldrh	r3, [r3, #2]
 8008ca6:	0a1b      	lsrs	r3, r3, #8
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	2b06      	cmp	r3, #6
 8008cae:	f200 8128 	bhi.w	8008f02 <USBD_GetDescriptor+0x276>
 8008cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb8 <USBD_GetDescriptor+0x2c>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008cd5 	.word	0x08008cd5
 8008cbc:	08008ced 	.word	0x08008ced
 8008cc0:	08008d2d 	.word	0x08008d2d
 8008cc4:	08008f03 	.word	0x08008f03
 8008cc8:	08008f03 	.word	0x08008f03
 8008ccc:	08008ea3 	.word	0x08008ea3
 8008cd0:	08008ecf 	.word	0x08008ecf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	7c12      	ldrb	r2, [r2, #16]
 8008ce0:	f107 0108 	add.w	r1, r7, #8
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
 8008ce8:	60f8      	str	r0, [r7, #12]
      break;
 8008cea:	e112      	b.n	8008f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7c1b      	ldrb	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10d      	bne.n	8008d10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfc:	f107 0208 	add.w	r2, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d0e:	e100      	b.n	8008f12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d18:	f107 0208 	add.w	r2, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	2202      	movs	r2, #2
 8008d28:	701a      	strb	r2, [r3, #0]
      break;
 8008d2a:	e0f2      	b.n	8008f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	885b      	ldrh	r3, [r3, #2]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	f200 80ac 	bhi.w	8008e90 <USBD_GetDescriptor+0x204>
 8008d38:	a201      	add	r2, pc, #4	@ (adr r2, 8008d40 <USBD_GetDescriptor+0xb4>)
 8008d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3e:	bf00      	nop
 8008d40:	08008d59 	.word	0x08008d59
 8008d44:	08008d8d 	.word	0x08008d8d
 8008d48:	08008dc1 	.word	0x08008dc1
 8008d4c:	08008df5 	.word	0x08008df5
 8008d50:	08008e29 	.word	0x08008e29
 8008d54:	08008e5d 	.word	0x08008e5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d7a:	e091      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa94 	bl	80092ac <USBD_CtlError>
            err++;
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	3301      	adds	r3, #1
 8008d88:	72fb      	strb	r3, [r7, #11]
          break;
 8008d8a:	e089      	b.n	8008ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7c12      	ldrb	r2, [r2, #16]
 8008da4:	f107 0108 	add.w	r1, r7, #8
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
 8008dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dae:	e077      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fa7a 	bl	80092ac <USBD_CtlError>
            err++;
 8008db8:	7afb      	ldrb	r3, [r7, #11]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dbe:	e06f      	b.n	8008ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de2:	e05d      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa60 	bl	80092ac <USBD_CtlError>
            err++;
 8008dec:	7afb      	ldrb	r3, [r7, #11]
 8008dee:	3301      	adds	r3, #1
 8008df0:	72fb      	strb	r3, [r7, #11]
          break;
 8008df2:	e055      	b.n	8008ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7c12      	ldrb	r2, [r2, #16]
 8008e0c:	f107 0108 	add.w	r1, r7, #8
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e16:	e043      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa46 	bl	80092ac <USBD_CtlError>
            err++;
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	3301      	adds	r3, #1
 8008e24:	72fb      	strb	r3, [r7, #11]
          break;
 8008e26:	e03b      	b.n	8008ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7c12      	ldrb	r2, [r2, #16]
 8008e40:	f107 0108 	add.w	r1, r7, #8
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4a:	e029      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa2c 	bl	80092ac <USBD_CtlError>
            err++;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	3301      	adds	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5a:	e021      	b.n	8008ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	7c12      	ldrb	r2, [r2, #16]
 8008e74:	f107 0108 	add.w	r1, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e7e:	e00f      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa12 	bl	80092ac <USBD_CtlError>
            err++;
 8008e88:	7afb      	ldrb	r3, [r7, #11]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e8e:	e007      	b.n	8008ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa0a 	bl	80092ac <USBD_CtlError>
          err++;
 8008e98:	7afb      	ldrb	r3, [r7, #11]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e9e:	e038      	b.n	8008f12 <USBD_GetDescriptor+0x286>
 8008ea0:	e037      	b.n	8008f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7c1b      	ldrb	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb2:	f107 0208 	add.w	r2, r7, #8
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4798      	blx	r3
 8008eba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ebc:	e029      	b.n	8008f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f9f3 	bl	80092ac <USBD_CtlError>
        err++;
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ecc:	e021      	b.n	8008f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7c1b      	ldrb	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10d      	bne.n	8008ef2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ede:	f107 0208 	add.w	r2, r7, #8
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	4798      	blx	r3
 8008ee6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	2207      	movs	r2, #7
 8008eee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ef0:	e00f      	b.n	8008f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f9d9 	bl	80092ac <USBD_CtlError>
        err++;
 8008efa:	7afb      	ldrb	r3, [r7, #11]
 8008efc:	3301      	adds	r3, #1
 8008efe:	72fb      	strb	r3, [r7, #11]
      break;
 8008f00:	e007      	b.n	8008f12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f9d1 	bl	80092ac <USBD_CtlError>
      err++;
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008f10:	bf00      	nop
  }

  if (err != 0U)
 8008f12:	7afb      	ldrb	r3, [r7, #11]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11c      	bne.n	8008f52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f18:	893b      	ldrh	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d011      	beq.n	8008f42 <USBD_GetDescriptor+0x2b6>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	88db      	ldrh	r3, [r3, #6]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	88da      	ldrh	r2, [r3, #6]
 8008f2a:	893b      	ldrh	r3, [r7, #8]
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	bf28      	it	cs
 8008f30:	4613      	movcs	r3, r2
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f36:	893b      	ldrh	r3, [r7, #8]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fa1f 	bl	8009380 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	88db      	ldrh	r3, [r3, #6]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa76 	bl	800943c <USBD_CtlSendStatus>
 8008f50:	e000      	b.n	8008f54 <USBD_GetDescriptor+0x2c8>
    return;
 8008f52:	bf00      	nop
    }
  }
}
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop

08008f5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	889b      	ldrh	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d130      	bne.n	8008fd0 <USBD_SetAddress+0x74>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	88db      	ldrh	r3, [r3, #6]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d12c      	bne.n	8008fd0 <USBD_SetAddress+0x74>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	885b      	ldrh	r3, [r3, #2]
 8008f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f7c:	d828      	bhi.n	8008fd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	885b      	ldrh	r3, [r3, #2]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d104      	bne.n	8008f9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f988 	bl	80092ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9c:	e01d      	b.n	8008fda <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7bfa      	ldrb	r2, [r7, #15]
 8008fa2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 feaf 	bl	8009d0e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fa43 	bl	800943c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc4:	e009      	b.n	8008fda <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fce:	e004      	b.n	8008fda <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f96a 	bl	80092ac <USBD_CtlError>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	885b      	ldrh	r3, [r3, #2]
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	4b41      	ldr	r3, [pc, #260]	@ (80090fc <USBD_SetConfig+0x118>)
 8008ff6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ff8:	4b40      	ldr	r3, [pc, #256]	@ (80090fc <USBD_SetConfig+0x118>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d904      	bls.n	800900a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f952 	bl	80092ac <USBD_CtlError>
 8009008:	e075      	b.n	80090f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009010:	2b02      	cmp	r3, #2
 8009012:	d002      	beq.n	800901a <USBD_SetConfig+0x36>
 8009014:	2b03      	cmp	r3, #3
 8009016:	d023      	beq.n	8009060 <USBD_SetConfig+0x7c>
 8009018:	e062      	b.n	80090e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800901a:	4b38      	ldr	r3, [pc, #224]	@ (80090fc <USBD_SetConfig+0x118>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d01a      	beq.n	8009058 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009022:	4b36      	ldr	r3, [pc, #216]	@ (80090fc <USBD_SetConfig+0x118>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2203      	movs	r2, #3
 8009030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009034:	4b31      	ldr	r3, [pc, #196]	@ (80090fc <USBD_SetConfig+0x118>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff f9e7 	bl	800840e <USBD_SetClassConfig>
 8009040:	4603      	mov	r3, r0
 8009042:	2b02      	cmp	r3, #2
 8009044:	d104      	bne.n	8009050 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f92f 	bl	80092ac <USBD_CtlError>
            return;
 800904e:	e052      	b.n	80090f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f9f3 	bl	800943c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009056:	e04e      	b.n	80090f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f9ef 	bl	800943c <USBD_CtlSendStatus>
        break;
 800905e:	e04a      	b.n	80090f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009060:	4b26      	ldr	r3, [pc, #152]	@ (80090fc <USBD_SetConfig+0x118>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d112      	bne.n	800908e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009070:	4b22      	ldr	r3, [pc, #136]	@ (80090fc <USBD_SetConfig+0x118>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800907a:	4b20      	ldr	r3, [pc, #128]	@ (80090fc <USBD_SetConfig+0x118>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff f9e3 	bl	800844c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f9d8 	bl	800943c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800908c:	e033      	b.n	80090f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800908e:	4b1b      	ldr	r3, [pc, #108]	@ (80090fc <USBD_SetConfig+0x118>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	429a      	cmp	r2, r3
 800909a:	d01d      	beq.n	80090d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff f9d1 	bl	800844c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80090aa:	4b14      	ldr	r3, [pc, #80]	@ (80090fc <USBD_SetConfig+0x118>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090b4:	4b11      	ldr	r3, [pc, #68]	@ (80090fc <USBD_SetConfig+0x118>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff f9a7 	bl	800840e <USBD_SetClassConfig>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d104      	bne.n	80090d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8ef 	bl	80092ac <USBD_CtlError>
            return;
 80090ce:	e012      	b.n	80090f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f9b3 	bl	800943c <USBD_CtlSendStatus>
        break;
 80090d6:	e00e      	b.n	80090f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f9af 	bl	800943c <USBD_CtlSendStatus>
        break;
 80090de:	e00a      	b.n	80090f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f8e2 	bl	80092ac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090e8:	4b04      	ldr	r3, [pc, #16]	@ (80090fc <USBD_SetConfig+0x118>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff f9ac 	bl	800844c <USBD_ClrClassConfig>
        break;
 80090f4:	bf00      	nop
    }
  }
}
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000344 	.word	0x20000344

08009100 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	88db      	ldrh	r3, [r3, #6]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d004      	beq.n	800911c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f8c9 	bl	80092ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800911a:	e022      	b.n	8009162 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009122:	2b02      	cmp	r3, #2
 8009124:	dc02      	bgt.n	800912c <USBD_GetConfig+0x2c>
 8009126:	2b00      	cmp	r3, #0
 8009128:	dc03      	bgt.n	8009132 <USBD_GetConfig+0x32>
 800912a:	e015      	b.n	8009158 <USBD_GetConfig+0x58>
 800912c:	2b03      	cmp	r3, #3
 800912e:	d00b      	beq.n	8009148 <USBD_GetConfig+0x48>
 8009130:	e012      	b.n	8009158 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3308      	adds	r3, #8
 800913c:	2201      	movs	r2, #1
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f91d 	bl	8009380 <USBD_CtlSendData>
        break;
 8009146:	e00c      	b.n	8009162 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3304      	adds	r3, #4
 800914c:	2201      	movs	r2, #1
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f915 	bl	8009380 <USBD_CtlSendData>
        break;
 8009156:	e004      	b.n	8009162 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8a6 	bl	80092ac <USBD_CtlError>
        break;
 8009160:	bf00      	nop
}
 8009162:	bf00      	nop
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800917a:	3b01      	subs	r3, #1
 800917c:	2b02      	cmp	r3, #2
 800917e:	d81e      	bhi.n	80091be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	88db      	ldrh	r3, [r3, #6]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d004      	beq.n	8009192 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f88e 	bl	80092ac <USBD_CtlError>
        break;
 8009190:	e01a      	b.n	80091c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	f043 0202 	orr.w	r2, r3, #2
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	330c      	adds	r3, #12
 80091b2:	2202      	movs	r2, #2
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f8e2 	bl	8009380 <USBD_CtlSendData>
      break;
 80091bc:	e004      	b.n	80091c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 f873 	bl	80092ac <USBD_CtlError>
      break;
 80091c6:	bf00      	nop
  }
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d106      	bne.n	80091f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f926 	bl	800943c <USBD_CtlSendStatus>
  }
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009208:	3b01      	subs	r3, #1
 800920a:	2b02      	cmp	r3, #2
 800920c:	d80b      	bhi.n	8009226 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	885b      	ldrh	r3, [r3, #2]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d10c      	bne.n	8009230 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f90c 	bl	800943c <USBD_CtlSendStatus>
      }
      break;
 8009224:	e004      	b.n	8009230 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f83f 	bl	80092ac <USBD_CtlError>
      break;
 800922e:	e000      	b.n	8009232 <USBD_ClrFeature+0x3a>
      break;
 8009230:	bf00      	nop
  }
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781a      	ldrb	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	785a      	ldrb	r2, [r3, #1]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	3302      	adds	r3, #2
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	3303      	adds	r3, #3
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	b29b      	uxth	r3, r3
 8009266:	4413      	add	r3, r2
 8009268:	b29a      	uxth	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	3304      	adds	r3, #4
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	3305      	adds	r3, #5
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	b29b      	uxth	r3, r3
 8009280:	4413      	add	r3, r2
 8009282:	b29a      	uxth	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	3306      	adds	r3, #6
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	3307      	adds	r3, #7
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	b29b      	uxth	r3, r3
 800929a:	4413      	add	r3, r2
 800929c:	b29a      	uxth	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	80da      	strh	r2, [r3, #6]

}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr

080092ac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80092b6:	2180      	movs	r1, #128	@ 0x80
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fcbf 	bl	8009c3c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80092be:	2100      	movs	r1, #0
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fcbb 	bl	8009c3c <USBD_LL_StallEP>
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d032      	beq.n	800934a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 f834 	bl	8009352 <USBD_GetLen>
 80092ea:	4603      	mov	r3, r0
 80092ec:	3301      	adds	r3, #1
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	75fa      	strb	r2, [r7, #23]
 80092fe:	461a      	mov	r2, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4413      	add	r3, r2
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7812      	ldrb	r2, [r2, #0]
 8009308:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	75fa      	strb	r2, [r7, #23]
 8009310:	461a      	mov	r2, r3
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	4413      	add	r3, r2
 8009316:	2203      	movs	r2, #3
 8009318:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800931a:	e012      	b.n	8009342 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	60fa      	str	r2, [r7, #12]
 8009322:	7dfa      	ldrb	r2, [r7, #23]
 8009324:	1c51      	adds	r1, r2, #1
 8009326:	75f9      	strb	r1, [r7, #23]
 8009328:	4611      	mov	r1, r2
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	440a      	add	r2, r1
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	75fa      	strb	r2, [r7, #23]
 8009338:	461a      	mov	r2, r3
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	4413      	add	r3, r2
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e8      	bne.n	800931c <USBD_GetString+0x4e>
    }
  }
}
 800934a:	bf00      	nop
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800935e:	e005      	b.n	800936c <USBD_GetLen+0x1a>
  {
    len++;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	3301      	adds	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3301      	adds	r3, #1
 800936a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1f5      	bne.n	8009360 <USBD_GetLen+0xe>
  }

  return len;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	bc80      	pop	{r7}
 800937e:	4770      	bx	lr

08009380 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2202      	movs	r2, #2
 8009392:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800939c:	88fa      	ldrh	r2, [r7, #6]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	2100      	movs	r1, #0
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 fccf 	bl	8009d4c <USBD_LL_Transmit>

  return USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	2100      	movs	r1, #0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f000 fcbd 	bl	8009d4c <USBD_LL_Transmit>

  return USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2203      	movs	r2, #3
 80093ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093f2:	88fa      	ldrh	r2, [r7, #6]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80093fa:	88fa      	ldrh	r2, [r7, #6]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	2100      	movs	r1, #0
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fcc2 	bl	8009d92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	4613      	mov	r3, r2
 8009424:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	2100      	movs	r1, #0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fcb0 	bl	8009d92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2204      	movs	r2, #4
 8009448:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fc7a 	bl	8009d4c <USBD_LL_Transmit>

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b082      	sub	sp, #8
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2205      	movs	r2, #5
 800946e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009472:	2300      	movs	r3, #0
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fc8a 	bl	8009d92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800948c:	2200      	movs	r2, #0
 800948e:	4912      	ldr	r1, [pc, #72]	@ (80094d8 <MX_USB_DEVICE_Init+0x50>)
 8009490:	4812      	ldr	r0, [pc, #72]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 8009492:	f7fe ff62 	bl	800835a <USBD_Init>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800949c:	f7f7 fc24 	bl	8000ce8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80094a0:	490f      	ldr	r1, [pc, #60]	@ (80094e0 <MX_USB_DEVICE_Init+0x58>)
 80094a2:	480e      	ldr	r0, [pc, #56]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 80094a4:	f7fe ff84 	bl	80083b0 <USBD_RegisterClass>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094ae:	f7f7 fc1b 	bl	8000ce8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80094b2:	490c      	ldr	r1, [pc, #48]	@ (80094e4 <MX_USB_DEVICE_Init+0x5c>)
 80094b4:	4809      	ldr	r0, [pc, #36]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 80094b6:	f7fe feb5 	bl	8008224 <USBD_CDC_RegisterInterface>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094c0:	f7f7 fc12 	bl	8000ce8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094c4:	4805      	ldr	r0, [pc, #20]	@ (80094dc <MX_USB_DEVICE_Init+0x54>)
 80094c6:	f7fe ff8c 	bl	80083e2 <USBD_Start>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094d0:	f7f7 fc0a 	bl	8000ce8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094d4:	bf00      	nop
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20000138 	.word	0x20000138
 80094dc:	20000348 	.word	0x20000348
 80094e0:	2000001c 	.word	0x2000001c
 80094e4:	20000128 	.word	0x20000128

080094e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094ec:	2200      	movs	r2, #0
 80094ee:	4905      	ldr	r1, [pc, #20]	@ (8009504 <CDC_Init_FS+0x1c>)
 80094f0:	4805      	ldr	r0, [pc, #20]	@ (8009508 <CDC_Init_FS+0x20>)
 80094f2:	f7fe fead 	bl	8008250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094f6:	4905      	ldr	r1, [pc, #20]	@ (800950c <CDC_Init_FS+0x24>)
 80094f8:	4803      	ldr	r0, [pc, #12]	@ (8009508 <CDC_Init_FS+0x20>)
 80094fa:	f7fe fec2 	bl	8008282 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000a0c 	.word	0x20000a0c
 8009508:	20000348 	.word	0x20000348
 800950c:	2000060c 	.word	0x2000060c

08009510 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009514:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009516:	4618      	mov	r0, r3
 8009518:	46bd      	mov	sp, r7
 800951a:	bc80      	pop	{r7}
 800951c:	4770      	bx	lr
	...

08009520 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	6039      	str	r1, [r7, #0]
 800952a:	71fb      	strb	r3, [r7, #7]
 800952c:	4613      	mov	r3, r2
 800952e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b23      	cmp	r3, #35	@ 0x23
 8009534:	f200 8098 	bhi.w	8009668 <CDC_Control_FS+0x148>
 8009538:	a201      	add	r2, pc, #4	@ (adr r2, 8009540 <CDC_Control_FS+0x20>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009669 	.word	0x08009669
 8009544:	08009669 	.word	0x08009669
 8009548:	08009669 	.word	0x08009669
 800954c:	08009669 	.word	0x08009669
 8009550:	08009669 	.word	0x08009669
 8009554:	08009669 	.word	0x08009669
 8009558:	08009669 	.word	0x08009669
 800955c:	08009669 	.word	0x08009669
 8009560:	08009669 	.word	0x08009669
 8009564:	08009669 	.word	0x08009669
 8009568:	08009669 	.word	0x08009669
 800956c:	08009669 	.word	0x08009669
 8009570:	08009669 	.word	0x08009669
 8009574:	08009669 	.word	0x08009669
 8009578:	08009669 	.word	0x08009669
 800957c:	08009669 	.word	0x08009669
 8009580:	08009669 	.word	0x08009669
 8009584:	08009669 	.word	0x08009669
 8009588:	08009669 	.word	0x08009669
 800958c:	08009669 	.word	0x08009669
 8009590:	08009669 	.word	0x08009669
 8009594:	08009669 	.word	0x08009669
 8009598:	08009669 	.word	0x08009669
 800959c:	08009669 	.word	0x08009669
 80095a0:	08009669 	.word	0x08009669
 80095a4:	08009669 	.word	0x08009669
 80095a8:	08009669 	.word	0x08009669
 80095ac:	08009669 	.word	0x08009669
 80095b0:	08009669 	.word	0x08009669
 80095b4:	08009669 	.word	0x08009669
 80095b8:	08009669 	.word	0x08009669
 80095bc:	08009669 	.word	0x08009669
 80095c0:	080095d1 	.word	0x080095d1
 80095c4:	08009615 	.word	0x08009615
 80095c8:	08009669 	.word	0x08009669
 80095cc:	08009669 	.word	0x08009669
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2]<<16) | (pbuf[3]<<24));
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	431a      	orrs	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	3302      	adds	r3, #2
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	041b      	lsls	r3, r3, #16
 80095e8:	431a      	orrs	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	3303      	adds	r3, #3
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	061b      	lsls	r3, r3, #24
 80095f2:	4313      	orrs	r3, r2
 80095f4:	461a      	mov	r2, r3
 80095f6:	4b20      	ldr	r3, [pc, #128]	@ (8009678 <CDC_Control_FS+0x158>)
 80095f8:	601a      	str	r2, [r3, #0]
    	LineCoding.format = pbuf[4];
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	791a      	ldrb	r2, [r3, #4]
 80095fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009678 <CDC_Control_FS+0x158>)
 8009600:	711a      	strb	r2, [r3, #4]
    	LineCoding.paritytype = pbuf[5];
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	795a      	ldrb	r2, [r3, #5]
 8009606:	4b1c      	ldr	r3, [pc, #112]	@ (8009678 <CDC_Control_FS+0x158>)
 8009608:	715a      	strb	r2, [r3, #5]
    	LineCoding.datatype = pbuf[6];
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	799a      	ldrb	r2, [r3, #6]
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <CDC_Control_FS+0x158>)
 8009610:	719a      	strb	r2, [r3, #6]
    break;
 8009612:	e02a      	b.n	800966a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8009614:	4b18      	ldr	r3, [pc, #96]	@ (8009678 <CDC_Control_FS+0x158>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	b2da      	uxtb	r2, r3
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800961e:	4b16      	ldr	r3, [pc, #88]	@ (8009678 <CDC_Control_FS+0x158>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	0a1a      	lsrs	r2, r3, #8
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800962c:	4b12      	ldr	r3, [pc, #72]	@ (8009678 <CDC_Control_FS+0x158>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	0c1a      	lsrs	r2, r3, #16
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	3302      	adds	r3, #2
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800963a:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <CDC_Control_FS+0x158>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	0e1a      	lsrs	r2, r3, #24
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	3303      	adds	r3, #3
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	3304      	adds	r3, #4
 800964c:	4a0a      	ldr	r2, [pc, #40]	@ (8009678 <CDC_Control_FS+0x158>)
 800964e:	7912      	ldrb	r2, [r2, #4]
 8009650:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	3305      	adds	r3, #5
 8009656:	4a08      	ldr	r2, [pc, #32]	@ (8009678 <CDC_Control_FS+0x158>)
 8009658:	7952      	ldrb	r2, [r2, #5]
 800965a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	3306      	adds	r3, #6
 8009660:	4a05      	ldr	r2, [pc, #20]	@ (8009678 <CDC_Control_FS+0x158>)
 8009662:	7992      	ldrb	r2, [r2, #6]
 8009664:	701a      	strb	r2, [r3, #0]
    break;
 8009666:	e000      	b.n	800966a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009668:	bf00      	nop
  }

  return (USBD_OK);
 800966a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	bc80      	pop	{r7}
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000120 	.word	0x20000120

0800967c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 8009686:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <CDC_Receive_FS+0x3c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 800968e:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <CDC_Receive_FS+0x3c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	6812      	ldr	r2, [r2, #0]
 8009696:	b292      	uxth	r2, r2
 8009698:	4611      	mov	r1, r2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4806      	ldr	r0, [pc, #24]	@ (80096bc <CDC_Receive_FS+0x40>)
 80096a2:	f7fe fdee 	bl	8008282 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096a6:	4805      	ldr	r0, [pc, #20]	@ (80096bc <CDC_Receive_FS+0x40>)
 80096a8:	f7fe fe2d 	bl	8008306 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000e0c 	.word	0x20000e0c
 80096bc:	20000348 	.word	0x20000348

080096c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009708 <CDC_Transmit_FS+0x48>)
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e00b      	b.n	80096fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096e6:	887b      	ldrh	r3, [r7, #2]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4806      	ldr	r0, [pc, #24]	@ (8009708 <CDC_Transmit_FS+0x48>)
 80096ee:	f7fe fdaf 	bl	8008250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096f2:	4805      	ldr	r0, [pc, #20]	@ (8009708 <CDC_Transmit_FS+0x48>)
 80096f4:	f7fe fdd8 	bl	80082a8 <USBD_CDC_TransmitPacket>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000348 	.word	0x20000348

0800970c <CDC_AttachRxData>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8009714:	4a03      	ldr	r2, [pc, #12]	@ (8009724 <CDC_AttachRxData+0x18>)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6013      	str	r3, [r2, #0]
}
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	bc80      	pop	{r7}
 8009722:	4770      	bx	lr
 8009724:	20000e0c 	.word	0x20000e0c

08009728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2212      	movs	r2, #18
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	20000154 	.word	0x20000154

0800974c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2204      	movs	r2, #4
 800975c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800975e:	4b03      	ldr	r3, [pc, #12]	@ (800976c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	bc80      	pop	{r7}
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	20000168 	.word	0x20000168

08009770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009788:	f7ff fda1 	bl	80092ce <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009794:	f7ff fd9b 	bl	80092ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000e10 	.word	0x20000e10
 80097a8:	0800a820 	.word	0x0800a820

080097ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	4904      	ldr	r1, [pc, #16]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097bc:	4804      	ldr	r0, [pc, #16]	@ (80097d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097be:	f7ff fd86 	bl	80092ce <USBD_GetString>
  return USBD_StrDesc;
 80097c2:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000e10 	.word	0x20000e10
 80097d0:	0800a838 	.word	0x0800a838

080097d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	221a      	movs	r2, #26
 80097e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097e6:	f000 f843 	bl	8009870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ea:	4b02      	ldr	r3, [pc, #8]	@ (80097f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	2000016c 	.word	0x2000016c

080097f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009810:	f7ff fd5d 	bl	80092ce <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800981c:	f7ff fd57 	bl	80092ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000e10 	.word	0x20000e10
 8009830:	0800a84c 	.word	0x0800a84c

08009834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800984c:	f7ff fd3f 	bl	80092ce <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009858:	f7ff fd39 	bl	80092ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20000e10 	.word	0x20000e10
 800986c:	0800a858 	.word	0x0800a858

08009870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009876:	4b0f      	ldr	r3, [pc, #60]	@ (80098b4 <Get_SerialNum+0x44>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800987c:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <Get_SerialNum+0x48>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009882:	4b0e      	ldr	r3, [pc, #56]	@ (80098bc <Get_SerialNum+0x4c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009896:	2208      	movs	r2, #8
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <Get_SerialNum+0x50>)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f814 	bl	80098c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a0:	2204      	movs	r2, #4
 80098a2:	4908      	ldr	r1, [pc, #32]	@ (80098c4 <Get_SerialNum+0x54>)
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f000 f80f 	bl	80098c8 <IntToUnicode>
  }
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	1ffff7e8 	.word	0x1ffff7e8
 80098b8:	1ffff7ec 	.word	0x1ffff7ec
 80098bc:	1ffff7f0 	.word	0x1ffff7f0
 80098c0:	2000016e 	.word	0x2000016e
 80098c4:	2000017e 	.word	0x2000017e

080098c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e027      	b.n	8009930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80b      	bhi.n	8009900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4619      	mov	r1, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	440b      	add	r3, r1
 80098f8:	3230      	adds	r2, #48	@ 0x30
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e00a      	b.n	8009916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	b2da      	uxtb	r2, r3
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4619      	mov	r1, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	440b      	add	r3, r1
 8009910:	3237      	adds	r2, #55	@ 0x37
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	3301      	adds	r3, #1
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4413      	add	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	3301      	adds	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
 8009930:	7dfa      	ldrb	r2, [r7, #23]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d3      	bcc.n	80098e0 <IntToUnicode+0x18>
  }
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a0d      	ldr	r2, [pc, #52]	@ (8009988 <HAL_PCD_MspInit+0x44>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d113      	bne.n	800997e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009956:	4b0d      	ldr	r3, [pc, #52]	@ (800998c <HAL_PCD_MspInit+0x48>)
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	4a0c      	ldr	r2, [pc, #48]	@ (800998c <HAL_PCD_MspInit+0x48>)
 800995c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009960:	61d3      	str	r3, [r2, #28]
 8009962:	4b0a      	ldr	r3, [pc, #40]	@ (800998c <HAL_PCD_MspInit+0x48>)
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800996e:	2200      	movs	r2, #0
 8009970:	2100      	movs	r1, #0
 8009972:	2014      	movs	r0, #20
 8009974:	f7f8 f95d 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009978:	2014      	movs	r0, #20
 800997a:	f7f8 f976 	bl	8001c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	40005c00 	.word	0x40005c00
 800998c:	40021000 	.word	0x40021000

08009990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f7fe fd63 	bl	8008472 <USBD_LL_SetupStage>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	440b      	add	r3, r1
 80099d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	4619      	mov	r1, r3
 80099de:	f7fe fd95 	bl	800850c <USBD_LL_DataOutStage>
}
 80099e2:	bf00      	nop
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	440b      	add	r3, r1
 8009a0a:	3324      	adds	r3, #36	@ 0x24
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	4619      	mov	r1, r3
 8009a12:	f7fe fdec 	bl	80085ee <USBD_LL_DataInStage>
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fefc 	bl	800882a <USBD_LL_SOF>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a42:	2301      	movs	r3, #1
 8009a44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	799b      	ldrb	r3, [r3, #6]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d001      	beq.n	8009a52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a4e:	f7f7 f94b 	bl	8000ce8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a58:	7bfa      	ldrb	r2, [r7, #15]
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fe feac 	bl	80087ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fe fe65 	bl	8008738 <USBD_LL_Reset>
}
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fea6 	bl	80087d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7a9b      	ldrb	r3, [r3, #10]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a94:	4b04      	ldr	r3, [pc, #16]	@ (8009aa8 <HAL_PCD_SuspendCallback+0x30>)
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	4a03      	ldr	r2, [pc, #12]	@ (8009aa8 <HAL_PCD_SuspendCallback+0x30>)
 8009a9a:	f043 0306 	orr.w	r3, r3, #6
 8009a9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	e000ed00 	.word	0xe000ed00

08009aac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fea0 	bl	8008800 <USBD_LL_Resume>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009ad0:	4a28      	ldr	r2, [pc, #160]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a26      	ldr	r2, [pc, #152]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009adc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ae0:	4b24      	ldr	r3, [pc, #144]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009ae2:	4a25      	ldr	r2, [pc, #148]	@ (8009b78 <USBD_LL_Init+0xb0>)
 8009ae4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ae6:	4b23      	ldr	r3, [pc, #140]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009ae8:	2208      	movs	r2, #8
 8009aea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009aec:	4b21      	ldr	r3, [pc, #132]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009aee:	2202      	movs	r2, #2
 8009af0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009af2:	4b20      	ldr	r3, [pc, #128]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009af8:	4b1e      	ldr	r3, [pc, #120]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009afe:	4b1d      	ldr	r3, [pc, #116]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b04:	481b      	ldr	r0, [pc, #108]	@ (8009b74 <USBD_LL_Init+0xac>)
 8009b06:	f7f8 fc6e 	bl	80023e6 <HAL_PCD_Init>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b10:	f7f7 f8ea 	bl	8000ce8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b1a:	2318      	movs	r3, #24
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	f7fa f97f 	bl	8003e22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b2a:	2358      	movs	r3, #88	@ 0x58
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2180      	movs	r1, #128	@ 0x80
 8009b30:	f7fa f977 	bl	8003e22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b3a:	23c0      	movs	r3, #192	@ 0xc0
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2181      	movs	r1, #129	@ 0x81
 8009b40:	f7fa f96f 	bl	8003e22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b4a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2101      	movs	r1, #1
 8009b52:	f7fa f966 	bl	8003e22 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b60:	2200      	movs	r2, #0
 8009b62:	2182      	movs	r1, #130	@ 0x82
 8009b64:	f7fa f95d 	bl	8003e22 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20001010 	.word	0x20001010
 8009b78:	40005c00 	.word	0x40005c00

08009b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7f8 fd1d 	bl	80025d2 <HAL_PCD_Start>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f94e 	bl	8009e40 <USBD_Get_USB_Status>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	4608      	mov	r0, r1
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	70fb      	strb	r3, [r7, #3]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70bb      	strb	r3, [r7, #2]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bda:	78bb      	ldrb	r3, [r7, #2]
 8009bdc:	883a      	ldrh	r2, [r7, #0]
 8009bde:	78f9      	ldrb	r1, [r7, #3]
 8009be0:	f7f8 fe71 	bl	80028c6 <HAL_PCD_EP_Open>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f000 f928 	bl	8009e40 <USBD_Get_USB_Status>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f8 feaf 	bl	8002980 <HAL_PCD_EP_Close>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 f909 	bl	8009e40 <USBD_Get_USB_Status>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c56:	78fa      	ldrb	r2, [r7, #3]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7f8 ff57 	bl	8002b0e <HAL_PCD_EP_SetStall>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f8ea 	bl	8009e40 <USBD_Get_USB_Status>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	460b      	mov	r3, r1
 8009c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c94:	78fa      	ldrb	r2, [r7, #3]
 8009c96:	4611      	mov	r1, r2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7f8 ff98 	bl	8002bce <HAL_PCD_EP_ClrStall>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 f8cb 	bl	8009e40 <USBD_Get_USB_Status>
 8009caa:	4603      	mov	r3, r0
 8009cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da0b      	bge.n	8009cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	00db      	lsls	r3, r3, #3
 8009ce4:	440b      	add	r3, r1
 8009ce6:	3312      	adds	r3, #18
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	e00b      	b.n	8009d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cec:	78fb      	ldrb	r3, [r7, #3]
 8009cee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cf2:	68f9      	ldr	r1, [r7, #12]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	440b      	add	r3, r1
 8009cfe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr

08009d0e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	460b      	mov	r3, r1
 8009d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7f8 fda6 	bl	800287e <HAL_PCD_SetAddress>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 f881 	bl	8009e40 <USBD_Get_USB_Status>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	461a      	mov	r2, r3
 8009d58:	460b      	mov	r3, r1
 8009d5a:	72fb      	strb	r3, [r7, #11]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d6e:	893b      	ldrh	r3, [r7, #8]
 8009d70:	7af9      	ldrb	r1, [r7, #11]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	f7f8 fe94 	bl	8002aa0 <HAL_PCD_EP_Transmit>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f85e 	bl	8009e40 <USBD_Get_USB_Status>
 8009d84:	4603      	mov	r3, r0
 8009d86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d88:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b086      	sub	sp, #24
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	460b      	mov	r3, r1
 8009da0:	72fb      	strb	r3, [r7, #11]
 8009da2:	4613      	mov	r3, r2
 8009da4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009db4:	893b      	ldrh	r3, [r7, #8]
 8009db6:	7af9      	ldrb	r1, [r7, #11]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	f7f8 fe29 	bl	8002a10 <HAL_PCD_EP_Receive>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 f83b 	bl	8009e40 <USBD_Get_USB_Status>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dce:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	4611      	mov	r1, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f8 fe3f 	bl	8002a72 <HAL_PCD_EP_GetRxCount>
 8009df4:	4603      	mov	r3, r0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e08:	4b02      	ldr	r3, [pc, #8]	@ (8009e14 <USBD_static_malloc+0x14>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr
 8009e14:	200012e8 	.word	0x200012e8

08009e18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]

}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bc80      	pop	{r7}
 8009e28:	4770      	bx	lr

08009e2a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr

08009e40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d817      	bhi.n	8009e84 <USBD_Get_USB_Status+0x44>
 8009e54:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <USBD_Get_USB_Status+0x1c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e73 	.word	0x08009e73
 8009e64:	08009e79 	.word	0x08009e79
 8009e68:	08009e7f 	.word	0x08009e7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e70:	e00b      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e72:	2302      	movs	r3, #2
 8009e74:	73fb      	strb	r3, [r7, #15]
    break;
 8009e76:	e008      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7c:	e005      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	73fb      	strb	r3, [r7, #15]
    break;
 8009e82:	e002      	b.n	8009e8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e84:	2302      	movs	r3, #2
 8009e86:	73fb      	strb	r3, [r7, #15]
    break;
 8009e88:	bf00      	nop
  }
  return usb_status;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bc80      	pop	{r7}
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop

08009e98 <siprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e9e:	b510      	push	{r4, lr}
 8009ea0:	2400      	movs	r4, #0
 8009ea2:	b09d      	sub	sp, #116	@ 0x74
 8009ea4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009ea6:	9002      	str	r0, [sp, #8]
 8009ea8:	9006      	str	r0, [sp, #24]
 8009eaa:	9107      	str	r1, [sp, #28]
 8009eac:	9104      	str	r1, [sp, #16]
 8009eae:	4809      	ldr	r0, [pc, #36]	@ (8009ed4 <siprintf+0x3c>)
 8009eb0:	4909      	ldr	r1, [pc, #36]	@ (8009ed8 <siprintf+0x40>)
 8009eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb6:	9105      	str	r1, [sp, #20]
 8009eb8:	6800      	ldr	r0, [r0, #0]
 8009eba:	a902      	add	r1, sp, #8
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009ec0:	f000 f992 	bl	800a1e8 <_svfiprintf_r>
 8009ec4:	9b02      	ldr	r3, [sp, #8]
 8009ec6:	701c      	strb	r4, [r3, #0]
 8009ec8:	b01d      	add	sp, #116	@ 0x74
 8009eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ece:	b003      	add	sp, #12
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000188 	.word	0x20000188
 8009ed8:	ffff0208 	.word	0xffff0208

08009edc <memset>:
 8009edc:	4603      	mov	r3, r0
 8009ede:	4402      	add	r2, r0
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d100      	bne.n	8009ee6 <memset+0xa>
 8009ee4:	4770      	bx	lr
 8009ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eea:	e7f9      	b.n	8009ee0 <memset+0x4>

08009eec <__errno>:
 8009eec:	4b01      	ldr	r3, [pc, #4]	@ (8009ef4 <__errno+0x8>)
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000188 	.word	0x20000188

08009ef8 <__libc_init_array>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	2600      	movs	r6, #0
 8009efc:	4d0c      	ldr	r5, [pc, #48]	@ (8009f30 <__libc_init_array+0x38>)
 8009efe:	4c0d      	ldr	r4, [pc, #52]	@ (8009f34 <__libc_init_array+0x3c>)
 8009f00:	1b64      	subs	r4, r4, r5
 8009f02:	10a4      	asrs	r4, r4, #2
 8009f04:	42a6      	cmp	r6, r4
 8009f06:	d109      	bne.n	8009f1c <__libc_init_array+0x24>
 8009f08:	f000 fc76 	bl	800a7f8 <_init>
 8009f0c:	2600      	movs	r6, #0
 8009f0e:	4d0a      	ldr	r5, [pc, #40]	@ (8009f38 <__libc_init_array+0x40>)
 8009f10:	4c0a      	ldr	r4, [pc, #40]	@ (8009f3c <__libc_init_array+0x44>)
 8009f12:	1b64      	subs	r4, r4, r5
 8009f14:	10a4      	asrs	r4, r4, #2
 8009f16:	42a6      	cmp	r6, r4
 8009f18:	d105      	bne.n	8009f26 <__libc_init_array+0x2e>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f20:	4798      	blx	r3
 8009f22:	3601      	adds	r6, #1
 8009f24:	e7ee      	b.n	8009f04 <__libc_init_array+0xc>
 8009f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2a:	4798      	blx	r3
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	e7f2      	b.n	8009f16 <__libc_init_array+0x1e>
 8009f30:	0800a8c0 	.word	0x0800a8c0
 8009f34:	0800a8c0 	.word	0x0800a8c0
 8009f38:	0800a8c0 	.word	0x0800a8c0
 8009f3c:	0800a8c4 	.word	0x0800a8c4

08009f40 <__retarget_lock_acquire_recursive>:
 8009f40:	4770      	bx	lr

08009f42 <__retarget_lock_release_recursive>:
 8009f42:	4770      	bx	lr

08009f44 <_free_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4605      	mov	r5, r0
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	d040      	beq.n	8009fce <_free_r+0x8a>
 8009f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f50:	1f0c      	subs	r4, r1, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	bfb8      	it	lt
 8009f56:	18e4      	addlt	r4, r4, r3
 8009f58:	f000 f8de 	bl	800a118 <__malloc_lock>
 8009f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8009fd0 <_free_r+0x8c>)
 8009f5e:	6813      	ldr	r3, [r2, #0]
 8009f60:	b933      	cbnz	r3, 8009f70 <_free_r+0x2c>
 8009f62:	6063      	str	r3, [r4, #4]
 8009f64:	6014      	str	r4, [r2, #0]
 8009f66:	4628      	mov	r0, r5
 8009f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f6c:	f000 b8da 	b.w	800a124 <__malloc_unlock>
 8009f70:	42a3      	cmp	r3, r4
 8009f72:	d908      	bls.n	8009f86 <_free_r+0x42>
 8009f74:	6820      	ldr	r0, [r4, #0]
 8009f76:	1821      	adds	r1, r4, r0
 8009f78:	428b      	cmp	r3, r1
 8009f7a:	bf01      	itttt	eq
 8009f7c:	6819      	ldreq	r1, [r3, #0]
 8009f7e:	685b      	ldreq	r3, [r3, #4]
 8009f80:	1809      	addeq	r1, r1, r0
 8009f82:	6021      	streq	r1, [r4, #0]
 8009f84:	e7ed      	b.n	8009f62 <_free_r+0x1e>
 8009f86:	461a      	mov	r2, r3
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	b10b      	cbz	r3, 8009f90 <_free_r+0x4c>
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	d9fa      	bls.n	8009f86 <_free_r+0x42>
 8009f90:	6811      	ldr	r1, [r2, #0]
 8009f92:	1850      	adds	r0, r2, r1
 8009f94:	42a0      	cmp	r0, r4
 8009f96:	d10b      	bne.n	8009fb0 <_free_r+0x6c>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	4401      	add	r1, r0
 8009f9c:	1850      	adds	r0, r2, r1
 8009f9e:	4283      	cmp	r3, r0
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	d1e0      	bne.n	8009f66 <_free_r+0x22>
 8009fa4:	6818      	ldr	r0, [r3, #0]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4408      	add	r0, r1
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	6053      	str	r3, [r2, #4]
 8009fae:	e7da      	b.n	8009f66 <_free_r+0x22>
 8009fb0:	d902      	bls.n	8009fb8 <_free_r+0x74>
 8009fb2:	230c      	movs	r3, #12
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	e7d6      	b.n	8009f66 <_free_r+0x22>
 8009fb8:	6820      	ldr	r0, [r4, #0]
 8009fba:	1821      	adds	r1, r4, r0
 8009fbc:	428b      	cmp	r3, r1
 8009fbe:	bf01      	itttt	eq
 8009fc0:	6819      	ldreq	r1, [r3, #0]
 8009fc2:	685b      	ldreq	r3, [r3, #4]
 8009fc4:	1809      	addeq	r1, r1, r0
 8009fc6:	6021      	streq	r1, [r4, #0]
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	6054      	str	r4, [r2, #4]
 8009fcc:	e7cb      	b.n	8009f66 <_free_r+0x22>
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	2000164c 	.word	0x2000164c

08009fd4 <sbrk_aligned>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	4e0f      	ldr	r6, [pc, #60]	@ (800a014 <sbrk_aligned+0x40>)
 8009fd8:	460c      	mov	r4, r1
 8009fda:	6831      	ldr	r1, [r6, #0]
 8009fdc:	4605      	mov	r5, r0
 8009fde:	b911      	cbnz	r1, 8009fe6 <sbrk_aligned+0x12>
 8009fe0:	f000 fba8 	bl	800a734 <_sbrk_r>
 8009fe4:	6030      	str	r0, [r6, #0]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f000 fba3 	bl	800a734 <_sbrk_r>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	d103      	bne.n	8009ffa <sbrk_aligned+0x26>
 8009ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	bd70      	pop	{r4, r5, r6, pc}
 8009ffa:	1cc4      	adds	r4, r0, #3
 8009ffc:	f024 0403 	bic.w	r4, r4, #3
 800a000:	42a0      	cmp	r0, r4
 800a002:	d0f8      	beq.n	8009ff6 <sbrk_aligned+0x22>
 800a004:	1a21      	subs	r1, r4, r0
 800a006:	4628      	mov	r0, r5
 800a008:	f000 fb94 	bl	800a734 <_sbrk_r>
 800a00c:	3001      	adds	r0, #1
 800a00e:	d1f2      	bne.n	8009ff6 <sbrk_aligned+0x22>
 800a010:	e7ef      	b.n	8009ff2 <sbrk_aligned+0x1e>
 800a012:	bf00      	nop
 800a014:	20001648 	.word	0x20001648

0800a018 <_malloc_r>:
 800a018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a01c:	1ccd      	adds	r5, r1, #3
 800a01e:	f025 0503 	bic.w	r5, r5, #3
 800a022:	3508      	adds	r5, #8
 800a024:	2d0c      	cmp	r5, #12
 800a026:	bf38      	it	cc
 800a028:	250c      	movcc	r5, #12
 800a02a:	2d00      	cmp	r5, #0
 800a02c:	4606      	mov	r6, r0
 800a02e:	db01      	blt.n	800a034 <_malloc_r+0x1c>
 800a030:	42a9      	cmp	r1, r5
 800a032:	d904      	bls.n	800a03e <_malloc_r+0x26>
 800a034:	230c      	movs	r3, #12
 800a036:	6033      	str	r3, [r6, #0]
 800a038:	2000      	movs	r0, #0
 800a03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a114 <_malloc_r+0xfc>
 800a042:	f000 f869 	bl	800a118 <__malloc_lock>
 800a046:	f8d8 3000 	ldr.w	r3, [r8]
 800a04a:	461c      	mov	r4, r3
 800a04c:	bb44      	cbnz	r4, 800a0a0 <_malloc_r+0x88>
 800a04e:	4629      	mov	r1, r5
 800a050:	4630      	mov	r0, r6
 800a052:	f7ff ffbf 	bl	8009fd4 <sbrk_aligned>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	4604      	mov	r4, r0
 800a05a:	d158      	bne.n	800a10e <_malloc_r+0xf6>
 800a05c:	f8d8 4000 	ldr.w	r4, [r8]
 800a060:	4627      	mov	r7, r4
 800a062:	2f00      	cmp	r7, #0
 800a064:	d143      	bne.n	800a0ee <_malloc_r+0xd6>
 800a066:	2c00      	cmp	r4, #0
 800a068:	d04b      	beq.n	800a102 <_malloc_r+0xea>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	4639      	mov	r1, r7
 800a06e:	4630      	mov	r0, r6
 800a070:	eb04 0903 	add.w	r9, r4, r3
 800a074:	f000 fb5e 	bl	800a734 <_sbrk_r>
 800a078:	4581      	cmp	r9, r0
 800a07a:	d142      	bne.n	800a102 <_malloc_r+0xea>
 800a07c:	6821      	ldr	r1, [r4, #0]
 800a07e:	4630      	mov	r0, r6
 800a080:	1a6d      	subs	r5, r5, r1
 800a082:	4629      	mov	r1, r5
 800a084:	f7ff ffa6 	bl	8009fd4 <sbrk_aligned>
 800a088:	3001      	adds	r0, #1
 800a08a:	d03a      	beq.n	800a102 <_malloc_r+0xea>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	442b      	add	r3, r5
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	f8d8 3000 	ldr.w	r3, [r8]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	bb62      	cbnz	r2, 800a0f4 <_malloc_r+0xdc>
 800a09a:	f8c8 7000 	str.w	r7, [r8]
 800a09e:	e00f      	b.n	800a0c0 <_malloc_r+0xa8>
 800a0a0:	6822      	ldr	r2, [r4, #0]
 800a0a2:	1b52      	subs	r2, r2, r5
 800a0a4:	d420      	bmi.n	800a0e8 <_malloc_r+0xd0>
 800a0a6:	2a0b      	cmp	r2, #11
 800a0a8:	d917      	bls.n	800a0da <_malloc_r+0xc2>
 800a0aa:	1961      	adds	r1, r4, r5
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	6025      	str	r5, [r4, #0]
 800a0b0:	bf18      	it	ne
 800a0b2:	6059      	strne	r1, [r3, #4]
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	bf08      	it	eq
 800a0b8:	f8c8 1000 	streq.w	r1, [r8]
 800a0bc:	5162      	str	r2, [r4, r5]
 800a0be:	604b      	str	r3, [r1, #4]
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f000 f82f 	bl	800a124 <__malloc_unlock>
 800a0c6:	f104 000b 	add.w	r0, r4, #11
 800a0ca:	1d23      	adds	r3, r4, #4
 800a0cc:	f020 0007 	bic.w	r0, r0, #7
 800a0d0:	1ac2      	subs	r2, r0, r3
 800a0d2:	bf1c      	itt	ne
 800a0d4:	1a1b      	subne	r3, r3, r0
 800a0d6:	50a3      	strne	r3, [r4, r2]
 800a0d8:	e7af      	b.n	800a03a <_malloc_r+0x22>
 800a0da:	6862      	ldr	r2, [r4, #4]
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	bf0c      	ite	eq
 800a0e0:	f8c8 2000 	streq.w	r2, [r8]
 800a0e4:	605a      	strne	r2, [r3, #4]
 800a0e6:	e7eb      	b.n	800a0c0 <_malloc_r+0xa8>
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	6864      	ldr	r4, [r4, #4]
 800a0ec:	e7ae      	b.n	800a04c <_malloc_r+0x34>
 800a0ee:	463c      	mov	r4, r7
 800a0f0:	687f      	ldr	r7, [r7, #4]
 800a0f2:	e7b6      	b.n	800a062 <_malloc_r+0x4a>
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	d1fb      	bne.n	800a0f4 <_malloc_r+0xdc>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6053      	str	r3, [r2, #4]
 800a100:	e7de      	b.n	800a0c0 <_malloc_r+0xa8>
 800a102:	230c      	movs	r3, #12
 800a104:	4630      	mov	r0, r6
 800a106:	6033      	str	r3, [r6, #0]
 800a108:	f000 f80c 	bl	800a124 <__malloc_unlock>
 800a10c:	e794      	b.n	800a038 <_malloc_r+0x20>
 800a10e:	6005      	str	r5, [r0, #0]
 800a110:	e7d6      	b.n	800a0c0 <_malloc_r+0xa8>
 800a112:	bf00      	nop
 800a114:	2000164c 	.word	0x2000164c

0800a118 <__malloc_lock>:
 800a118:	4801      	ldr	r0, [pc, #4]	@ (800a120 <__malloc_lock+0x8>)
 800a11a:	f7ff bf11 	b.w	8009f40 <__retarget_lock_acquire_recursive>
 800a11e:	bf00      	nop
 800a120:	20001644 	.word	0x20001644

0800a124 <__malloc_unlock>:
 800a124:	4801      	ldr	r0, [pc, #4]	@ (800a12c <__malloc_unlock+0x8>)
 800a126:	f7ff bf0c 	b.w	8009f42 <__retarget_lock_release_recursive>
 800a12a:	bf00      	nop
 800a12c:	20001644 	.word	0x20001644

0800a130 <__ssputs_r>:
 800a130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a134:	461f      	mov	r7, r3
 800a136:	688e      	ldr	r6, [r1, #8]
 800a138:	4682      	mov	sl, r0
 800a13a:	42be      	cmp	r6, r7
 800a13c:	460c      	mov	r4, r1
 800a13e:	4690      	mov	r8, r2
 800a140:	680b      	ldr	r3, [r1, #0]
 800a142:	d82d      	bhi.n	800a1a0 <__ssputs_r+0x70>
 800a144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a148:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a14c:	d026      	beq.n	800a19c <__ssputs_r+0x6c>
 800a14e:	6965      	ldr	r5, [r4, #20]
 800a150:	6909      	ldr	r1, [r1, #16]
 800a152:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a156:	eba3 0901 	sub.w	r9, r3, r1
 800a15a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a15e:	1c7b      	adds	r3, r7, #1
 800a160:	444b      	add	r3, r9
 800a162:	106d      	asrs	r5, r5, #1
 800a164:	429d      	cmp	r5, r3
 800a166:	bf38      	it	cc
 800a168:	461d      	movcc	r5, r3
 800a16a:	0553      	lsls	r3, r2, #21
 800a16c:	d527      	bpl.n	800a1be <__ssputs_r+0x8e>
 800a16e:	4629      	mov	r1, r5
 800a170:	f7ff ff52 	bl	800a018 <_malloc_r>
 800a174:	4606      	mov	r6, r0
 800a176:	b360      	cbz	r0, 800a1d2 <__ssputs_r+0xa2>
 800a178:	464a      	mov	r2, r9
 800a17a:	6921      	ldr	r1, [r4, #16]
 800a17c:	f000 faf8 	bl	800a770 <memcpy>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	6126      	str	r6, [r4, #16]
 800a18e:	444e      	add	r6, r9
 800a190:	6026      	str	r6, [r4, #0]
 800a192:	463e      	mov	r6, r7
 800a194:	6165      	str	r5, [r4, #20]
 800a196:	eba5 0509 	sub.w	r5, r5, r9
 800a19a:	60a5      	str	r5, [r4, #8]
 800a19c:	42be      	cmp	r6, r7
 800a19e:	d900      	bls.n	800a1a2 <__ssputs_r+0x72>
 800a1a0:	463e      	mov	r6, r7
 800a1a2:	4632      	mov	r2, r6
 800a1a4:	4641      	mov	r1, r8
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	f000 faaa 	bl	800a700 <memmove>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	68a3      	ldr	r3, [r4, #8]
 800a1b0:	1b9b      	subs	r3, r3, r6
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	4433      	add	r3, r6
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1be:	462a      	mov	r2, r5
 800a1c0:	f000 fae4 	bl	800a78c <_realloc_r>
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d1e0      	bne.n	800a18c <__ssputs_r+0x5c>
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	6921      	ldr	r1, [r4, #16]
 800a1ce:	f7ff feb9 	bl	8009f44 <_free_r>
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	f8ca 3000 	str.w	r3, [sl]
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	f04f 30ff 	mov.w	r0, #4294967295
 800a1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1e2:	81a3      	strh	r3, [r4, #12]
 800a1e4:	e7e9      	b.n	800a1ba <__ssputs_r+0x8a>
	...

0800a1e8 <_svfiprintf_r>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	898b      	ldrh	r3, [r1, #12]
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	061b      	lsls	r3, r3, #24
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	b09d      	sub	sp, #116	@ 0x74
 800a1fa:	d510      	bpl.n	800a21e <_svfiprintf_r+0x36>
 800a1fc:	690b      	ldr	r3, [r1, #16]
 800a1fe:	b973      	cbnz	r3, 800a21e <_svfiprintf_r+0x36>
 800a200:	2140      	movs	r1, #64	@ 0x40
 800a202:	f7ff ff09 	bl	800a018 <_malloc_r>
 800a206:	6028      	str	r0, [r5, #0]
 800a208:	6128      	str	r0, [r5, #16]
 800a20a:	b930      	cbnz	r0, 800a21a <_svfiprintf_r+0x32>
 800a20c:	230c      	movs	r3, #12
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	b01d      	add	sp, #116	@ 0x74
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	2340      	movs	r3, #64	@ 0x40
 800a21c:	616b      	str	r3, [r5, #20]
 800a21e:	2300      	movs	r3, #0
 800a220:	9309      	str	r3, [sp, #36]	@ 0x24
 800a222:	2320      	movs	r3, #32
 800a224:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a228:	2330      	movs	r3, #48	@ 0x30
 800a22a:	f04f 0901 	mov.w	r9, #1
 800a22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a232:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a3cc <_svfiprintf_r+0x1e4>
 800a236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a23a:	4623      	mov	r3, r4
 800a23c:	469a      	mov	sl, r3
 800a23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a242:	b10a      	cbz	r2, 800a248 <_svfiprintf_r+0x60>
 800a244:	2a25      	cmp	r2, #37	@ 0x25
 800a246:	d1f9      	bne.n	800a23c <_svfiprintf_r+0x54>
 800a248:	ebba 0b04 	subs.w	fp, sl, r4
 800a24c:	d00b      	beq.n	800a266 <_svfiprintf_r+0x7e>
 800a24e:	465b      	mov	r3, fp
 800a250:	4622      	mov	r2, r4
 800a252:	4629      	mov	r1, r5
 800a254:	4638      	mov	r0, r7
 800a256:	f7ff ff6b 	bl	800a130 <__ssputs_r>
 800a25a:	3001      	adds	r0, #1
 800a25c:	f000 80a7 	beq.w	800a3ae <_svfiprintf_r+0x1c6>
 800a260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a262:	445a      	add	r2, fp
 800a264:	9209      	str	r2, [sp, #36]	@ 0x24
 800a266:	f89a 3000 	ldrb.w	r3, [sl]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 809f 	beq.w	800a3ae <_svfiprintf_r+0x1c6>
 800a270:	2300      	movs	r3, #0
 800a272:	f04f 32ff 	mov.w	r2, #4294967295
 800a276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a27a:	f10a 0a01 	add.w	sl, sl, #1
 800a27e:	9304      	str	r3, [sp, #16]
 800a280:	9307      	str	r3, [sp, #28]
 800a282:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a286:	931a      	str	r3, [sp, #104]	@ 0x68
 800a288:	4654      	mov	r4, sl
 800a28a:	2205      	movs	r2, #5
 800a28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a290:	484e      	ldr	r0, [pc, #312]	@ (800a3cc <_svfiprintf_r+0x1e4>)
 800a292:	f000 fa5f 	bl	800a754 <memchr>
 800a296:	9a04      	ldr	r2, [sp, #16]
 800a298:	b9d8      	cbnz	r0, 800a2d2 <_svfiprintf_r+0xea>
 800a29a:	06d0      	lsls	r0, r2, #27
 800a29c:	bf44      	itt	mi
 800a29e:	2320      	movmi	r3, #32
 800a2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2a4:	0711      	lsls	r1, r2, #28
 800a2a6:	bf44      	itt	mi
 800a2a8:	232b      	movmi	r3, #43	@ 0x2b
 800a2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b4:	d015      	beq.n	800a2e2 <_svfiprintf_r+0xfa>
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f04f 0c0a 	mov.w	ip, #10
 800a2be:	9a07      	ldr	r2, [sp, #28]
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c6:	3b30      	subs	r3, #48	@ 0x30
 800a2c8:	2b09      	cmp	r3, #9
 800a2ca:	d94b      	bls.n	800a364 <_svfiprintf_r+0x17c>
 800a2cc:	b1b0      	cbz	r0, 800a2fc <_svfiprintf_r+0x114>
 800a2ce:	9207      	str	r2, [sp, #28]
 800a2d0:	e014      	b.n	800a2fc <_svfiprintf_r+0x114>
 800a2d2:	eba0 0308 	sub.w	r3, r0, r8
 800a2d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	46a2      	mov	sl, r4
 800a2de:	9304      	str	r3, [sp, #16]
 800a2e0:	e7d2      	b.n	800a288 <_svfiprintf_r+0xa0>
 800a2e2:	9b03      	ldr	r3, [sp, #12]
 800a2e4:	1d19      	adds	r1, r3, #4
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	9103      	str	r1, [sp, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	bfbb      	ittet	lt
 800a2ee:	425b      	neglt	r3, r3
 800a2f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a2f4:	9307      	strge	r3, [sp, #28]
 800a2f6:	9307      	strlt	r3, [sp, #28]
 800a2f8:	bfb8      	it	lt
 800a2fa:	9204      	strlt	r2, [sp, #16]
 800a2fc:	7823      	ldrb	r3, [r4, #0]
 800a2fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800a300:	d10a      	bne.n	800a318 <_svfiprintf_r+0x130>
 800a302:	7863      	ldrb	r3, [r4, #1]
 800a304:	2b2a      	cmp	r3, #42	@ 0x2a
 800a306:	d132      	bne.n	800a36e <_svfiprintf_r+0x186>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	3402      	adds	r4, #2
 800a30c:	1d1a      	adds	r2, r3, #4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	9203      	str	r2, [sp, #12]
 800a312:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a316:	9305      	str	r3, [sp, #20]
 800a318:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a3d0 <_svfiprintf_r+0x1e8>
 800a31c:	2203      	movs	r2, #3
 800a31e:	4650      	mov	r0, sl
 800a320:	7821      	ldrb	r1, [r4, #0]
 800a322:	f000 fa17 	bl	800a754 <memchr>
 800a326:	b138      	cbz	r0, 800a338 <_svfiprintf_r+0x150>
 800a328:	2240      	movs	r2, #64	@ 0x40
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	eba0 000a 	sub.w	r0, r0, sl
 800a330:	4082      	lsls	r2, r0
 800a332:	4313      	orrs	r3, r2
 800a334:	3401      	adds	r4, #1
 800a336:	9304      	str	r3, [sp, #16]
 800a338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33c:	2206      	movs	r2, #6
 800a33e:	4825      	ldr	r0, [pc, #148]	@ (800a3d4 <_svfiprintf_r+0x1ec>)
 800a340:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a344:	f000 fa06 	bl	800a754 <memchr>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d036      	beq.n	800a3ba <_svfiprintf_r+0x1d2>
 800a34c:	4b22      	ldr	r3, [pc, #136]	@ (800a3d8 <_svfiprintf_r+0x1f0>)
 800a34e:	bb1b      	cbnz	r3, 800a398 <_svfiprintf_r+0x1b0>
 800a350:	9b03      	ldr	r3, [sp, #12]
 800a352:	3307      	adds	r3, #7
 800a354:	f023 0307 	bic.w	r3, r3, #7
 800a358:	3308      	adds	r3, #8
 800a35a:	9303      	str	r3, [sp, #12]
 800a35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35e:	4433      	add	r3, r6
 800a360:	9309      	str	r3, [sp, #36]	@ 0x24
 800a362:	e76a      	b.n	800a23a <_svfiprintf_r+0x52>
 800a364:	460c      	mov	r4, r1
 800a366:	2001      	movs	r0, #1
 800a368:	fb0c 3202 	mla	r2, ip, r2, r3
 800a36c:	e7a8      	b.n	800a2c0 <_svfiprintf_r+0xd8>
 800a36e:	2300      	movs	r3, #0
 800a370:	f04f 0c0a 	mov.w	ip, #10
 800a374:	4619      	mov	r1, r3
 800a376:	3401      	adds	r4, #1
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	4620      	mov	r0, r4
 800a37c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a380:	3a30      	subs	r2, #48	@ 0x30
 800a382:	2a09      	cmp	r2, #9
 800a384:	d903      	bls.n	800a38e <_svfiprintf_r+0x1a6>
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0c6      	beq.n	800a318 <_svfiprintf_r+0x130>
 800a38a:	9105      	str	r1, [sp, #20]
 800a38c:	e7c4      	b.n	800a318 <_svfiprintf_r+0x130>
 800a38e:	4604      	mov	r4, r0
 800a390:	2301      	movs	r3, #1
 800a392:	fb0c 2101 	mla	r1, ip, r1, r2
 800a396:	e7f0      	b.n	800a37a <_svfiprintf_r+0x192>
 800a398:	ab03      	add	r3, sp, #12
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	462a      	mov	r2, r5
 800a39e:	4638      	mov	r0, r7
 800a3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a3dc <_svfiprintf_r+0x1f4>)
 800a3a2:	a904      	add	r1, sp, #16
 800a3a4:	f3af 8000 	nop.w
 800a3a8:	1c42      	adds	r2, r0, #1
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	d1d6      	bne.n	800a35c <_svfiprintf_r+0x174>
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	065b      	lsls	r3, r3, #25
 800a3b2:	f53f af2d 	bmi.w	800a210 <_svfiprintf_r+0x28>
 800a3b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3b8:	e72c      	b.n	800a214 <_svfiprintf_r+0x2c>
 800a3ba:	ab03      	add	r3, sp, #12
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	4b06      	ldr	r3, [pc, #24]	@ (800a3dc <_svfiprintf_r+0x1f4>)
 800a3c4:	a904      	add	r1, sp, #16
 800a3c6:	f000 f87d 	bl	800a4c4 <_printf_i>
 800a3ca:	e7ed      	b.n	800a3a8 <_svfiprintf_r+0x1c0>
 800a3cc:	0800a88a 	.word	0x0800a88a
 800a3d0:	0800a890 	.word	0x0800a890
 800a3d4:	0800a894 	.word	0x0800a894
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	0800a131 	.word	0x0800a131

0800a3e0 <_printf_common>:
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	4698      	mov	r8, r3
 800a3e8:	688a      	ldr	r2, [r1, #8]
 800a3ea:	690b      	ldr	r3, [r1, #16]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bfb8      	it	lt
 800a3f2:	4613      	movlt	r3, r2
 800a3f4:	6033      	str	r3, [r6, #0]
 800a3f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a400:	b10a      	cbz	r2, 800a406 <_printf_common+0x26>
 800a402:	3301      	adds	r3, #1
 800a404:	6033      	str	r3, [r6, #0]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	0699      	lsls	r1, r3, #26
 800a40a:	bf42      	ittt	mi
 800a40c:	6833      	ldrmi	r3, [r6, #0]
 800a40e:	3302      	addmi	r3, #2
 800a410:	6033      	strmi	r3, [r6, #0]
 800a412:	6825      	ldr	r5, [r4, #0]
 800a414:	f015 0506 	ands.w	r5, r5, #6
 800a418:	d106      	bne.n	800a428 <_printf_common+0x48>
 800a41a:	f104 0a19 	add.w	sl, r4, #25
 800a41e:	68e3      	ldr	r3, [r4, #12]
 800a420:	6832      	ldr	r2, [r6, #0]
 800a422:	1a9b      	subs	r3, r3, r2
 800a424:	42ab      	cmp	r3, r5
 800a426:	dc2b      	bgt.n	800a480 <_printf_common+0xa0>
 800a428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a42c:	6822      	ldr	r2, [r4, #0]
 800a42e:	3b00      	subs	r3, #0
 800a430:	bf18      	it	ne
 800a432:	2301      	movne	r3, #1
 800a434:	0692      	lsls	r2, r2, #26
 800a436:	d430      	bmi.n	800a49a <_printf_common+0xba>
 800a438:	4641      	mov	r1, r8
 800a43a:	4638      	mov	r0, r7
 800a43c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a440:	47c8      	blx	r9
 800a442:	3001      	adds	r0, #1
 800a444:	d023      	beq.n	800a48e <_printf_common+0xae>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	6922      	ldr	r2, [r4, #16]
 800a44a:	f003 0306 	and.w	r3, r3, #6
 800a44e:	2b04      	cmp	r3, #4
 800a450:	bf14      	ite	ne
 800a452:	2500      	movne	r5, #0
 800a454:	6833      	ldreq	r3, [r6, #0]
 800a456:	f04f 0600 	mov.w	r6, #0
 800a45a:	bf08      	it	eq
 800a45c:	68e5      	ldreq	r5, [r4, #12]
 800a45e:	f104 041a 	add.w	r4, r4, #26
 800a462:	bf08      	it	eq
 800a464:	1aed      	subeq	r5, r5, r3
 800a466:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a46a:	bf08      	it	eq
 800a46c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a470:	4293      	cmp	r3, r2
 800a472:	bfc4      	itt	gt
 800a474:	1a9b      	subgt	r3, r3, r2
 800a476:	18ed      	addgt	r5, r5, r3
 800a478:	42b5      	cmp	r5, r6
 800a47a:	d11a      	bne.n	800a4b2 <_printf_common+0xd2>
 800a47c:	2000      	movs	r0, #0
 800a47e:	e008      	b.n	800a492 <_printf_common+0xb2>
 800a480:	2301      	movs	r3, #1
 800a482:	4652      	mov	r2, sl
 800a484:	4641      	mov	r1, r8
 800a486:	4638      	mov	r0, r7
 800a488:	47c8      	blx	r9
 800a48a:	3001      	adds	r0, #1
 800a48c:	d103      	bne.n	800a496 <_printf_common+0xb6>
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295
 800a492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a496:	3501      	adds	r5, #1
 800a498:	e7c1      	b.n	800a41e <_printf_common+0x3e>
 800a49a:	2030      	movs	r0, #48	@ 0x30
 800a49c:	18e1      	adds	r1, r4, r3
 800a49e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4a2:	1c5a      	adds	r2, r3, #1
 800a4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4a8:	4422      	add	r2, r4
 800a4aa:	3302      	adds	r3, #2
 800a4ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4b0:	e7c2      	b.n	800a438 <_printf_common+0x58>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	4641      	mov	r1, r8
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	47c8      	blx	r9
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d0e6      	beq.n	800a48e <_printf_common+0xae>
 800a4c0:	3601      	adds	r6, #1
 800a4c2:	e7d9      	b.n	800a478 <_printf_common+0x98>

0800a4c4 <_printf_i>:
 800a4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	7e0f      	ldrb	r7, [r1, #24]
 800a4ca:	4691      	mov	r9, r2
 800a4cc:	2f78      	cmp	r7, #120	@ 0x78
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	469a      	mov	sl, r3
 800a4d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4da:	d807      	bhi.n	800a4ec <_printf_i+0x28>
 800a4dc:	2f62      	cmp	r7, #98	@ 0x62
 800a4de:	d80a      	bhi.n	800a4f6 <_printf_i+0x32>
 800a4e0:	2f00      	cmp	r7, #0
 800a4e2:	f000 80d1 	beq.w	800a688 <_printf_i+0x1c4>
 800a4e6:	2f58      	cmp	r7, #88	@ 0x58
 800a4e8:	f000 80b8 	beq.w	800a65c <_printf_i+0x198>
 800a4ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4f4:	e03a      	b.n	800a56c <_printf_i+0xa8>
 800a4f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4fa:	2b15      	cmp	r3, #21
 800a4fc:	d8f6      	bhi.n	800a4ec <_printf_i+0x28>
 800a4fe:	a101      	add	r1, pc, #4	@ (adr r1, 800a504 <_printf_i+0x40>)
 800a500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a504:	0800a55d 	.word	0x0800a55d
 800a508:	0800a571 	.word	0x0800a571
 800a50c:	0800a4ed 	.word	0x0800a4ed
 800a510:	0800a4ed 	.word	0x0800a4ed
 800a514:	0800a4ed 	.word	0x0800a4ed
 800a518:	0800a4ed 	.word	0x0800a4ed
 800a51c:	0800a571 	.word	0x0800a571
 800a520:	0800a4ed 	.word	0x0800a4ed
 800a524:	0800a4ed 	.word	0x0800a4ed
 800a528:	0800a4ed 	.word	0x0800a4ed
 800a52c:	0800a4ed 	.word	0x0800a4ed
 800a530:	0800a66f 	.word	0x0800a66f
 800a534:	0800a59b 	.word	0x0800a59b
 800a538:	0800a629 	.word	0x0800a629
 800a53c:	0800a4ed 	.word	0x0800a4ed
 800a540:	0800a4ed 	.word	0x0800a4ed
 800a544:	0800a691 	.word	0x0800a691
 800a548:	0800a4ed 	.word	0x0800a4ed
 800a54c:	0800a59b 	.word	0x0800a59b
 800a550:	0800a4ed 	.word	0x0800a4ed
 800a554:	0800a4ed 	.word	0x0800a4ed
 800a558:	0800a631 	.word	0x0800a631
 800a55c:	6833      	ldr	r3, [r6, #0]
 800a55e:	1d1a      	adds	r2, r3, #4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6032      	str	r2, [r6, #0]
 800a564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a56c:	2301      	movs	r3, #1
 800a56e:	e09c      	b.n	800a6aa <_printf_i+0x1e6>
 800a570:	6833      	ldr	r3, [r6, #0]
 800a572:	6820      	ldr	r0, [r4, #0]
 800a574:	1d19      	adds	r1, r3, #4
 800a576:	6031      	str	r1, [r6, #0]
 800a578:	0606      	lsls	r6, r0, #24
 800a57a:	d501      	bpl.n	800a580 <_printf_i+0xbc>
 800a57c:	681d      	ldr	r5, [r3, #0]
 800a57e:	e003      	b.n	800a588 <_printf_i+0xc4>
 800a580:	0645      	lsls	r5, r0, #25
 800a582:	d5fb      	bpl.n	800a57c <_printf_i+0xb8>
 800a584:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a588:	2d00      	cmp	r5, #0
 800a58a:	da03      	bge.n	800a594 <_printf_i+0xd0>
 800a58c:	232d      	movs	r3, #45	@ 0x2d
 800a58e:	426d      	negs	r5, r5
 800a590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a594:	230a      	movs	r3, #10
 800a596:	4858      	ldr	r0, [pc, #352]	@ (800a6f8 <_printf_i+0x234>)
 800a598:	e011      	b.n	800a5be <_printf_i+0xfa>
 800a59a:	6821      	ldr	r1, [r4, #0]
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	0608      	lsls	r0, r1, #24
 800a5a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5a4:	d402      	bmi.n	800a5ac <_printf_i+0xe8>
 800a5a6:	0649      	lsls	r1, r1, #25
 800a5a8:	bf48      	it	mi
 800a5aa:	b2ad      	uxthmi	r5, r5
 800a5ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5ae:	6033      	str	r3, [r6, #0]
 800a5b0:	bf14      	ite	ne
 800a5b2:	230a      	movne	r3, #10
 800a5b4:	2308      	moveq	r3, #8
 800a5b6:	4850      	ldr	r0, [pc, #320]	@ (800a6f8 <_printf_i+0x234>)
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5be:	6866      	ldr	r6, [r4, #4]
 800a5c0:	2e00      	cmp	r6, #0
 800a5c2:	60a6      	str	r6, [r4, #8]
 800a5c4:	db05      	blt.n	800a5d2 <_printf_i+0x10e>
 800a5c6:	6821      	ldr	r1, [r4, #0]
 800a5c8:	432e      	orrs	r6, r5
 800a5ca:	f021 0104 	bic.w	r1, r1, #4
 800a5ce:	6021      	str	r1, [r4, #0]
 800a5d0:	d04b      	beq.n	800a66a <_printf_i+0x1a6>
 800a5d2:	4616      	mov	r6, r2
 800a5d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5d8:	fb03 5711 	mls	r7, r3, r1, r5
 800a5dc:	5dc7      	ldrb	r7, [r0, r7]
 800a5de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5e2:	462f      	mov	r7, r5
 800a5e4:	42bb      	cmp	r3, r7
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	d9f4      	bls.n	800a5d4 <_printf_i+0x110>
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d10b      	bne.n	800a606 <_printf_i+0x142>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	07df      	lsls	r7, r3, #31
 800a5f2:	d508      	bpl.n	800a606 <_printf_i+0x142>
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	6861      	ldr	r1, [r4, #4]
 800a5f8:	4299      	cmp	r1, r3
 800a5fa:	bfde      	ittt	le
 800a5fc:	2330      	movle	r3, #48	@ 0x30
 800a5fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a602:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a606:	1b92      	subs	r2, r2, r6
 800a608:	6122      	str	r2, [r4, #16]
 800a60a:	464b      	mov	r3, r9
 800a60c:	4621      	mov	r1, r4
 800a60e:	4640      	mov	r0, r8
 800a610:	f8cd a000 	str.w	sl, [sp]
 800a614:	aa03      	add	r2, sp, #12
 800a616:	f7ff fee3 	bl	800a3e0 <_printf_common>
 800a61a:	3001      	adds	r0, #1
 800a61c:	d14a      	bne.n	800a6b4 <_printf_i+0x1f0>
 800a61e:	f04f 30ff 	mov.w	r0, #4294967295
 800a622:	b004      	add	sp, #16
 800a624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	f043 0320 	orr.w	r3, r3, #32
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	2778      	movs	r7, #120	@ 0x78
 800a632:	4832      	ldr	r0, [pc, #200]	@ (800a6fc <_printf_i+0x238>)
 800a634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	6831      	ldr	r1, [r6, #0]
 800a63c:	061f      	lsls	r7, r3, #24
 800a63e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a642:	d402      	bmi.n	800a64a <_printf_i+0x186>
 800a644:	065f      	lsls	r7, r3, #25
 800a646:	bf48      	it	mi
 800a648:	b2ad      	uxthmi	r5, r5
 800a64a:	6031      	str	r1, [r6, #0]
 800a64c:	07d9      	lsls	r1, r3, #31
 800a64e:	bf44      	itt	mi
 800a650:	f043 0320 	orrmi.w	r3, r3, #32
 800a654:	6023      	strmi	r3, [r4, #0]
 800a656:	b11d      	cbz	r5, 800a660 <_printf_i+0x19c>
 800a658:	2310      	movs	r3, #16
 800a65a:	e7ad      	b.n	800a5b8 <_printf_i+0xf4>
 800a65c:	4826      	ldr	r0, [pc, #152]	@ (800a6f8 <_printf_i+0x234>)
 800a65e:	e7e9      	b.n	800a634 <_printf_i+0x170>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	f023 0320 	bic.w	r3, r3, #32
 800a666:	6023      	str	r3, [r4, #0]
 800a668:	e7f6      	b.n	800a658 <_printf_i+0x194>
 800a66a:	4616      	mov	r6, r2
 800a66c:	e7bd      	b.n	800a5ea <_printf_i+0x126>
 800a66e:	6833      	ldr	r3, [r6, #0]
 800a670:	6825      	ldr	r5, [r4, #0]
 800a672:	1d18      	adds	r0, r3, #4
 800a674:	6961      	ldr	r1, [r4, #20]
 800a676:	6030      	str	r0, [r6, #0]
 800a678:	062e      	lsls	r6, r5, #24
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	d501      	bpl.n	800a682 <_printf_i+0x1be>
 800a67e:	6019      	str	r1, [r3, #0]
 800a680:	e002      	b.n	800a688 <_printf_i+0x1c4>
 800a682:	0668      	lsls	r0, r5, #25
 800a684:	d5fb      	bpl.n	800a67e <_printf_i+0x1ba>
 800a686:	8019      	strh	r1, [r3, #0]
 800a688:	2300      	movs	r3, #0
 800a68a:	4616      	mov	r6, r2
 800a68c:	6123      	str	r3, [r4, #16]
 800a68e:	e7bc      	b.n	800a60a <_printf_i+0x146>
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	2100      	movs	r1, #0
 800a694:	1d1a      	adds	r2, r3, #4
 800a696:	6032      	str	r2, [r6, #0]
 800a698:	681e      	ldr	r6, [r3, #0]
 800a69a:	6862      	ldr	r2, [r4, #4]
 800a69c:	4630      	mov	r0, r6
 800a69e:	f000 f859 	bl	800a754 <memchr>
 800a6a2:	b108      	cbz	r0, 800a6a8 <_printf_i+0x1e4>
 800a6a4:	1b80      	subs	r0, r0, r6
 800a6a6:	6060      	str	r0, [r4, #4]
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6b2:	e7aa      	b.n	800a60a <_printf_i+0x146>
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	47d0      	blx	sl
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d0ad      	beq.n	800a61e <_printf_i+0x15a>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	079b      	lsls	r3, r3, #30
 800a6c6:	d413      	bmi.n	800a6f0 <_printf_i+0x22c>
 800a6c8:	68e0      	ldr	r0, [r4, #12]
 800a6ca:	9b03      	ldr	r3, [sp, #12]
 800a6cc:	4298      	cmp	r0, r3
 800a6ce:	bfb8      	it	lt
 800a6d0:	4618      	movlt	r0, r3
 800a6d2:	e7a6      	b.n	800a622 <_printf_i+0x15e>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	4649      	mov	r1, r9
 800a6da:	4640      	mov	r0, r8
 800a6dc:	47d0      	blx	sl
 800a6de:	3001      	adds	r0, #1
 800a6e0:	d09d      	beq.n	800a61e <_printf_i+0x15a>
 800a6e2:	3501      	adds	r5, #1
 800a6e4:	68e3      	ldr	r3, [r4, #12]
 800a6e6:	9903      	ldr	r1, [sp, #12]
 800a6e8:	1a5b      	subs	r3, r3, r1
 800a6ea:	42ab      	cmp	r3, r5
 800a6ec:	dcf2      	bgt.n	800a6d4 <_printf_i+0x210>
 800a6ee:	e7eb      	b.n	800a6c8 <_printf_i+0x204>
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	f104 0619 	add.w	r6, r4, #25
 800a6f6:	e7f5      	b.n	800a6e4 <_printf_i+0x220>
 800a6f8:	0800a89b 	.word	0x0800a89b
 800a6fc:	0800a8ac 	.word	0x0800a8ac

0800a700 <memmove>:
 800a700:	4288      	cmp	r0, r1
 800a702:	b510      	push	{r4, lr}
 800a704:	eb01 0402 	add.w	r4, r1, r2
 800a708:	d902      	bls.n	800a710 <memmove+0x10>
 800a70a:	4284      	cmp	r4, r0
 800a70c:	4623      	mov	r3, r4
 800a70e:	d807      	bhi.n	800a720 <memmove+0x20>
 800a710:	1e43      	subs	r3, r0, #1
 800a712:	42a1      	cmp	r1, r4
 800a714:	d008      	beq.n	800a728 <memmove+0x28>
 800a716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a71a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a71e:	e7f8      	b.n	800a712 <memmove+0x12>
 800a720:	4601      	mov	r1, r0
 800a722:	4402      	add	r2, r0
 800a724:	428a      	cmp	r2, r1
 800a726:	d100      	bne.n	800a72a <memmove+0x2a>
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a72e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a732:	e7f7      	b.n	800a724 <memmove+0x24>

0800a734 <_sbrk_r>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	2300      	movs	r3, #0
 800a738:	4d05      	ldr	r5, [pc, #20]	@ (800a750 <_sbrk_r+0x1c>)
 800a73a:	4604      	mov	r4, r0
 800a73c:	4608      	mov	r0, r1
 800a73e:	602b      	str	r3, [r5, #0]
 800a740:	f7f6 fc4a 	bl	8000fd8 <_sbrk>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	d102      	bne.n	800a74e <_sbrk_r+0x1a>
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	b103      	cbz	r3, 800a74e <_sbrk_r+0x1a>
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	20001640 	.word	0x20001640

0800a754 <memchr>:
 800a754:	4603      	mov	r3, r0
 800a756:	b510      	push	{r4, lr}
 800a758:	b2c9      	uxtb	r1, r1
 800a75a:	4402      	add	r2, r0
 800a75c:	4293      	cmp	r3, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	d101      	bne.n	800a766 <memchr+0x12>
 800a762:	2000      	movs	r0, #0
 800a764:	e003      	b.n	800a76e <memchr+0x1a>
 800a766:	7804      	ldrb	r4, [r0, #0]
 800a768:	3301      	adds	r3, #1
 800a76a:	428c      	cmp	r4, r1
 800a76c:	d1f6      	bne.n	800a75c <memchr+0x8>
 800a76e:	bd10      	pop	{r4, pc}

0800a770 <memcpy>:
 800a770:	440a      	add	r2, r1
 800a772:	4291      	cmp	r1, r2
 800a774:	f100 33ff 	add.w	r3, r0, #4294967295
 800a778:	d100      	bne.n	800a77c <memcpy+0xc>
 800a77a:	4770      	bx	lr
 800a77c:	b510      	push	{r4, lr}
 800a77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a782:	4291      	cmp	r1, r2
 800a784:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a788:	d1f9      	bne.n	800a77e <memcpy+0xe>
 800a78a:	bd10      	pop	{r4, pc}

0800a78c <_realloc_r>:
 800a78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a790:	4607      	mov	r7, r0
 800a792:	4614      	mov	r4, r2
 800a794:	460d      	mov	r5, r1
 800a796:	b921      	cbnz	r1, 800a7a2 <_realloc_r+0x16>
 800a798:	4611      	mov	r1, r2
 800a79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a79e:	f7ff bc3b 	b.w	800a018 <_malloc_r>
 800a7a2:	b92a      	cbnz	r2, 800a7b0 <_realloc_r+0x24>
 800a7a4:	f7ff fbce 	bl	8009f44 <_free_r>
 800a7a8:	4625      	mov	r5, r4
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b0:	f000 f81a 	bl	800a7e8 <_malloc_usable_size_r>
 800a7b4:	4284      	cmp	r4, r0
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	d802      	bhi.n	800a7c0 <_realloc_r+0x34>
 800a7ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7be:	d8f4      	bhi.n	800a7aa <_realloc_r+0x1e>
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f7ff fc28 	bl	800a018 <_malloc_r>
 800a7c8:	4680      	mov	r8, r0
 800a7ca:	b908      	cbnz	r0, 800a7d0 <_realloc_r+0x44>
 800a7cc:	4645      	mov	r5, r8
 800a7ce:	e7ec      	b.n	800a7aa <_realloc_r+0x1e>
 800a7d0:	42b4      	cmp	r4, r6
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	bf28      	it	cs
 800a7d8:	4632      	movcs	r2, r6
 800a7da:	f7ff ffc9 	bl	800a770 <memcpy>
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff fbaf 	bl	8009f44 <_free_r>
 800a7e6:	e7f1      	b.n	800a7cc <_realloc_r+0x40>

0800a7e8 <_malloc_usable_size_r>:
 800a7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ec:	1f18      	subs	r0, r3, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	bfbc      	itt	lt
 800a7f2:	580b      	ldrlt	r3, [r1, r0]
 800a7f4:	18c0      	addlt	r0, r0, r3
 800a7f6:	4770      	bx	lr

0800a7f8 <_init>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	bf00      	nop
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr

0800a804 <_fini>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	bf00      	nop
 800a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80a:	bc08      	pop	{r3}
 800a80c:	469e      	mov	lr, r3
 800a80e:	4770      	bx	lr
