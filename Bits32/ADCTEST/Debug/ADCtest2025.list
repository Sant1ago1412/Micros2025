
ADCtest2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008364  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008470  08008470  00009470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084dc  080084dc  0000a17c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080084dc  080084dc  0000a17c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080084dc  080084dc  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  080084e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  2000017c  08008660  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015e4  08008660  0000a5e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc8  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bc  00000000  00000000  0001bf6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce0  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8cc  00000000  00000000  00021008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cf3  00000000  00000000  0003b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d24  00000000  00000000  000505c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e22eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004590  00000000  00000000  000e2330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e68c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008458 	.word	0x08008458

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008458 	.word	0x08008458

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc2a 	bl	80009a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  CDC_AttachRxData(datafromUSB);
 8000154:	480d      	ldr	r0, [pc, #52]	@ (800018c <main+0x40>)
 8000156:	f007 fd8d 	bl	8007c74 <CDC_AttachRxData>
  datosComSerie.indexReadRx = 0;
 800015a:	4b0d      	ldr	r3, [pc, #52]	@ (8000190 <main+0x44>)
 800015c:	2200      	movs	r2, #0
 800015e:	711a      	strb	r2, [r3, #4]
  datosComSerie.indexWriteRx =0;
 8000160:	4b0b      	ldr	r3, [pc, #44]	@ (8000190 <main+0x44>)
 8000162:	2200      	movs	r2, #0
 8000164:	70da      	strb	r2, [r3, #3]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f815 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8fb 	bl	8000364 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f86f 	bl	8000250 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000172:	f000 f8ab 	bl	80002cc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000176:	f007 fcb1 	bl	8007adc <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	comunicationsTask(&datosComSerie);
 800017a:	4805      	ldr	r0, [pc, #20]	@ (8000190 <main+0x44>)
 800017c:	f000 fae2 	bl	8000744 <comunicationsTask>
	HAL_Delay(1000);
 8000180:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000184:	f000 fc72 	bl	8000a6c <HAL_Delay>
	comunicationsTask(&datosComSerie);
 8000188:	bf00      	nop
 800018a:	e7f6      	b.n	800017a <main+0x2e>
 800018c:	08000769 	.word	0x08000769
 8000190:	20000210 	.word	0x20000210

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b094      	sub	sp, #80	@ 0x50
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f008 f92c 	bl	8008400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	f107 0314 	add.w	r3, r7, #20
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d6:	2302      	movs	r3, #2
 80001d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80001e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ea:	4618      	mov	r0, r3
 80001ec:	f002 fe98 	bl	8002f20 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001f6:	f000 fae5 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800020a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000210:	f107 0314 	add.w	r3, r7, #20
 8000214:	2101      	movs	r1, #1
 8000216:	4618      	mov	r0, r3
 8000218:	f003 f904 	bl	8003424 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000222:	f000 facf 	bl	80007c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000226:	2312      	movs	r3, #18
 8000228:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800022a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800022e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000230:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000234:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f003 fa4f 	bl	80036dc <HAL_RCCEx_PeriphCLKConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000244:	f000 fabe 	bl	80007c4 <Error_Handler>
  }
}
 8000248:	bf00      	nop
 800024a:	3750      	adds	r7, #80	@ 0x50
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000260:	4b18      	ldr	r3, [pc, #96]	@ (80002c4 <MX_ADC1_Init+0x74>)
 8000262:	4a19      	ldr	r2, [pc, #100]	@ (80002c8 <MX_ADC1_Init+0x78>)
 8000264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000266:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026c:	4b15      	ldr	r3, [pc, #84]	@ (80002c4 <MX_ADC1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000272:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000278:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <MX_ADC1_Init+0x74>)
 800027a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800027e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000280:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <MX_ADC1_Init+0x74>)
 8000282:	2200      	movs	r2, #0
 8000284:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000286:	4b0f      	ldr	r3, [pc, #60]	@ (80002c4 <MX_ADC1_Init+0x74>)
 8000288:	2201      	movs	r2, #1
 800028a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fc11 	bl	8000ab4 <HAL_ADC_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 fa94 	bl	80007c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800029c:	2300      	movs	r3, #0
 800029e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <MX_ADC1_Init+0x74>)
 80002ae:	f000 fcd9 	bl	8000c64 <HAL_ADC_ConfigChannel>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002b8:	f000 fa84 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000198 	.word	0x20000198
 80002c8:	40012400 	.word	0x40012400

080002cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002d2:	f107 0308 	add.w	r3, r7, #8
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000360 <MX_TIM2_Init+0x94>)
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000360 <MX_TIM2_Init+0x94>)
 80002f2:	2247      	movs	r2, #71	@ 0x47
 80002f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000360 <MX_TIM2_Init+0x94>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002fc:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <MX_TIM2_Init+0x94>)
 80002fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b16      	ldr	r3, [pc, #88]	@ (8000360 <MX_TIM2_Init+0x94>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <MX_TIM2_Init+0x94>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000310:	4813      	ldr	r0, [pc, #76]	@ (8000360 <MX_TIM2_Init+0x94>)
 8000312:	f003 fa99 	bl	8003848 <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800031c:	f000 fa52 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	4619      	mov	r1, r3
 800032c:	480c      	ldr	r0, [pc, #48]	@ (8000360 <MX_TIM2_Init+0x94>)
 800032e:	f003 fada 	bl	80038e6 <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000338:	f000 fa44 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	@ (8000360 <MX_TIM2_Init+0x94>)
 800034a:	f003 fc97 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000354:	f000 fa36 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	200001c8 	.word	0x200001c8

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <MX_GPIO_Init+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a1d      	ldr	r2, [pc, #116]	@ (80003f4 <MX_GPIO_Init+0x90>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <MX_GPIO_Init+0x90>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b18      	ldr	r3, [pc, #96]	@ (80003f4 <MX_GPIO_Init+0x90>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a17      	ldr	r2, [pc, #92]	@ (80003f4 <MX_GPIO_Init+0x90>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <MX_GPIO_Init+0x90>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <MX_GPIO_Init+0x90>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a11      	ldr	r2, [pc, #68]	@ (80003f4 <MX_GPIO_Init+0x90>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b0f      	ldr	r3, [pc, #60]	@ (80003f4 <MX_GPIO_Init+0x90>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c6:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <MX_GPIO_Init+0x94>)
 80003c8:	f001 f818 	bl	80013fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4804      	ldr	r0, [pc, #16]	@ (80003f8 <MX_GPIO_Init+0x94>)
 80003e6:	f000 fe85 	bl	80010f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000

080003fc <DecodeHeader>:

/* USER CODE BEGIN 4 */
void DecodeHeader(_sDato *datosCom){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]

    static uint8_t nBytes=0;

    uint8_t indexWriteRxCopy=datosCom->indexWriteRx;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	78db      	ldrb	r3, [r3, #3]
 8000408:	73fb      	strb	r3, [r7, #15]

    while (datosCom->indexReadRx!=indexWriteRxCopy)
 800040a:	e0e2      	b.n	80005d2 <DecodeHeader+0x1d6>
    {
        switch (estadoProtocolo) {
 800040c:	4b76      	ldr	r3, [pc, #472]	@ (80005e8 <DecodeHeader+0x1ec>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b06      	cmp	r3, #6
 8000412:	f200 80d7 	bhi.w	80005c4 <DecodeHeader+0x1c8>
 8000416:	a201      	add	r2, pc, #4	@ (adr r2, 800041c <DecodeHeader+0x20>)
 8000418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041c:	08000439 	.word	0x08000439
 8000420:	08000461 	.word	0x08000461
 8000424:	08000495 	.word	0x08000495
 8000428:	080004c9 	.word	0x080004c9
 800042c:	080004fd 	.word	0x080004fd
 8000430:	08000525 	.word	0x08000525
 8000434:	08000567 	.word	0x08000567
            case START:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='U'){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	1c5a      	adds	r2, r3, #1
 800043e:	b2d1      	uxtb	r1, r2
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7111      	strb	r1, [r2, #4]
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	79db      	ldrb	r3, [r3, #7]
 800044c:	2b55      	cmp	r3, #85	@ 0x55
 800044e:	f040 80bd 	bne.w	80005cc <DecodeHeader+0x1d0>
                    estadoProtocolo=HEADER_1;
 8000452:	4b65      	ldr	r3, [pc, #404]	@ (80005e8 <DecodeHeader+0x1ec>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx=0;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2200      	movs	r2, #0
 800045c:	709a      	strb	r2, [r3, #2]
                }
                break;
 800045e:	e0b5      	b.n	80005cc <DecodeHeader+0x1d0>
            case HEADER_1:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='N')
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	b2d1      	uxtb	r1, r2
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7111      	strb	r1, [r2, #4]
 800046c:	461a      	mov	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	79db      	ldrb	r3, [r3, #7]
 8000474:	2b4e      	cmp	r3, #78	@ 0x4e
 8000476:	d103      	bne.n	8000480 <DecodeHeader+0x84>
                   estadoProtocolo=HEADER_2;
 8000478:	4b5b      	ldr	r3, [pc, #364]	@ (80005e8 <DecodeHeader+0x1ec>)
 800047a:	2202      	movs	r2, #2
 800047c:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 800047e:	e0a8      	b.n	80005d2 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	3b01      	subs	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800048c:	4b56      	ldr	r3, [pc, #344]	@ (80005e8 <DecodeHeader+0x1ec>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
                break;
 8000492:	e09e      	b.n	80005d2 <DecodeHeader+0x1d6>
            case HEADER_2:
                if (datosCom->bufferRx[datosCom->indexReadRx++]=='E')
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	1c5a      	adds	r2, r3, #1
 800049a:	b2d1      	uxtb	r1, r2
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7111      	strb	r1, [r2, #4]
 80004a0:	461a      	mov	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	79db      	ldrb	r3, [r3, #7]
 80004a8:	2b45      	cmp	r3, #69	@ 0x45
 80004aa:	d103      	bne.n	80004b4 <DecodeHeader+0xb8>
                    estadoProtocolo=HEADER_3;
 80004ac:	4b4e      	ldr	r3, [pc, #312]	@ (80005e8 <DecodeHeader+0x1ec>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	701a      	strb	r2, [r3, #0]
                else{
                    datosCom->indexReadRx--;
                   estadoProtocolo=START;
                }
                break;
 80004b2:	e08e      	b.n	80005d2 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	711a      	strb	r2, [r3, #4]
                   estadoProtocolo=START;
 80004c0:	4b49      	ldr	r3, [pc, #292]	@ (80005e8 <DecodeHeader+0x1ec>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
                break;
 80004c6:	e084      	b.n	80005d2 <DecodeHeader+0x1d6>
        case HEADER_3:
            if (datosCom->bufferRx[datosCom->indexReadRx++]=='R')
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	b2d1      	uxtb	r1, r2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	7111      	strb	r1, [r2, #4]
 80004d4:	461a      	mov	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	79db      	ldrb	r3, [r3, #7]
 80004dc:	2b52      	cmp	r3, #82	@ 0x52
 80004de:	d103      	bne.n	80004e8 <DecodeHeader+0xec>
                estadoProtocolo=NBYTES;
 80004e0:	4b41      	ldr	r3, [pc, #260]	@ (80005e8 <DecodeHeader+0x1ec>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	701a      	strb	r2, [r3, #0]
            else{
                datosCom->indexReadRx--;
               estadoProtocolo=START;
            }
            break;
 80004e6:	e074      	b.n	80005d2 <DecodeHeader+0x1d6>
                datosCom->indexReadRx--;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	711a      	strb	r2, [r3, #4]
               estadoProtocolo=START;
 80004f4:	4b3c      	ldr	r3, [pc, #240]	@ (80005e8 <DecodeHeader+0x1ec>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
            break;
 80004fa:	e06a      	b.n	80005d2 <DecodeHeader+0x1d6>
            case NBYTES:
                datosCom->indexStart=datosCom->indexReadRx;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791a      	ldrb	r2, [r3, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	705a      	strb	r2, [r3, #1]
                nBytes=datosCom->bufferRx[datosCom->indexReadRx++];
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	b2d1      	uxtb	r1, r2
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7111      	strb	r1, [r2, #4]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	79da      	ldrb	r2, [r3, #7]
 8000518:	4b34      	ldr	r3, [pc, #208]	@ (80005ec <DecodeHeader+0x1f0>)
 800051a:	701a      	strb	r2, [r3, #0]
               estadoProtocolo=TOKEN;
 800051c:	4b32      	ldr	r3, [pc, #200]	@ (80005e8 <DecodeHeader+0x1ec>)
 800051e:	2205      	movs	r2, #5
 8000520:	701a      	strb	r2, [r3, #0]
                break;
 8000522:	e056      	b.n	80005d2 <DecodeHeader+0x1d6>
            case TOKEN:
                if (datosCom->bufferRx[datosCom->indexReadRx++]==':'){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	b2d1      	uxtb	r1, r2
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	7111      	strb	r1, [r2, #4]
 8000530:	461a      	mov	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	79db      	ldrb	r3, [r3, #7]
 8000538:	2b3a      	cmp	r3, #58	@ 0x3a
 800053a:	d10a      	bne.n	8000552 <DecodeHeader+0x156>
                   estadoProtocolo=PAYLOAD;
 800053c:	4b2a      	ldr	r3, [pc, #168]	@ (80005e8 <DecodeHeader+0x1ec>)
 800053e:	2206      	movs	r2, #6
 8000540:	701a      	strb	r2, [r3, #0]
                    datosCom->cheksumRx ='U'^'N'^'E'^'R'^ nBytes^':';
 8000542:	4b2a      	ldr	r3, [pc, #168]	@ (80005ec <DecodeHeader+0x1f0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800054a:	b2da      	uxtb	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	709a      	strb	r2, [r3, #2]
                }
                else{
                    datosCom->indexReadRx--;
                    estadoProtocolo=START;
                }
                break;
 8000550:	e03f      	b.n	80005d2 <DecodeHeader+0x1d6>
                    datosCom->indexReadRx--;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	3b01      	subs	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	711a      	strb	r2, [r3, #4]
                    estadoProtocolo=START;
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <DecodeHeader+0x1ec>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
                break;
 8000564:	e035      	b.n	80005d2 <DecodeHeader+0x1d6>
            case PAYLOAD:
                if (nBytes>1){
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <DecodeHeader+0x1f0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d90f      	bls.n	800058e <DecodeHeader+0x192>
                    datosCom->cheksumRx ^= datosCom->bufferRx[datosCom->indexReadRx++];
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	b2d1      	uxtb	r1, r2
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7111      	strb	r1, [r2, #4]
 800057a:	461a      	mov	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4413      	add	r3, r2
 8000580:	79da      	ldrb	r2, [r3, #7]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	789b      	ldrb	r3, [r3, #2]
 8000586:	4053      	eors	r3, r2
 8000588:	b2da      	uxtb	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	709a      	strb	r2, [r3, #2]
                }
                nBytes--;
 800058e:	4b17      	ldr	r3, [pc, #92]	@ (80005ec <DecodeHeader+0x1f0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <DecodeHeader+0x1f0>)
 8000598:	701a      	strb	r2, [r3, #0]
                if(nBytes<=0){
 800059a:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <DecodeHeader+0x1f0>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d116      	bne.n	80005d0 <DecodeHeader+0x1d4>
                    estadoProtocolo=START;
 80005a2:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <DecodeHeader+0x1ec>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
                    if(datosCom->cheksumRx == datosCom->bufferRx[datosCom->indexReadRx]){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	789a      	ldrb	r2, [r3, #2]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	440b      	add	r3, r1
 80005b6:	79db      	ldrb	r3, [r3, #7]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d109      	bne.n	80005d0 <DecodeHeader+0x1d4>
                        decodeData(datosCom);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f817 	bl	80005f0 <decodeData>
                    }
                }

                break;
 80005c2:	e005      	b.n	80005d0 <DecodeHeader+0x1d4>
            default:
                estadoProtocolo=START;
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <DecodeHeader+0x1ec>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
                break;
 80005ca:	e002      	b.n	80005d2 <DecodeHeader+0x1d6>
                break;
 80005cc:	bf00      	nop
 80005ce:	e000      	b.n	80005d2 <DecodeHeader+0x1d6>
                break;
 80005d0:	bf00      	nop
    while (datosCom->indexReadRx!=indexWriteRxCopy)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	429a      	cmp	r2, r3
 80005da:	f47f af17 	bne.w	800040c <DecodeHeader+0x10>
        }
    }
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000417 	.word	0x20000417
 80005ec:	20000418 	.word	0x20000418

080005f0 <decodeData>:
     datosComSerie.bufferTx[datosComSerie.indexWriteTx++]=cks;

     CDC_Transmit_FS((uint8_t*)datosComSerie.bufferTx, sizeof(bufAux));
}

void decodeData(_sDato *datosCom){
 80005f0:	b480      	push	{r7}
 80005f2:	b089      	sub	sp, #36	@ 0x24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

    uint8_t bufAux[20], indiceAux=0,cks=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	77fb      	strb	r3, [r7, #31]
 80005fc:	2300      	movs	r3, #0
 80005fe:	77bb      	strb	r3, [r7, #30]

    bufAux[indiceAux++]='U';
 8000600:	7ffb      	ldrb	r3, [r7, #31]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	77fa      	strb	r2, [r7, #31]
 8000606:	3320      	adds	r3, #32
 8000608:	443b      	add	r3, r7
 800060a:	2255      	movs	r2, #85	@ 0x55
 800060c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='N';
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	77fa      	strb	r2, [r7, #31]
 8000616:	3320      	adds	r3, #32
 8000618:	443b      	add	r3, r7
 800061a:	224e      	movs	r2, #78	@ 0x4e
 800061c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='E';
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	77fa      	strb	r2, [r7, #31]
 8000626:	3320      	adds	r3, #32
 8000628:	443b      	add	r3, r7
 800062a:	2245      	movs	r2, #69	@ 0x45
 800062c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]='R';
 8000630:	7ffb      	ldrb	r3, [r7, #31]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	77fa      	strb	r2, [r7, #31]
 8000636:	3320      	adds	r3, #32
 8000638:	443b      	add	r3, r7
 800063a:	2252      	movs	r2, #82	@ 0x52
 800063c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=0;
 8000640:	7ffb      	ldrb	r3, [r7, #31]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	77fa      	strb	r2, [r7, #31]
 8000646:	3320      	adds	r3, #32
 8000648:	443b      	add	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	f803 2c18 	strb.w	r2, [r3, #-24]
    bufAux[indiceAux++]=':';
 8000650:	7ffb      	ldrb	r3, [r7, #31]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	77fa      	strb	r2, [r7, #31]
 8000656:	3320      	adds	r3, #32
 8000658:	443b      	add	r3, r7
 800065a:	223a      	movs	r2, #58	@ 0x3a
 800065c:	f803 2c18 	strb.w	r2, [r3, #-24]

    switch (datosCom->bufferRx[datosCom->indexStart+2])//ID EN LA POSICION 2
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	785b      	ldrb	r3, [r3, #1]
 8000664:	3302      	adds	r3, #2
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	79db      	ldrb	r3, [r3, #7]
 800066c:	2bf0      	cmp	r3, #240	@ 0xf0
 800066e:	d002      	beq.n	8000676 <decodeData+0x86>
 8000670:	2bf1      	cmp	r3, #241	@ 0xf1
 8000672:	d013      	beq.n	800069c <decodeData+0xac>
 8000674:	e025      	b.n	80006c2 <decodeData+0xd2>
    {
    case ALIVE:

        bufAux[indiceAux++]=ALIVE;
 8000676:	7ffb      	ldrb	r3, [r7, #31]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	77fa      	strb	r2, [r7, #31]
 800067c:	3320      	adds	r3, #32
 800067e:	443b      	add	r3, r7
 8000680:	22f0      	movs	r2, #240	@ 0xf0
 8000682:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0x0D;
 8000686:	7ffb      	ldrb	r3, [r7, #31]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	77fa      	strb	r2, [r7, #31]
 800068c:	3320      	adds	r3, #32
 800068e:	443b      	add	r3, r7
 8000690:	220d      	movs	r2, #13
 8000692:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 8000696:	2303      	movs	r3, #3
 8000698:	733b      	strb	r3, [r7, #12]

    break;
 800069a:	e01d      	b.n	80006d8 <decodeData+0xe8>
    case FIRMWARE:

        bufAux[indiceAux++]=FIRMWARE;
 800069c:	7ffb      	ldrb	r3, [r7, #31]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	77fa      	strb	r2, [r7, #31]
 80006a2:	3320      	adds	r3, #32
 80006a4:	443b      	add	r3, r7
 80006a6:	22f1      	movs	r2, #241	@ 0xf1
 80006a8:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[indiceAux++]=0xF1;
 80006ac:	7ffb      	ldrb	r3, [r7, #31]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	77fa      	strb	r2, [r7, #31]
 80006b2:	3320      	adds	r3, #32
 80006b4:	443b      	add	r3, r7
 80006b6:	22f1      	movs	r2, #241	@ 0xf1
 80006b8:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x03;
 80006bc:	2303      	movs	r3, #3
 80006be:	733b      	strb	r3, [r7, #12]

    break;
 80006c0:	e00a      	b.n	80006d8 <decodeData+0xe8>

    default:

        bufAux[indiceAux++]=0xFF;
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	77fa      	strb	r2, [r7, #31]
 80006c8:	3320      	adds	r3, #32
 80006ca:	443b      	add	r3, r7
 80006cc:	22ff      	movs	r2, #255	@ 0xff
 80006ce:	f803 2c18 	strb.w	r2, [r3, #-24]
        bufAux[NBYTES]=0x02;
 80006d2:	2302      	movs	r3, #2
 80006d4:	733b      	strb	r3, [r7, #12]

        break;
 80006d6:	bf00      	nop
    }
    cks=0;
 80006d8:	2300      	movs	r3, #0
 80006da:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i=0 ;i<indiceAux;i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	777b      	strb	r3, [r7, #29]
 80006e0:	e01b      	b.n	800071a <decodeData+0x12a>

        cks^= bufAux[i];
 80006e2:	7f7b      	ldrb	r3, [r7, #29]
 80006e4:	3320      	adds	r3, #32
 80006e6:	443b      	add	r3, r7
 80006e8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80006ec:	7fbb      	ldrb	r3, [r7, #30]
 80006ee:	4053      	eors	r3, r2
 80006f0:	77bb      	strb	r3, [r7, #30]
        datosCom->bufferTx[datosCom->indexWriteTx++]=bufAux[i];
 80006f2:	7f7a      	ldrb	r2, [r7, #29]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	795b      	ldrb	r3, [r3, #5]
 80006f8:	1c59      	adds	r1, r3, #1
 80006fa:	b2c8      	uxtb	r0, r1
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	7148      	strb	r0, [r1, #5]
 8000700:	4619      	mov	r1, r3
 8000702:	f102 0320 	add.w	r3, r2, #32
 8000706:	443b      	add	r3, r7
 8000708:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	440b      	add	r3, r1
 8000710:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    for(uint8_t i=0 ;i<indiceAux;i++){
 8000714:	7f7b      	ldrb	r3, [r7, #29]
 8000716:	3301      	adds	r3, #1
 8000718:	777b      	strb	r3, [r7, #29]
 800071a:	7f7a      	ldrb	r2, [r7, #29]
 800071c:	7ffb      	ldrb	r3, [r7, #31]
 800071e:	429a      	cmp	r2, r3
 8000720:	d3df      	bcc.n	80006e2 <decodeData+0xf2>

    }

     datosCom->bufferTx[datosCom->indexWriteTx++]=cks;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	795b      	ldrb	r3, [r3, #5]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	b2d1      	uxtb	r1, r2
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	7151      	strb	r1, [r2, #5]
 800072e:	461a      	mov	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	7fba      	ldrb	r2, [r7, #30]
 8000736:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
}
 800073a:	bf00      	nop
 800073c:	3724      	adds	r7, #36	@ 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <comunicationsTask>:

void comunicationsTask(_sDato *datosCom){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

	if(datosCom->indexReadRx!=datosCom->indexWriteRx ){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791a      	ldrb	r2, [r3, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	78db      	ldrb	r3, [r3, #3]
 8000754:	429a      	cmp	r2, r3
 8000756:	d002      	beq.n	800075e <comunicationsTask+0x1a>
		DecodeHeader(datosCom);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff fe4f 	bl	80003fc <DecodeHeader>
	}
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <datafromUSB>:

void datafromUSB(uint8_t *buf, uint16_t length) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	807b      	strh	r3, [r7, #2]

  uint16_t i;

  for (i = 0; i < length; i++) {
 8000774:	2300      	movs	r3, #0
 8000776:	81fb      	strh	r3, [r7, #14]
 8000778:	e012      	b.n	80007a0 <datafromUSB+0x38>
		datosComSerie.bufferRx[datosComSerie.indexWriteRx] = buf[i];
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4413      	add	r3, r2
 8000780:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <datafromUSB+0x54>)
 8000782:	78d2      	ldrb	r2, [r2, #3]
 8000784:	4611      	mov	r1, r2
 8000786:	781a      	ldrb	r2, [r3, #0]
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <datafromUSB+0x54>)
 800078a:	440b      	add	r3, r1
 800078c:	71da      	strb	r2, [r3, #7]
		datosComSerie.indexWriteRx++;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <datafromUSB+0x54>)
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	3301      	adds	r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <datafromUSB+0x54>)
 8000798:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < length; i++) {
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	3301      	adds	r3, #1
 800079e:	81fb      	strh	r3, [r7, #14]
 80007a0:	89fa      	ldrh	r2, [r7, #14]
 80007a2:	887b      	ldrh	r3, [r7, #2]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3e8      	bcc.n	800077a <datafromUSB+0x12>
	}
HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <datafromUSB+0x58>)
 80007ae:	f000 fe3d 	bl	800142c <HAL_GPIO_TogglePin>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000210 	.word	0x20000210
 80007c0:	40011000 	.word	0x40011000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a14      	ldr	r2, [pc, #80]	@ (800082c <HAL_MspInit+0x5c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_MspInit+0x5c>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_MspInit+0x5c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <HAL_MspInit+0x5c>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <HAL_MspInit+0x60>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_MspInit+0x60>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000
 8000830:	40010000 	.word	0x40010000

08000834 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <HAL_ADC_MspInit+0x6c>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d121      	bne.n	8000898 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <HAL_ADC_MspInit+0x70>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <HAL_ADC_MspInit+0x70>)
 800085a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_ADC_MspInit+0x70>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <HAL_ADC_MspInit+0x70>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <HAL_ADC_MspInit+0x70>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_ADC_MspInit+0x70>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000884:	23ff      	movs	r3, #255	@ 0xff
 8000886:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000888:	2303      	movs	r3, #3
 800088a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <HAL_ADC_MspInit+0x74>)
 8000894:	f000 fc2e 	bl	80010f4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40012400 	.word	0x40012400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010800 	.word	0x40010800

080008ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008bc:	d10b      	bne.n	80008d6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <HAL_TIM_Base_MspInit+0x34>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a07      	ldr	r2, [pc, #28]	@ (80008e0 <HAL_TIM_Base_MspInit+0x34>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_TIM_Base_MspInit+0x34>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40021000 	.word	0x40021000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <MemManage_Handler+0x4>

080008fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <UsageFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f87e 	bl	8000a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	@ (800094c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000942:	f000 fea8 	bl	8001696 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200010ec 	.word	0x200010ec

08000950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800095c:	f7ff fff8 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480b      	ldr	r0, [pc, #44]	@ (8000990 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000962:	490c      	ldr	r1, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000964:	4a0c      	ldr	r2, [pc, #48]	@ (8000998 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a09      	ldr	r2, [pc, #36]	@ (800099c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000978:	4c09      	ldr	r4, [pc, #36]	@ (80009a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f007 fd43 	bl	8008410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098a:	f7ff fbdf 	bl	800014c <main>
  bx lr
 800098e:	4770      	bx	lr
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000998:	080084e4 	.word	0x080084e4
  ldr r2, =_sbss
 800099c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80009a0:	200015e4 	.word	0x200015e4

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <HAL_Init+0x28>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <HAL_Init+0x28>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 fb59 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f000 f808 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff ff04 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40022000 	.word	0x40022000

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_InitTick+0x54>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <HAL_InitTick+0x58>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fb71 	bl	80010da <HAL_SYSTICK_Config>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00e      	b.n	8000a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b0f      	cmp	r3, #15
 8000a06:	d80a      	bhi.n	8000a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f000 fb39 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <HAL_InitTick+0x5c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000004 	.word	0x20000004

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008
 8000a54:	2000041c 	.word	0x2000041c

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	@ (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	2000041c 	.word	0x2000041c

08000a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a74:	f7ff fff0 	bl	8000a58 <HAL_GetTick>
 8000a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d005      	beq.n	8000a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_Delay+0x44>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a92:	bf00      	nop
 8000a94:	f7ff ffe0 	bl	8000a58 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d8f7      	bhi.n	8000a94 <HAL_Delay+0x28>
  {
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0be      	b.n	8000c54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d109      	bne.n	8000af8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fe9e 	bl	8000834 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f9ab 	bl	8000e54 <ADC_ConversionStop_Disable>
 8000afe:	4603      	mov	r3, r0
 8000b00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f040 8099 	bne.w	8000c42 <HAL_ADC_Init+0x18e>
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f040 8095 	bne.w	8000c42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b20:	f023 0302 	bic.w	r3, r3, #2
 8000b24:	f043 0202 	orr.w	r2, r3, #2
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7b1b      	ldrb	r3, [r3, #12]
 8000b3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b4c:	d003      	beq.n	8000b56 <HAL_ADC_Init+0xa2>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d102      	bne.n	8000b5c <HAL_ADC_Init+0xa8>
 8000b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b5a:	e000      	b.n	8000b5e <HAL_ADC_Init+0xaa>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7d1b      	ldrb	r3, [r3, #20]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d119      	bne.n	8000ba0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7b1b      	ldrb	r3, [r3, #12]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d109      	bne.n	8000b88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	035a      	lsls	r2, r3, #13
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	e00b      	b.n	8000ba0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b8c:	f043 0220 	orr.w	r2, r3, #32
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b98:	f043 0201 	orr.w	r2, r3, #1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <HAL_ADC_Init+0x1a8>)
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd0:	d003      	beq.n	8000bda <HAL_ADC_Init+0x126>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d104      	bne.n	8000be4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	051b      	lsls	r3, r3, #20
 8000be2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <HAL_ADC_Init+0x1ac>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d10b      	bne.n	8000c20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	f043 0201 	orr.w	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c1e:	e018      	b.n	8000c52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	f023 0312 	bic.w	r3, r3, #18
 8000c28:	f043 0210 	orr.w	r2, r3, #16
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c34:	f043 0201 	orr.w	r2, r3, #1
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c40:	e007      	b.n	8000c52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c46:	f043 0210 	orr.w	r2, r3, #16
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000c60:	ff1f0efe 	.word	0xff1f0efe

08000c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <HAL_ADC_ConfigChannel+0x20>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e0dc      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x1da>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d81c      	bhi.n	8000cce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b05      	subs	r3, #5
 8000ca6:	221f      	movs	r2, #31
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4019      	ands	r1, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3b05      	subs	r3, #5
 8000cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ccc:	e03c      	b.n	8000d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	d81c      	bhi.n	8000d10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3b23      	subs	r3, #35	@ 0x23
 8000ce8:	221f      	movs	r2, #31
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4019      	ands	r1, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b23      	subs	r3, #35	@ 0x23
 8000d02:	fa00 f203 	lsl.w	r2, r0, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d0e:	e01b      	b.n	8000d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b41      	subs	r3, #65	@ 0x41
 8000d22:	221f      	movs	r2, #31
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4019      	ands	r1, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	3b41      	subs	r3, #65	@ 0x41
 8000d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d91c      	bls.n	8000d8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68d9      	ldr	r1, [r3, #12]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	3b1e      	subs	r3, #30
 8000d62:	2207      	movs	r2, #7
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4019      	ands	r1, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	6898      	ldr	r0, [r3, #8]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	3b1e      	subs	r3, #30
 8000d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	e019      	b.n	8000dbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6919      	ldr	r1, [r3, #16]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4019      	ands	r1, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6898      	ldr	r0, [r3, #8]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	fa00 f203 	lsl.w	r2, r0, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b10      	cmp	r3, #16
 8000dc4:	d003      	beq.n	8000dce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dca:	2b11      	cmp	r3, #17
 8000dcc:	d132      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d125      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d126      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000df4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d11a      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0c9a      	lsrs	r2, r3, #18
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e14:	e002      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f9      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x1b2>
 8000e22:	e007      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e28:	f043 0220 	orr.w	r2, r3, #32
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40012400 	.word	0x40012400
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	431bde83 	.word	0x431bde83

08000e54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d12e      	bne.n	8000ecc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0201 	bic.w	r2, r2, #1
 8000e7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e7e:	f7ff fdeb 	bl	8000a58 <HAL_GetTick>
 8000e82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e84:	e01b      	b.n	8000ebe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e86:	f7ff fde7 	bl	8000a58 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d914      	bls.n	8000ebe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10d      	bne.n	8000ebe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea6:	f043 0210 	orr.w	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e007      	b.n	8000ece <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d0dc      	beq.n	8000e86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <__NVIC_EnableIRQ+0x34>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff90 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff2d 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff42 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff90 	bl	8000fc8 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff35 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa2 	bl	800102c <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b08b      	sub	sp, #44	@ 0x2c
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e169      	b.n	80013dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001108:	2201      	movs	r2, #1
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8158 	bne.w	80013d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a9a      	ldr	r2, [pc, #616]	@ (8001394 <HAL_GPIO_Init+0x2a0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d05e      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001130:	4a98      	ldr	r2, [pc, #608]	@ (8001394 <HAL_GPIO_Init+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d875      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001136:	4a98      	ldr	r2, [pc, #608]	@ (8001398 <HAL_GPIO_Init+0x2a4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d058      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 800113c:	4a96      	ldr	r2, [pc, #600]	@ (8001398 <HAL_GPIO_Init+0x2a4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d86f      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001142:	4a96      	ldr	r2, [pc, #600]	@ (800139c <HAL_GPIO_Init+0x2a8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d052      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001148:	4a94      	ldr	r2, [pc, #592]	@ (800139c <HAL_GPIO_Init+0x2a8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d869      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800114e:	4a94      	ldr	r2, [pc, #592]	@ (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d04c      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001154:	4a92      	ldr	r2, [pc, #584]	@ (80013a0 <HAL_GPIO_Init+0x2ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d863      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800115a:	4a92      	ldr	r2, [pc, #584]	@ (80013a4 <HAL_GPIO_Init+0x2b0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d046      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
 8001160:	4a90      	ldr	r2, [pc, #576]	@ (80013a4 <HAL_GPIO_Init+0x2b0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d85d      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 8001166:	2b12      	cmp	r3, #18
 8001168:	d82a      	bhi.n	80011c0 <HAL_GPIO_Init+0xcc>
 800116a:	2b12      	cmp	r3, #18
 800116c:	d859      	bhi.n	8001222 <HAL_GPIO_Init+0x12e>
 800116e:	a201      	add	r2, pc, #4	@ (adr r2, 8001174 <HAL_GPIO_Init+0x80>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011ef 	.word	0x080011ef
 8001178:	080011c9 	.word	0x080011c9
 800117c:	080011db 	.word	0x080011db
 8001180:	0800121d 	.word	0x0800121d
 8001184:	08001223 	.word	0x08001223
 8001188:	08001223 	.word	0x08001223
 800118c:	08001223 	.word	0x08001223
 8001190:	08001223 	.word	0x08001223
 8001194:	08001223 	.word	0x08001223
 8001198:	08001223 	.word	0x08001223
 800119c:	08001223 	.word	0x08001223
 80011a0:	08001223 	.word	0x08001223
 80011a4:	08001223 	.word	0x08001223
 80011a8:	08001223 	.word	0x08001223
 80011ac:	08001223 	.word	0x08001223
 80011b0:	08001223 	.word	0x08001223
 80011b4:	08001223 	.word	0x08001223
 80011b8:	080011d1 	.word	0x080011d1
 80011bc:	080011e5 	.word	0x080011e5
 80011c0:	4a79      	ldr	r2, [pc, #484]	@ (80013a8 <HAL_GPIO_Init+0x2b4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011c6:	e02c      	b.n	8001222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e029      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	3304      	adds	r3, #4
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e024      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	3308      	adds	r3, #8
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e01f      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	330c      	adds	r3, #12
 80011ea:	623b      	str	r3, [r7, #32]
          break;
 80011ec:	e01a      	b.n	8001224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011f6:	2304      	movs	r3, #4
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e013      	b.n	8001224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d105      	bne.n	8001210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	611a      	str	r2, [r3, #16]
          break;
 800120e:	e009      	b.n	8001224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	615a      	str	r2, [r3, #20]
          break;
 800121a:	e003      	b.n	8001224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x130>
          break;
 8001222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	@ 0xff
 8001228:	d801      	bhi.n	800122e <HAL_GPIO_Init+0x13a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	e001      	b.n	8001232 <HAL_GPIO_Init+0x13e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2bff      	cmp	r3, #255	@ 0xff
 8001238:	d802      	bhi.n	8001240 <HAL_GPIO_Init+0x14c>
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x152>
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	3b08      	subs	r3, #8
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	210f      	movs	r1, #15
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	401a      	ands	r2, r3
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80b1 	beq.w	80013d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001274:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <HAL_GPIO_Init+0x2b8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800128c:	4a48      	ldr	r2, [pc, #288]	@ (80013b0 <HAL_GPIO_Init+0x2bc>)
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a40      	ldr	r2, [pc, #256]	@ (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d013      	beq.n	80012e0 <HAL_GPIO_Init+0x1ec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	@ (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d00d      	beq.n	80012dc <HAL_GPIO_Init+0x1e8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a3e      	ldr	r2, [pc, #248]	@ (80013bc <HAL_GPIO_Init+0x2c8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d007      	beq.n	80012d8 <HAL_GPIO_Init+0x1e4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a3d      	ldr	r2, [pc, #244]	@ (80013c0 <HAL_GPIO_Init+0x2cc>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_GPIO_Init+0x1e0>
 80012d0:	2303      	movs	r3, #3
 80012d2:	e006      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e004      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012d8:	2302      	movs	r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_GPIO_Init+0x1ee>
 80012e0:	2300      	movs	r3, #0
 80012e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e4:	f002 0203 	and.w	r2, r2, #3
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4093      	lsls	r3, r2
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f2:	492f      	ldr	r1, [pc, #188]	@ (80013b0 <HAL_GPIO_Init+0x2bc>)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	492c      	ldr	r1, [pc, #176]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	4928      	ldr	r1, [pc, #160]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	4922      	ldr	r1, [pc, #136]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	491e      	ldr	r1, [pc, #120]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800134c:	4013      	ands	r3, r2
 800134e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4918      	ldr	r1, [pc, #96]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	4914      	ldr	r1, [pc, #80]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001374:	4013      	ands	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d021      	beq.n	80013c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	490e      	ldr	r1, [pc, #56]	@ (80013c4 <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e021      	b.n	80013d6 <HAL_GPIO_Init+0x2e2>
 8001392:	bf00      	nop
 8001394:	10320000 	.word	0x10320000
 8001398:	10310000 	.word	0x10310000
 800139c:	10220000 	.word	0x10220000
 80013a0:	10210000 	.word	0x10210000
 80013a4:	10120000 	.word	0x10120000
 80013a8:	10110000 	.word	0x10110000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40011000 	.word	0x40011000
 80013c0:	40011400 	.word	0x40011400
 80013c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4909      	ldr	r1, [pc, #36]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	3301      	adds	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f47f ae8e 	bne.w	8001108 <HAL_GPIO_Init+0x14>
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	372c      	adds	r7, #44	@ 0x2c
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40010400 	.word	0x40010400

080013fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141a:	887b      	ldrh	r3, [r7, #2]
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4013      	ands	r3, r2
 8001444:	041a      	lsls	r2, r3, #16
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	43d9      	mvns	r1, r3
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	400b      	ands	r3, r1
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e8      	b.n	8001642 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d106      	bne.n	800148a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f006 fd11 	bl	8007eac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fc6e 	bl	8003d7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ac:	f002 fc44 	bl	8003d38 <USB_CoreInit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0bf      	b.n	8001642 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fc72 	bl	8003db2 <USB_SetCurrentMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0b0      	b.n	8001642 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e03e      	b.n	8001564 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	3311      	adds	r3, #17
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3310      	adds	r3, #16
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	3313      	adds	r3, #19
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	3320      	adds	r3, #32
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	3324      	adds	r3, #36	@ 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3301      	adds	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	429a      	cmp	r2, r3
 800156c:	d3bb      	bcc.n	80014e6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e044      	b.n	80015fe <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	791b      	ldrb	r3, [r3, #4]
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3b5      	bcc.n	8001574 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3304      	adds	r3, #4
 8001610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001612:	f002 fbda 	bl	8003dca <USB_DevInit>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2202      	movs	r2, #2
 8001620:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f004 fe59 	bl	80062f2 <USB_DevDisconnect>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_PCD_Start+0x16>
 800165c:	2302      	movs	r3, #2
 800165e:	e016      	b.n	800168e <HAL_PCD_Start+0x44>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fb70 	bl	8003d52 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001672:	2101      	movs	r1, #1
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f006 fe8c 	bl	8008392 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fe2d 	bl	80062de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fe2f 	bl	8006306 <USB_ReadInterrupts>
 80016a8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fb1a 	bl	8001cee <PCD_EP_ISR_Handler>

    return;
 80016ba:	e119      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d013      	beq.n	80016ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f006 fc5f 	bl	8007fa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016e4:	2100      	movs	r1, #0
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f905 	bl	80018f6 <HAL_PCD_SetAddress>

    return;
 80016ec:	e100      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00c      	beq.n	8001712 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800170a:	b292      	uxth	r2, r2
 800170c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001710:	e0ee      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800172e:	b292      	uxth	r2, r2
 8001730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001734:	e0dc      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d027      	beq.n	8001790 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	b292      	uxth	r2, r2
 8001754:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0208 	bic.w	r2, r2, #8
 800176a:	b292      	uxth	r2, r2
 800176c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f006 fc4f 	bl	8008014 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001788:	b292      	uxth	r2, r2
 800178a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800178e:	e0af      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8083 	beq.w	80018a2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
 80017a0:	e010      	b.n	80017c4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	7ffb      	ldrb	r3, [r7, #31]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	441a      	add	r2, r3
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	b292      	uxth	r2, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	3320      	adds	r3, #32
 80017b8:	443b      	add	r3, r7
 80017ba:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	3301      	adds	r3, #1
 80017c2:	77fb      	strb	r3, [r7, #31]
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	2b07      	cmp	r3, #7
 80017c8:	d9eb      	bls.n	80017a2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	b292      	uxth	r2, r2
 80017de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	b292      	uxth	r2, r2
 80017f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017fa:	bf00      	nop
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001804:	b29b      	uxth	r3, r3
 8001806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f6      	beq.n	80017fc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001816:	b29a      	uxth	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001820:	b292      	uxth	r2, r2
 8001822:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	77fb      	strb	r3, [r7, #31]
 800182a:	e00f      	b.n	800184c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	4611      	mov	r1, r2
 8001834:	7ffa      	ldrb	r2, [r7, #31]
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	440a      	add	r2, r1
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	3320      	adds	r3, #32
 800183e:	443b      	add	r3, r7
 8001840:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001844:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	3301      	adds	r3, #1
 800184a:	77fb      	strb	r3, [r7, #31]
 800184c:	7ffb      	ldrb	r3, [r7, #31]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d9ec      	bls.n	800182c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800185a:	b29a      	uxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0208 	orr.w	r2, r2, #8
 8001864:	b292      	uxth	r2, r2
 8001866:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800187c:	b292      	uxth	r2, r2
 800187e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0204 	orr.w	r2, r2, #4
 8001894:	b292      	uxth	r2, r2
 8001896:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f006 fba0 	bl	8007fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018a0:	e026      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00f      	beq.n	80018cc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018be:	b292      	uxth	r2, r2
 80018c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 fb5e 	bl	8007f86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80018ca:	e011      	b.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00c      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018ee:	bf00      	nop
  }
}
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_PCD_SetAddress+0x1a>
 800190c:	2302      	movs	r3, #2
 800190e:	e012      	b.n	8001936 <HAL_PCD_SetAddress+0x40>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f004 fcc6 	bl	80062b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	4608      	mov	r0, r1
 8001948:	4611      	mov	r1, r2
 800194a:	461a      	mov	r2, r3
 800194c:	4603      	mov	r3, r0
 800194e:	70fb      	strb	r3, [r7, #3]
 8001950:	460b      	mov	r3, r1
 8001952:	803b      	strh	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800195c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da0e      	bge.n	8001982 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0207 	and.w	r2, r3, #7
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	3310      	adds	r3, #16
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	705a      	strb	r2, [r3, #1]
 8001980:	e00e      	b.n	80019a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f003 0207 	and.w	r2, r3, #7
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019ac:	883a      	ldrh	r2, [r7, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	78ba      	ldrb	r2, [r7, #2]
 80019b6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d102      	bne.n	80019c4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_Open+0x94>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e00e      	b.n	80019f0 <HAL_PCD_EP_Open+0xb2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fa0f 	bl	8003e04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da0e      	bge.n	8001a2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 0207 	and.w	r2, r3, #7
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	705a      	strb	r2, [r3, #1]
 8001a28:	e00e      	b.n	8001a48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0207 	and.w	r2, r3, #7
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_PCD_EP_Close+0x6a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e00e      	b.n	8001a80 <HAL_PCD_EP_Close+0x88>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fd87 	bl	8004584 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	460b      	mov	r3, r1
 8001a96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 ff3e 	bl	800495c <USB_EPStartXfer>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0207 	and.w	r2, r3, #7
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001b0c:	681b      	ldr	r3, [r3, #0]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	460b      	mov	r3, r1
 8001b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	7afb      	ldrb	r3, [r7, #11]
 8001b2a:	f003 0207 	and.w	r2, r3, #7
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	3310      	adds	r3, #16
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2201      	movs	r2, #1
 8001b62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b64:	7afb      	ldrb	r3, [r7, #11]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6979      	ldr	r1, [r7, #20]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fef0 	bl	800495c <USB_EPStartXfer>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	7912      	ldrb	r2, [r2, #4]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e04c      	b.n	8001c3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da0e      	bge.n	8001bca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 0207 	and.w	r2, r3, #7
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	3310      	adds	r3, #16
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	705a      	strb	r2, [r3, #1]
 8001bc8:	e00c      	b.n	8001be4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2201      	movs	r2, #1
 8001be8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_PCD_EP_SetStall+0x7e>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e01c      	b.n	8001c3e <HAL_PCD_EP_SetStall+0xb8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68f9      	ldr	r1, [r7, #12]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fa53 	bl	80060be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4610      	mov	r0, r2
 8001c30:	f004 fb78 	bl	8006324 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	7912      	ldrb	r2, [r2, #4]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e040      	b.n	8001ce6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	da0e      	bge.n	8001c8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 0207 	and.w	r2, r3, #7
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	3310      	adds	r3, #16
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	705a      	strb	r2, [r3, #1]
 8001c88:	e00e      	b.n	8001ca8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0207 	and.w	r2, r3, #7
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_PCD_EP_ClrStall+0x82>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e00e      	b.n	8001ce6 <HAL_PCD_EP_ClrStall+0xa0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fa41 	bl	800615e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b096      	sub	sp, #88	@ 0x58
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cf6:	e3bb      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001d12:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8175 	bne.w	8002006 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d14e      	bne.n	8001dc6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d38:	81fb      	strh	r3, [r7, #14]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	89fb      	ldrh	r3, [r7, #14]
 8001d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3310      	adds	r3, #16
 8001d50:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	3302      	adds	r3, #2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	441a      	add	r2, r3
 8001d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f006 f8df 	bl	8007f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7b5b      	ldrb	r3, [r3, #13]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8368 	beq.w	8002470 <PCD_EP_ISR_Handler+0x782>
 8001da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 8363 	bne.w	8002470 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7b5b      	ldrb	r3, [r3, #13]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	735a      	strb	r2, [r3, #13]
 8001dc4:	e354      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dcc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d034      	beq.n	8001e4e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	3306      	adds	r3, #6
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e20:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f004 facf 	bl	80063c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e34:	4013      	ands	r3, r2
 8001e36:	823b      	strh	r3, [r7, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	8a3a      	ldrh	r2, [r7, #16]
 8001e3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e42:	b292      	uxth	r2, r2
 8001e44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f006 f856 	bl	8007ef8 <HAL_PCD_SetupStageCallback>
 8001e4c:	e310      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f280 830c 	bge.w	8002470 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e64:	4013      	ands	r3, r2
 8001e66:	83fb      	strh	r3, [r7, #30]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	8bfa      	ldrh	r2, [r7, #30]
 8001e6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e72:	b292      	uxth	r2, r2
 8001e74:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3306      	adds	r3, #6
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d019      	beq.n	8001ede <PCD_EP_ISR_Handler+0x1f0>
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb8:	6959      	ldr	r1, [r3, #20]
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f004 fa7f 	bl	80063c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	441a      	add	r2, r3
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f006 f81f 	bl	8007f1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 82bd 	bne.w	8002470 <PCD_EP_ISR_Handler+0x782>
 8001ef6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001efa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001efe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001f02:	f000 82b5 	beq.w	8002470 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f3c:	d91d      	bls.n	8001f7a <PCD_EP_ISR_Handler+0x28c>
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <PCD_EP_ISR_Handler+0x26a>
 8001f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f54:	3b01      	subs	r3, #1
 8001f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	029b      	lsls	r3, r3, #10
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	e026      	b.n	8001fc8 <PCD_EP_ISR_Handler+0x2da>
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <PCD_EP_ISR_Handler+0x2aa>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	e017      	b.n	8001fc8 <PCD_EP_ISR_Handler+0x2da>
 8001f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <PCD_EP_ISR_Handler+0x2c4>
 8001fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fae:	3301      	adds	r3, #1
 8001fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd8:	827b      	strh	r3, [r7, #18]
 8001fda:	8a7b      	ldrh	r3, [r7, #18]
 8001fdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001fe0:	827b      	strh	r3, [r7, #18]
 8001fe2:	8a7b      	ldrh	r3, [r7, #18]
 8001fe4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001fe8:	827b      	strh	r3, [r7, #18]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	8a7b      	ldrh	r3, [r7, #18]
 8001ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002000:	b29b      	uxth	r3, r3
 8002002:	8013      	strh	r3, [r2, #0]
 8002004:	e234      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800201a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800201e:	2b00      	cmp	r3, #0
 8002020:	f280 80fc 	bge.w	800221c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800203a:	4013      	ands	r3, r2
 800203c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002052:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002056:	b292      	uxth	r2, r2
 8002058:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800205a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002072:	7b1b      	ldrb	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d125      	bne.n	80020c4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	3306      	adds	r3, #6
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80020a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8092 	beq.w	80021d2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020b8:	88da      	ldrh	r2, [r3, #6]
 80020ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020be:	f004 f982 	bl	80063c6 <USB_ReadPMA>
 80020c2:	e086      	b.n	80021d2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80020c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020c6:	78db      	ldrb	r3, [r3, #3]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d10a      	bne.n	80020e2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80020cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020d0:	461a      	mov	r2, r3
 80020d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f9d9 	bl	800248c <HAL_PCD_EP_DB_Receive>
 80020da:	4603      	mov	r3, r0
 80020dc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80020e0:	e077      	b.n	80021d2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020fc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800211a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800211e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002122:	b29b      	uxth	r3, r3
 8002124:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d024      	beq.n	800218a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	3302      	adds	r3, #2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002168:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800216c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02e      	beq.n	80021d2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217a:	6959      	ldr	r1, [r3, #20]
 800217c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217e:	891a      	ldrh	r2, [r3, #8]
 8002180:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002184:	f004 f91f 	bl	80063c6 <USB_ReadPMA>
 8002188:	e023      	b.n	80021d2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	3306      	adds	r3, #6
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80021b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	6959      	ldr	r1, [r3, #20]
 80021c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c8:	895a      	ldrh	r2, [r3, #10]
 80021ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021ce:	f004 f8fa 	bl	80063c6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80021d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021da:	441a      	add	r2, r3
 80021dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80021e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021e8:	441a      	add	r2, r3
 80021ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80021ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <PCD_EP_ISR_Handler+0x514>
 80021f6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80021fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d206      	bcs.n	8002210 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f005 fe87 	bl	8007f1c <HAL_PCD_DataOutStageCallback>
 800220e:	e005      	b.n	800221c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002216:	4618      	mov	r0, r3
 8002218:	f002 fba0 	bl	800495c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800221c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8123 	beq.w	8002470 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800222a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	3310      	adds	r3, #16
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002258:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800226e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002276:	b29b      	uxth	r3, r3
 8002278:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800227a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227c:	78db      	ldrb	r3, [r3, #3]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 80a2 	bne.w	80023c8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228c:	7b1b      	ldrb	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8093 	beq.w	80023ba <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	2b00      	cmp	r3, #0
 800229e:	d046      	beq.n	800232e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a2:	785b      	ldrb	r3, [r3, #1]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d126      	bne.n	80022f6 <PCD_EP_ISR_Handler+0x608>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	4413      	add	r3, r2
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	011a      	lsls	r2, r3, #4
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	4413      	add	r3, r2
 80022ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022da:	b29a      	uxth	r2, r3
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	801a      	strh	r2, [r3, #0]
 80022f4:	e061      	b.n	80023ba <PCD_EP_ISR_Handler+0x6cc>
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d15d      	bne.n	80023ba <PCD_EP_ISR_Handler+0x6cc>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002312:	4413      	add	r3, r2
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	011a      	lsls	r2, r3, #4
 800231c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231e:	4413      	add	r3, r2
 8002320:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	e045      	b.n	80023ba <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d126      	bne.n	800238a <PCD_EP_ISR_Handler+0x69c>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800234a:	b29b      	uxth	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002350:	4413      	add	r3, r2
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
 8002354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	011a      	lsls	r2, r3, #4
 800235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235c:	4413      	add	r3, r2
 800235e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002362:	633b      	str	r3, [r7, #48]	@ 0x30
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236e:	b29a      	uxth	r2, r3
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800237e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002382:	b29a      	uxth	r2, r3
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	801a      	strh	r2, [r3, #0]
 8002388:	e017      	b.n	80023ba <PCD_EP_ISR_Handler+0x6cc>
 800238a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d113      	bne.n	80023ba <PCD_EP_ISR_Handler+0x6cc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a0:	4413      	add	r3, r2
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	011a      	lsls	r2, r3, #4
 80023aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ac:	4413      	add	r3, r2
 80023ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b6:	2200      	movs	r2, #0
 80023b8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f005 fdc6 	bl	8007f52 <HAL_PCD_DataInStageCallback>
 80023c6:	e053      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80023c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d146      	bne.n	8002462 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	3302      	adds	r3, #2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023fc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002408:	429a      	cmp	r2, r3
 800240a:	d907      	bls.n	800241c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800240c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002414:	1ad2      	subs	r2, r2, r3
 8002416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002418:	619a      	str	r2, [r3, #24]
 800241a:	e002      	b.n	8002422 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800241c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f005 fd8e 	bl	8007f52 <HAL_PCD_DataInStageCallback>
 8002436:	e01b      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002440:	441a      	add	r2, r3
 8002442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002444:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800244e:	441a      	add	r2, r3
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fa7e 	bl	800495c <USB_EPStartXfer>
 8002460:	e006      	b.n	8002470 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002462:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002466:	461a      	mov	r2, r3
 8002468:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f91b 	bl	80026a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002478:	b29b      	uxth	r3, r3
 800247a:	b21b      	sxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f6ff ac3b 	blt.w	8001cf8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3758      	adds	r7, #88	@ 0x58
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d07e      	beq.n	80025a2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	3302      	adds	r3, #2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	8b7b      	ldrh	r3, [r7, #26]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d306      	bcc.n	80024e6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	8b7b      	ldrh	r3, [r7, #26]
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	619a      	str	r2, [r3, #24]
 80024e4:	e002      	b.n	80024ec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800250a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250e:	833b      	strh	r3, [r7, #24]
 8002510:	8b3b      	ldrh	r3, [r7, #24]
 8002512:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002516:	833b      	strh	r3, [r7, #24]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	8b3b      	ldrh	r3, [r7, #24]
 8002528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800252c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002538:	b29b      	uxth	r3, r3
 800253a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01f      	beq.n	8002586 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800255c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002560:	82fb      	strh	r3, [r7, #22]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	441a      	add	r2, r3
 8002570:	8afb      	ldrh	r3, [r7, #22]
 8002572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800257a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800257e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002582:	b29b      	uxth	r3, r3
 8002584:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8087 	beq.w	800269c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6959      	ldr	r1, [r3, #20]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	891a      	ldrh	r2, [r3, #8]
 800259a:	8b7b      	ldrh	r3, [r7, #26]
 800259c:	f003 ff13 	bl	80063c6 <USB_ReadPMA>
 80025a0:	e07c      	b.n	800269c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	3306      	adds	r3, #6
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	8b7b      	ldrh	r3, [r7, #26]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d306      	bcc.n	80025e4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	8b7b      	ldrh	r3, [r7, #26]
 80025dc:	1ad2      	subs	r2, r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	619a      	str	r2, [r3, #24]
 80025e2:	e002      	b.n	80025ea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d123      	bne.n	800263a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260c:	83fb      	strh	r3, [r7, #30]
 800260e:	8bfb      	ldrh	r3, [r7, #30]
 8002610:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002614:	83fb      	strh	r3, [r7, #30]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	441a      	add	r2, r3
 8002624:	8bfb      	ldrh	r3, [r7, #30]
 8002626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800262a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800262e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002636:	b29b      	uxth	r3, r3
 8002638:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11f      	bne.n	8002684 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800265a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265e:	83bb      	strh	r3, [r7, #28]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	8bbb      	ldrh	r3, [r7, #28]
 8002670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800267c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002680:	b29b      	uxth	r3, r3
 8002682:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002684:	8b7b      	ldrh	r3, [r7, #26]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	895a      	ldrh	r2, [r3, #10]
 8002696:	8b7b      	ldrh	r3, [r7, #26]
 8002698:	f003 fe95 	bl	80063c6 <USB_ReadPMA>
    }
  }

  return count;
 800269c:	8b7b      	ldrh	r3, [r7, #26]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b0a4      	sub	sp, #144	@ 0x90
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	4613      	mov	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 81dd 	beq.w	8002a7a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	3302      	adds	r3, #2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d907      	bls.n	8002708 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002700:	1ad2      	subs	r2, r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	619a      	str	r2, [r3, #24]
 8002706:	e002      	b.n	800270e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 80b9 	bne.w	800288a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d126      	bne.n	800276e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002734:	4413      	add	r3, r2
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	011a      	lsls	r2, r3, #4
 800273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002740:	4413      	add	r3, r2
 8002742:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002752:	b29a      	uxth	r2, r3
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002766:	b29a      	uxth	r2, r3
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	e01a      	b.n	80027a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d116      	bne.n	80027a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278a:	4413      	add	r3, r2
 800278c:	637b      	str	r3, [r7, #52]	@ 0x34
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	011a      	lsls	r2, r3, #4
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	4413      	add	r3, r2
 8002798:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800279c:	633b      	str	r3, [r7, #48]	@ 0x30
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	2200      	movs	r2, #0
 80027a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d126      	bne.n	8002800 <HAL_PCD_EP_DB_Transmit+0x15a>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61fb      	str	r3, [r7, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	011a      	lsls	r2, r3, #4
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	e017      	b.n	8002830 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d113      	bne.n	8002830 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	4413      	add	r3, r2
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	011a      	lsls	r2, r3, #4
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	4413      	add	r3, r2
 8002824:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002828:	623b      	str	r3, [r7, #32]
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	2200      	movs	r2, #0
 800282e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f005 fb8b 	bl	8007f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 82fc 	beq.w	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800285e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002862:	82fb      	strh	r3, [r7, #22]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	8afb      	ldrh	r3, [r7, #22]
 8002874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800287c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002884:	b29b      	uxth	r3, r3
 8002886:	8013      	strh	r3, [r2, #0]
 8002888:	e2da      	b.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d021      	beq.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80028c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028de:	2b01      	cmp	r3, #1
 80028e0:	f040 82ae 	bne.w	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028ec:	441a      	add	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028fa:	441a      	add	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d30b      	bcc.n	8002924 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800291c:	1ad2      	subs	r2, r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	621a      	str	r2, [r3, #32]
 8002922:	e017      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800292c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800293c:	e00a      	b.n	8002954 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d165      	bne.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x382>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002970:	4413      	add	r3, r2
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	011a      	lsls	r2, r3, #4
 800297a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800297c:	4413      	add	r3, r2
 800297e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002982:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298e:	b29a      	uxth	r2, r3
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002998:	2b3e      	cmp	r3, #62	@ 0x3e
 800299a:	d91d      	bls.n	80029d8 <HAL_PCD_EP_DB_Transmit+0x332>
 800299c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x310>
 80029b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b2:	3b01      	subs	r3, #1
 80029b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029be:	b29b      	uxth	r3, r3
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	e044      	b.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x350>
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e035      	b.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a24:	801a      	strh	r2, [r3, #0]
 8002a26:	e01c      	b.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d118      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a44:	4413      	add	r3, r2
 8002a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	011a      	lsls	r2, r3, #4
 8002a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a60:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6959      	ldr	r1, [r3, #20]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	891a      	ldrh	r2, [r3, #8]
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	f003 fc61 	bl	800633a <USB_WritePMA>
 8002a78:	e1e2      	b.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3306      	adds	r3, #6
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aa2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d307      	bcc.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002aba:	1ad2      	subs	r2, r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	619a      	str	r2, [r3, #24]
 8002ac0:	e002      	b.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 80c0 	bne.w	8002c52 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d126      	bne.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x482>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aee:	4413      	add	r3, r2
 8002af0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	011a      	lsls	r2, r3, #4
 8002af8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002afa:	4413      	add	r3, r2
 8002afc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	e01a      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d116      	bne.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b44:	4413      	add	r3, r2
 8002b46:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	011a      	lsls	r2, r3, #4
 8002b4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b50:	4413      	add	r3, r2
 8002b52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d12b      	bne.n	8002bc4 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b80:	4413      	add	r3, r2
 8002b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	011a      	lsls	r2, r3, #4
 8002b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bc0:	801a      	strh	r2, [r3, #0]
 8002bc2:	e017      	b.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d113      	bne.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bda:	4413      	add	r3, r2
 8002bdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	011a      	lsls	r2, r3, #4
 8002be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be6:	4413      	add	r3, r2
 8002be8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f005 f9a9 	bl	8007f52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 811a 	bne.w	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c26:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	441a      	add	r2, r3
 8002c38:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]
 8002c50:	e0f6      	b.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d121      	bne.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	f040 80ca 	bne.w	8002e40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cc2:	441a      	add	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6a1a      	ldr	r2, [r3, #32]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d30b      	bcc.n	8002cec <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ce4:	1ad2      	subs	r2, r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	621a      	str	r2, [r3, #32]
 8002cea:	e017      	b.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d108      	bne.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002cf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002cf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d04:	e00a      	b.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d165      	bne.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x750>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3e:	4413      	add	r3, r2
 8002d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	011a      	lsls	r2, r3, #4
 8002d48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d66:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d68:	d91d      	bls.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x700>
 8002d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002d7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d80:	3b01      	subs	r3, #1
 8002d82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	e041      	b.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002dae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc0:	801a      	strh	r2, [r3, #0]
 8002dc2:	e032      	b.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_PCD_EP_DB_Transmit+0x738>
 8002dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dda:	3301      	adds	r3, #1
 8002ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	029b      	lsls	r3, r3, #10
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	e019      	b.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d115      	bne.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x784>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0c:	4413      	add	r3, r2
 8002e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	011a      	lsls	r2, r3, #4
 8002e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e18:	4413      	add	r3, r2
 8002e1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6959      	ldr	r1, [r3, #20]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	895a      	ldrh	r2, [r3, #10]
 8002e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f003 fa7d 	bl	800633a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e5a:	82bb      	strh	r3, [r7, #20]
 8002e5c:	8abb      	ldrh	r3, [r7, #20]
 8002e5e:	f083 0310 	eor.w	r3, r3, #16
 8002e62:	82bb      	strh	r3, [r7, #20]
 8002e64:	8abb      	ldrh	r3, [r7, #20]
 8002e66:	f083 0320 	eor.w	r3, r3, #32
 8002e6a:	82bb      	strh	r3, [r7, #20]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	8abb      	ldrh	r3, [r7, #20]
 8002e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3790      	adds	r7, #144	@ 0x90
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b087      	sub	sp, #28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	897b      	ldrh	r3, [r7, #10]
 8002eba:	f003 0207 	and.w	r2, r3, #7
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e009      	b.n	8002ee4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ed0:	897a      	ldrh	r2, [r7, #10]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ee4:	893b      	ldrh	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	80da      	strh	r2, [r3, #6]
 8002ef8:	e00b      	b.n	8002f12 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2201      	movs	r2, #1
 8002efe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e272      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8087 	beq.w	800304e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f40:	4b92      	ldr	r3, [pc, #584]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d00c      	beq.n	8002f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d112      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
 8002f58:	4b8c      	ldr	r3, [pc, #560]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f64:	d10b      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f66:	4b89      	ldr	r3, [pc, #548]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d06c      	beq.n	800304c <HAL_RCC_OscConfig+0x12c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d168      	bne.n	800304c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e24c      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x76>
 8002f88:	4b80      	ldr	r3, [pc, #512]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a7f      	ldr	r2, [pc, #508]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e02e      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7a      	ldr	r2, [pc, #488]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b78      	ldr	r3, [pc, #480]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a77      	ldr	r2, [pc, #476]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0xbc>
 8002fc2:	4b72      	ldr	r3, [pc, #456]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a71      	ldr	r2, [pc, #452]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b6f      	ldr	r3, [pc, #444]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6e      	ldr	r2, [pc, #440]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6a      	ldr	r2, [pc, #424]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b68      	ldr	r3, [pc, #416]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a67      	ldr	r2, [pc, #412]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fd fd2c 	bl	8000a58 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fd fd28 	bl	8000a58 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	@ 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e200      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b5d      	ldr	r3, [pc, #372]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xe4>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd fd18 	bl	8000a58 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fd fd14 	bl	8000a58 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	@ 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1ec      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	4b53      	ldr	r3, [pc, #332]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x10c>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305a:	4b4c      	ldr	r3, [pc, #304]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003066:	4b49      	ldr	r3, [pc, #292]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x18c>
 8003072:	4b46      	ldr	r3, [pc, #280]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	4b43      	ldr	r3, [pc, #268]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x176>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1c0      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4939      	ldr	r1, [pc, #228]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e03a      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b36      	ldr	r3, [pc, #216]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fd fccd 	bl	8000a58 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fd fcc9 	bl	8000a58 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1a1      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4927      	ldr	r1, [pc, #156]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b26      	ldr	r3, [pc, #152]	@ (8003190 <HAL_RCC_OscConfig+0x270>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fd fcac 	bl	8000a58 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7fd fca8 	bl	8000a58 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e180      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b1d      	ldr	r3, [pc, #116]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d03a      	beq.n	80031a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d019      	beq.n	800316a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <HAL_RCC_OscConfig+0x274>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7fd fc8c 	bl	8000a58 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fd fc88 	bl	8000a58 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e160      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_RCC_OscConfig+0x26c>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003162:	2001      	movs	r0, #1
 8003164:	f000 fa9c 	bl	80036a0 <RCC_Delay>
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_RCC_OscConfig+0x274>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7fd fc72 	bl	8000a58 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003176:	e00f      	b.n	8003198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fd fc6e 	bl	8000a58 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d908      	bls.n	8003198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e146      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	42420000 	.word	0x42420000
 8003194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	4b92      	ldr	r3, [pc, #584]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e9      	bne.n	8003178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a6 	beq.w	80032fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b8b      	ldr	r3, [pc, #556]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b88      	ldr	r3, [pc, #544]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a87      	ldr	r2, [pc, #540]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]
 80031ce:	4b85      	ldr	r3, [pc, #532]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031de:	4b82      	ldr	r3, [pc, #520]	@ (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ea:	4b7f      	ldr	r3, [pc, #508]	@ (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7e      	ldr	r2, [pc, #504]	@ (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fd fc2f 	bl	8000a58 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fd fc2b 	bl	8000a58 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	@ 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e103      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b75      	ldr	r3, [pc, #468]	@ (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x312>
 8003224:	4b6f      	ldr	r3, [pc, #444]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a6e      	ldr	r2, [pc, #440]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	e02d      	b.n	800328e <HAL_RCC_OscConfig+0x36e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x334>
 800323a:	4b6a      	ldr	r3, [pc, #424]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a69      	ldr	r2, [pc, #420]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	4b67      	ldr	r3, [pc, #412]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a66      	ldr	r2, [pc, #408]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	e01c      	b.n	800328e <HAL_RCC_OscConfig+0x36e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b05      	cmp	r3, #5
 800325a:	d10c      	bne.n	8003276 <HAL_RCC_OscConfig+0x356>
 800325c:	4b61      	ldr	r3, [pc, #388]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a60      	ldr	r2, [pc, #384]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	4b5e      	ldr	r3, [pc, #376]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a5d      	ldr	r2, [pc, #372]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	e00b      	b.n	800328e <HAL_RCC_OscConfig+0x36e>
 8003276:	4b5b      	ldr	r3, [pc, #364]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a5a      	ldr	r2, [pc, #360]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	4b58      	ldr	r3, [pc, #352]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a57      	ldr	r2, [pc, #348]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d015      	beq.n	80032c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fd fbdf 	bl	8000a58 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fd fbdb 	bl	8000a58 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0b1      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	4b4b      	ldr	r3, [pc, #300]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ee      	beq.n	800329e <HAL_RCC_OscConfig+0x37e>
 80032c0:	e014      	b.n	80032ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fd fbc9 	bl	8000a58 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fbc5 	bl	8000a58 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e09b      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	4b40      	ldr	r3, [pc, #256]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4b3c      	ldr	r3, [pc, #240]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4a3b      	ldr	r2, [pc, #236]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8087 	beq.w	8003416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003308:	4b36      	ldr	r3, [pc, #216]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	d061      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d146      	bne.n	80033aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b33      	ldr	r3, [pc, #204]	@ (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fd fb99 	bl	8000a58 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332a:	f7fd fb95 	bl	8000a58 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e06d      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333c:	4b29      	ldr	r3, [pc, #164]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003350:	d108      	bne.n	8003364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003352:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4921      	ldr	r1, [pc, #132]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003364:	4b1f      	ldr	r3, [pc, #124]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a19      	ldr	r1, [r3, #32]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	430b      	orrs	r3, r1
 8003376:	491b      	ldr	r1, [pc, #108]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fd fb69 	bl	8000a58 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fd fb65 	bl	8000a58 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e03d      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x46a>
 80033a8:	e035      	b.n	8003416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fd fb52 	bl	8000a58 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fd fb4e 	bl	8000a58 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e026      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x498>
 80033d6:	e01e      	b.n	8003416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e019      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x500>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	429a      	cmp	r2, r3
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0d0      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b6a      	ldr	r3, [pc, #424]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b67      	ldr	r3, [pc, #412]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4965      	ldr	r1, [pc, #404]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a58      	ldr	r2, [pc, #352]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800348a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a52      	ldr	r2, [pc, #328]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80034a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d040      	beq.n	8003544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e073      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3d      	ldr	r3, [pc, #244]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06b      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b39      	ldr	r3, [pc, #228]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4936      	ldr	r1, [pc, #216]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003514:	f7fd faa0 	bl	8000a58 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd fa9c 	bl	8000a58 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e053      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b27      	ldr	r3, [pc, #156]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d210      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4922      	ldr	r1, [pc, #136]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359e:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490a      	ldr	r1, [pc, #40]	@ (80035ec <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_RCC_ClockConfig+0x1cc>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_ClockConfig+0x1d0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd f9fe 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	080084b8 	.word	0x080084b8
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003612:	4b1e      	ldr	r3, [pc, #120]	@ (800368c <HAL_RCC_GetSysClockFreq+0x94>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x30>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x36>
 8003626:	e027      	b.n	8003678 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003628:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x98>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	e027      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	4a17      	ldr	r2, [pc, #92]	@ (8003694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d010      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003646:	4b11      	ldr	r3, [pc, #68]	@ (800368c <HAL_RCC_GetSysClockFreq+0x94>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0c5b      	lsrs	r3, r3, #17
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	4a11      	ldr	r2, [pc, #68]	@ (8003698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a0d      	ldr	r2, [pc, #52]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x98>)
 800365a:	fb03 f202 	mul.w	r2, r3, r2
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e004      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a0c      	ldr	r2, [pc, #48]	@ (800369c <HAL_RCC_GetSysClockFreq+0xa4>)
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	613b      	str	r3, [r7, #16]
      break;
 8003676:	e002      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003678:	4b05      	ldr	r3, [pc, #20]	@ (8003690 <HAL_RCC_GetSysClockFreq+0x98>)
 800367a:	613b      	str	r3, [r7, #16]
      break;
 800367c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800367e:	693b      	ldr	r3, [r7, #16]
}
 8003680:	4618      	mov	r0, r3
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000
 8003690:	007a1200 	.word	0x007a1200
 8003694:	080084c8 	.word	0x080084c8
 8003698:	080084d8 	.word	0x080084d8
 800369c:	003d0900 	.word	0x003d0900

080036a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <RCC_Delay+0x34>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <RCC_Delay+0x38>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a5b      	lsrs	r3, r3, #9
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036bc:	bf00      	nop
  }
  while (Delay --);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	60fa      	str	r2, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f9      	bne.n	80036bc <RCC_Delay+0x1c>
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	20000000 	.word	0x20000000
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d07d      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fc:	4b4f      	ldr	r3, [pc, #316]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4a4b      	ldr	r2, [pc, #300]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003712:	61d3      	str	r3, [r2, #28]
 8003714:	4b49      	ldr	r3, [pc, #292]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003724:	4b46      	ldr	r3, [pc, #280]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d118      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003730:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a42      	ldr	r2, [pc, #264]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800373a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373c:	f7fd f98c 	bl	8000a58 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fd f988 	bl	8000a58 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	@ 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e06d      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b3a      	ldr	r3, [pc, #232]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003762:	4b36      	ldr	r3, [pc, #216]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800376a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d02e      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d027      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003780:	4b2e      	ldr	r3, [pc, #184]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003788:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378a:	4b2e      	ldr	r3, [pc, #184]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003790:	4b2c      	ldr	r3, [pc, #176]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003796:	4a29      	ldr	r2, [pc, #164]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d014      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fd f957 	bl	8000a58 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fd f953 	bl	8000a58 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e036      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ee      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d0:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4917      	ldr	r1, [pc, #92]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e8:	4b14      	ldr	r3, [pc, #80]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4a13      	ldr	r2, [pc, #76]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003800:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	490b      	ldr	r1, [pc, #44]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800381e:	4b07      	ldr	r3, [pc, #28]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4904      	ldr	r1, [pc, #16]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
 8003844:	42420440 	.word	0x42420440

08003848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e041      	b.n	80038de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd f81c 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 f8f4 	bl	8003a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_ConfigClockSource+0x1c>
 80038fe:	2302      	movs	r3, #2
 8003900:	e0b4      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x186>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003920:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003928:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393a:	d03e      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0xd4>
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003940:	f200 8087 	bhi.w	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003948:	f000 8086 	beq.w	8003a58 <HAL_TIM_ConfigClockSource+0x172>
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003950:	d87f      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 8003952:	2b70      	cmp	r3, #112	@ 0x70
 8003954:	d01a      	beq.n	800398c <HAL_TIM_ConfigClockSource+0xa6>
 8003956:	2b70      	cmp	r3, #112	@ 0x70
 8003958:	d87b      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 800395a:	2b60      	cmp	r3, #96	@ 0x60
 800395c:	d050      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0x11a>
 800395e:	2b60      	cmp	r3, #96	@ 0x60
 8003960:	d877      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 8003962:	2b50      	cmp	r3, #80	@ 0x50
 8003964:	d03c      	beq.n	80039e0 <HAL_TIM_ConfigClockSource+0xfa>
 8003966:	2b50      	cmp	r3, #80	@ 0x50
 8003968:	d873      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	d058      	beq.n	8003a20 <HAL_TIM_ConfigClockSource+0x13a>
 800396e:	2b40      	cmp	r3, #64	@ 0x40
 8003970:	d86f      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 8003972:	2b30      	cmp	r3, #48	@ 0x30
 8003974:	d064      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x15a>
 8003976:	2b30      	cmp	r3, #48	@ 0x30
 8003978:	d86b      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 800397a:	2b20      	cmp	r3, #32
 800397c:	d060      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x15a>
 800397e:	2b20      	cmp	r3, #32
 8003980:	d867      	bhi.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d05c      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x15a>
 8003986:	2b10      	cmp	r3, #16
 8003988:	d05a      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0x15a>
 800398a:	e062      	b.n	8003a52 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800399c:	f000 f94f 	bl	8003c3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e04f      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039ca:	f000 f938 	bl	8003c3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039dc:	609a      	str	r2, [r3, #8]
      break;
 80039de:	e03c      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ec:	461a      	mov	r2, r3
 80039ee:	f000 f8af 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2150      	movs	r1, #80	@ 0x50
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f906 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 80039fe:	e02c      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f000 f8cd 	bl	8003bac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2160      	movs	r1, #96	@ 0x60
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f8f6 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 8003a1e:	e01c      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f000 f88f 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2140      	movs	r1, #64	@ 0x40
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f8e6 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 8003a3e:	e00c      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 f8dd 	bl	8003c0a <TIM_ITRx_SetConfig>
      break;
 8003a50:	e003      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
      break;
 8003a56:	e000      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	@ (8003b44 <TIM_Base_SetConfig+0xd0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_Base_SetConfig+0x30>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0x30>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a2c      	ldr	r2, [pc, #176]	@ (8003b48 <TIM_Base_SetConfig+0xd4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0x30>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <TIM_Base_SetConfig+0xd8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <TIM_Base_SetConfig+0xd0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_Base_SetConfig+0x62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d007      	beq.n	8003ad6 <TIM_Base_SetConfig+0x62>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <TIM_Base_SetConfig+0xd4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_Base_SetConfig+0x62>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <TIM_Base_SetConfig+0xd8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d108      	bne.n	8003ae8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <TIM_Base_SetConfig+0xd0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d103      	bne.n	8003b1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f023 0201 	bic.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	611a      	str	r2, [r3, #16]
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800

08003b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 0201 	bic.w	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 030a 	bic.w	r3, r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0210 	bic.w	r2, r3, #16
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	031b      	lsls	r3, r3, #12
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003be8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	621a      	str	r2, [r3, #32]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f043 0307 	orr.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	609a      	str	r2, [r3, #8]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e046      	b.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a16      	ldr	r2, [pc, #88]	@ (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a12      	ldr	r2, [pc, #72]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a10      	ldr	r2, [pc, #64]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10c      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4638      	mov	r0, r7
 8003d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d62:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003d66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d86:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003d8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b09d      	sub	sp, #116	@ 0x74
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	78db      	ldrb	r3, [r3, #3]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d81f      	bhi.n	8003e76 <USB_ActivateEndpoint+0x72>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <USB_ActivateEndpoint+0x38>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e7f 	.word	0x08003e7f
 8003e48:	08003e5b 	.word	0x08003e5b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003e58:	e012      	b.n	8003e80 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e5a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e5e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003e62:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003e66:	e00b      	b.n	8003e80 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003e74:	e004      	b.n	8003e80 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003e7c:	e000      	b.n	8003e80 <USB_ActivateEndpoint+0x7c>
      break;
 8003e7e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	441a      	add	r2, r3
 8003e8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	7b1b      	ldrb	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 8178 	bne.w	80041e0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8084 	beq.w	8004002 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	011a      	lsls	r2, r3, #4
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	88db      	ldrh	r3, [r3, #6]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	827b      	strh	r3, [r7, #18]
 8003f3c:	8a7b      	ldrh	r3, [r7, #18]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01b      	beq.n	8003f7e <USB_ActivateEndpoint+0x17a>
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5c:	823b      	strh	r3, [r7, #16]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	441a      	add	r2, r3
 8003f68:	8a3b      	ldrh	r3, [r7, #16]
 8003f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	78db      	ldrb	r3, [r3, #3]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d020      	beq.n	8003fc8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f9c:	81bb      	strh	r3, [r7, #12]
 8003f9e:	89bb      	ldrh	r3, [r7, #12]
 8003fa0:	f083 0320 	eor.w	r3, r3, #32
 8003fa4:	81bb      	strh	r3, [r7, #12]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	89bb      	ldrh	r3, [r7, #12]
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]
 8003fc6:	e2d5      	b.n	8004574 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fde:	81fb      	strh	r3, [r7, #14]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	89fb      	ldrh	r3, [r7, #14]
 8003fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8013      	strh	r3, [r2, #0]
 8004000:	e2b8      	b.n	8004574 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	633b      	str	r3, [r7, #48]	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800400c:	b29b      	uxth	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	4413      	add	r3, r2
 8004014:	633b      	str	r3, [r7, #48]	@ 0x30
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	011a      	lsls	r2, r3, #4
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	4413      	add	r3, r2
 8004020:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	88db      	ldrh	r3, [r3, #6]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	b29b      	uxth	r3, r3
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	4413      	add	r3, r2
 8004048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	011a      	lsls	r2, r3, #4
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	4413      	add	r3, r2
 8004054:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004064:	b29a      	uxth	r2, r3
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	801a      	strh	r2, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004070:	d91d      	bls.n	80040ae <USB_ActivateEndpoint+0x2aa>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <USB_ActivateEndpoint+0x288>
 8004086:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004088:	3b01      	subs	r3, #1
 800408a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29a      	uxth	r2, r3
 8004092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004094:	b29b      	uxth	r3, r3
 8004096:	029b      	lsls	r3, r3, #10
 8004098:	b29b      	uxth	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	b29b      	uxth	r3, r3
 800409e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	801a      	strh	r2, [r3, #0]
 80040ac:	e026      	b.n	80040fc <USB_ActivateEndpoint+0x2f8>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <USB_ActivateEndpoint+0x2c8>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e017      	b.n	80040fc <USB_ActivateEndpoint+0x2f8>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <USB_ActivateEndpoint+0x2e2>
 80040e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040e2:	3301      	adds	r3, #1
 80040e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	847b      	strh	r3, [r7, #34]	@ 0x22
 800410a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800410c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01b      	beq.n	800414c <USB_ActivateEndpoint+0x348>
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412a:	843b      	strh	r3, [r7, #32]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	8c3b      	ldrh	r3, [r7, #32]
 8004138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800413c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004148:	b29b      	uxth	r3, r3
 800414a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d124      	bne.n	800419e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416a:	83bb      	strh	r3, [r7, #28]
 800416c:	8bbb      	ldrh	r3, [r7, #28]
 800416e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004172:	83bb      	strh	r3, [r7, #28]
 8004174:	8bbb      	ldrh	r3, [r7, #28]
 8004176:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800417a:	83bb      	strh	r3, [r7, #28]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	8bbb      	ldrh	r3, [r7, #28]
 8004188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800418c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004198:	b29b      	uxth	r3, r3
 800419a:	8013      	strh	r3, [r2, #0]
 800419c:	e1ea      	b.n	8004574 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b4:	83fb      	strh	r3, [r7, #30]
 80041b6:	8bfb      	ldrh	r3, [r7, #30]
 80041b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041bc:	83fb      	strh	r3, [r7, #30]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	8bfb      	ldrh	r3, [r7, #30]
 80041ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]
 80041de:	e1c9      	b.n	8004574 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	78db      	ldrb	r3, [r3, #3]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d11e      	bne.n	8004226 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004218:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800421c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]
 8004224:	e01d      	b.n	8004262 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800424e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004272:	4413      	add	r3, r2
 8004274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	011a      	lsls	r2, r3, #4
 800427c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800427e:	4413      	add	r3, r2
 8004280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004284:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	891b      	ldrh	r3, [r3, #8]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004294:	801a      	strh	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	657b      	str	r3, [r7, #84]	@ 0x54
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a6:	4413      	add	r3, r2
 80042a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	011a      	lsls	r2, r3, #4
 80042b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80042b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	895b      	ldrh	r3, [r3, #10]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 8093 	bne.w	80043fa <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80042e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <USB_ActivateEndpoint+0x524>
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800431c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004324:	b29b      	uxth	r3, r3
 8004326:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004336:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <USB_ActivateEndpoint+0x574>
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800436c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004370:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004390:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004392:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004396:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004398:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800439a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800439e:	873b      	strh	r3, [r7, #56]	@ 0x38
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]
 80043f8:	e0bc      	b.n	8004574 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800440a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800440e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01d      	beq.n	8004452 <USB_ActivateEndpoint+0x64e>
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800444a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004462:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01d      	beq.n	80044aa <USB_ActivateEndpoint+0x6a6>
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004484:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	441a      	add	r2, r3
 8004492:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800449a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800449e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	78db      	ldrb	r3, [r3, #3]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d024      	beq.n	80044fc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80044cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80044d0:	f083 0320 	eor.w	r3, r3, #32
 80044d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004512:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	441a      	add	r2, r3
 8004520:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004524:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004528:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800452c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004534:	b29b      	uxth	r3, r3
 8004536:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800454a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800456c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004570:	b29b      	uxth	r3, r3
 8004572:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004574:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004578:	4618      	mov	r0, r3
 800457a:	3774      	adds	r7, #116	@ 0x74
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop

08004584 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004584:	b480      	push	{r7}
 8004586:	b08d      	sub	sp, #52	@ 0x34
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	7b1b      	ldrb	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 808e 	bne.w	80046b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d044      	beq.n	800462a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	81bb      	strh	r3, [r7, #12]
 80045ae:	89bb      	ldrh	r3, [r7, #12]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <USB_DeactivateEndpoint+0x6c>
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ce:	817b      	strh	r3, [r7, #10]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	897b      	ldrh	r3, [r7, #10]
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004606:	813b      	strh	r3, [r7, #8]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	893b      	ldrh	r3, [r7, #8]
 8004614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800461c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]
 8004628:	e192      	b.n	8004950 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	827b      	strh	r3, [r7, #18]
 8004638:	8a7b      	ldrh	r3, [r7, #18]
 800463a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01b      	beq.n	800467a <USB_DeactivateEndpoint+0xf6>
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004658:	823b      	strh	r3, [r7, #16]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	441a      	add	r2, r3
 8004664:	8a3b      	ldrh	r3, [r7, #16]
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800466e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800468c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004690:	81fb      	strh	r3, [r7, #14]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]
 80046b2:	e14d      	b.n	8004950 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 80a5 	bne.w	8004808 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	843b      	strh	r3, [r7, #32]
 80046cc:	8c3b      	ldrh	r3, [r7, #32]
 80046ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01b      	beq.n	800470e <USB_DeactivateEndpoint+0x18a>
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ec:	83fb      	strh	r3, [r7, #30]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	8bfb      	ldrh	r3, [r7, #30]
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	83bb      	strh	r3, [r7, #28]
 800471c:	8bbb      	ldrh	r3, [r7, #28]
 800471e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01b      	beq.n	800475e <USB_DeactivateEndpoint+0x1da>
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473c:	837b      	strh	r3, [r7, #26]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	8b7b      	ldrh	r3, [r7, #26]
 800474a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800474e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004756:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800475a:	b29b      	uxth	r3, r3
 800475c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004774:	833b      	strh	r3, [r7, #24]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	8b3b      	ldrh	r3, [r7, #24]
 8004782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800478a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800478e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004792:	b29b      	uxth	r3, r3
 8004794:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ac:	82fb      	strh	r3, [r7, #22]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	8afb      	ldrh	r3, [r7, #22]
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047e4:	82bb      	strh	r3, [r7, #20]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	8abb      	ldrh	r3, [r7, #20]
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
 8004806:	e0a3      	b.n	8004950 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004816:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <USB_DeactivateEndpoint+0x2d4>
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004836:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800484c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004866:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <USB_DeactivateEndpoint+0x324>
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004886:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004914:	b29b      	uxth	r3, r3
 8004916:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800492a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3734      	adds	r7, #52	@ 0x34
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b0c2      	sub	sp, #264	@ 0x108
 8004960:	af00      	add	r7, sp, #0
 8004962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800496a:	6018      	str	r0, [r3, #0]
 800496c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004974:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800497a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	785b      	ldrb	r3, [r3, #1]
 8004982:	2b01      	cmp	r3, #1
 8004984:	f040 86b7 	bne.w	80056f6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800498c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d908      	bls.n	80049b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80049a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049b4:	e007      	b.n	80049c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80049b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	7b1b      	ldrb	r3, [r3, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d13a      	bne.n	8004a4c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6959      	ldr	r1, [r3, #20]
 80049e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	88da      	ldrh	r2, [r3, #6]
 80049ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80049f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80049fc:	6800      	ldr	r0, [r0, #0]
 80049fe:	f001 fc9c 	bl	800633a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	011a      	lsls	r2, r3, #4
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	f000 be1f 	b.w	800568a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	78db      	ldrb	r3, [r3, #3]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f040 8462 	bne.w	8005322 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	f240 83df 	bls.w	800523a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004acc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a1a      	ldr	r2, [r3, #32]
 8004ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ae8:	1ad2      	subs	r2, r2, r3
 8004aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 81c7 	beq.w	8004eac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d177      	bne.n	8004c2a <USB_EPStartXfer+0x2ce>
 8004b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	4413      	add	r3, r2
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	011a      	lsls	r2, r3, #4
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	4413      	add	r3, r2
 8004b70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b8c:	d921      	bls.n	8004bd2 <USB_EPStartXfer+0x276>
 8004b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <USB_EPStartXfer+0x252>
 8004ba4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e050      	b.n	8004c74 <USB_EPStartXfer+0x318>
 8004bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <USB_EPStartXfer+0x294>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	e041      	b.n	8004c74 <USB_EPStartXfer+0x318>
 8004bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <USB_EPStartXfer+0x2b4>
 8004c06:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e024      	b.n	8004c74 <USB_EPStartXfer+0x318>
 8004c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	785b      	ldrb	r3, [r3, #1]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d11c      	bne.n	8004c74 <USB_EPStartXfer+0x318>
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	4413      	add	r3, r2
 8004c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	011a      	lsls	r2, r3, #4
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	4413      	add	r3, r2
 8004c64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	895b      	ldrh	r3, [r3, #10]
 8004c80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6959      	ldr	r1, [r3, #20]
 8004c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004c9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ca2:	6800      	ldr	r0, [r0, #0]
 8004ca4:	f001 fb49 	bl	800633a <USB_WritePMA>
            ep->xfer_buff += len;
 8004ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb8:	441a      	add	r2, r3
 8004cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a1a      	ldr	r2, [r3, #32]
 8004cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d90f      	bls.n	8004d02 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6a1a      	ldr	r2, [r3, #32]
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	621a      	str	r2, [r3, #32]
 8004d00:	e00e      	b.n	8004d20 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d177      	bne.n	8004e20 <USB_EPStartXfer+0x4c4>
 8004d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	4413      	add	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	011a      	lsls	r2, r3, #4
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4413      	add	r3, r2
 8004d66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d80:	2b3e      	cmp	r3, #62	@ 0x3e
 8004d82:	d921      	bls.n	8004dc8 <USB_EPStartXfer+0x46c>
 8004d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <USB_EPStartXfer+0x448>
 8004d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e056      	b.n	8004e76 <USB_EPStartXfer+0x51a>
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <USB_EPStartXfer+0x48a>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e047      	b.n	8004e76 <USB_EPStartXfer+0x51a>
 8004de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <USB_EPStartXfer+0x4aa>
 8004dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e00:	3301      	adds	r3, #1
 8004e02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	e02a      	b.n	8004e76 <USB_EPStartXfer+0x51a>
 8004e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d122      	bne.n	8004e76 <USB_EPStartXfer+0x51a>
 8004e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	4413      	add	r3, r2
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	011a      	lsls	r2, r3, #4
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4413      	add	r3, r2
 8004e66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	891b      	ldrh	r3, [r3, #8]
 8004e82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6959      	ldr	r1, [r3, #20]
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004e9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ea0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ea4:	6800      	ldr	r0, [r0, #0]
 8004ea6:	f001 fa48 	bl	800633a <USB_WritePMA>
 8004eaa:	e3ee      	b.n	800568a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d177      	bne.n	8004fac <USB_EPStartXfer+0x650>
 8004ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004edc:	4413      	add	r3, r2
 8004ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	011a      	lsls	r2, r3, #4
 8004eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f0e:	d921      	bls.n	8004f54 <USB_EPStartXfer+0x5f8>
 8004f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <USB_EPStartXfer+0x5d4>
 8004f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	e056      	b.n	8005002 <USB_EPStartXfer+0x6a6>
 8004f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <USB_EPStartXfer+0x616>
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	e047      	b.n	8005002 <USB_EPStartXfer+0x6a6>
 8004f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <USB_EPStartXfer+0x636>
 8004f88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e02a      	b.n	8005002 <USB_EPStartXfer+0x6a6>
 8004fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	785b      	ldrb	r3, [r3, #1]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d122      	bne.n	8005002 <USB_EPStartXfer+0x6a6>
 8004fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fdc:	4413      	add	r3, r2
 8004fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	011a      	lsls	r2, r3, #4
 8004fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005000:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	891b      	ldrh	r3, [r3, #8]
 800500e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6959      	ldr	r1, [r3, #20]
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005022:	b29b      	uxth	r3, r3
 8005024:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005028:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800502c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005030:	6800      	ldr	r0, [r0, #0]
 8005032:	f001 f982 	bl	800633a <USB_WritePMA>
            ep->xfer_buff += len;
 8005036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005046:	441a      	add	r2, r3
 8005048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800504c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	429a      	cmp	r2, r3
 800506e:	d90f      	bls.n	8005090 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	621a      	str	r2, [r3, #32]
 800508e:	e00e      	b.n	80050ae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80050a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d177      	bne.n	80051ba <USB_EPStartXfer+0x85e>
 80050ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	4413      	add	r3, r2
 80050ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	011a      	lsls	r2, r3, #4
 80050fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fe:	4413      	add	r3, r2
 8005100:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005110:	b29a      	uxth	r2, r3
 8005112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511a:	2b3e      	cmp	r3, #62	@ 0x3e
 800511c:	d921      	bls.n	8005162 <USB_EPStartXfer+0x806>
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <USB_EPStartXfer+0x7e2>
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	3b01      	subs	r3, #1
 800513a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800513e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b29a      	uxth	r2, r3
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	b29b      	uxth	r3, r3
 800514a:	029b      	lsls	r3, r3, #10
 800514c:	b29b      	uxth	r3, r3
 800514e:	4313      	orrs	r3, r2
 8005150:	b29b      	uxth	r3, r3
 8005152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515a:	b29a      	uxth	r2, r3
 800515c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	e050      	b.n	8005204 <USB_EPStartXfer+0x8a8>
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <USB_EPStartXfer+0x824>
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005178:	b29a      	uxth	r2, r3
 800517a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e041      	b.n	8005204 <USB_EPStartXfer+0x8a8>
 8005180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <USB_EPStartXfer+0x844>
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	3301      	adds	r3, #1
 800519c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e024      	b.n	8005204 <USB_EPStartXfer+0x8a8>
 80051ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d11c      	bne.n	8005204 <USB_EPStartXfer+0x8a8>
 80051ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051de:	4413      	add	r3, r2
 80051e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	011a      	lsls	r2, r3, #4
 80051f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005202:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	895b      	ldrh	r3, [r3, #10]
 8005210:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6959      	ldr	r1, [r3, #20]
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	b29b      	uxth	r3, r3
 8005226:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800522a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800522e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005232:	6800      	ldr	r0, [r0, #0]
 8005234:	f001 f881 	bl	800633a <USB_WritePMA>
 8005238:	e227      	b.n	800568a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800524a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800526c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005270:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800529e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052c6:	4413      	add	r3, r2
 80052c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	011a      	lsls	r2, r3, #4
 80052d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052da:	4413      	add	r3, r2
 80052dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	891b      	ldrh	r3, [r3, #8]
 80052f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6959      	ldr	r1, [r3, #20]
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530c:	b29b      	uxth	r3, r3
 800530e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005312:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005316:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800531a:	6800      	ldr	r0, [r0, #0]
 800531c:	f001 f80d 	bl	800633a <USB_WritePMA>
 8005320:	e1b3      	b.n	800568a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80c6 	beq.w	80054f4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	673b      	str	r3, [r7, #112]	@ 0x70
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d177      	bne.n	8005474 <USB_EPStartXfer+0xb18>
 8005384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053a4:	4413      	add	r3, r2
 80053a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	011a      	lsls	r2, r3, #4
 80053b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053be:	667b      	str	r3, [r7, #100]	@ 0x64
 80053c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80053d6:	d921      	bls.n	800541c <USB_EPStartXfer+0xac0>
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80053e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <USB_EPStartXfer+0xa9c>
 80053ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80053f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005402:	b29b      	uxth	r3, r3
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	b29b      	uxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e050      	b.n	80054be <USB_EPStartXfer+0xb62>
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <USB_EPStartXfer+0xade>
 8005424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e041      	b.n	80054be <USB_EPStartXfer+0xb62>
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d004      	beq.n	800545a <USB_EPStartXfer+0xafe>
 8005450:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005454:	3301      	adds	r3, #1
 8005456:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800545a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29a      	uxth	r2, r3
 8005460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005464:	b29b      	uxth	r3, r3
 8005466:	029b      	lsls	r3, r3, #10
 8005468:	b29b      	uxth	r3, r3
 800546a:	4313      	orrs	r3, r2
 800546c:	b29a      	uxth	r2, r3
 800546e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e024      	b.n	80054be <USB_EPStartXfer+0xb62>
 8005474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	785b      	ldrb	r3, [r3, #1]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d11c      	bne.n	80054be <USB_EPStartXfer+0xb62>
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005498:	4413      	add	r3, r2
 800549a:	673b      	str	r3, [r7, #112]	@ 0x70
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	895b      	ldrh	r3, [r3, #10]
 80054ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6959      	ldr	r1, [r3, #20]
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054ec:	6800      	ldr	r0, [r0, #0]
 80054ee:	f000 ff24 	bl	800633a <USB_WritePMA>
 80054f2:	e0ca      	b.n	800568a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d177      	bne.n	80055f4 <USB_EPStartXfer+0xc98>
 8005504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005524:	4413      	add	r3, r2
 8005526:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005538:	4413      	add	r3, r2
 800553a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800553e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800554a:	b29a      	uxth	r2, r3
 800554c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005554:	2b3e      	cmp	r3, #62	@ 0x3e
 8005556:	d921      	bls.n	800559c <USB_EPStartXfer+0xc40>
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <USB_EPStartXfer+0xc1c>
 800556e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005572:	3b01      	subs	r3, #1
 8005574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	4313      	orrs	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005594:	b29a      	uxth	r2, r3
 8005596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e05c      	b.n	8005656 <USB_EPStartXfer+0xcfa>
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <USB_EPStartXfer+0xc5e>
 80055a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	e04d      	b.n	8005656 <USB_EPStartXfer+0xcfa>
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055be:	085b      	lsrs	r3, r3, #1
 80055c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <USB_EPStartXfer+0xc7e>
 80055d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80055d4:	3301      	adds	r3, #1
 80055d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29a      	uxth	r2, r3
 80055e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4313      	orrs	r3, r2
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e030      	b.n	8005656 <USB_EPStartXfer+0xcfa>
 80055f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d128      	bne.n	8005656 <USB_EPStartXfer+0xcfa>
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005628:	4413      	add	r3, r2
 800562a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800562e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	011a      	lsls	r2, r3, #4
 800563c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005640:	4413      	add	r3, r2
 8005642:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005646:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564e:	b29a      	uxth	r2, r3
 8005650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005654:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	891b      	ldrh	r3, [r3, #8]
 8005662:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6959      	ldr	r1, [r3, #20]
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005676:	b29b      	uxth	r3, r3
 8005678:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800567c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005680:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005684:	6800      	ldr	r0, [r0, #0]
 8005686:	f000 fe58 	bl	800633a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800568a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b0:	817b      	strh	r3, [r7, #10]
 80056b2:	897b      	ldrh	r3, [r7, #10]
 80056b4:	f083 0310 	eor.w	r3, r3, #16
 80056b8:	817b      	strh	r3, [r7, #10]
 80056ba:	897b      	ldrh	r3, [r7, #10]
 80056bc:	f083 0320 	eor.w	r3, r3, #32
 80056c0:	817b      	strh	r3, [r7, #10]
 80056c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	897b      	ldrh	r3, [r7, #10]
 80056de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	8013      	strh	r3, [r2, #0]
 80056f2:	f000 bcde 	b.w	80060b2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	7b1b      	ldrb	r3, [r3, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f040 80bb 	bne.w	800587e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d917      	bls.n	8005754 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005744:	1ad2      	subs	r2, r2, r3
 8005746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	619a      	str	r2, [r3, #24]
 8005752:	e00e      	b.n	8005772 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005796:	4413      	add	r3, r2
 8005798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800579c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80057d2:	d924      	bls.n	800581e <USB_EPStartXfer+0xec2>
 80057d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USB_EPStartXfer+0xe98>
 80057ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005800:	b29b      	uxth	r3, r3
 8005802:	029b      	lsls	r3, r3, #10
 8005804:	b29b      	uxth	r3, r3
 8005806:	4313      	orrs	r3, r2
 8005808:	b29b      	uxth	r3, r3
 800580a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005812:	b29a      	uxth	r2, r3
 8005814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	f000 bc10 	b.w	800603e <USB_EPStartXfer+0x16e2>
 800581e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <USB_EPStartXfer+0xee4>
 8005826:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e3fe      	b.n	800603e <USB_EPStartXfer+0x16e2>
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <USB_EPStartXfer+0xf04>
 8005856:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800585a:	3301      	adds	r3, #1
 800585c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29a      	uxth	r2, r3
 8005868:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800586c:	b29b      	uxth	r3, r3
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b29b      	uxth	r3, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e3df      	b.n	800603e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800587e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	78db      	ldrb	r3, [r3, #3]
 800588a:	2b02      	cmp	r3, #2
 800588c:	f040 8218 	bne.w	8005cc0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f040 809d 	bne.w	80059dc <USB_EPStartXfer+0x1080>
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058be:	b29b      	uxth	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058c6:	4413      	add	r3, r2
 80058c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	011a      	lsls	r2, r3, #4
 80058da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058de:	4413      	add	r3, r2
 80058e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b3e      	cmp	r3, #62	@ 0x3e
 800590a:	d92b      	bls.n	8005964 <USB_EPStartXfer+0x1008>
 800590c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800591e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <USB_EPStartXfer+0xfe0>
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005936:	3b01      	subs	r3, #1
 8005938:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800593c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29a      	uxth	r2, r3
 8005944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29b      	uxth	r3, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	b29b      	uxth	r3, r3
 8005952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595a:	b29a      	uxth	r2, r3
 800595c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e070      	b.n	8005a46 <USB_EPStartXfer+0x10ea>
 8005964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <USB_EPStartXfer+0x1032>
 8005974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005984:	b29a      	uxth	r2, r3
 8005986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e05b      	b.n	8005a46 <USB_EPStartXfer+0x10ea>
 800598e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <USB_EPStartXfer+0x1062>
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b8:	3301      	adds	r3, #1
 80059ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	029b      	lsls	r3, r3, #10
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4313      	orrs	r3, r2
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e034      	b.n	8005a46 <USB_EPStartXfer+0x10ea>
 80059dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d12c      	bne.n	8005a46 <USB_EPStartXfer+0x10ea>
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a10:	4413      	add	r3, r2
 8005a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 809d 	bne.w	8005ba0 <USB_EPStartXfer+0x1244>
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	011a      	lsls	r2, r3, #4
 8005a9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ace:	d92b      	bls.n	8005b28 <USB_EPStartXfer+0x11cc>
 8005ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <USB_EPStartXfer+0x11a4>
 8005af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005afa:	3b01      	subs	r3, #1
 8005afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	029b      	lsls	r3, r3, #10
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	4313      	orrs	r3, r2
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e069      	b.n	8005bfc <USB_EPStartXfer+0x12a0>
 8005b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10c      	bne.n	8005b52 <USB_EPStartXfer+0x11f6>
 8005b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e054      	b.n	8005bfc <USB_EPStartXfer+0x12a0>
 8005b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <USB_EPStartXfer+0x1226>
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	029b      	lsls	r3, r3, #10
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	e02d      	b.n	8005bfc <USB_EPStartXfer+0x12a0>
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d125      	bne.n	8005bfc <USB_EPStartXfer+0x12a0>
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005be4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bfa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8218 	beq.w	800603e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <USB_EPStartXfer+0x12ea>
 8005c3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f040 81f5 	bne.w	800603e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 81ee 	bne.w	800603e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	8013      	strh	r3, [r2, #0]
 8005cbe:	e1be      	b.n	800603e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	78db      	ldrb	r3, [r3, #3]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	f040 81b4 	bne.w	800603a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d917      	bls.n	8005d1e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	619a      	str	r2, [r3, #24]
 8005d1c:	e00e      	b.n	8005d3c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f040 8085 	bne.w	8005e58 <USB_EPStartXfer+0x14fc>
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d72:	4413      	add	r3, r2
 8005d74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	011a      	lsls	r2, r3, #4
 8005d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dae:	d923      	bls.n	8005df8 <USB_EPStartXfer+0x149c>
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <USB_EPStartXfer+0x1474>
 8005dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e060      	b.n	8005eba <USB_EPStartXfer+0x155e>
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <USB_EPStartXfer+0x14be>
 8005e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	e04f      	b.n	8005eba <USB_EPStartXfer+0x155e>
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <USB_EPStartXfer+0x14de>
 8005e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e34:	3301      	adds	r3, #1
 8005e36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e030      	b.n	8005eba <USB_EPStartXfer+0x155e>
 8005e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d128      	bne.n	8005eba <USB_EPStartXfer+0x155e>
 8005e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	011a      	lsls	r2, r3, #4
 8005ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eaa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 8085 	bne.w	8005fe4 <USB_EPStartXfer+0x1688>
 8005eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005efe:	4413      	add	r3, r2
 8005f00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	011a      	lsls	r2, r3, #4
 8005f12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005f16:	4413      	add	r3, r2
 8005f18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f3a:	d923      	bls.n	8005f84 <USB_EPStartXfer+0x1628>
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <USB_EPStartXfer+0x1600>
 8005f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f56:	3b01      	subs	r3, #1
 8005f58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	029b      	lsls	r3, r3, #10
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e05c      	b.n	800603e <USB_EPStartXfer+0x16e2>
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10c      	bne.n	8005fa6 <USB_EPStartXfer+0x164a>
 8005f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	e04b      	b.n	800603e <USB_EPStartXfer+0x16e2>
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <USB_EPStartXfer+0x166a>
 8005fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	029b      	lsls	r3, r3, #10
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e02c      	b.n	800603e <USB_EPStartXfer+0x16e2>
 8005fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d124      	bne.n	800603e <USB_EPStartXfer+0x16e2>
 8005ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800600a:	4413      	add	r3, r2
 800600c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	011a      	lsls	r2, r3, #4
 800601e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006022:	4413      	add	r3, r2
 8006024:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006030:	b29a      	uxth	r2, r3
 8006032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e001      	b.n	800603e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e03a      	b.n	80060b4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800603e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006064:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006068:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800606c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006070:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006074:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006078:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800607c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d020      	beq.n	8006112 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e6:	81bb      	strh	r3, [r7, #12]
 80060e8:	89bb      	ldrh	r3, [r7, #12]
 80060ea:	f083 0310 	eor.w	r3, r3, #16
 80060ee:	81bb      	strh	r3, [r7, #12]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	89bb      	ldrh	r3, [r7, #12]
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
 8006110:	e01f      	b.n	8006152 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006128:	81fb      	strh	r3, [r7, #14]
 800612a:	89fb      	ldrh	r3, [r7, #14]
 800612c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006130:	81fb      	strh	r3, [r7, #14]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	441a      	add	r2, r3
 800613c:	89fb      	ldrh	r3, [r7, #14]
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800614a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr

0800615e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	7b1b      	ldrb	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 809d 	bne.w	80062ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d04c      	beq.n	8006214 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	823b      	strh	r3, [r7, #16]
 8006188:	8a3b      	ldrh	r3, [r7, #16]
 800618a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01b      	beq.n	80061ca <USB_EPClearStall+0x6c>
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a8:	81fb      	strh	r3, [r7, #14]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	441a      	add	r2, r3
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	78db      	ldrb	r3, [r3, #3]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d06c      	beq.n	80062ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e8:	81bb      	strh	r3, [r7, #12]
 80061ea:	89bb      	ldrh	r3, [r7, #12]
 80061ec:	f083 0320 	eor.w	r3, r3, #32
 80061f0:	81bb      	strh	r3, [r7, #12]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	89bb      	ldrh	r3, [r7, #12]
 80061fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006202:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]
 8006212:	e04b      	b.n	80062ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	82fb      	strh	r3, [r7, #22]
 8006222:	8afb      	ldrh	r3, [r7, #22]
 8006224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01b      	beq.n	8006264 <USB_EPClearStall+0x106>
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	b29b      	uxth	r3, r3
 800623a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	82bb      	strh	r3, [r7, #20]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	441a      	add	r2, r3
 800624e:	8abb      	ldrh	r3, [r7, #20]
 8006250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006258:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800625c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006260:	b29b      	uxth	r3, r3
 8006262:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627a:	827b      	strh	r3, [r7, #18]
 800627c:	8a7b      	ldrh	r3, [r7, #18]
 800627e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006282:	827b      	strh	r3, [r7, #18]
 8006284:	8a7b      	ldrh	r3, [r7, #18]
 8006286:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800628a:	827b      	strh	r3, [r7, #18]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	8a7b      	ldrh	r3, [r7, #18]
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2280      	movs	r2, #128	@ 0x80
 80062ce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr

080062f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006314:	b29b      	uxth	r3, r3
 8006316:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006318:	68fb      	ldr	r3, [r7, #12]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr

0800633a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800633a:	b480      	push	{r7}
 800633c:	b08b      	sub	sp, #44	@ 0x2c
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	4611      	mov	r1, r2
 8006346:	461a      	mov	r2, r3
 8006348:	460b      	mov	r3, r1
 800634a:	80fb      	strh	r3, [r7, #6]
 800634c:	4613      	mov	r3, r2
 800634e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006350:	88bb      	ldrh	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	005a      	lsls	r2, r3, #1
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800636c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
 8006372:	e01f      	b.n	80063b4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	3301      	adds	r3, #1
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b21b      	sxth	r3, r3
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	b21a      	sxth	r2, r3
 8006386:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800638a:	4313      	orrs	r3, r2
 800638c:	b21b      	sxth	r3, r3
 800638e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	8a7a      	ldrh	r2, [r7, #18]
 8006394:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	3302      	adds	r3, #2
 800639a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	3302      	adds	r3, #2
 80063a0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3301      	adds	r3, #1
 80063a6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	3b01      	subs	r3, #1
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1dc      	bne.n	8006374 <USB_WritePMA+0x3a>
  }
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	372c      	adds	r7, #44	@ 0x2c
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b08b      	sub	sp, #44	@ 0x2c
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	60b9      	str	r1, [r7, #8]
 80063d0:	4611      	mov	r1, r2
 80063d2:	461a      	mov	r2, r3
 80063d4:	460b      	mov	r3, r1
 80063d6:	80fb      	strh	r3, [r7, #6]
 80063d8:	4613      	mov	r3, r2
 80063da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80063dc:	88bb      	ldrh	r3, [r7, #4]
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	005a      	lsls	r2, r3, #1
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fe:	e01b      	b.n	8006438 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	3302      	adds	r3, #2
 800640c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	b2da      	uxtb	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	3301      	adds	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b2da      	uxtb	r2, r3
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	3302      	adds	r3, #2
 8006430:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	3b01      	subs	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e0      	bne.n	8006400 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800643e:	88bb      	ldrh	r3, [r7, #4]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	701a      	strb	r2, [r3, #0]
  }
}
 800645a:	bf00      	nop
 800645c:	372c      	adds	r7, #44	@ 0x2c
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr

08006464 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7c1b      	ldrb	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d115      	bne.n	80064a8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800647c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006480:	2202      	movs	r2, #2
 8006482:	2181      	movs	r1, #129	@ 0x81
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fe48 	bl	800811a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006494:	2202      	movs	r2, #2
 8006496:	2101      	movs	r1, #1
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fe3e 	bl	800811a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80064a6:	e012      	b.n	80064ce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064a8:	2340      	movs	r3, #64	@ 0x40
 80064aa:	2202      	movs	r2, #2
 80064ac:	2181      	movs	r1, #129	@ 0x81
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fe33 	bl	800811a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064ba:	2340      	movs	r3, #64	@ 0x40
 80064bc:	2202      	movs	r2, #2
 80064be:	2101      	movs	r1, #1
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fe2a 	bl	800811a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064ce:	2308      	movs	r3, #8
 80064d0:	2203      	movs	r2, #3
 80064d2:	2182      	movs	r1, #130	@ 0x82
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fe20 	bl	800811a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80064e4:	f001 ff40 	bl	8008368 <USBD_static_malloc>
 80064e8:	4602      	mov	r2, r0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
 80064fe:	e026      	b.n	800654e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006506:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	7c1b      	ldrb	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006534:	2101      	movs	r1, #1
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fedf 	bl	80082fa <USBD_LL_PrepareReceive>
 800653c:	e007      	b.n	800654e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006544:	2340      	movs	r3, #64	@ 0x40
 8006546:	2101      	movs	r1, #1
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fed6 	bl	80082fa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006568:	2181      	movs	r1, #129	@ 0x81
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fdfb 	bl	8008166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006576:	2101      	movs	r1, #1
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fdf4 	bl	8008166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006586:	2182      	movs	r1, #130	@ 0x82
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fdec 	bl	8008166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fee6 	bl	8008380 <USBD_static_free>
    pdev->pClassData = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d039      	beq.n	8006664 <USBD_CDC_Setup+0x9e>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d17f      	bne.n	80066f4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	88db      	ldrh	r3, [r3, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d029      	beq.n	8006650 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b25b      	sxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	da11      	bge.n	800662a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006612:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	88d2      	ldrh	r2, [r2, #6]
 8006618:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800661a:	6939      	ldr	r1, [r7, #16]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	88db      	ldrh	r3, [r3, #6]
 8006620:	461a      	mov	r2, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 f9d6 	bl	80079d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006628:	e06b      	b.n	8006702 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	785a      	ldrb	r2, [r3, #1]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	88db      	ldrh	r3, [r3, #6]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006640:	6939      	ldr	r1, [r7, #16]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	88db      	ldrh	r3, [r3, #6]
 8006646:	461a      	mov	r2, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 f9f1 	bl	8007a30 <USBD_CtlPrepareRx>
      break;
 800664e:	e058      	b.n	8006702 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	7850      	ldrb	r0, [r2, #1]
 800665c:	2200      	movs	r2, #0
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	4798      	blx	r3
      break;
 8006662:	e04e      	b.n	8006702 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b0b      	cmp	r3, #11
 800666a:	d02e      	beq.n	80066ca <USBD_CDC_Setup+0x104>
 800666c:	2b0b      	cmp	r3, #11
 800666e:	dc38      	bgt.n	80066e2 <USBD_CDC_Setup+0x11c>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <USBD_CDC_Setup+0xb4>
 8006674:	2b0a      	cmp	r3, #10
 8006676:	d014      	beq.n	80066a2 <USBD_CDC_Setup+0xdc>
 8006678:	e033      	b.n	80066e2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006680:	2b03      	cmp	r3, #3
 8006682:	d107      	bne.n	8006694 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006684:	f107 030c 	add.w	r3, r7, #12
 8006688:	2202      	movs	r2, #2
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f9a1 	bl	80079d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006692:	e02e      	b.n	80066f2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 f932 	bl	8007900 <USBD_CtlError>
            ret = USBD_FAIL;
 800669c:	2302      	movs	r3, #2
 800669e:	75fb      	strb	r3, [r7, #23]
          break;
 80066a0:	e027      	b.n	80066f2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d107      	bne.n	80066bc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80066ac:	f107 030f 	add.w	r3, r7, #15
 80066b0:	2201      	movs	r2, #1
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 f98d 	bl	80079d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066ba:	e01a      	b.n	80066f2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 f91e 	bl	8007900 <USBD_CtlError>
            ret = USBD_FAIL;
 80066c4:	2302      	movs	r3, #2
 80066c6:	75fb      	strb	r3, [r7, #23]
          break;
 80066c8:	e013      	b.n	80066f2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d00d      	beq.n	80066f0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 f912 	bl	8007900 <USBD_CtlError>
            ret = USBD_FAIL;
 80066dc:	2302      	movs	r3, #2
 80066de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066e0:	e006      	b.n	80066f0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f90b 	bl	8007900 <USBD_CtlError>
          ret = USBD_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	75fb      	strb	r3, [r7, #23]
          break;
 80066ee:	e000      	b.n	80066f2 <USBD_CDC_Setup+0x12c>
          break;
 80066f0:	bf00      	nop
      }
      break;
 80066f2:	e006      	b.n	8006702 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 f902 	bl	8007900 <USBD_CtlError>
      ret = USBD_FAIL;
 80066fc:	2302      	movs	r3, #2
 80066fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006700:	bf00      	nop
  }

  return ret;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800671e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006726:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d03a      	beq.n	80067a8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	331c      	adds	r3, #28
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d029      	beq.n	800679c <USBD_CDC_DataIn+0x90>
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	331c      	adds	r3, #28
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	78f9      	ldrb	r1, [r7, #3]
 800675c:	68b8      	ldr	r0, [r7, #8]
 800675e:	460b      	mov	r3, r1
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4403      	add	r3, r0
 8006768:	3320      	adds	r3, #32
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d110      	bne.n	800679c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	331c      	adds	r3, #28
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800678e:	78f9      	ldrb	r1, [r7, #3]
 8006790:	2300      	movs	r3, #0
 8006792:	2200      	movs	r2, #0
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fd8d 	bl	80082b4 <USBD_LL_Transmit>
 800679a:	e003      	b.n	80067a4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fdb8 	bl	8008340 <USBD_LL_GetRxDataSize>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80067f6:	4611      	mov	r1, r2
 80067f8:	4798      	blx	r3

    return USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006816:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800681e:	2b00      	cmp	r3, #0
 8006820:	d014      	beq.n	800684c <USBD_CDC_EP0_RxReady+0x44>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006828:	2bff      	cmp	r3, #255	@ 0xff
 800682a:	d00f      	beq.n	800684c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800683a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006842:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	22ff      	movs	r2, #255	@ 0xff
 8006848:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2243      	movs	r2, #67	@ 0x43
 8006864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006866:	4b03      	ldr	r3, [pc, #12]	@ (8006874 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20000094 	.word	0x20000094

08006878 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2243      	movs	r2, #67	@ 0x43
 8006884:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006886:	4b03      	ldr	r3, [pc, #12]	@ (8006894 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000050 	.word	0x20000050

08006898 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2243      	movs	r2, #67	@ 0x43
 80068a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80068a6:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	200000d8 	.word	0x200000d8

080068b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	220a      	movs	r2, #10
 80068c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80068c6:	4b03      	ldr	r3, [pc, #12]	@ (80068d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	2000000c 	.word	0x2000000c

080068d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80068e2:	2302      	movs	r3, #2
 80068e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr

08006904 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006918:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr

08006936 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006936:	b480      	push	{r7}
 8006938:	b085      	sub	sp, #20
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006946:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d017      	beq.n	80069a6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7c1b      	ldrb	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006984:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006988:	2101      	movs	r1, #1
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fcb5 	bl	80082fa <USBD_LL_PrepareReceive>
 8006990:	e007      	b.n	80069a2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006998:	2340      	movs	r3, #64	@ 0x40
 800699a:	2101      	movs	r1, #1
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fcac 	bl	80082fa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	e000      	b.n	80069a8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80069a6:	2302      	movs	r3, #2
  }
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	e01a      	b.n	80069fe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	79fa      	ldrb	r2, [r7, #7]
 80069f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f001 fb1a 	bl	8008030 <USBD_LL_Init>

  return USBD_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d006      	beq.n	8006a28 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
 8006a26:	e001      	b.n	8006a2c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fb4f 	bl	80080e4 <USBD_LL_Start>

  return USBD_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a70:	2302      	movs	r3, #2
 8006a72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	78fa      	ldrb	r2, [r7, #3]
 8006a88:	4611      	mov	r1, r2
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b082      	sub	sp, #8
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3

  return USBD_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fed7 	bl	800788e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d016      	beq.n	8006b32 <USBD_LL_SetupStage+0x6a>
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d81c      	bhi.n	8006b42 <USBD_LL_SetupStage+0x7a>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <USBD_LL_SetupStage+0x4a>
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d008      	beq.n	8006b22 <USBD_LL_SetupStage+0x5a>
 8006b10:	e017      	b.n	8006b42 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9ca 	bl	8006eb4 <USBD_StdDevReq>
      break;
 8006b20:	e01a      	b.n	8006b58 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa2c 	bl	8006f88 <USBD_StdItfReq>
      break;
 8006b30:	e012      	b.n	8006b58 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa6c 	bl	8007018 <USBD_StdEPReq>
      break;
 8006b40:	e00a      	b.n	8006b58 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006b48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fb27 	bl	80081a4 <USBD_LL_StallEP>
      break;
 8006b56:	bf00      	nop
  }

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d14b      	bne.n	8006c0e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b7c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d134      	bne.n	8006bf2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d919      	bls.n	8006bc8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d203      	bcs.n	8006bb6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	e002      	b.n	8006bbc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 ff53 	bl	8007a6c <USBD_CtlContinueRx>
 8006bc6:	e038      	b.n	8006c3a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d105      	bne.n	8006bea <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 ff50 	bl	8007a90 <USBD_CtlSendStatus>
 8006bf0:	e023      	b.n	8006c3a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d11e      	bne.n	8006c3a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f001 facc 	bl	80081a4 <USBD_LL_StallEP>
 8006c0c:	e015      	b.n	8006c3a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d108      	bne.n	8006c36 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	7afa      	ldrb	r2, [r7, #11]
 8006c2e:	4611      	mov	r1, r2
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	4798      	blx	r3
 8006c34:	e001      	b.n	8006c3a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c36:	2302      	movs	r3, #2
 8006c38:	e000      	b.n	8006c3c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c52:	7afb      	ldrb	r3, [r7, #11]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d17f      	bne.n	8006d58 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d15c      	bne.n	8006d22 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d915      	bls.n	8006ca0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	1ad2      	subs	r2, r2, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 febd 	bl	8007a0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c92:	2300      	movs	r3, #0
 8006c94:	2200      	movs	r2, #0
 8006c96:	2100      	movs	r1, #0
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 fb2e 	bl	80082fa <USBD_LL_PrepareReceive>
 8006c9e:	e04e      	b.n	8006d3e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	6912      	ldr	r2, [r2, #16]
 8006ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cac:	fb01 f202 	mul.w	r2, r1, r2
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11c      	bne.n	8006cf0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d316      	bcc.n	8006cf0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d20f      	bcs.n	8006cf0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fe99 	bl	8007a0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f001 fb06 	bl	80082fa <USBD_LL_PrepareReceive>
 8006cee:	e026      	b.n	8006d3e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d105      	bne.n	8006d12 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d12:	2180      	movs	r1, #128	@ 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 fa45 	bl	80081a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fecb 	bl	8007ab6 <USBD_CtlReceiveStatus>
 8006d20:	e00d      	b.n	8006d3e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d004      	beq.n	8006d36 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d103      	bne.n	8006d3e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d36:	2180      	movs	r1, #128	@ 0x80
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f001 fa33 	bl	80081a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d11d      	bne.n	8006d84 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff fe81 	bl	8006a50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d56:	e015      	b.n	8006d84 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d108      	bne.n	8006d80 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	7afa      	ldrb	r2, [r7, #11]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	4798      	blx	r3
 8006d7e:	e001      	b.n	8006d84 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	e000      	b.n	8006d86 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d96:	2340      	movs	r3, #64	@ 0x40
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 f9bc 	bl	800811a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2240      	movs	r2, #64	@ 0x40
 8006dae:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006db2:	2340      	movs	r3, #64	@ 0x40
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	@ 0x80
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f9ae 	bl	800811a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2240      	movs	r2, #64	@ 0x40
 8006dc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6852      	ldr	r2, [r2, #4]
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	4611      	mov	r1, r2
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
  }

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr

08006e2e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2204      	movs	r2, #4
 8006e46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b083      	sub	sp, #12
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d105      	bne.n	8006e74 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d10b      	bne.n	8006eaa <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d005      	beq.n	8006eda <USBD_StdDevReq+0x26>
 8006ece:	2b40      	cmp	r3, #64	@ 0x40
 8006ed0:	d84f      	bhi.n	8006f72 <USBD_StdDevReq+0xbe>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <USBD_StdDevReq+0x36>
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d14b      	bne.n	8006f72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
      break;
 8006ee8:	e048      	b.n	8006f7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d839      	bhi.n	8006f66 <USBD_StdDevReq+0xb2>
 8006ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <USBD_StdDevReq+0x44>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f49 	.word	0x08006f49
 8006efc:	08006f5d 	.word	0x08006f5d
 8006f00:	08006f67 	.word	0x08006f67
 8006f04:	08006f53 	.word	0x08006f53
 8006f08:	08006f67 	.word	0x08006f67
 8006f0c:	08006f2b 	.word	0x08006f2b
 8006f10:	08006f21 	.word	0x08006f21
 8006f14:	08006f67 	.word	0x08006f67
 8006f18:	08006f3f 	.word	0x08006f3f
 8006f1c:	08006f35 	.word	0x08006f35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9dc 	bl	80072e0 <USBD_GetDescriptor>
          break;
 8006f28:	e022      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb3f 	bl	80075b0 <USBD_SetAddress>
          break;
 8006f32:	e01d      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb7e 	bl	8007638 <USBD_SetConfig>
          break;
 8006f3c:	e018      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc07 	bl	8007754 <USBD_GetConfig>
          break;
 8006f46:	e013      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc37 	bl	80077be <USBD_GetStatus>
          break;
 8006f50:	e00e      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fc65 	bl	8007824 <USBD_SetFeature>
          break;
 8006f5a:	e009      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fc74 	bl	800784c <USBD_ClrFeature>
          break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fcc9 	bl	8007900 <USBD_CtlError>
          break;
 8006f6e:	bf00      	nop
      }
      break;
 8006f70:	e004      	b.n	8006f7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fcc3 	bl	8007900 <USBD_CtlError>
      break;
 8006f7a:	bf00      	nop
  }

  return ret;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop

08006f88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f9e:	2b40      	cmp	r3, #64	@ 0x40
 8006fa0:	d005      	beq.n	8006fae <USBD_StdItfReq+0x26>
 8006fa2:	2b40      	cmp	r3, #64	@ 0x40
 8006fa4:	d82e      	bhi.n	8007004 <USBD_StdItfReq+0x7c>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <USBD_StdItfReq+0x26>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d12a      	bne.n	8007004 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d81d      	bhi.n	8006ff6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	889b      	ldrh	r3, [r3, #4]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d813      	bhi.n	8006fec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88db      	ldrh	r3, [r3, #6]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d110      	bne.n	8007000 <USBD_StdItfReq+0x78>
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fd53 	bl	8007a90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fea:	e009      	b.n	8007000 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc86 	bl	8007900 <USBD_CtlError>
          break;
 8006ff4:	e004      	b.n	8007000 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fc81 	bl	8007900 <USBD_CtlError>
          break;
 8006ffe:	e000      	b.n	8007002 <USBD_StdItfReq+0x7a>
          break;
 8007000:	bf00      	nop
      }
      break;
 8007002:	e004      	b.n	800700e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fc7a 	bl	8007900 <USBD_CtlError>
      break;
 800700c:	bf00      	nop
  }

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	889b      	ldrh	r3, [r3, #4]
 800702a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007034:	2b40      	cmp	r3, #64	@ 0x40
 8007036:	d007      	beq.n	8007048 <USBD_StdEPReq+0x30>
 8007038:	2b40      	cmp	r3, #64	@ 0x40
 800703a:	f200 8146 	bhi.w	80072ca <USBD_StdEPReq+0x2b2>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <USBD_StdEPReq+0x40>
 8007042:	2b20      	cmp	r3, #32
 8007044:	f040 8141 	bne.w	80072ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
      break;
 8007056:	e13d      	b.n	80072d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007060:	2b20      	cmp	r3, #32
 8007062:	d10a      	bne.n	800707a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	e12d      	b.n	80072d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b03      	cmp	r3, #3
 8007080:	d007      	beq.n	8007092 <USBD_StdEPReq+0x7a>
 8007082:	2b03      	cmp	r3, #3
 8007084:	f300 811b 	bgt.w	80072be <USBD_StdEPReq+0x2a6>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d072      	beq.n	8007172 <USBD_StdEPReq+0x15a>
 800708c:	2b01      	cmp	r3, #1
 800708e:	d03a      	beq.n	8007106 <USBD_StdEPReq+0xee>
 8007090:	e115      	b.n	80072be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007098:	2b02      	cmp	r3, #2
 800709a:	d002      	beq.n	80070a2 <USBD_StdEPReq+0x8a>
 800709c:	2b03      	cmp	r3, #3
 800709e:	d015      	beq.n	80070cc <USBD_StdEPReq+0xb4>
 80070a0:	e02b      	b.n	80070fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00c      	beq.n	80070c2 <USBD_StdEPReq+0xaa>
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b80      	cmp	r3, #128	@ 0x80
 80070ac:	d009      	beq.n	80070c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 f876 	bl	80081a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070b8:	2180      	movs	r1, #128	@ 0x80
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 f872 	bl	80081a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070c0:	e020      	b.n	8007104 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc1b 	bl	8007900 <USBD_CtlError>
              break;
 80070ca:	e01b      	b.n	8007104 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	885b      	ldrh	r3, [r3, #2]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10e      	bne.n	80070f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <USBD_StdEPReq+0xda>
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b80      	cmp	r3, #128	@ 0x80
 80070de:	d008      	beq.n	80070f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	88db      	ldrh	r3, [r3, #6]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f859 	bl	80081a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fccc 	bl	8007a90 <USBD_CtlSendStatus>

              break;
 80070f8:	e004      	b.n	8007104 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fbff 	bl	8007900 <USBD_CtlError>
              break;
 8007102:	bf00      	nop
          }
          break;
 8007104:	e0e0      	b.n	80072c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800710c:	2b02      	cmp	r3, #2
 800710e:	d002      	beq.n	8007116 <USBD_StdEPReq+0xfe>
 8007110:	2b03      	cmp	r3, #3
 8007112:	d015      	beq.n	8007140 <USBD_StdEPReq+0x128>
 8007114:	e026      	b.n	8007164 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00c      	beq.n	8007136 <USBD_StdEPReq+0x11e>
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b80      	cmp	r3, #128	@ 0x80
 8007120:	d009      	beq.n	8007136 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 f83c 	bl	80081a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800712c:	2180      	movs	r1, #128	@ 0x80
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f838 	bl	80081a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007134:	e01c      	b.n	8007170 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fbe1 	bl	8007900 <USBD_CtlError>
              break;
 800713e:	e017      	b.n	8007170 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	885b      	ldrh	r3, [r3, #2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d112      	bne.n	800716e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f843 	bl	80081e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc97 	bl	8007a90 <USBD_CtlSendStatus>
              }
              break;
 8007162:	e004      	b.n	800716e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fbca 	bl	8007900 <USBD_CtlError>
              break;
 800716c:	e000      	b.n	8007170 <USBD_StdEPReq+0x158>
              break;
 800716e:	bf00      	nop
          }
          break;
 8007170:	e0aa      	b.n	80072c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007178:	2b02      	cmp	r3, #2
 800717a:	d002      	beq.n	8007182 <USBD_StdEPReq+0x16a>
 800717c:	2b03      	cmp	r3, #3
 800717e:	d032      	beq.n	80071e6 <USBD_StdEPReq+0x1ce>
 8007180:	e097      	b.n	80072b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d007      	beq.n	8007198 <USBD_StdEPReq+0x180>
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b80      	cmp	r3, #128	@ 0x80
 800718c:	d004      	beq.n	8007198 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fbb5 	bl	8007900 <USBD_CtlError>
                break;
 8007196:	e091      	b.n	80072bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	da0b      	bge.n	80071b8 <USBD_StdEPReq+0x1a0>
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	3310      	adds	r3, #16
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	3304      	adds	r3, #4
 80071b6:	e00b      	b.n	80071d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	3304      	adds	r3, #4
 80071d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2202      	movs	r2, #2
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fbf8 	bl	80079d4 <USBD_CtlSendData>
              break;
 80071e4:	e06a      	b.n	80072bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	da11      	bge.n	8007212 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	440b      	add	r3, r1
 8007200:	3318      	adds	r3, #24
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d117      	bne.n	8007238 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fb78 	bl	8007900 <USBD_CtlError>
                  break;
 8007210:	e054      	b.n	80072bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	f003 020f 	and.w	r2, r3, #15
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb65 	bl	8007900 <USBD_CtlError>
                  break;
 8007236:	e041      	b.n	80072bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800723c:	2b00      	cmp	r3, #0
 800723e:	da0b      	bge.n	8007258 <USBD_StdEPReq+0x240>
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	3310      	adds	r3, #16
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	4413      	add	r3, r2
 8007254:	3304      	adds	r3, #4
 8007256:	e00b      	b.n	8007270 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4413      	add	r3, r2
 800726e:	3304      	adds	r3, #4
 8007270:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <USBD_StdEPReq+0x266>
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b80      	cmp	r3, #128	@ 0x80
 800727c:	d103      	bne.n	8007286 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e00e      	b.n	80072a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 ffc8 	bl	8008220 <USBD_LL_IsStallEP>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e002      	b.n	80072a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2202      	movs	r2, #2
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fb92 	bl	80079d4 <USBD_CtlSendData>
              break;
 80072b0:	e004      	b.n	80072bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fb23 	bl	8007900 <USBD_CtlError>
              break;
 80072ba:	bf00      	nop
          }
          break;
 80072bc:	e004      	b.n	80072c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fb1d 	bl	8007900 <USBD_CtlError>
          break;
 80072c6:	bf00      	nop
      }
      break;
 80072c8:	e004      	b.n	80072d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb17 	bl	8007900 <USBD_CtlError>
      break;
 80072d2:	bf00      	nop
  }

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	885b      	ldrh	r3, [r3, #2]
 80072fa:	0a1b      	lsrs	r3, r3, #8
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	2b06      	cmp	r3, #6
 8007302:	f200 8128 	bhi.w	8007556 <USBD_GetDescriptor+0x276>
 8007306:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <USBD_GetDescriptor+0x2c>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007329 	.word	0x08007329
 8007310:	08007341 	.word	0x08007341
 8007314:	08007381 	.word	0x08007381
 8007318:	08007557 	.word	0x08007557
 800731c:	08007557 	.word	0x08007557
 8007320:	080074f7 	.word	0x080074f7
 8007324:	08007523 	.word	0x08007523
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	7c12      	ldrb	r2, [r2, #16]
 8007334:	f107 0108 	add.w	r1, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
      break;
 800733e:	e112      	b.n	8007566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7c1b      	ldrb	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10d      	bne.n	8007364 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007362:	e100      	b.n	8007566 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	f107 0208 	add.w	r2, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	2202      	movs	r2, #2
 800737c:	701a      	strb	r2, [r3, #0]
      break;
 800737e:	e0f2      	b.n	8007566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	885b      	ldrh	r3, [r3, #2]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b05      	cmp	r3, #5
 8007388:	f200 80ac 	bhi.w	80074e4 <USBD_GetDescriptor+0x204>
 800738c:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <USBD_GetDescriptor+0xb4>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073ad 	.word	0x080073ad
 8007398:	080073e1 	.word	0x080073e1
 800739c:	08007415 	.word	0x08007415
 80073a0:	08007449 	.word	0x08007449
 80073a4:	0800747d 	.word	0x0800747d
 80073a8:	080074b1 	.word	0x080074b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	7c12      	ldrb	r2, [r2, #16]
 80073c4:	f107 0108 	add.w	r1, r7, #8
 80073c8:	4610      	mov	r0, r2
 80073ca:	4798      	blx	r3
 80073cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ce:	e091      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa94 	bl	8007900 <USBD_CtlError>
            err++;
 80073d8:	7afb      	ldrb	r3, [r7, #11]
 80073da:	3301      	adds	r3, #1
 80073dc:	72fb      	strb	r3, [r7, #11]
          break;
 80073de:	e089      	b.n	80074f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00b      	beq.n	8007404 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	7c12      	ldrb	r2, [r2, #16]
 80073f8:	f107 0108 	add.w	r1, r7, #8
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
 8007400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007402:	e077      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa7a 	bl	8007900 <USBD_CtlError>
            err++;
 800740c:	7afb      	ldrb	r3, [r7, #11]
 800740e:	3301      	adds	r3, #1
 8007410:	72fb      	strb	r3, [r7, #11]
          break;
 8007412:	e06f      	b.n	80074f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	7c12      	ldrb	r2, [r2, #16]
 800742c:	f107 0108 	add.w	r1, r7, #8
 8007430:	4610      	mov	r0, r2
 8007432:	4798      	blx	r3
 8007434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007436:	e05d      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa60 	bl	8007900 <USBD_CtlError>
            err++;
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	3301      	adds	r3, #1
 8007444:	72fb      	strb	r3, [r7, #11]
          break;
 8007446:	e055      	b.n	80074f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7c12      	ldrb	r2, [r2, #16]
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800746a:	e043      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fa46 	bl	8007900 <USBD_CtlError>
            err++;
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	3301      	adds	r3, #1
 8007478:	72fb      	strb	r3, [r7, #11]
          break;
 800747a:	e03b      	b.n	80074f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7c12      	ldrb	r2, [r2, #16]
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800749e:	e029      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fa2c 	bl	8007900 <USBD_CtlError>
            err++;
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	3301      	adds	r3, #1
 80074ac:	72fb      	strb	r3, [r7, #11]
          break;
 80074ae:	e021      	b.n	80074f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	7c12      	ldrb	r2, [r2, #16]
 80074c8:	f107 0108 	add.w	r1, r7, #8
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d2:	e00f      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa12 	bl	8007900 <USBD_CtlError>
            err++;
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	3301      	adds	r3, #1
 80074e0:	72fb      	strb	r3, [r7, #11]
          break;
 80074e2:	e007      	b.n	80074f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa0a 	bl	8007900 <USBD_CtlError>
          err++;
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	3301      	adds	r3, #1
 80074f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074f2:	e038      	b.n	8007566 <USBD_GetDescriptor+0x286>
 80074f4:	e037      	b.n	8007566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7c1b      	ldrb	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007506:	f107 0208 	add.w	r2, r7, #8
 800750a:	4610      	mov	r0, r2
 800750c:	4798      	blx	r3
 800750e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007510:	e029      	b.n	8007566 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f9f3 	bl	8007900 <USBD_CtlError>
        err++;
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	3301      	adds	r3, #1
 800751e:	72fb      	strb	r3, [r7, #11]
      break;
 8007520:	e021      	b.n	8007566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7c1b      	ldrb	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	f107 0208 	add.w	r2, r7, #8
 8007536:	4610      	mov	r0, r2
 8007538:	4798      	blx	r3
 800753a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	2207      	movs	r2, #7
 8007542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007544:	e00f      	b.n	8007566 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9d9 	bl	8007900 <USBD_CtlError>
        err++;
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	3301      	adds	r3, #1
 8007552:	72fb      	strb	r3, [r7, #11]
      break;
 8007554:	e007      	b.n	8007566 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f9d1 	bl	8007900 <USBD_CtlError>
      err++;
 800755e:	7afb      	ldrb	r3, [r7, #11]
 8007560:	3301      	adds	r3, #1
 8007562:	72fb      	strb	r3, [r7, #11]
      break;
 8007564:	bf00      	nop
  }

  if (err != 0U)
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d11c      	bne.n	80075a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800756c:	893b      	ldrh	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d011      	beq.n	8007596 <USBD_GetDescriptor+0x2b6>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00d      	beq.n	8007596 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88da      	ldrh	r2, [r3, #6]
 800757e:	893b      	ldrh	r3, [r7, #8]
 8007580:	4293      	cmp	r3, r2
 8007582:	bf28      	it	cs
 8007584:	4613      	movcs	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800758a:	893b      	ldrh	r3, [r7, #8]
 800758c:	461a      	mov	r2, r3
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fa1f 	bl	80079d4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa76 	bl	8007a90 <USBD_CtlSendStatus>
 80075a4:	e000      	b.n	80075a8 <USBD_GetDescriptor+0x2c8>
    return;
 80075a6:	bf00      	nop
    }
  }
}
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop

080075b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	889b      	ldrh	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d130      	bne.n	8007624 <USBD_SetAddress+0x74>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	88db      	ldrh	r3, [r3, #6]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12c      	bne.n	8007624 <USBD_SetAddress+0x74>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	885b      	ldrh	r3, [r3, #2]
 80075ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80075d0:	d828      	bhi.n	8007624 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	885b      	ldrh	r3, [r3, #2]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d104      	bne.n	80075f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f988 	bl	8007900 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f0:	e01d      	b.n	800762e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	7bfa      	ldrb	r2, [r7, #15]
 80075f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fe39 	bl	8008276 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fa43 	bl	8007a90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007618:	e009      	b.n	800762e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	e004      	b.n	800762e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f96a 	bl	8007900 <USBD_CtlError>
  }
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	885b      	ldrh	r3, [r3, #2]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	4b41      	ldr	r3, [pc, #260]	@ (8007750 <USBD_SetConfig+0x118>)
 800764a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800764c:	4b40      	ldr	r3, [pc, #256]	@ (8007750 <USBD_SetConfig+0x118>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d904      	bls.n	800765e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f952 	bl	8007900 <USBD_CtlError>
 800765c:	e075      	b.n	800774a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007664:	2b02      	cmp	r3, #2
 8007666:	d002      	beq.n	800766e <USBD_SetConfig+0x36>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d023      	beq.n	80076b4 <USBD_SetConfig+0x7c>
 800766c:	e062      	b.n	8007734 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800766e:	4b38      	ldr	r3, [pc, #224]	@ (8007750 <USBD_SetConfig+0x118>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01a      	beq.n	80076ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007676:	4b36      	ldr	r3, [pc, #216]	@ (8007750 <USBD_SetConfig+0x118>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2203      	movs	r2, #3
 8007684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007688:	4b31      	ldr	r3, [pc, #196]	@ (8007750 <USBD_SetConfig+0x118>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff f9e8 	bl	8006a64 <USBD_SetClassConfig>
 8007694:	4603      	mov	r3, r0
 8007696:	2b02      	cmp	r3, #2
 8007698:	d104      	bne.n	80076a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f92f 	bl	8007900 <USBD_CtlError>
            return;
 80076a2:	e052      	b.n	800774a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9f3 	bl	8007a90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076aa:	e04e      	b.n	800774a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f9ef 	bl	8007a90 <USBD_CtlSendStatus>
        break;
 80076b2:	e04a      	b.n	800774a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80076b4:	4b26      	ldr	r3, [pc, #152]	@ (8007750 <USBD_SetConfig+0x118>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d112      	bne.n	80076e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80076c4:	4b22      	ldr	r3, [pc, #136]	@ (8007750 <USBD_SetConfig+0x118>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076ce:	4b20      	ldr	r3, [pc, #128]	@ (8007750 <USBD_SetConfig+0x118>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff f9e4 	bl	8006aa2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f9d8 	bl	8007a90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076e0:	e033      	b.n	800774a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007750 <USBD_SetConfig+0x118>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d01d      	beq.n	800772c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff f9d2 	bl	8006aa2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076fe:	4b14      	ldr	r3, [pc, #80]	@ (8007750 <USBD_SetConfig+0x118>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007708:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <USBD_SetConfig+0x118>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff f9a8 	bl	8006a64 <USBD_SetClassConfig>
 8007714:	4603      	mov	r3, r0
 8007716:	2b02      	cmp	r3, #2
 8007718:	d104      	bne.n	8007724 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8ef 	bl	8007900 <USBD_CtlError>
            return;
 8007722:	e012      	b.n	800774a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9b3 	bl	8007a90 <USBD_CtlSendStatus>
        break;
 800772a:	e00e      	b.n	800774a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f9af 	bl	8007a90 <USBD_CtlSendStatus>
        break;
 8007732:	e00a      	b.n	800774a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f8e2 	bl	8007900 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <USBD_SetConfig+0x118>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff f9ad 	bl	8006aa2 <USBD_ClrClassConfig>
        break;
 8007748:	bf00      	nop
    }
  }
}
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000420 	.word	0x20000420

08007754 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	88db      	ldrh	r3, [r3, #6]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d004      	beq.n	8007770 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f8c9 	bl	8007900 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800776e:	e022      	b.n	80077b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007776:	2b02      	cmp	r3, #2
 8007778:	dc02      	bgt.n	8007780 <USBD_GetConfig+0x2c>
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc03      	bgt.n	8007786 <USBD_GetConfig+0x32>
 800777e:	e015      	b.n	80077ac <USBD_GetConfig+0x58>
 8007780:	2b03      	cmp	r3, #3
 8007782:	d00b      	beq.n	800779c <USBD_GetConfig+0x48>
 8007784:	e012      	b.n	80077ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3308      	adds	r3, #8
 8007790:	2201      	movs	r2, #1
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f91d 	bl	80079d4 <USBD_CtlSendData>
        break;
 800779a:	e00c      	b.n	80077b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3304      	adds	r3, #4
 80077a0:	2201      	movs	r2, #1
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f915 	bl	80079d4 <USBD_CtlSendData>
        break;
 80077aa:	e004      	b.n	80077b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8a6 	bl	8007900 <USBD_CtlError>
        break;
 80077b4:	bf00      	nop
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ce:	3b01      	subs	r3, #1
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d81e      	bhi.n	8007812 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	88db      	ldrh	r3, [r3, #6]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d004      	beq.n	80077e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f88e 	bl	8007900 <USBD_CtlError>
        break;
 80077e4:	e01a      	b.n	800781c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d005      	beq.n	8007802 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f043 0202 	orr.w	r2, r3, #2
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	330c      	adds	r3, #12
 8007806:	2202      	movs	r2, #2
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8e2 	bl	80079d4 <USBD_CtlSendData>
      break;
 8007810:	e004      	b.n	800781c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f873 	bl	8007900 <USBD_CtlError>
      break;
 800781a:	bf00      	nop
  }
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	885b      	ldrh	r3, [r3, #2]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d106      	bne.n	8007844 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f926 	bl	8007a90 <USBD_CtlSendStatus>
  }
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800785c:	3b01      	subs	r3, #1
 800785e:	2b02      	cmp	r3, #2
 8007860:	d80b      	bhi.n	800787a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d10c      	bne.n	8007884 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f90c 	bl	8007a90 <USBD_CtlSendStatus>
      }
      break;
 8007878:	e004      	b.n	8007884 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f83f 	bl	8007900 <USBD_CtlError>
      break;
 8007882:	e000      	b.n	8007886 <USBD_ClrFeature+0x3a>
      break;
 8007884:	bf00      	nop
  }
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	785a      	ldrb	r2, [r3, #1]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3302      	adds	r3, #2
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	3303      	adds	r3, #3
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	3304      	adds	r3, #4
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	3305      	adds	r3, #5
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	3306      	adds	r3, #6
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	3307      	adds	r3, #7
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4413      	add	r3, r2
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	80da      	strh	r2, [r3, #6]

}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800790a:	2180      	movs	r1, #128	@ 0x80
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc49 	bl	80081a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007912:	2100      	movs	r1, #0
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fc45 	bl	80081a4 <USBD_LL_StallEP>
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b086      	sub	sp, #24
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d032      	beq.n	800799e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f834 	bl	80079a6 <USBD_GetLen>
 800793e:	4603      	mov	r3, r0
 8007940:	3301      	adds	r3, #1
 8007942:	b29b      	uxth	r3, r3
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	75fa      	strb	r2, [r7, #23]
 8007952:	461a      	mov	r2, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4413      	add	r3, r2
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	75fa      	strb	r2, [r7, #23]
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4413      	add	r3, r2
 800796a:	2203      	movs	r2, #3
 800796c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800796e:	e012      	b.n	8007996 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	60fa      	str	r2, [r7, #12]
 8007976:	7dfa      	ldrb	r2, [r7, #23]
 8007978:	1c51      	adds	r1, r2, #1
 800797a:	75f9      	strb	r1, [r7, #23]
 800797c:	4611      	mov	r1, r2
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	440a      	add	r2, r1
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	75fa      	strb	r2, [r7, #23]
 800798c:	461a      	mov	r2, r3
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e8      	bne.n	8007970 <USBD_GetString+0x4e>
    }
  }
}
 800799e:	bf00      	nop
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80079b2:	e005      	b.n	80079c0 <USBD_GetLen+0x1a>
  {
    len++;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	3301      	adds	r3, #1
 80079b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3301      	adds	r3, #1
 80079be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f5      	bne.n	80079b4 <USBD_GetLen+0xe>
  }

  return len;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2202      	movs	r2, #2
 80079e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079f6:	88fb      	ldrh	r3, [r7, #6]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	2100      	movs	r1, #0
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fc59 	bl	80082b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fc47 	bl	80082b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2203      	movs	r2, #3
 8007a42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007a46:	88fa      	ldrh	r2, [r7, #6]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007a4e:	88fa      	ldrh	r2, [r7, #6]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fc4c 	bl	80082fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	2100      	movs	r1, #0
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fc3a 	bl	80082fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc04 	bl	80082b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2205      	movs	r2, #5
 8007ac2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fc14 	bl	80082fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4912      	ldr	r1, [pc, #72]	@ (8007b2c <MX_USB_DEVICE_Init+0x50>)
 8007ae4:	4812      	ldr	r0, [pc, #72]	@ (8007b30 <MX_USB_DEVICE_Init+0x54>)
 8007ae6:	f7fe ff63 	bl	80069b0 <USBD_Init>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007af0:	f7f8 fe68 	bl	80007c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007af4:	490f      	ldr	r1, [pc, #60]	@ (8007b34 <MX_USB_DEVICE_Init+0x58>)
 8007af6:	480e      	ldr	r0, [pc, #56]	@ (8007b30 <MX_USB_DEVICE_Init+0x54>)
 8007af8:	f7fe ff85 	bl	8006a06 <USBD_RegisterClass>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b02:	f7f8 fe5f 	bl	80007c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b06:	490c      	ldr	r1, [pc, #48]	@ (8007b38 <MX_USB_DEVICE_Init+0x5c>)
 8007b08:	4809      	ldr	r0, [pc, #36]	@ (8007b30 <MX_USB_DEVICE_Init+0x54>)
 8007b0a:	f7fe fee5 	bl	80068d8 <USBD_CDC_RegisterInterface>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b14:	f7f8 fe56 	bl	80007c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b18:	4805      	ldr	r0, [pc, #20]	@ (8007b30 <MX_USB_DEVICE_Init+0x54>)
 8007b1a:	f7fe ff8d 	bl	8006a38 <USBD_Start>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b24:	f7f8 fe4e 	bl	80007c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b28:	bf00      	nop
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	2000012c 	.word	0x2000012c
 8007b30:	20000424 	.word	0x20000424
 8007b34:	20000018 	.word	0x20000018
 8007b38:	2000011c 	.word	0x2000011c

08007b3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b40:	2200      	movs	r2, #0
 8007b42:	4905      	ldr	r1, [pc, #20]	@ (8007b58 <CDC_Init_FS+0x1c>)
 8007b44:	4805      	ldr	r0, [pc, #20]	@ (8007b5c <CDC_Init_FS+0x20>)
 8007b46:	f7fe fedd 	bl	8006904 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b4a:	4905      	ldr	r1, [pc, #20]	@ (8007b60 <CDC_Init_FS+0x24>)
 8007b4c:	4803      	ldr	r0, [pc, #12]	@ (8007b5c <CDC_Init_FS+0x20>)
 8007b4e:	f7fe fef2 	bl	8006936 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000ae8 	.word	0x20000ae8
 8007b5c:	20000424 	.word	0x20000424
 8007b60:	200006e8 	.word	0x200006e8

08007b64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr
	...

08007b74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
 8007b80:	4613      	mov	r3, r2
 8007b82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	2b23      	cmp	r3, #35	@ 0x23
 8007b88:	d84a      	bhi.n	8007c20 <CDC_Control_FS+0xac>
 8007b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <CDC_Control_FS+0x1c>)
 8007b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b90:	08007c21 	.word	0x08007c21
 8007b94:	08007c21 	.word	0x08007c21
 8007b98:	08007c21 	.word	0x08007c21
 8007b9c:	08007c21 	.word	0x08007c21
 8007ba0:	08007c21 	.word	0x08007c21
 8007ba4:	08007c21 	.word	0x08007c21
 8007ba8:	08007c21 	.word	0x08007c21
 8007bac:	08007c21 	.word	0x08007c21
 8007bb0:	08007c21 	.word	0x08007c21
 8007bb4:	08007c21 	.word	0x08007c21
 8007bb8:	08007c21 	.word	0x08007c21
 8007bbc:	08007c21 	.word	0x08007c21
 8007bc0:	08007c21 	.word	0x08007c21
 8007bc4:	08007c21 	.word	0x08007c21
 8007bc8:	08007c21 	.word	0x08007c21
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007c21 	.word	0x08007c21
 8007bd4:	08007c21 	.word	0x08007c21
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c21 	.word	0x08007c21
 8007be0:	08007c21 	.word	0x08007c21
 8007be4:	08007c21 	.word	0x08007c21
 8007be8:	08007c21 	.word	0x08007c21
 8007bec:	08007c21 	.word	0x08007c21
 8007bf0:	08007c21 	.word	0x08007c21
 8007bf4:	08007c21 	.word	0x08007c21
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c21 	.word	0x08007c21
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	08007c21 	.word	0x08007c21
 8007c0c:	08007c21 	.word	0x08007c21
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c21 	.word	0x08007c21
 8007c18:	08007c21 	.word	0x08007c21
 8007c1c:	08007c21 	.word	0x08007c21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c20:	bf00      	nop
  }

  return (USBD_OK);
 8007c22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop

08007c30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(aPtrFunRx != NULL)
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <CDC_Receive_FS+0x3c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <CDC_Receive_FS+0x22>
		aPtrFunRx(Buf, *Len);
 8007c42:	4b0a      	ldr	r3, [pc, #40]	@ (8007c6c <CDC_Receive_FS+0x3c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	4806      	ldr	r0, [pc, #24]	@ (8007c70 <CDC_Receive_FS+0x40>)
 8007c56:	f7fe fe6e 	bl	8006936 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c5a:	4805      	ldr	r0, [pc, #20]	@ (8007c70 <CDC_Receive_FS+0x40>)
 8007c5c:	f7fe fe7e 	bl	800695c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000ee8 	.word	0x20000ee8
 8007c70:	20000424 	.word	0x20000424

08007c74 <CDC_AttachRxData>:
  /* USER CODE END 7 */
  return result;
}

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_AttachRxData(void (*ptrRxAttach)(uint8_t *buf, uint16_t len)){
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	aPtrFunRx = ptrRxAttach;
 8007c7c:	4a03      	ldr	r2, [pc, #12]	@ (8007c8c <CDC_AttachRxData+0x18>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6013      	str	r3, [r2, #0]
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr
 8007c8c:	20000ee8 	.word	0x20000ee8

08007c90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2212      	movs	r2, #18
 8007ca0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ca2:	4b03      	ldr	r3, [pc, #12]	@ (8007cb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20000148 	.word	0x20000148

08007cb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cc6:	4b03      	ldr	r3, [pc, #12]	@ (8007cd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	2000015c 	.word	0x2000015c

08007cd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	4907      	ldr	r1, [pc, #28]	@ (8007d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8007cee:	4808      	ldr	r0, [pc, #32]	@ (8007d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cf0:	f7ff fe17 	bl	8007922 <USBD_GetString>
 8007cf4:	e004      	b.n	8007d00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	4904      	ldr	r1, [pc, #16]	@ (8007d0c <USBD_FS_ProductStrDescriptor+0x34>)
 8007cfa:	4805      	ldr	r0, [pc, #20]	@ (8007d10 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cfc:	f7ff fe11 	bl	8007922 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d00:	4b02      	ldr	r3, [pc, #8]	@ (8007d0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000eec 	.word	0x20000eec
 8007d10:	08008470 	.word	0x08008470

08007d14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	4904      	ldr	r1, [pc, #16]	@ (8007d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d24:	4804      	ldr	r0, [pc, #16]	@ (8007d38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d26:	f7ff fdfc 	bl	8007922 <USBD_GetString>
  return USBD_StrDesc;
 8007d2a:	4b02      	ldr	r3, [pc, #8]	@ (8007d34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000eec 	.word	0x20000eec
 8007d38:	08008488 	.word	0x08008488

08007d3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	6039      	str	r1, [r7, #0]
 8007d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	221a      	movs	r2, #26
 8007d4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d4e:	f000 f843 	bl	8007dd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d52:	4b02      	ldr	r3, [pc, #8]	@ (8007d5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000160 	.word	0x20000160

08007d60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d105      	bne.n	8007d7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	4907      	ldr	r1, [pc, #28]	@ (8007d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d76:	4808      	ldr	r0, [pc, #32]	@ (8007d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d78:	f7ff fdd3 	bl	8007922 <USBD_GetString>
 8007d7c:	e004      	b.n	8007d88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	4904      	ldr	r1, [pc, #16]	@ (8007d94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d82:	4805      	ldr	r0, [pc, #20]	@ (8007d98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d84:	f7ff fdcd 	bl	8007922 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d88:	4b02      	ldr	r3, [pc, #8]	@ (8007d94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000eec 	.word	0x20000eec
 8007d98:	0800849c 	.word	0x0800849c

08007d9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	6039      	str	r1, [r7, #0]
 8007da6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d105      	bne.n	8007dba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4907      	ldr	r1, [pc, #28]	@ (8007dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007db2:	4808      	ldr	r0, [pc, #32]	@ (8007dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007db4:	f7ff fdb5 	bl	8007922 <USBD_GetString>
 8007db8:	e004      	b.n	8007dc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	4904      	ldr	r1, [pc, #16]	@ (8007dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dbe:	4805      	ldr	r0, [pc, #20]	@ (8007dd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dc0:	f7ff fdaf 	bl	8007922 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dc4:	4b02      	ldr	r3, [pc, #8]	@ (8007dd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000eec 	.word	0x20000eec
 8007dd4:	080084a8 	.word	0x080084a8

08007dd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007dde:	4b0f      	ldr	r3, [pc, #60]	@ (8007e1c <Get_SerialNum+0x44>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007de4:	4b0e      	ldr	r3, [pc, #56]	@ (8007e20 <Get_SerialNum+0x48>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007dea:	4b0e      	ldr	r3, [pc, #56]	@ (8007e24 <Get_SerialNum+0x4c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007dfe:	2208      	movs	r2, #8
 8007e00:	4909      	ldr	r1, [pc, #36]	@ (8007e28 <Get_SerialNum+0x50>)
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f814 	bl	8007e30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e08:	2204      	movs	r2, #4
 8007e0a:	4908      	ldr	r1, [pc, #32]	@ (8007e2c <Get_SerialNum+0x54>)
 8007e0c:	68b8      	ldr	r0, [r7, #8]
 8007e0e:	f000 f80f 	bl	8007e30 <IntToUnicode>
  }
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	1ffff7e8 	.word	0x1ffff7e8
 8007e20:	1ffff7ec 	.word	0x1ffff7ec
 8007e24:	1ffff7f0 	.word	0x1ffff7f0
 8007e28:	20000162 	.word	0x20000162
 8007e2c:	20000172 	.word	0x20000172

08007e30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]
 8007e46:	e027      	b.n	8007e98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	0f1b      	lsrs	r3, r3, #28
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d80b      	bhi.n	8007e68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	0f1b      	lsrs	r3, r3, #28
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	440b      	add	r3, r1
 8007e60:	3230      	adds	r2, #48	@ 0x30
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
 8007e66:	e00a      	b.n	8007e7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	0f1b      	lsrs	r3, r3, #28
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	4619      	mov	r1, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	440b      	add	r3, r1
 8007e78:	3237      	adds	r2, #55	@ 0x37
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	3301      	adds	r3, #1
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	3301      	adds	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
 8007e98:	7dfa      	ldrb	r2, [r7, #23]
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d3d3      	bcc.n	8007e48 <IntToUnicode+0x18>
  }
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8007ef0 <HAL_PCD_MspInit+0x44>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d113      	bne.n	8007ee6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <HAL_PCD_MspInit+0x48>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef4 <HAL_PCD_MspInit+0x48>)
 8007ec4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ec8:	61d3      	str	r3, [r2, #28]
 8007eca:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef4 <HAL_PCD_MspInit+0x48>)
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	2014      	movs	r0, #20
 8007edc:	f7f9 f8d3 	bl	8001086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ee0:	2014      	movs	r0, #20
 8007ee2:	f7f9 f8ec 	bl	80010be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40005c00 	.word	0x40005c00
 8007ef4:	40021000 	.word	0x40021000

08007ef8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7fe fdda 	bl	8006ac8 <USBD_LL_SetupStage>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007f2e:	78fa      	ldrb	r2, [r7, #3]
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	4613      	mov	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	440b      	add	r3, r1
 8007f3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	4619      	mov	r1, r3
 8007f46:	f7fe fe0c 	bl	8006b62 <USBD_LL_DataOutStage>
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	440b      	add	r3, r1
 8007f72:	3324      	adds	r3, #36	@ 0x24
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7fe fe63 	bl	8006c44 <USBD_LL_DataInStage>
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fe ff73 	bl	8006e80 <USBD_LL_SOF>
}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007faa:	2301      	movs	r3, #1
 8007fac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	799b      	ldrb	r3, [r3, #6]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d001      	beq.n	8007fba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fb6:	f7f8 fc05 	bl	80007c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fc0:	7bfa      	ldrb	r2, [r7, #15]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe ff23 	bl	8006e10 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fedc 	bl	8006d8e <USBD_LL_Reset>
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fe ff1d 	bl	8006e2e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	7a9b      	ldrb	r3, [r3, #10]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ffc:	4b04      	ldr	r3, [pc, #16]	@ (8008010 <HAL_PCD_SuspendCallback+0x30>)
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	4a03      	ldr	r2, [pc, #12]	@ (8008010 <HAL_PCD_SuspendCallback+0x30>)
 8008002:	f043 0306 	orr.w	r3, r3, #6
 8008006:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	e000ed00 	.word	0xe000ed00

08008014 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe ff17 	bl	8006e56 <USBD_LL_Resume>
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008038:	4a28      	ldr	r2, [pc, #160]	@ (80080dc <USBD_LL_Init+0xac>)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a26      	ldr	r2, [pc, #152]	@ (80080dc <USBD_LL_Init+0xac>)
 8008044:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008048:	4b24      	ldr	r3, [pc, #144]	@ (80080dc <USBD_LL_Init+0xac>)
 800804a:	4a25      	ldr	r2, [pc, #148]	@ (80080e0 <USBD_LL_Init+0xb0>)
 800804c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800804e:	4b23      	ldr	r3, [pc, #140]	@ (80080dc <USBD_LL_Init+0xac>)
 8008050:	2208      	movs	r2, #8
 8008052:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008054:	4b21      	ldr	r3, [pc, #132]	@ (80080dc <USBD_LL_Init+0xac>)
 8008056:	2202      	movs	r2, #2
 8008058:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800805a:	4b20      	ldr	r3, [pc, #128]	@ (80080dc <USBD_LL_Init+0xac>)
 800805c:	2200      	movs	r2, #0
 800805e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008060:	4b1e      	ldr	r3, [pc, #120]	@ (80080dc <USBD_LL_Init+0xac>)
 8008062:	2200      	movs	r2, #0
 8008064:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008066:	4b1d      	ldr	r3, [pc, #116]	@ (80080dc <USBD_LL_Init+0xac>)
 8008068:	2200      	movs	r2, #0
 800806a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800806c:	481b      	ldr	r0, [pc, #108]	@ (80080dc <USBD_LL_Init+0xac>)
 800806e:	f7f9 f9f6 	bl	800145e <HAL_PCD_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008078:	f7f8 fba4 	bl	80007c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008082:	2318      	movs	r3, #24
 8008084:	2200      	movs	r2, #0
 8008086:	2100      	movs	r1, #0
 8008088:	f7fa ff07 	bl	8002e9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008092:	2358      	movs	r3, #88	@ 0x58
 8008094:	2200      	movs	r2, #0
 8008096:	2180      	movs	r1, #128	@ 0x80
 8008098:	f7fa feff 	bl	8002e9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080a2:	23c0      	movs	r3, #192	@ 0xc0
 80080a4:	2200      	movs	r2, #0
 80080a6:	2181      	movs	r1, #129	@ 0x81
 80080a8:	f7fa fef7 	bl	8002e9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080b2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80080b6:	2200      	movs	r2, #0
 80080b8:	2101      	movs	r1, #1
 80080ba:	f7fa feee 	bl	8002e9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80080c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080c8:	2200      	movs	r2, #0
 80080ca:	2182      	movs	r1, #130	@ 0x82
 80080cc:	f7fa fee5 	bl	8002e9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200010ec 	.word	0x200010ec
 80080e0:	40005c00 	.word	0x40005c00

080080e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7f9 faa5 	bl	800164a <HAL_PCD_Start>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f94e 	bl	80083a8 <USBD_Get_USB_Status>
 800810c:	4603      	mov	r3, r0
 800810e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008110:	7bbb      	ldrb	r3, [r7, #14]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	4608      	mov	r0, r1
 8008124:	4611      	mov	r1, r2
 8008126:	461a      	mov	r2, r3
 8008128:	4603      	mov	r3, r0
 800812a:	70fb      	strb	r3, [r7, #3]
 800812c:	460b      	mov	r3, r1
 800812e:	70bb      	strb	r3, [r7, #2]
 8008130:	4613      	mov	r3, r2
 8008132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008142:	78bb      	ldrb	r3, [r7, #2]
 8008144:	883a      	ldrh	r2, [r7, #0]
 8008146:	78f9      	ldrb	r1, [r7, #3]
 8008148:	f7f9 fbf9 	bl	800193e <HAL_PCD_EP_Open>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f928 	bl	80083a8 <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7f9 fc37 	bl	80019f8 <HAL_PCD_EP_Close>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f909 	bl	80083a8 <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f9 fcdf 	bl	8001b86 <HAL_PCD_EP_SetStall>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f8ea 	bl	80083a8 <USBD_Get_USB_Status>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f7f9 fd20 	bl	8001c46 <HAL_PCD_EP_ClrStall>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f8cb 	bl	80083a8 <USBD_Get_USB_Status>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008216:	7bbb      	ldrb	r3, [r7, #14]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008238:	2b00      	cmp	r3, #0
 800823a:	da0b      	bge.n	8008254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	440b      	add	r3, r1
 800824e:	3312      	adds	r3, #18
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	e00b      	b.n	800826c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	440b      	add	r3, r1
 8008266:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800826a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f7f9 fb2e 	bl	80018f6 <HAL_PCD_SetAddress>
 800829a:	4603      	mov	r3, r0
 800829c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f881 	bl	80083a8 <USBD_Get_USB_Status>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	461a      	mov	r2, r3
 80082c0:	460b      	mov	r3, r1
 80082c2:	72fb      	strb	r3, [r7, #11]
 80082c4:	4613      	mov	r3, r2
 80082c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80082d6:	893b      	ldrh	r3, [r7, #8]
 80082d8:	7af9      	ldrb	r1, [r7, #11]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f7f9 fc1c 	bl	8001b18 <HAL_PCD_EP_Transmit>
 80082e0:	4603      	mov	r3, r0
 80082e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f85e 	bl	80083a8 <USBD_Get_USB_Status>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	461a      	mov	r2, r3
 8008306:	460b      	mov	r3, r1
 8008308:	72fb      	strb	r3, [r7, #11]
 800830a:	4613      	mov	r3, r2
 800830c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	7af9      	ldrb	r1, [r7, #11]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f7f9 fbb1 	bl	8001a88 <HAL_PCD_EP_Receive>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	4618      	mov	r0, r3
 800832e:	f000 f83b 	bl	80083a8 <USBD_Get_USB_Status>
 8008332:	4603      	mov	r3, r0
 8008334:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008336:	7dbb      	ldrb	r3, [r7, #22]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f7f9 fbc7 	bl	8001aea <HAL_PCD_EP_GetRxCount>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008370:	4b02      	ldr	r3, [pc, #8]	@ (800837c <USBD_static_malloc+0x14>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	bc80      	pop	{r7}
 800837a:	4770      	bx	lr
 800837c:	200013c4 	.word	0x200013c4

08008380 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr

08008392 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d817      	bhi.n	80083ec <USBD_Get_USB_Status+0x44>
 80083bc:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <USBD_Get_USB_Status+0x1c>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	080083db 	.word	0x080083db
 80083cc:	080083e1 	.word	0x080083e1
 80083d0:	080083e7 	.word	0x080083e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
    break;
 80083d8:	e00b      	b.n	80083f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083da:	2302      	movs	r3, #2
 80083dc:	73fb      	strb	r3, [r7, #15]
    break;
 80083de:	e008      	b.n	80083f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e005      	b.n	80083f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083e6:	2302      	movs	r3, #2
 80083e8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ea:	e002      	b.n	80083f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083ec:	2302      	movs	r3, #2
 80083ee:	73fb      	strb	r3, [r7, #15]
    break;
 80083f0:	bf00      	nop
  }
  return usb_status;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop

08008400 <memset>:
 8008400:	4603      	mov	r3, r0
 8008402:	4402      	add	r2, r0
 8008404:	4293      	cmp	r3, r2
 8008406:	d100      	bne.n	800840a <memset+0xa>
 8008408:	4770      	bx	lr
 800840a:	f803 1b01 	strb.w	r1, [r3], #1
 800840e:	e7f9      	b.n	8008404 <memset+0x4>

08008410 <__libc_init_array>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	2600      	movs	r6, #0
 8008414:	4d0c      	ldr	r5, [pc, #48]	@ (8008448 <__libc_init_array+0x38>)
 8008416:	4c0d      	ldr	r4, [pc, #52]	@ (800844c <__libc_init_array+0x3c>)
 8008418:	1b64      	subs	r4, r4, r5
 800841a:	10a4      	asrs	r4, r4, #2
 800841c:	42a6      	cmp	r6, r4
 800841e:	d109      	bne.n	8008434 <__libc_init_array+0x24>
 8008420:	f000 f81a 	bl	8008458 <_init>
 8008424:	2600      	movs	r6, #0
 8008426:	4d0a      	ldr	r5, [pc, #40]	@ (8008450 <__libc_init_array+0x40>)
 8008428:	4c0a      	ldr	r4, [pc, #40]	@ (8008454 <__libc_init_array+0x44>)
 800842a:	1b64      	subs	r4, r4, r5
 800842c:	10a4      	asrs	r4, r4, #2
 800842e:	42a6      	cmp	r6, r4
 8008430:	d105      	bne.n	800843e <__libc_init_array+0x2e>
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	f855 3b04 	ldr.w	r3, [r5], #4
 8008438:	4798      	blx	r3
 800843a:	3601      	adds	r6, #1
 800843c:	e7ee      	b.n	800841c <__libc_init_array+0xc>
 800843e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008442:	4798      	blx	r3
 8008444:	3601      	adds	r6, #1
 8008446:	e7f2      	b.n	800842e <__libc_init_array+0x1e>
 8008448:	080084dc 	.word	0x080084dc
 800844c:	080084dc 	.word	0x080084dc
 8008450:	080084dc 	.word	0x080084dc
 8008454:	080084e0 	.word	0x080084e0

08008458 <_init>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr

08008464 <_fini>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	bf00      	nop
 8008468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846a:	bc08      	pop	{r3}
 800846c:	469e      	mov	lr, r3
 800846e:	4770      	bx	lr
